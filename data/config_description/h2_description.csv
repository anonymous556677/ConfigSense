Configuration,Description
ANALYZE_AUTO,"    /**
     * Database setting <code>ANALYZE_AUTO</code> (default: 2000).
     * After changing this many rows, ANALYZE is automatically run for a table.
     * Automatically running ANALYZE is disabled if set to 0. If set to 1000,
     * then ANALYZE will run against each user table after about 1000 changes to
     * that table. The time between running ANALYZE doubles each time since
     * starting the database. It is not run on local temporary tables, and
     * tables that have a trigger on SELECT.
     */"
ANALYZE_SAMPLE,"    /**
     * Database setting <code>ANALYZE_SAMPLE</code> (default: 10000).
     * The default sample size when analyzing a table.
     */"
AUTO_COMPACT_FILL_RATE,"    /**
     * Database setting <code>AUTO_COMPACT_FILL_RATE</code>
     * (default: 90, which means 90%, 0 disables auto-compacting).
     * Set the auto-compact target fill rate. If the average fill rate (the
     * percentage of the storage space that contains active data) of the
     * chunks is lower, then the chunks with a low fill rate are re-written.
     * Also, if the percentage of empty space between chunks is higher than
     * this value, then chunks at the end of the file are moved. Compaction
     * stops if the target fill rate is reached.
     * This setting only affects MVStore engine.
     */"
CASE_INSENSITIVE_IDENTIFIERS,"    /**
     * Database setting <code>CASE_INSENSITIVE_IDENTIFIERS</code> (default:
     * false).
     * When set to true, all identifier names (table names, column names) are
     * case insensitive. Setting this to ""true"" is experimental.
     */"
DB_CLOSE_ON_EXIT,"    /**
     * Database setting <code>DB_CLOSE_ON_EXIT</code> (default: true).
     * Close the database when the virtual machine exits normally, using a
     * shutdown hook.
     */"
DEFAULT_CONNECTION,"    /**
     * Database setting <code>DEFAULT_CONNECTION</code> (default: false).
     * Whether Java functions can use
     * <code>DriverManager.getConnection(""jdbc:default:connection"")</code> to
     * get a database connection.  Please note the Oracle JDBC driver will try to
     * resolve this database URL if it is loaded before the H2 driver.
     */"
DEFRAG_ALWAYS,"    /**
     * Database setting <code>DEFRAG_ALWAYS</code> (default: false)
     * Each time the database is closed normally, it is fully defragmented (the
     * same as SHUTDOWN DEFRAG). If you execute SHUTDOWN COMPACT, then this
     * setting is ignored.
     */"
DROP_RESTRICT,"    /**
     * Database setting <code>DROP_RESTRICT</code> (default: true)
     * Whether the default action for DROP TABLE, DROP VIEW, DROP SCHEMA, DROP
     * DOMAIN, and DROP CONSTRAINT is RESTRICT.
     */"
ESTIMATED_FUNCTION_TABLE_ROWS,"    /**
     * Database setting <code>ESTIMATED_FUNCTION_TABLE_ROWS</code> (default:
     * 1000).
     * The estimated number of rows in a function table (for example, CSVREAD or
     * FTL_SEARCH). This value is used by the optimizer.
     */"
LOB_TIMEOUT,"    /**
     * Database setting <code>MAX_COMPACT_TIME</code> (default: 200).
     * The maximum time in milliseconds used to compact a database when closing.
     */"
MAX_COMPACT_TIME,"    /**
     * Database setting <code>MAX_COMPACT_TIME</code> (default: 200).
     * The maximum time in milliseconds used to compact a database when closing.
     */"
MAX_QUERY_TIMEOUT,"    /**
     * Database setting <code>MAX_QUERY_TIMEOUT</code> (default: 0).
     * The maximum timeout of a query in milliseconds. The default is 0, meaning
     * no limit. Please note the actual query timeout may be set to a lower
     * value.
     */"
OPTIMIZE_DISTINCT,"    /**
     * Database setting <code>OPTIMIZE_DISTINCT</code> (default: true).
     * . The optimization is used if:
     * <li>The select is a single column query without condition </li>
     * <li>The query contains only one table, and no group by </li>
     * <li>There is only one table involved </li>
     * <li>There is an ascending index on the column </li>
     * <li>The selectivity of the column is below 20 </li>
     * </ul>
     */"
OPTIMIZE_EVALUATABLE_SUBQUERIES,"    /**
     * Database setting <code>OPTIMIZE_EVALUATABLE_SUBQUERIES</code> (default:
     * true).
     * Optimize subqueries that are not dependent on the outer query.
     */"
OPTIMIZE_INSERT_FROM_SELECT,"    /**
     * Database setting <code>OPTIMIZE_INSERT_FROM_SELECT</code>
     * (default: true).
     * Insert into table from query directly bypassing temporary disk storage.
     * This also applies to create table as select.
     */"
OPTIMIZE_IN_LIST,"    /**
     * Database setting <code>OPTIMIZE_IN_LIST</code> (default: true).
     * Optimize IN(...) and IN(SELECT ...) comparisons. This includes
     * optimization for SELECT, DELETE, and UPDATE.
     */"
OPTIMIZE_IN_SELECT,"    /**
     * Database setting <code>OPTIMIZE_IN_SELECT</code> (default: true).
     * Optimize IN(SELECT ...) comparisons. This includes
     * optimization for SELECT, DELETE, and UPDATE.
     */"
OPTIMIZE_OR,"
    /**
     * Database setting <code>OPTIMIZE_OR</code> (default: true).
     * Convert (C=? OR C=?) to (C IN(?, ?)).
     */"
OPTIMIZE_TWO_EQUALS,"    /**
     * Database setting <code>OPTIMIZE_TWO_EQUALS</code> (default: true).
     * Optimize expressions of the form A=B AND B=1. In this case, AND A=1 is
     * added so an index on A can be used.
     */"
OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES,"    /**
     * Database setting <code>OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES</code> (default: true).
     * Optimize expressions of the form (SELECT A) to A.
     */"
QUERY_CACHE_SIZE,"    /**
     * Database setting <code>QUERY_CACHE_SIZE</code> (default: 8).
     * The size of the query cache, in number of cached statements. Each session
     * has it's own cache with the given size. The cache is only used if the SQL
     * statement and all parameters match. Only the last returned result per
     * query is cached. The following statement types are cached: SELECT
     * statements are cached (excluding UNION and FOR UPDATE statements), CALL
     * if it returns a single value, DELETE, INSERT, MERGE, UPDATE, and
     * transactional statements such as COMMIT. This works for both statements
     * and prepared statement.
     */"
RECOMPILE_ALWAYS,"    /**
     * Database setting <code>RECOMPILE_ALWAYS</code> (default: false).
     * Always recompile prepared statements.
     */"
REUSE_SPACE,"    /**
     * Database setting <code>REUSE_SPACE</code> (default: true).
     * If disabled, all changes are appended to the database file, and existing
     * content is never overwritten. This setting has no effect if the database
     * is already open.
     */"
SHARE_LINKED_CONNECTIONS,"    /**
     * Database setting <code>SHARE_LINKED_CONNECTIONS</code>
     * (default: true).
     * Linked connections should be shared, that means connections to the same
     * database should be used for all linked tables that connect to the same
     * database.
     */"
DEFAULT_TABLE_ENGINE,"    /**
     * Database setting <code>DEFAULT_TABLE_ENGINE</code>
     * (default: null).
     * The default table engine to use for new tables.
     */"
MV_STORE,"    /**
     * Database setting <code>MV_STORE</code>
     * (default: true).
     * Use the MVStore storage engine.
     */"
COMPRESS,"    /**
     * Database setting <code>COMPRESS</code>
     * (default: false).
     * Compress data when storing.
     */"
IGNORE_CATALOGS,"    /**
     * Database setting <code>IGNORE_CATALOGS</code>
     * (default: false).
     * If set, all catalog names in identifiers are silently accepted
     * without comparing them with the short name of the database.
     */"
ZERO_BASED_ENUMS,"
    /**
     * Database setting <code>ZERO_BASED_ENUMS</code>
     * (default: false).
     * If set, ENUM ordinal values are 0-based.
     */"