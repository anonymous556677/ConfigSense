<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena/org/json/JSONObject.java"><comment type="block">/*
 * Decompiled with CFR.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>json</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Modifier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Enumeration</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ResourceBundle</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONPointer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONPointerException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONString</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONTokener</name></name>;</import>

<class><specifier>public</specifier> class <name>JSONObject</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Object</name></type> <name>NULL</name> <init>= <expr><operator>new</operator> <call><name>Null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>JSONObject</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>JSONObject</name><parameter_list>(<parameter><decl><type><name>JSONObject</name></type> <name>jo</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>names</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>names</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>putOnce</name></name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>jo</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// empty catch block</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>JSONObject</name><parameter_list>(<parameter><decl><type><name>JSONTokener</name></type> <name>x</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>x</name><operator>.</operator><name>nextClean</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>x</name><operator>.</operator><name>syntaxError</name></name><argument_list>(<argument><expr><literal type="string">"A JSONObject text must begin with '{'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <label><name>block8</name>:</label> <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>nextClean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="char">'\u0000'</literal></expr>:</case> <block>{<block_content>
                    <throw>throw <expr><call><name><name>x</name><operator>.</operator><name>syntaxError</name></name><argument_list>(<argument><expr><literal type="string">"A JSONObject text must end with '}'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block>
                <case>case <expr><literal type="char">'}'</literal></expr>:</case> <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block>
            </block_content>}</block></switch>
            <expr_stmt><expr><call><name><name>x</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>nextValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>x</name><operator>.</operator><name>nextClean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>x</name><operator>.</operator><name>syntaxError</name></name><argument_list>(<argument><expr><literal type="string">"Expected a ':' after a key"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>putOnce</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>nextValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><call><name><name>x</name><operator>.</operator><name>nextClean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="char">','</literal></expr>:</case> 
                <case>case <expr><literal type="char">';'</literal></expr>:</case> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>x</name><operator>.</operator><name>nextClean</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
                        <return>return;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>x</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <continue>continue <name>block8</name>;</continue>
                </block_content>}</block>
                <case>case <expr><literal type="char">'}'</literal></expr>:</case> <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block>
            </block_content>}</block></switch>
            <break>break;</break>
        </block_content>}</block></while>
        <throw>throw <expr><call><name><name>x</name><operator>.</operator><name>syntaxError</name></name><argument_list>(<argument><expr><literal type="string">"Expected a ',' or '}'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>JSONObject</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>map</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><call><name><name>map</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>JSONObject</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>JSONObject</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>bean</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>populateMap</name></name><argument_list>(<argument><expr><name>bean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>JSONObject</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>names</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name> <init>= <expr><call><name><name>object</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>names</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>putOpt</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// empty catch block</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>JSONObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONTokener</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>JSONObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>baseName</name></decl></parameter>, <parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ResourceBundle</name></type> <name>bundle</name> <init>= <expr><call><name><name>ResourceBundle</name><operator>.</operator><name>getBundle</name></name><argument_list>(<argument><expr><name>baseName</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContextClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name><name>bundle</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>keys</name><operator>.</operator><name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>keys</name><operator>.</operator><name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>path</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name><name>path</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSONObject</name></type> <name>target</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>segment</name> <init>= <expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>JSONObject</name></type> <name>nextTarget</name> <init>= <expr><call><name><name>target</name><operator>.</operator><name>optJSONObject</name></name><argument_list>(<argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>nextTarget</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>nextTarget</name> <operator>=</operator> <operator>new</operator> <call><name>JSONObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>target</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>segment</name></expr></argument>, <argument><expr><name>nextTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>target</name> <operator>=</operator> <name>nextTarget</name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>target</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><name>last</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>accumulate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>testValidity</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name> <operator>instanceof</operator> <name>JSONArray</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name>JSONArray</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>JSONArray</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>JSONArray</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>JSONArray</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>testValidity</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>JSONArray</name><argument_list>()</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>JSONArray</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>JSONArray</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">"] is not a JSONArray."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>doubleToString</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Double</name><operator>.</operator><name>isInfinite</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>Double</name><operator>.</operator><name>isNaN</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">"null"</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>string</name> <init>= <expr><call><name><name>Double</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>string</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>string</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="number">101</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>string</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="number">69</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><call><name><name>string</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name><name>string</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>string</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><call><name><name>string</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name><name>string</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>string</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>string</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"Null key."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"] not found."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>object</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name><name>Enum</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>E</name></type> <name>getEnum</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>E</name></type> <name>val</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>optEnum</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"] is not an enum of type "</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><call><name><name>clazz</name><operator>.</operator><name>getSimpleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>val</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>object</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>String</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>String</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>object</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>String</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>String</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"] is not a Boolean."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BigInteger</name></type> <name>getBigInteger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>BigInteger</name><argument_list>(<argument><expr><call><name><name>object</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"] could not be converted to BigInteger."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BigDecimal</name></type> <name>getBigDecimal</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><call><name><name>object</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"] could not be converted to BigDecimal."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDouble</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>object</name> <operator>instanceof</operator> <name>Number</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>object</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"] is not a number."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>object</name> <operator>instanceof</operator> <name>Number</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>object</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"] is not an int."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>getJSONArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>JSONArray</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>JSONArray</name><operator>)</operator><name>object</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"] is not a JSONArray."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>getJSONObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>JSONObject</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>JSONObject</name><operator>)</operator><name>object</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"] is not a JSONObject."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLong</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>object</name> <operator>instanceof</operator> <name>Number</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>longValue</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>object</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"] is not a long."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getNames</name><parameter_list>(<parameter><decl><type><name>JSONObject</name></type> <name>jo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>jo</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>jo</name><operator>.</operator><name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>names</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getNames</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>klass</name> <init>= <expr><call><name><name>object</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Field</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name><name>klass</name><operator>.</operator><name>getFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>fields</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>names</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>String</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>String</name><operator>)</operator><name>object</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"] not a string."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>has</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>increment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>BigInteger</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>BigInteger</name><operator>)</operator><name>value</name><operator>)</operator><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>BigInteger</name><operator>.</operator><name>ONE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>BigDecimal</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>BigDecimal</name><operator>)</operator><name>value</name><operator>)</operator><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>BigDecimal</name><operator>.</operator><name>ONE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Integer</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Long</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>Long</name><operator>)</operator><name>value</name> <operator>+</operator> <literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Double</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>Double</name><operator>)</operator><name>value</name> <operator>+</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Float</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>Float</name><operator>)</operator><name>value</name><operator>)</operator><operator>.</operator><call><name>floatValue</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"Unable to increment ["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"]."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNull</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>NULL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keys</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keySet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>map</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>length</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>names</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>JSONArray</name></type> <name>ja</name> <init>= <expr><operator>new</operator> <call><name>JSONArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>keys</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ja</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><ternary><condition><expr><call><name><name>ja</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>ja</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>numberToString</name><parameter_list>(<parameter><decl><type><name>Number</name></type> <name>number</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>number</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"Null pointer"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>testValidity</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>string</name> <init>= <expr><call><name><name>number</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>string</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>string</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="number">101</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>string</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="number">69</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><call><name><name>string</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name><name>string</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>string</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><call><name><name>string</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name><name>string</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>string</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>string</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>opt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>this</name><operator>.</operator><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name><name>Enum</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>E</name></type> <name>optEnum</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optEnum</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name><name>Enum</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>E</name></type> <name>optEnum</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>E</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>val</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>NULL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>defaultValue</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>clazz</name><operator>.</operator><name>isAssignableFrom</name></name><argument_list>(<argument><expr><call><name><name>val</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Enum</name></type> <name>myE</name> <init>= <expr><operator>(</operator><name>Enum</name><operator>)</operator><name>val</name></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>(</operator><name>E</name><operator>)</operator><name>myE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>Enum</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><call><name><name>val</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>optBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optBoolean</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>optBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>optDouble</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optDouble</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BigInteger</name></type> <name>optBigInteger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>BigInteger</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>getBigInteger</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BigDecimal</name></type> <name>optBigDecimal</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>BigDecimal</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>getBigDecimal</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>optDouble</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>optInt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optInt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>optInt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>optJSONArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>o</name> <operator>instanceof</operator> <name>JSONArray</name></expr> ?</condition><then> <expr><operator>(</operator><name>JSONArray</name><operator>)</operator><name>o</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>optJSONObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>object</name> <operator>instanceof</operator> <name>JSONObject</name></expr> ?</condition><then> <expr><operator>(</operator><name>JSONObject</name><operator>)</operator><name>object</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>optLong</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optLong</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>optLong</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>optString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optString</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>optString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><call><name><name>NULL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>defaultValue</name></expr> </then><else>: <expr><call><name><name>object</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>populateMap</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>bean</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>klass</name> <init>= <expr><call><name><name>bean</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>includeSuperClass</name> <init>= <expr><call><name><name>klass</name><operator>.</operator><name>getClassLoader</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Method</name><index>[]</index></name></type> <name>methods</name> <init>= <expr><ternary><condition><expr><name>includeSuperClass</name></expr> ?</condition><then> <expr><call><name><name>klass</name><operator>.</operator><name>getMethods</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>klass</name><operator>.</operator><name>getDeclaredMethods</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>methods</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><name><name>methods</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Modifier</name><operator>.</operator><name>isPublic</name></name><argument_list>(<argument><expr><call><name><name>method</name><operator>.</operator><name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>key</name> <operator>=</operator> <ternary><condition><expr><literal type="string">"getClass"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="string">"getDeclaringClass"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"is"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name><name>Character</name><operator>.</operator><name>isUpperCase</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>method</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ROOT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>Character</name><operator>.</operator><name>isUpperCase</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ROOT</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>key</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>result</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>bean</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>JSONObject</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// empty catch block</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr> </then><else>: <expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Long</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>(<argument><expr><literal type="string">"Null key."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>testValidity</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>putOnce</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"Duplicate key \""</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>putOpt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonPointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONPointer</name><argument_list>(<argument><expr><name>jsonPointer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>JSONPointer</name></type> <name>jsonPointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>jsonPointer</name><operator>.</operator><name>queryFrom</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>optQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonPointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optQuery</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONPointer</name><argument_list>(<argument><expr><name>jsonPointer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>optQuery</name><parameter_list>(<parameter><decl><type><name>JSONPointer</name></type> <name>jsonPointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>jsonPointer</name><operator>.</operator><name>queryFrom</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>JSONPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block">/*
     * WARNING - Removed try catching itself - possible behaviour change.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>quote</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> <init>= <expr><operator>new</operator> <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>stringBuffer</name> <init>= <expr><call><name><name>sw</name><operator>.</operator><name>getBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>stringBuffer</name></expr>)</init> <block>{<block_content>
            <try>try <block>{<block_content>
                <return>return <expr><call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><literal type="string">""</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Writer</name></type> <name>quote</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>Writer</name></type> <name>w</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>string</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>w</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="char">'\u0000'</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>string</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <label><name>block9</name>:</label> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>b</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>string</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="char">'\"'</literal></expr>:</case> 
                <case>case <expr><literal type="char">'\\'</literal></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">92</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue <name>block9</name>;</continue>
                </block_content>}</block>
                <case>case <expr><literal type="char">'/'</literal></expr>:</case> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">92</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue <name>block9</name>;</continue>
                </block_content>}</block>
                <case>case <expr><literal type="char">'\b'</literal></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue <name>block9</name>;</continue>
                </block_content>}</block>
                <case>case <expr><literal type="char">'\t'</literal></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue <name>block9</name>;</continue>
                </block_content>}</block>
                <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue <name>block9</name>;</continue>
                </block_content>}</block>
                <case>case <expr><literal type="char">'\f'</literal></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\\f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue <name>block9</name>;</continue>
                </block_content>}</block>
                <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue <name>block9</name>;</continue>
                </block_content>}</block>
                <default>default:</default> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>&gt;=</operator> <literal type="char">'\u0080'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="char">'\u00a0'</literal> <operator>||</operator> <name>c</name> <operator>&gt;=</operator> <literal type="char">'\u2000'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="char">'\u2100'</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\\u"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>hhhh</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>toHexString</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"0000"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>-</operator> <call><name><name>hhhh</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>hhhh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <continue>continue <name>block9</name>;</continue>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
            </block_content>}</block></switch>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>w</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>map</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>similar</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>other</name> <operator>instanceof</operator> <name>JSONObject</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>set</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>JSONObject</name><operator>)</operator><name>other</name><operator>)</operator><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><name>set</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Object</name></type> <name>valueThis</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>valueOther</name> <init>= <expr><operator>(</operator><operator>(</operator><name>JSONObject</name><operator>)</operator><name>other</name><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><ternary><condition><expr><name>valueThis</name> <operator>instanceof</operator> <name>JSONObject</name></expr> ?</condition><then> <expr><operator>!</operator><operator>(</operator><operator>(</operator><name>JSONObject</name><operator>)</operator><name>valueThis</name><operator>)</operator><operator>.</operator><call><name>similar</name><argument_list>(<argument><expr><name>valueOther</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>valueThis</name> <operator>instanceof</operator> <name>JSONArray</name></expr> ?</condition><then> <expr><operator>!</operator><operator>(</operator><operator>(</operator><name>JSONArray</name><operator>)</operator><name>valueThis</name><operator>)</operator><operator>.</operator><call><name>similar</name><argument_list>(<argument><expr><name>valueOther</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>!</operator><call><name><name>valueThis</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>valueOther</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></for>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>stringToValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>string</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>string</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>string</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>string</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>string</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>initial</name> <init>= <expr><call><name><name>string</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>initial</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>initial</name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>||</operator> <name>initial</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>string</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <call><name><name>string</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="number">101</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <call><name><name>string</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="number">69</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <literal type="string">"-0"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Double</name></type> <name>d</name> <init>= <expr><call><name><name>Double</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>d</name><operator>.</operator><name>isInfinite</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>d</name><operator>.</operator><name>isNaN</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>d</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>Long</name></type> <name>myLong</name> <init>= <expr><operator>new</operator> <call><name>Long</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>string</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>myLong</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>myLong</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name><name>myLong</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <return>return <expr><call><name><name>myLong</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                        <return>return <expr><name>myLong</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// empty catch block</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>string</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testValidity</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>o</name> <operator>instanceof</operator> <name>Double</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>Double</name><operator>)</operator><name>o</name><operator>)</operator><operator>.</operator><call><name>isInfinite</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>(</operator><name>Double</name><operator>)</operator><name>o</name><operator>)</operator><operator>.</operator><call><name>isNaN</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>o</name> <operator>instanceof</operator> <name>Float</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>Float</name><operator>)</operator><name>o</name><operator>)</operator><operator>.</operator><call><name>isInfinite</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>(</operator><name>Float</name><operator>)</operator><name>o</name><operator>)</operator><operator>.</operator><call><name>isNaN</name><argument_list>()</argument_list></call><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSON does not allow non-finite numbers."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>toJSONArray</name><parameter_list>(<parameter><decl><type><name>JSONArray</name></type> <name>names</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>names</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>names</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>JSONArray</name></type> <name>ja</name> <init>= <expr><operator>new</operator> <call><name>JSONArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>names</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ja</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><call><name><name>names</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>ja</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block">/*
     * WARNING - Removed try catching itself - possible behaviour change.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indentFactor</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>StringWriter</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>stringBuffer</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>getBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>stringBuffer</name></expr>)</init> <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>indentFactor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>valueToString</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">"null"</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>JSONString</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>object</name></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>object</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>JSONString</name><operator>)</operator><name>value</name><operator>)</operator><operator>.</operator><call><name>toJSONString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
            <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>String</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>object</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"Bad value from toJSONString: "</literal> <operator>+</operator> <name>object</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Number</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>numberAsString</name> <init>= <expr><call><name><name>JSONObject</name><operator>.</operator><name>numberToString</name></name><argument_list>(<argument><expr><operator>(</operator><name>Number</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name>numberAsString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>numberAsString</name></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>numberAsString</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Boolean</name> <operator>||</operator> <name>value</name> <operator>instanceof</operator> <name>JSONObject</name> <operator>||</operator> <name>value</name> <operator>instanceof</operator> <name>JSONArray</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Map</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator><name>value</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Collection</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Collection</name></type> <name>coll</name> <init>= <expr><operator>(</operator><name>Collection</name><operator>)</operator><name>value</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><name>coll</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isArray</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Enum</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Enum</name><operator>)</operator><name>value</name><operator>)</operator><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>wrap</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>objectPackageName</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>JSONObject</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>JSONArray</name> <operator>||</operator> <call><name><name>NULL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>JSONString</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>Byte</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>Character</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>Short</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>Integer</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>Long</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>Boolean</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>Float</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>Double</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>String</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>BigInteger</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>BigDecimal</name> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>Enum</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>object</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>Collection</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Collection</name></type> <name>coll</name> <init>= <expr><operator>(</operator><name>Collection</name><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>object</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isArray</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>Map</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Package</name></type> <name>objectPackage</name> <init>= <expr><call><name><name>object</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>string</name> <init>= <expr><name>objectPackageName</name> <operator>=</operator> <ternary><condition><expr><name>objectPackage</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>objectPackage</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>objectPackageName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"java."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>objectPackageName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"javax."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>object</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClassLoader</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>object</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Writer</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>Writer</name></type> <name>writer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <specifier>final</specifier> <name>Writer</name></type> <name>writeValue</name><parameter_list>(<parameter><decl><type><name>Writer</name></type> <name>writer</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indentFactor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>JSONString</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>o</name></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>o</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>JSONString</name><operator>)</operator><name>value</name><operator>)</operator><operator>.</operator><call><name>toJSONString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>o</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>o</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Number</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>numberAsString</name> <init>= <expr><call><name><name>JSONObject</name><operator>.</operator><name>numberToString</name></name><argument_list>(<argument><expr><operator>(</operator><name>Number</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>BigDecimal</name></type> <name>testNum</name> <init>= <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name>numberAsString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>numberAsString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>numberAsString</name></expr></argument>, <argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Boolean</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Enum</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Enum</name><operator>)</operator><name>value</name><operator>)</operator><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>JSONObject</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>JSONObject</name><operator>)</operator><name>value</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>indentFactor</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>JSONArray</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>JSONArray</name><operator>)</operator><name>value</name><operator>)</operator><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>indentFactor</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Map</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator><name>value</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>indentFactor</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Collection</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Collection</name></type> <name>coll</name> <init>= <expr><operator>(</operator><name>Collection</name><operator>)</operator><name>value</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><name>coll</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>indentFactor</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isArray</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>indentFactor</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>writer</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <specifier>final</specifier> <name>void</name></type> <name>indent</name><parameter_list>(<parameter><decl><type><name>Writer</name></type> <name>writer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indent</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Writer</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>Writer</name></type> <name>writer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indentFactor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>commanate</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>keys</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">58</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>indentFactor</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>writeValue</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indentFactor</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>length</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>newindent</name> <init>= <expr><name>indent</name> <operator>+</operator> <name>indentFactor</name></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>keys</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>keys</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>commanate</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>indentFactor</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>indent</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>newindent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">58</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>indentFactor</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>writeValue</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indentFactor</name></expr></argument>, <argument><expr><name>newindent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>commanate</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></while>
                <if_stmt><if>if <condition>(<expr><name>indentFactor</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>indent</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">125</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>writer</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>toMap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>this</name><operator>.</operator><name>map</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>NULL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>JSONObject</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>JSONObject</name><operator>)</operator><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>toMap</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>JSONArray</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>JSONArray</name><operator>)</operator><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>results</name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Null</name> <block>{
        <constructor><specifier>private</specifier> <name>Null</name><parameter_list>()</parameter_list> <block>{<block_content>
        </block_content>}</block></constructor>

        <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>object</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>object</name> <operator>==</operator> <name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="string">"null"</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>

</unit>
