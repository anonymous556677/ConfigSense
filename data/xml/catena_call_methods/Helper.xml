<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena/main/java/Helper.java"><comment type="block">/*
 * Decompiled with CFR.
 */</comment>
<package>package <name><name>main</name><operator>.</operator><name>java</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>

<class><specifier>public</specifier> class <name>Helper</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>hexArray</name> <init>= <expr><literal type="string">"0123456789ABCDEF"</literal><operator>.</operator><call><name>toCharArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>bufferLong</name> <init>= <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>bufferInt</name> <init>= <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hex2bytes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>hexString</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>byteArray</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>hexString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>hexString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Illegal Argument (Function hexStringToBytes): HexString is not even"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>hexCharArray</name> <init>= <expr><call><name><name>hexString</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>hexString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>byteArray</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name><name>Character</name><operator>.</operator><name>digit</name></name><argument_list>(<argument><expr><name><name>hexCharArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name><name>Character</name><operator>.</operator><name>digit</name></name><argument_list>(<argument><expr><name><name>hexCharArray</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>byteArray</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>string2Bytes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>hexString</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>hexString</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>bytes2hex</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>hexChars</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>bytes</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>bytes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>hexChars</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>hexArray</name><index>[<expr><name>v</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hexChars</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hexArray</name><index>[<expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>hexChars</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>concateByteArrays</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes1</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes2</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes3</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes4</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes5</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes6</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><call><name><name>out</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>concateByteArrays</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes1</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes2</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes3</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><call><name><name>out</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>concateByteArrays</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes1</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes2</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes3</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes4</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><call><name><name>out</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>concateByteArrays</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes1</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><call><name><name>out</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>intToByteArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>intToByteArrayLittleEndian</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>twoDimByteArrayToOne</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>row</name> <operator>&lt;</operator> <name><name>bytes</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><name>row</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><operator>++</operator><name>row</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><call><name><name>out</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>oneDimByteArrToTwoDim</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>bLen</name> <init>= <expr><name><name>b</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>dimension</name> <init>= <expr><name>bLen</name> <operator>/</operator> <name>len</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>twoDim</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>dimension</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>bLen</name> <operator>/</operator> <name>len</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>tmp</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>len</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>twoDim</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>twoDim</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>paddWithZero</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>output</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>truncate</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>copyOfRange</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>xor</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>arr1</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>arr2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>res</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>arr1</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>byArray</name> <init>= <expr><name>arr1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>arr1</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>n2</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><name><name>byArray</name><index>[<expr><name>n2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>b</name> <operator>^</operator> <name><name>arr2</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>n2</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>longToBytes</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bufferLong</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>bufferLong</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>bytesToLong</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bufferLong</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bufferLong</name><operator>.</operator><name>flip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>bufferLong</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>intToBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bufferInt</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bufferInt</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>bufferInt</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>bytesToInt</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bufferInt</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bufferInt</name><operator>.</operator><name>flip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>bufferInt</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>jsonParserArr</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>all</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>br</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileReader</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name><name>br</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>all</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>line</name></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// empty catch block</comment>
        </block_content>}</block></catch></try>
        <return>return <expr><operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>jsonParserObj</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>all</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>br</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileReader</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name><name>br</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>all</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>line</name></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// empty catch block</comment>
        </block_content>}</block></catch></try>
        <return>return <expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>

</unit>
