<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena/org/junit/Assert.java"><comment type="block">/*
 * Decompiled with CFR.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>junit</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>hamcrest</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>hamcrest</name><operator>.</operator><name>StringDescription</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>ComparisonFailure</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>internal</name><operator>.</operator><name>ArrayComparisonFailure</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>internal</name><operator>.</operator><name>ExactComparisonCriteria</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>internal</name><operator>.</operator><name>InexactComparisonCriteria</name></name>;</import>

<comment type="block">/*
 * This class specifies class file version 49.0 but uses Java 6 signatures.  Assumed Java 6.
 */</comment>
<class><specifier>public</specifier> class <name>Assert</name> <block>{
    <constructor><specifier>protected</specifier> <name>Assert</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertTrue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>condition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>condition</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertTrue</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>condition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertFalse</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>condition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>!</operator><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertFalse</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>condition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>fail</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><operator>(</operator><name>Object</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>message</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>message</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>fail</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>expected</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>actual</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>expected</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>Assert</name><operator>.</operator><name>isEquals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>expected</name> <operator>instanceof</operator> <name>String</name> <operator>&amp;&amp;</operator> <name>actual</name> <operator>instanceof</operator> <name>String</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>cleanMessage</name> <init>= <expr><ternary><condition><expr><name>message</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>message</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>ComparisonFailure</name><argument_list>(<argument><expr><name>cleanMessage</name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>expected</name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>actual</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>failNotEquals</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isEquals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>expected</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ArrayComparisonFailure</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>internalArrayEquals</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ArrayComparisonFailure</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>internalArrayEquals</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ArrayComparisonFailure</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>internalArrayEquals</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name><name>short</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>short</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ArrayComparisonFailure</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>internalArrayEquals</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name><name>short</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>short</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ArrayComparisonFailure</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>internalArrayEquals</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ArrayComparisonFailure</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>internalArrayEquals</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name><name>double</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>double</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>delta</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ArrayComparisonFailure</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><operator>new</operator> <call><name>InexactComparisonCriteria</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arrayEquals</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name><name>double</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>double</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ArrayComparisonFailure</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><operator>new</operator> <call><name>InexactComparisonCriteria</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>arrayEquals</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertArrayEquals</name><parameter_list>(<parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>internalArrayEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>actuals</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ArrayComparisonFailure</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><operator>new</operator> <call><name>ExactComparisonCriteria</name><argument_list>()</argument_list></call><operator>.</operator><call><name>arrayEquals</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>actual</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Double</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>expected</name> <operator>-</operator> <name>actual</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>delta</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>failNotEquals</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Double</name><argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Double</name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>(</operator><name>Object</name><operator>)</operator><name>expected</name></expr></argument>, <argument><expr><operator>(</operator><name>Object</name><operator>)</operator><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><literal type="string">"Use assertEquals(expected, actual, delta) to compare floating-point numbers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>actual</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertNotNull</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>object</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertNotNull</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertNull</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>object</name> <operator>==</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertNull</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNull</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertSame</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>expected</name> <operator>==</operator> <name>actual</name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>failNotSame</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertSame</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertSame</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertNotSame</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>unexpected</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>unexpected</name> <operator>==</operator> <name>actual</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>failSame</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertNotSame</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>unexpected</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotSame</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>unexpected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>failSame</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>formatted</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>message</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>formatted</name> <operator>=</operator> <name>message</name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><name>formatted</name> <operator>+</operator> <literal type="string">"expected not same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>failNotSame</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>formatted</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>message</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>formatted</name> <operator>=</operator> <name>message</name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><name>formatted</name> <operator>+</operator> <literal type="string">"expected same:&lt;"</literal> <operator>+</operator> <name>expected</name> <operator>+</operator> <literal type="string">"&gt; was not:&lt;"</literal> <operator>+</operator> <name>actual</name> <operator>+</operator> <literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>failNotEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>fail</name></name><argument_list>(<argument><expr><call><name><name>Assert</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>String</name></type> <name>format</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>actualString</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expectedString</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>formatted</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>message</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>message</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>formatted</name> <operator>=</operator> <name>message</name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>expectedString</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>actualString</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>formatted</name> <operator>+</operator> <literal type="string">"expected: "</literal> <operator>+</operator> <call><name><name>Assert</name><operator>.</operator><name>formatClassAndValue</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>expectedString</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" but was: "</literal> <operator>+</operator> <call><name><name>Assert</name><operator>.</operator><name>formatClassAndValue</name></name><argument_list>(<argument><expr><name>actual</name></expr></argument>, <argument><expr><name>actualString</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>formatted</name> <operator>+</operator> <literal type="string">"expected:&lt;"</literal> <operator>+</operator> <name>expectedString</name> <operator>+</operator> <literal type="string">"&gt; but was:&lt;"</literal> <operator>+</operator> <name>actualString</name> <operator>+</operator> <literal type="string">"&gt;"</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>formatClassAndValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>valueString</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><call><name><name>value</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>className</name> <operator>+</operator> <literal type="string">"&lt;"</literal> <operator>+</operator> <name>valueString</name> <operator>+</operator> <literal type="string">"&gt;"</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>expecteds</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>actuals</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertArrayEquals</name></name><argument_list>(<argument><expr><name>expecteds</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>assertThat</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>actual</name></decl></parameter>, <parameter><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>matcher</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertThat</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>actual</name></expr></argument>, <argument><expr><name>matcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>assertThat</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>reason</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>actual</name></decl></parameter>, <parameter><decl><type><name><name>Matcher</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>matcher</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>matcher</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>StringDescription</name></type> <name>description</name> <init>= <expr><operator>new</operator> <call><name>StringDescription</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>appendText</name></name><argument_list>(<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>appendText</name></name><argument_list>(<argument><expr><literal type="string">"\nExpected: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>appendDescriptionOf</name></name><argument_list>(<argument><expr><name>matcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>appendText</name></name><argument_list>(<argument><expr><literal type="string">"\n     got: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>appendValue</name></name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>appendText</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><operator>(</operator><name>Object</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Object</name><operator>)</operator><name>description</name><operator>)</operator><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>

</unit>
