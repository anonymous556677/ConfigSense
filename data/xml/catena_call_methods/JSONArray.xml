<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena/org/json/JSONArray.java"><comment type="block">/*
 * Decompiled with CFR.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>json</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Array</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONPointer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONPointerException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONTokener</name></name>;</import>

<class><specifier>public</specifier> class <name>JSONArray</name>
<super_list><implements>implements <super><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>myArrayList</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>JSONArray</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>JSONArray</name><parameter_list>(<parameter><decl><type><name>JSONTokener</name></type> <name>x</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>x</name><operator>.</operator><name>nextClean</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>x</name><operator>.</operator><name>syntaxError</name></name><argument_list>(<argument><expr><literal type="string">"A JSONArray text must start with '['"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>x</name><operator>.</operator><name>nextClean</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>x</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <label><name>block4</name>:</label> <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>x</name><operator>.</operator><name>nextClean</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>x</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>JSONObject</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>x</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>nextValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <switch>switch <condition>(<expr><call><name><name>x</name><operator>.</operator><name>nextClean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="char">','</literal></expr>:</case> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>x</name><operator>.</operator><name>nextClean</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
                            <return>return;</return>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>x</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <continue>continue <name>block4</name>;</continue>
                    </block_content>}</block>
                    <case>case <expr><literal type="char">']'</literal></expr>:</case> <block>{<block_content>
                        <return>return;</return>
                    </block_content>}</block>
                </block_content>}</block></switch>
                <break>break;</break>
            </block_content>}</block></while>
            <throw>throw <expr><call><name><name>x</name><operator>.</operator><name>syntaxError</name></name><argument_list>(<argument><expr><literal type="string">"Expected a ',' or ']'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>JSONArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONTokener</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>JSONArray</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>collection</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>collection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><name>collection</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>JSONObject</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>JSONArray</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>array</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>array</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isArray</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>Array</name><operator>.</operator><name>getLength</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>JSONObject</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>Array</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONArray initial value should be a string or collection or array."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONArray["</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">"] not found."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>object</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>object</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>String</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>String</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>object</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>object</name> <operator>instanceof</operator> <name>String</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>String</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONArray["</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">"] is not a boolean."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDouble</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>object</name> <operator>instanceof</operator> <name>Number</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>object</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONArray["</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">"] is not a number."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name><name>Enum</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>E</name></type> <name>getEnum</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>E</name></type> <name>val</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>optEnum</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONObject["</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"] is not an enum of type "</literal> <operator>+</operator> <call><name><name>JSONObject</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><call><name><name>clazz</name><operator>.</operator><name>getSimpleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>val</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BigDecimal</name></type> <name>getBigDecimal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><call><name><name>object</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONArray["</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">"] could not convert to BigDecimal."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BigInteger</name></type> <name>getBigInteger</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>BigInteger</name><argument_list>(<argument><expr><call><name><name>object</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONArray["</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">"] could not convert to BigInteger."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>object</name> <operator>instanceof</operator> <name>Number</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>object</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONArray["</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">"] is not a number."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>getJSONArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>JSONArray</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>JSONArray</name><operator>)</operator><name>object</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONArray["</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">"] is not a JSONArray."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>getJSONObject</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>JSONObject</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>JSONObject</name><operator>)</operator><name>object</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONArray["</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">"] is not a JSONObject."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLong</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>object</name> <operator>instanceof</operator> <name>Number</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>longValue</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>object</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONArray["</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">"] is not a number."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>String</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>String</name><operator>)</operator><name>object</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONArray["</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">"] not a string."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNull</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>JSONObject</name><operator>.</operator><name>NULL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>separator</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>JSONObject</name><operator>.</operator><name>valueToString</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>length</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>opt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <call><name><name>this</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>optBoolean</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optBoolean</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>optBoolean</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>optDouble</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optDouble</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>optDouble</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>optInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optInt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>optInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name><name>Enum</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>E</name></type> <name>optEnum</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optEnum</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name><name>Enum</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>E</name></type> <name>optEnum</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>E</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>val</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>JSONObject</name><operator>.</operator><name>NULL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>defaultValue</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>clazz</name><operator>.</operator><name>isAssignableFrom</name></name><argument_list>(<argument><expr><call><name><name>val</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Enum</name></type> <name>myE</name> <init>= <expr><operator>(</operator><name>Enum</name><operator>)</operator><name>val</name></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>(</operator><name>E</name><operator>)</operator><name>myE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>Enum</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><call><name><name>val</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BigInteger</name></type> <name>optBigInteger</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>BigInteger</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>getBigInteger</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BigDecimal</name></type> <name>optBigDecimal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>BigDecimal</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>getBigDecimal</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>optJSONArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>o</name> <operator>instanceof</operator> <name>JSONArray</name></expr> ?</condition><then> <expr><operator>(</operator><name>JSONArray</name><operator>)</operator><name>o</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>optJSONObject</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>o</name> <operator>instanceof</operator> <name>JSONObject</name></expr> ?</condition><then> <expr><operator>(</operator><name>JSONObject</name><operator>)</operator><name>o</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>optLong</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optLong</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>optLong</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>optString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optString</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>optString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><call><name><name>JSONObject</name><operator>.</operator><name>NULL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>defaultValue</name></expr> </then><else>: <expr><call><name><name>object</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr> </then><else>: <expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Double</name></type> <name>d</name> <init>= <expr><operator>new</operator> <call><name>Double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>testValidity</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Long</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr> </then><else>: <expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Long</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>testValidity</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><literal type="string">"JSONArray["</literal> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="string">"] not found."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <call><name><name>this</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <while>while <condition>(<expr><name>index</name> <operator>!=</operator> <call><name><name>this</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JSONObject</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonPointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONPointer</name><argument_list>(<argument><expr><name>jsonPointer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>JSONPointer</name></type> <name>jsonPointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>jsonPointer</name><operator>.</operator><name>queryFrom</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>optQuery</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>jsonPointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>optQuery</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONPointer</name><argument_list>(<argument><expr><name>jsonPointer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>optQuery</name><parameter_list>(<parameter><decl><type><name>JSONPointer</name></type> <name>jsonPointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>jsonPointer</name><operator>.</operator><name>queryFrom</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>JSONPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <call><name><name>this</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>similar</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>other</name> <operator>instanceof</operator> <name>JSONArray</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>JSONArray</name><operator>)</operator><name>other</name><operator>)</operator><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>valueThis</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>valueOther</name> <init>= <expr><operator>(</operator><operator>(</operator><name>JSONArray</name><operator>)</operator><name>other</name><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><ternary><condition><expr><name>valueThis</name> <operator>instanceof</operator> <name>JSONObject</name></expr> ?</condition><then> <expr><operator>!</operator><operator>(</operator><operator>(</operator><name>JSONObject</name><operator>)</operator><name>valueThis</name><operator>)</operator><operator>.</operator><call><name>similar</name><argument_list>(<argument><expr><name>valueOther</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>valueThis</name> <operator>instanceof</operator> <name>JSONArray</name></expr> ?</condition><then> <expr><operator>!</operator><operator>(</operator><operator>(</operator><name>JSONArray</name><operator>)</operator><name>valueThis</name><operator>)</operator><operator>.</operator><call><name>similar</name><argument_list>(<argument><expr><name>valueOther</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>!</operator><call><name><name>valueThis</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>valueOther</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>toJSONObject</name><parameter_list>(<parameter><decl><type><name>JSONArray</name></type> <name>names</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>names</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>names</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>this</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>JSONObject</name></type> <name>jo</name> <init>= <expr><operator>new</operator> <call><name>JSONObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>names</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>jo</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>names</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>opt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>jo</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block">/*
     * WARNING - Removed try catching itself - possible behaviour change.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indentFactor</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> <init>= <expr><operator>new</operator> <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>stringBuffer</name> <init>= <expr><call><name><name>sw</name><operator>.</operator><name>getBuffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>stringBuffer</name></expr>)</init> <block>{<block_content>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>sw</name></expr></argument>, <argument><expr><name>indentFactor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Writer</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>Writer</name></type> <name>writer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Writer</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>Writer</name></type> <name>writer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indentFactor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>commanate</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">91</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>writeValue</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indentFactor</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>length</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>newindent</name> <init>= <expr><name>indent</name> <operator>+</operator> <name>indentFactor</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>commanate</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>indentFactor</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>indent</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>newindent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>writeValue</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indentFactor</name></expr></argument>, <argument><expr><name>newindent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>commanate</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name>indentFactor</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>JSONObject</name><operator>.</operator><name>indent</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">93</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>writer</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>JSONException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>toList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>myArrayList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Object</name></type> <name>element</name> <range>: <expr><name><name>this</name><operator>.</operator><name>myArrayList</name></name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>element</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>JSONObject</name><operator>.</operator><name>NULL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>element</name> <operator>instanceof</operator> <name>JSONArray</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>JSONArray</name><operator>)</operator><name>element</name><operator>)</operator><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>element</name> <operator>instanceof</operator> <name>JSONObject</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>JSONObject</name><operator>)</operator><name>element</name><operator>)</operator><operator>.</operator><call><name>toMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>results</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>

</unit>
