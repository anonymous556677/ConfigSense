<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/main/java/Catena.java"><comment type="block">/*
 * Decompiled with CFR.
 */</comment>
<package>package <name><name>main</name><operator>.</operator><name>java</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
<import>import <name><name>main</name><operator>.</operator><name>java</name><operator>.</operator><name>Helper</name></name>;</import>
<import>import <name><name>main</name><operator>.</operator><name>java</name><operator>.</operator><name>components</name><operator>.</operator><name>gamma</name><operator>.</operator><name>GammaInterface</name></name>;</import>
<import>import <name><name>main</name><operator>.</operator><name>java</name><operator>.</operator><name>components</name><operator>.</operator><name>graph</name><operator>.</operator><name>GraphInterface</name></name>;</import>
<import>import <name><name>main</name><operator>.</operator><name>java</name><operator>.</operator><name>components</name><operator>.</operator><name>graph</name><operator>.</operator><name>algorithms</name><operator>.</operator><name>IdxInterface</name></name>;</import>
<import>import <name><name>main</name><operator>.</operator><name>java</name><operator>.</operator><name>components</name><operator>.</operator><name>hash</name><operator>.</operator><name>HashInterface</name></name>;</import>
<import>import <name><name>main</name><operator>.</operator><name>java</name><operator>.</operator><name>components</name><operator>.</operator><name>phi</name><operator>.</operator><name>PhiInterface</name></name>;</import>

<class><specifier>public</specifier> class <name>Catena</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Helper</name></type> <name>helper</name> <init>= <expr><operator>new</operator> <call><name>Helper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>_vId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>HashInterface</name></type> <name>_h</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>HashInterface</name></type> <name>_hPrime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>GammaInterface</name></type> <name>_gamma</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>GraphInterface</name></type> <name>_f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PhiInterface</name></type> <name>_phi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>_d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>_n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>_k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>_gLow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>_gHigh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>_lambda</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
	 * Main function of catena to hash a password
	 * 
	 * @param pwd			Password to be hashed
	 * @param salt			Salt of arbitrary length
	 * @param publicInput	User choosen public input
	 * @param gamma			Input for graph size
	 * @param m				User desired output length of hash
	 * 
	 * @return xTrun		Hash of pwd
	 */</comment>
    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>catena</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwd</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>publicInput</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>t</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>compTweak</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>get_vId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>get_d</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>get_lambda</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>salt</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>publicInput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>x</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>erasePwd</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>flap</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>get_gLow</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gByte</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get_gLow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>g</name> <operator>&lt;=</operator> <call><name><name>this</name><operator>.</operator><name>get_gHigh</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <call><name><name>this</name><operator>.</operator><name>get_n</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>paddWithZero</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>get_n</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>flap</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>gByte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>g</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>gByte</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>g</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>x</name></expr>;</return>
    </block_content>}</block></function>
    <comment type="block" format="javadoc">/**
	 * flap function from catena specification
	 * 
	 * @param g
	 * @param xIn
	 * @param gamma
	 * @return
	 */</comment>
    <function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>flap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>xIn</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_hPrime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iterations</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>v</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>iterations</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><call><name><name>this</name><operator>.</operator><name>get_k</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>xHinit</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>hInit</name></name><argument_list>(<argument><expr><name>xIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>xHinit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>get_k</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>xHinit</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>get_k</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>get_k</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>iterations</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_hPrime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_hPrime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>v2</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>iterations</name></expr>]</index><index>[<expr><call><name><name>this</name><operator>.</operator><name>get_k</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_hPrime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>gamma</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_hPrime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>f</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>get_lambda</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_hPrime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>phi</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name><name>v2</name><index>[<expr><name><name>v2</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>v2</name><index>[<expr><name><name>v2</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>flapPub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>xIn</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>flap</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>xIn</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

	<comment type="block" format="javadoc">/**
	 * Initialisation of the 2 values for flap rounds
	 * 
	 * @param x		Input Array
	 * @return 		2 hashed values v_-1, V_-2 in one byte array
	 * 				(output is already splitted in the middle and swapped)
	 */</comment>
    <function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hInit</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <call><name><name>this</name><operator>.</operator><name>get_k</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>this</name><operator>.</operator><name>get_n</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>xLoop</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><call><name><name>this</name><operator>.</operator><name>get_n</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>iByte</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>iByte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>iByte</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>xLoop</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>twoDimByteArrayToOne</name></name><argument_list>(<argument><expr><name>xLoop</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

	<comment type="block" format="javadoc">/**
	 * No clue how to test private functions so this wrapper exists
	 * 
	 * @param x		Initial value to instantiate v-2 and v-1
	 * @return		v-2 and v-1 combined in one array
	 */</comment>
    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>testHInit</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>hInit</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

	<comment type="block" format="javadoc">/**
	 * salt dependent update with random access
	 * 
	 * @param g		garlic
	 * @param x		hash array
	 * @param gamma	gamma
	 * @return		hash array
	 */</comment>
    <function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>gamma</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>get_gamma</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>gamma</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

	<comment type="block" format="javadoc">/**
	 * phi function from catena specification
	 * 
	 * @param x		hash input
	 * @return		hash output
	 */</comment>
    <function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lambda</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>get_f</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>graph</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>lambda</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>phi</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>garlic</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>get_phi</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>phi</name><argument_list>(<argument><expr><name>garlic</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

	<comment type="block" format="javadoc">/**
	 * Combine Tweak Array
	 * 
	 * @param vId		Version ID
	 * @param mode		Mode of catena
	 * @param lambda	Lambda
	 * @param outLen	Output Length
	 * @param sLen		Salt Length
	 * @param aData		Additional Data
	 * @return			Combined Tweak
	 */</comment>
    <function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>compTweak</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>vId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sLen</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aData</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>modeByte</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>lambdaByte</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>outLenByte</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>intToByteArrayLittleEndian</name></name><argument_list>(<argument><expr><name>outLen</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sLenByte</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>intToByteArrayLittleEndian</name></name><argument_list>(<argument><expr><name>sLen</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>string2Bytes</name></name><argument_list>(<argument><expr><name>vId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>vIdH</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aDataH</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>modeByte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lambdaByte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>lambda</name></expr>;</expr_stmt>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>vIdH</name></expr></argument>, <argument><expr><name>modeByte</name></expr></argument>, <argument><expr><name>lambdaByte</name></expr></argument>, <argument><expr><name>outLenByte</name></expr></argument>, <argument><expr><name>sLenByte</name></expr></argument>, <argument><expr><name>aDataH</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
	<comment type="block" format="javadoc">/**
	 * public interface for testing tweak computation
	 * 
	 * @param vId		String, VersionID
	 * @param mode		Integer, Mode of Catena
	 * @param lambda	Integer, The depth of the graph structure.
	 * @param outLen	Integer, Output length.
	 * @param sLen		Integer, Salt length.
	 * @param aData		byte[], Associated data of the user and/or the host.
	 * @return tweak	byte[], The calculatetd tweak.
	 */</comment>
    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>testCompTweak</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>vId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sLen</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aData</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>compTweak</name></name><argument_list>(<argument><expr><name>vId</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lambda</name></expr></argument>, <argument><expr><name>outLen</name></expr></argument>, <argument><expr><name>sLen</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
	 * Clear the password
	 * 
	 * @param pwd	the password to be cleared
	 */</comment>
    <function><type><specifier>private</specifier> <specifier>final</specifier> <name>void</name></type> <name>erasePwd</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwd</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
	 * Initializes Catena
	 * 
	 * initializrs all needed variables and functions with default values
	 * 
	 * @param h			main hash function
	 * @param hPrime	reduced hash function
	 * @param gamma		gamma function (e.g. SaltMix)
	 * @param f			graph
	 * @param idx		index function for graph
	 * @param phi		phi function
	 * @param gLow		minimum Garlic
	 * @param gHigh		maximum Garlic
	 * @param lambda	depth of graphs
	 * @param vID		version ID
	 */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>HashInterface</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>HashInterface</name></type> <name>hPrime</name></decl></parameter>, <parameter><decl><type><name>GammaInterface</name></type> <name>gamma</name></decl></parameter>, <parameter><decl><type><name>GraphInterface</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>IdxInterface</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>PhiInterface</name></type> <name>phi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gLow</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gHigh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>vID</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_hPrime</name></name> <operator>=</operator> <name>hPrime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_gamma</name></name> <operator>=</operator> <name>gamma</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>_gamma</name><operator>.</operator><name>setH</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>_gamma</name><operator>.</operator><name>setHPrime</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>get_hPrime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>_f</name><operator>.</operator><name>setH</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>_f</name><operator>.</operator><name>setHPrime</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>get_hPrime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>_f</name><operator>.</operator><name>setIndexing</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_phi</name></name> <operator>=</operator> <name>phi</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>_phi</name><operator>.</operator><name>setH</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>_phi</name><operator>.</operator><name>setHPrime</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>get_hPrime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_gLow</name></name> <operator>=</operator> <name>gLow</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_gHigh</name></name> <operator>=</operator> <name>gHigh</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_lambda</name></name> <operator>=</operator> <name>lambda</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_n</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOutputSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_k</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_hPrime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOutputSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_vId</name></name> <operator>=</operator> <name>vID</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGHigh</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gHigh</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_gHigh</name></name> <operator>=</operator> <name>gHigh</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGLow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gLow</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_gLow</name></name> <operator>=</operator> <name>gLow</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setD</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>_d</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>keyedClientIndependentUpdate</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hashOld</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gHighOld</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gHighNew</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outputLenth</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serverKey</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>userID</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>gHighOld</name> <operator>&gt;=</operator> <name>gHighNew</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"New gHigh value should be bigger as the old one."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>keystream</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>computeKeyStream</name></name><argument_list>(<argument><expr><name>serverKey</name></expr></argument>, <argument><expr><name>userID</name></expr></argument>, <argument><expr><name>gHighOld</name></expr></argument>, <argument><expr><name>outputLenth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>oldHash</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>xor</name></name><argument_list>(<argument><expr><name>hashOld</name></expr></argument>, <argument><expr><name>keystream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>newHash</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>clientIndependentUpdate</name></name><argument_list>(<argument><expr><name>oldHash</name></expr></argument>, <argument><expr><name>gHighOld</name></expr></argument>, <argument><expr><name>gHighNew</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>, <argument><expr><name>outputLenth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>newKeystream</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>computeKeyStream</name></name><argument_list>(<argument><expr><name>serverKey</name></expr></argument>, <argument><expr><name>userID</name></expr></argument>, <argument><expr><name>gHighNew</name></expr></argument>, <argument><expr><name>outputLenth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>xor</name></name><argument_list>(<argument><expr><name>newHash</name></expr></argument>, <argument><expr><name>newKeystream</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>computeKeyStream</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serverKey</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>userID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gHigh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gByte</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator><name>gHigh</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>serverKey</name></expr></argument>, <argument><expr><name>userID</name></expr></argument>, <argument><expr><name>gByte</name></expr></argument>, <argument><expr><name>serverKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>output</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>output</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>clientIndependentUpdate</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hashOld</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gHighOld</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gHighNew</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outputLenth</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>gHighOld</name> <operator>&gt;=</operator> <name>gHighNew</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"New gHigh value should be bigger as the old one."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOutputSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>newHash</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gByte</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>hashOld</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newHash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>hashOld</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>gHighOld</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>gHighNew</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>newHash</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <call><name><name>this</name><operator>.</operator><name>get_n</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>newHash</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>paddWithZero</name></name><argument_list>(<argument><expr><name>newHash</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>newHash</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>flap</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>newHash</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>gByte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>gByte</name></expr></argument>, <argument><expr><name>newHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>newHash</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>newHash</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><name>newHash</name></expr></argument>, <argument><expr><name>outputLenth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>newHash</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>keyedPasswordHashing</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwd</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>a_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_len</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>userID</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gHighBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator><call><name><name>this</name><operator>.</operator><name>get_gHigh</name></name><argument_list>()</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>userID</name></expr></argument>, <argument><expr><name>gHighBytes</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>z</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>catena</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>a_data</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>xor</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>keyDerivation</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwd</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>publicInput</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keySize</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>keyIdentifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>tweak</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>compTweak</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>get_vId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>get_lambda</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>outLen</name></expr></argument>, <argument><expr><name><name>salt</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>publicInput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>tweak</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>x</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>flap</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>get_gLow</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>erasePwd</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gByte</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get_gLow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>g</name> <operator>&lt;=</operator> <call><name><name>this</name><operator>.</operator><name>get_gHigh</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <call><name><name>this</name><operator>.</operator><name>get_n</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>paddWithZero</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>get_n</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>flap</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>gByte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>g</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>gByte</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>outLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>g</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>keySize</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOutputSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>outputKey</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>limit</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>iByte</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>intToByteArrayLittleEndian</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>keySizeByte</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>intToByteArrayLittleEndian</name></name><argument_list>(<argument><expr><name>keySize</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>iByte</name></expr></argument>, <argument><expr><name>keyIdentifier</name></expr></argument>, <argument><expr><name>keySizeByte</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>tmp</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>outputKey</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>outputKey</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><name>outputKey</name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>serverReliefClient</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwd</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outLen</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>t</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>compTweak</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>get_vId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>get_lambda</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>outLen</name></expr></argument>, <argument><expr><name><name>salt</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>x</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>flap</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>get_gLow</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>erasePwd</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>get_gHigh</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>this</name><operator>.</operator><name>get_gLow</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gByte</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>get_gLow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>g</name> <operator>&lt;</operator> <call><name><name>this</name><operator>.</operator><name>get_gHigh</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <call><name><name>this</name><operator>.</operator><name>get_n</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>paddWithZero</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>outLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>flap</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>gByte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>g</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>gByte</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>outLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>g</name></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <call><name><name>this</name><operator>.</operator><name>get_n</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>paddWithZero</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>get_n</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>flap</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>get_gHigh</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>x</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>serverReliefServer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>outLen</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>lastHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gByte</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator><call><name><name>this</name><operator>.</operator><name>get_gHigh</name></name><argument_list>()</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>concateByteArrays</name></name><argument_list>(<argument><expr><name>gByte</name></expr></argument>, <argument><expr><name>lastHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>get_h</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>doFinal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>outLen</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>POWstruct</name></type> <name>proofOfWorkServer</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwd</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outLen</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setD</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>POWstruct</name></type> <name>output</name> <init>= <expr><operator>new</operator> <call><name>POWstruct</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>inpPWD</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>pwd</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>inpPWD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pwd</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><operator>.</operator><name>pwd</name></name> <operator>=</operator> <name>inpPWD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><operator>.</operator><name>salt</name></name> <operator>=</operator> <name>salt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><operator>.</operator><name>aData</name></name> <operator>=</operator> <name>aData</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><operator>.</operator><name>gLow</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_gLow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><operator>.</operator><name>gHigh</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>get_gHigh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><operator>.</operator><name>outLen</name></name> <operator>=</operator> <name>outLen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><operator>.</operator><name>gamma</name></name> <operator>=</operator> <name>gamma</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><operator>.</operator><name>rHash</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>catena</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>, <argument><expr><name>outLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>inpSalt</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>salt</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>inpSalt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>salt</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>p</name> <operator>/</operator> <literal type="number">8.0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>mask</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>intToBytes</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>saltLength</name> <init>= <expr><name><name>inpSalt</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>maskLength</name> <init>= <expr><name><name>mask</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>newMask</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>saltLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>maskLength</name> <operator>&gt;</operator> <name>saltLength</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>maskLength</name> <operator>-</operator> <name>saltLength</name></expr></argument>, <argument><expr><name>newMask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>saltLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newMask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>maskLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>newMaskLength</name> <init>= <expr><name><name>newMask</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>newMaskLength</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>newMask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>newMask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>newMaskLength</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>inpSalt</name><index>[<expr><name>saltLength</name> <operator>-</operator> <name>newMaskLength</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name><name>inpSalt</name><index>[<expr><name>saltLength</name> <operator>-</operator> <name>newMaskLength</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>&amp;</operator> <name><name>newMask</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name><name>output</name><operator>.</operator><name>salt</name></name> <operator>=</operator> <name>inpSalt</name></expr>;</expr_stmt>
            <return>return <expr><name>output</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>output</name><operator>.</operator><name>pwd</name></name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <return>return <expr><name>output</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>POWstruct</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>proofOfWorkClient</name><parameter_list>(<parameter><decl><type><name>POWstruct</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setD</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>input</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>numBytes</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>input</name><operator>.</operator><name>p</name></name> <operator>/</operator> <literal type="number">8.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>upperBound</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>input</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Random</name></type> <name>rand</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>randomOffset</name> <init>= <expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>upperBound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>upperBound</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwd</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>input</name><operator>.</operator><name>pwd</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>pwd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>pwd</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>saltInput</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>input</name><operator>.</operator><name>salt</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>salt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>saltInput</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>salt</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pepperPre</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>intToBytes</name></name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>randomOffset</name><operator>)</operator> <operator>%</operator> <name>upperBound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pepper</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>numBytes</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>pepperPre</name></expr></argument>, <argument><expr><name><name>pepperPre</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>numBytes</name></expr></argument>, <argument><expr><name>pepper</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>numBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>saltInput</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name><name>pepper</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>saltInput</name> <operator>=</operator> <name>pepper</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr><name>j</name> <operator>==</operator> <name>numBytes</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>saltInput</name><index>[<expr><name><name>saltInput</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name><name>saltInput</name><index>[<expr><name><name>saltInput</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>+</operator> <name><name>pepper</name><index>[<expr><name><name>pepper</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
                    </block_content>}</block></while>
                </block_content>}</block></else></if_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>actualHash</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>catena</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>saltInput</name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>aData</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>gamma</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>outLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>actualHash</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>rHash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>saltInput</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>input</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>numBytes</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>input</name><operator>.</operator><name>p</name></name> <operator>/</operator> <literal type="number">8.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>upperBound</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>input</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Random</name></type> <name>rand</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>randomOffset</name> <init>= <expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>upperBound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>upperBound</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pepperPwd</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>intToBytes</name></name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>randomOffset</name><operator>)</operator> <operator>%</operator> <name>upperBound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sectretPwd</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>numBytes</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>pepperPwd</name></expr></argument>, <argument><expr><name><name>pepperPwd</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>numBytes</name></expr></argument>, <argument><expr><name>sectretPwd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>numBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>saveForReturn</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>sectretPwd</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>sectretPwd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>saveForReturn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sectretPwd</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>actual</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>catena</name></name><argument_list>(<argument><expr><name>sectretPwd</name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>salt</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>aData</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>gamma</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>outLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>rHash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>saveForReturn</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>get_vId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>_vId</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>HashInterface</name></type> <name>get_h</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>_h</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>HashInterface</name></type> <name>get_hPrime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>_hPrime</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>GammaInterface</name></type> <name>get_gamma</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>_gamma</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>GraphInterface</name></type> <name>get_f</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>_f</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>PhiInterface</name></type> <name>get_phi</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>_phi</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>get_d</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>_d</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>get_n</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>_n</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>get_k</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>_k</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>get_gLow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>_gLow</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>get_gHigh</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>_gHigh</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>get_lambda</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>_lambda</name></name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> class <name>POWstruct</name> <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>pwd</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>aData</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>gLow</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>gHigh</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>outLen</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>gamma</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>rHash</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>mode</name></decl>;</decl_stmt>
    }</block></class>
}</block></class>

</unit>
