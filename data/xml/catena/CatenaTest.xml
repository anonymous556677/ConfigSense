<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/catena2/catena/src/test/java/CatenaTest.java"><package>package <name><name>test</name><operator>.</operator><name>java</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>main</name><operator>.</operator><name>java</name><operator>.</operator><name>Catena</name></name>;</import>
<import>import <name><name>main</name><operator>.</operator><name>java</name><operator>.</operator><name>Catena</name><operator>.</operator><name>POWstruct</name></name>;</import>
<import>import <name><name>main</name><operator>.</operator><name>java</name><operator>.</operator><name>DefaultInstances</name></name>;</import>
<import>import <name><name>main</name><operator>.</operator><name>java</name><operator>.</operator><name>Helper</name></name>;</import>

<class><specifier>public</specifier> class <name>CatenaTest</name> <block>{
	
	<decl_stmt><decl><type><name>Helper</name></type> <name>helper</name> <init>= <expr><operator>new</operator> <call><name>Helper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathHInit</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/hInitAnyFull.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileHInit</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathHInit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathtweakButterfly</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/tweakButterfly.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>filetweakButterfly</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathtweakButterfly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathtweakButterflyFull</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/tweakButterflyFull.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>filetweakButterflyFull</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathtweakButterflyFull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathtweakDragonfly</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/tweakDragonfly.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>filetweakDragonfly</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathtweakDragonfly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathtweakDragonflyFull</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/tweakDragonflyFull.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>filetweakDragonflyFull</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathtweakDragonflyFull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathFlapDragonfly</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/flapDragonfly.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileFlapDragonfly</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathFlapDragonfly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathFlapDragonflyFull</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/flapDragonflyFull.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileFlapDragonflyFull</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathFlapDragonflyFull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathFlapButterfly</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/flapButterfly.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileFlapButterfly</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathFlapButterfly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathFlapButterflyFull</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/flapButterflyFull.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileFlapButterflyFull</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathFlapButterflyFull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathciUpdateDragonflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/ciUpdateDragonflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileciUpdateDragonflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathciUpdateDragonflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathciUpdateKeyedDragonflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/ciUpdateKeyedDragonflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileciUpdateKeyedDragonflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathciUpdateKeyedDragonflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
<comment type="line">//	private String pathkeyDerivationButterfly = "src/test/resources/keyDerivationButterfly.json";</comment>
<comment type="line">//	private File filekeyDerivationButterfly = new File(pathkeyDerivationButterfly);</comment>
<comment type="line">//</comment>
<comment type="line">//	private String pathkeyDerivationButterflyFull = "src/test/resources/keyDerivationButterflyFull.json";</comment>
<comment type="line">//	private File filekeyDerivationButterflyFull = new File(pathkeyDerivationButterflyFull);</comment>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathkeyDerivationButterflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/keyDerivationButterflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>filekeyDerivationButterflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathkeyDerivationButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
<comment type="line">//	private String pathkeyDerivationDragonfly = "src/test/resources/keyDerivationDragonfly.json";</comment>
<comment type="line">//	private File filekeyDerivationDragonfly = new File(pathkeyDerivationDragonfly);</comment>
<comment type="line">//	</comment>
<comment type="line">//	private String pathkeyDerivationDragonflyFull = "src/test/resources/keyDerivationDragonflyFull.json";</comment>
<comment type="line">//	private File filekeyDerivationDragonflyFull = new File(pathkeyDerivationDragonflyFull);</comment>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathkeyDerivationDragonflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/keyDerivationDragonflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>filekeyDerivationDragonflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathkeyDerivationDragonflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
<comment type="line">//	private String pathkeyedHashButterfly = "src/test/resources/keyedHashButterfly.json";</comment>
<comment type="line">//	private File filekeyedHashButterfly = new File(pathkeyedHashButterfly);</comment>
<comment type="line">//	</comment>
<comment type="line">//	private String pathkeyedHashButterflyFull = "src/test/resources/keyedHashButterflyFull.json";</comment>
<comment type="line">//	private File filekeyedHashButterflyFull = new File(pathkeyedHashButterflyFull);</comment>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathkeyedHashButterflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/keyedHashButterflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>filekeyedHashButterflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathkeyedHashButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
<comment type="line">//	private String pathkeyedHashDragonfly = "src/test/resources/keyedHashDragonfly.json";</comment>
<comment type="line">//	private File filekeyedHashDragonfly = new File(pathkeyedHashDragonfly);</comment>
<comment type="line">//	</comment>
<comment type="line">//	private String pathkeyedHashDragonflyFull = "src/test/resources/keyedHashDragonflyFull.json";</comment>
<comment type="line">//	private File filekeyedHashDragonflyFull = new File(pathkeyedHashDragonflyFull);</comment>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathkeyedHashDragonflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/keyedHashDragonflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>filekeyedHashDragonflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathkeyedHashDragonflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathserverReliefClientButterflyReducedDifferentG</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/serverReliefClientButterflyReducedDifferentG.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileserverReliefClientButterflyReducedDifferentG</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathserverReliefClientButterflyReducedDifferentG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathserverReliefClientButterflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/serverReliefClientButterflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileserverReliefClientButterflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathserverReliefClientButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathserverReliefClientDragonflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/serverReliefClientDragonflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileserverReliefClientDragonflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathserverReliefClientDragonflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathserverReliefServerButterflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/serverReliefServerButterflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileserverReliefServerButterflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathserverReliefServerButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathserverReliefServerDragonflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/serverReliefServerDragonflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileserverReliefServerDragonflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathserverReliefServerDragonflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathproofOfWorkServerSaltButterflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/proofOfWorkServerSaltButterflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileproofOfWorkServerSaltButterflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathproofOfWorkServerSaltButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathproofOfWorkServerPwdButterflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/proofOfWorkServerPwdButterflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileproofOfWorkServerPwdButterflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathproofOfWorkServerPwdButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathproofOfWorkClientPwdButterflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/proofOfWorkClientPwdButterflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileproofOfWorkClientPwdButterflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathproofOfWorkClientPwdButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pathproofOfWorkClientSaltButterflyReduced</name> <init>= <expr><literal type="string">"src/test/resources/testvectors/proofOfWorkClientSaltButterflyReduced.json"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileproofOfWorkClientSaltButterflyReduced</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathproofOfWorkClientSaltButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testServerReliefServerButterflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initButterfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileserverReliefServerButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>hash</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outputLength</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outputLength"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hashArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>serverReliefServer</name></name><argument_list>(<argument><expr><name>outputLength</name></expr></argument>, <argument><expr><name>hashArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testServerReliefServerDragonflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initDragonfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileserverReliefServerDragonflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>hash</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outputLength</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outputLength"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hashArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>serverReliefServer</name></name><argument_list>(<argument><expr><name>outputLength</name></expr></argument>, <argument><expr><name>hashArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testServerReliefClientButterflyReduceddifferentG</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initButterfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileserverReliefClientButterflyReducedDifferentG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>pwd</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>salt</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>ad</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outputLength</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outputLength"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>gLow</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"gLow"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>gHigh</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"gHigh"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>saltArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>adArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><name>gLow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><name>gHigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>serverReliefClient</name></name><argument_list>(<argument><expr><name>pwdArr</name></expr></argument>, <argument><expr><name>saltArr</name></expr></argument>, <argument><expr><name>adArr</name></expr></argument>, <argument><expr><name>outputLength</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testServerReliefClientButterflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initButterfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileserverReliefClientButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>pwd</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>salt</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>ad</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outputLength</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outputLength"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>saltArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>adArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>serverReliefClient</name></name><argument_list>(<argument><expr><name>pwdArr</name></expr></argument>, <argument><expr><name>saltArr</name></expr></argument>, <argument><expr><name>adArr</name></expr></argument>, <argument><expr><name>outputLength</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testServerReliefClientDragonflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initDragonfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileserverReliefClientDragonflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>pwd</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>salt</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>ad</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outputLength</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outputLength"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>saltArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>adArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>serverReliefClient</name></name><argument_list>(<argument><expr><name>pwdArr</name></expr></argument>, <argument><expr><name>saltArr</name></expr></argument>, <argument><expr><name>adArr</name></expr></argument>, <argument><expr><name>outputLength</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	

<comment type="line">//	@Test</comment>
<comment type="line">//	public void testKeyedHashButterfly(){</comment>
<comment type="line">//		DefaultInstances instance = new DefaultInstances();</comment>
<comment type="line">//		Catena c = instance.initButterfly();</comment>
<comment type="line">//		</comment>
<comment type="line">//		JSONArray jsonObj = helper.jsonParserArr(filekeyedHashButterfly);</comment>
<comment type="line">//		for (int i = 0; i&lt;jsonObj.length(); ++i ){</comment>
<comment type="line">//			JSONObject o = (JSONObject) jsonObj.get(i);</comment>
<comment type="line">//			</comment>
<comment type="line">//			JSONObject inputs = o.getJSONObject("inputs");</comment>
<comment type="line">//			JSONObject outputs = o.getJSONObject("outputs");</comment>
<comment type="line">//			</comment>
<comment type="line">//			String pwd = inputs.getString("pwd");</comment>
<comment type="line">//			String key = inputs.getString("key");</comment>
<comment type="line">//			String salt = inputs.getString("salt");</comment>
<comment type="line">//			String gamma = inputs.getString("gamma");</comment>
<comment type="line">//			String ad = inputs.getString("aData");</comment>
<comment type="line">//			int outputLength = inputs.getInt("outputLength");</comment>
<comment type="line">//			String userID = inputs.getString("userID");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] pwdArr = helper.hex2bytes(pwd);</comment>
<comment type="line">//			byte[] keyArr = helper.hex2bytes(key);</comment>
<comment type="line">//			byte[] saltArr = helper.hex2bytes(salt);</comment>
<comment type="line">//			byte[] gammaArr = helper.hex2bytes(gamma);</comment>
<comment type="line">//			byte[] adArr = helper.hex2bytes(ad);</comment>
<comment type="line">//			byte[] userIDArr = helper.hex2bytes(userID);</comment>
<comment type="line">//			</comment>
<comment type="line">//			String res = outputs.getString("res");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] output = c.keyedPasswordHashing(pwdArr, keyArr, saltArr, gammaArr, adArr, outputLength, userIDArr);</comment>
<comment type="line">//			</comment>
<comment type="line">//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>

	
<comment type="line">//	@Test</comment>
<comment type="line">//	public void testKeyedHashButterflyFull(){</comment>
<comment type="line">//		DefaultInstances instance = new DefaultInstances();</comment>
<comment type="line">//		Catena c = instance.initButterflyFull();</comment>
<comment type="line">//		</comment>
<comment type="line">//		JSONArray jsonObj = helper.jsonParserArr(filekeyedHashButterflyFull);</comment>
<comment type="line">//		for (int i = 0; i&lt;jsonObj.length(); ++i ){</comment>
<comment type="line">//			JSONObject o = (JSONObject) jsonObj.get(i);</comment>
<comment type="line">//			</comment>
<comment type="line">//			JSONObject inputs = o.getJSONObject("inputs");</comment>
<comment type="line">//			JSONObject outputs = o.getJSONObject("outputs");</comment>
<comment type="line">//			</comment>
<comment type="line">//			String pwd = inputs.getString("pwd");</comment>
<comment type="line">//			String key = inputs.getString("key");</comment>
<comment type="line">//			String salt = inputs.getString("salt");</comment>
<comment type="line">//			String gamma = inputs.getString("gamma");</comment>
<comment type="line">//			String ad = inputs.getString("aData");</comment>
<comment type="line">//			int outputLength = inputs.getInt("outputLength");</comment>
<comment type="line">//			String userID = inputs.getString("userID");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] pwdArr = helper.hex2bytes(pwd);</comment>
<comment type="line">//			byte[] keyArr = helper.hex2bytes(key);</comment>
<comment type="line">//			byte[] saltArr = helper.hex2bytes(salt);</comment>
<comment type="line">//			byte[] gammaArr = helper.hex2bytes(gamma);</comment>
<comment type="line">//			byte[] adArr = helper.hex2bytes(ad);</comment>
<comment type="line">//			byte[] userIDArr = helper.hex2bytes(userID);</comment>
<comment type="line">//			</comment>
<comment type="line">//			String res = outputs.getString("res");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] output = c.keyedPasswordHashing(pwdArr, keyArr, saltArr, gammaArr, adArr, outputLength, userIDArr);</comment>
<comment type="line">//			</comment>
<comment type="line">//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testKeyedHashButterflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initButterfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>filekeyedHashButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>pwd</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>salt</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>ad</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outputLength</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outputLength"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>userID</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"userID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>keyArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>saltArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>adArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>userIDArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>userID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>keyedPasswordHashing</name></name><argument_list>(<argument><expr><name>pwdArr</name></expr></argument>, <argument><expr><name>keyArr</name></expr></argument>, <argument><expr><name>saltArr</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>, <argument><expr><name>adArr</name></expr></argument>, <argument><expr><name>outputLength</name></expr></argument>, <argument><expr><name>userIDArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
<comment type="line">//	@Test</comment>
<comment type="line">//	public void testKeyedHashDragonfly(){</comment>
<comment type="line">//		DefaultInstances instance = new DefaultInstances();</comment>
<comment type="line">//		Catena c = instance.initDragonfly();</comment>
<comment type="line">//		</comment>
<comment type="line">//		JSONArray jsonObj = helper.jsonParserArr(filekeyedHashDragonfly);</comment>
<comment type="line">//		for (int i = 0; i&lt;jsonObj.length(); ++i ){</comment>
<comment type="line">//			JSONObject o = (JSONObject) jsonObj.get(i);</comment>
<comment type="line">//			</comment>
<comment type="line">//			JSONObject inputs = o.getJSONObject("inputs");</comment>
<comment type="line">//			JSONObject outputs = o.getJSONObject("outputs");</comment>
<comment type="line">//			</comment>
<comment type="line">//			String pwd = inputs.getString("pwd");</comment>
<comment type="line">//			String key = inputs.getString("key");</comment>
<comment type="line">//			String salt = inputs.getString("salt");</comment>
<comment type="line">//			String gamma = inputs.getString("gamma");</comment>
<comment type="line">//			String ad = inputs.getString("aData");</comment>
<comment type="line">//			int outputLength = inputs.getInt("outputLength");</comment>
<comment type="line">//			String userID = inputs.getString("userID");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] pwdArr = helper.hex2bytes(pwd);</comment>
<comment type="line">//			byte[] keyArr = helper.hex2bytes(key);</comment>
<comment type="line">//			byte[] saltArr = helper.hex2bytes(salt);</comment>
<comment type="line">//			byte[] gammaArr = helper.hex2bytes(gamma);</comment>
<comment type="line">//			byte[] adArr = helper.hex2bytes(ad);</comment>
<comment type="line">//			byte[] userIDArr = helper.hex2bytes(userID);</comment>
<comment type="line">//			</comment>
<comment type="line">//			String res = outputs.getString("res");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] output = c.keyedPasswordHashing(pwdArr, keyArr, saltArr, gammaArr, adArr, outputLength, userIDArr);</comment>
<comment type="line">//			</comment>
<comment type="line">//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
	
<comment type="line">//	@Test</comment>
<comment type="line">//	public void testKeyedHashDragonflyFull(){</comment>
<comment type="line">//		DefaultInstances instance = new DefaultInstances();</comment>
<comment type="line">//		Catena c = instance.initDragonflyFull();</comment>
<comment type="line">//		</comment>
<comment type="line">//		JSONArray jsonObj = helper.jsonParserArr(filekeyedHashDragonflyFull);</comment>
<comment type="line">//		for (int i = 0; i&lt;jsonObj.length(); ++i ){</comment>
<comment type="line">//			JSONObject o = (JSONObject) jsonObj.get(i);</comment>
<comment type="line">//			</comment>
<comment type="line">//			JSONObject inputs = o.getJSONObject("inputs");</comment>
<comment type="line">//			JSONObject outputs = o.getJSONObject("outputs");</comment>
<comment type="line">//			</comment>
<comment type="line">//			String pwd = inputs.getString("pwd");</comment>
<comment type="line">//			String key = inputs.getString("key");</comment>
<comment type="line">//			String salt = inputs.getString("salt");</comment>
<comment type="line">//			String gamma = inputs.getString("gamma");</comment>
<comment type="line">//			String ad = inputs.getString("aData");</comment>
<comment type="line">//			int outputLength = inputs.getInt("outputLength");</comment>
<comment type="line">//			String userID = inputs.getString("userID");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] pwdArr = helper.hex2bytes(pwd);</comment>
<comment type="line">//			byte[] keyArr = helper.hex2bytes(key);</comment>
<comment type="line">//			byte[] saltArr = helper.hex2bytes(salt);</comment>
<comment type="line">//			byte[] gammaArr = helper.hex2bytes(gamma);</comment>
<comment type="line">//			byte[] adArr = helper.hex2bytes(ad);</comment>
<comment type="line">//			byte[] userIDArr = helper.hex2bytes(userID);</comment>
<comment type="line">//			</comment>
<comment type="line">//			String res = outputs.getString("res");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] output = c.keyedPasswordHashing(pwdArr, keyArr, saltArr, gammaArr, adArr, outputLength, userIDArr);</comment>
<comment type="line">//			</comment>
<comment type="line">//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>

	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testKeyedHashDragonflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initDragonfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>filekeyedHashDragonflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>pwd</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>salt</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>ad</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outputLength</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outputLength"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>userID</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"userID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>keyArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>saltArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>adArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>userIDArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>userID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>keyedPasswordHashing</name></name><argument_list>(<argument><expr><name>pwdArr</name></expr></argument>, <argument><expr><name>keyArr</name></expr></argument>, <argument><expr><name>saltArr</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>, <argument><expr><name>adArr</name></expr></argument>, <argument><expr><name>outputLength</name></expr></argument>, <argument><expr><name>userIDArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	

<comment type="line">//	@Test</comment>
<comment type="line">//	public void testKeyDerivationButterfly(){</comment>
<comment type="line">//		DefaultInstances instance = new DefaultInstances();</comment>
<comment type="line">//		Catena c = instance.initButterfly();</comment>
<comment type="line">//		</comment>
<comment type="line">//		JSONArray jsonObj = helper.jsonParserArr(filekeyDerivationButterfly);</comment>
<comment type="line">//		for (int i = 0; i&lt;jsonObj.length(); ++i ){</comment>
<comment type="line">//			JSONObject o = (JSONObject) jsonObj.get(i);</comment>
<comment type="line">//			</comment>
<comment type="line">//			JSONObject inputs = o.getJSONObject("inputs");</comment>
<comment type="line">//			JSONObject outputs = o.getJSONObject("outputs");</comment>
<comment type="line">//			</comment>
<comment type="line">//			String pwd = inputs.getString("pwd");</comment>
<comment type="line">//			String ad = inputs.getString("ad");</comment>
<comment type="line">//			String salt = inputs.getString("salt");</comment>
<comment type="line">//			String gamma = inputs.getString("gamma");</comment>
<comment type="line">//			String keyIdentifier = inputs.getString("key_identifier");</comment>
<comment type="line">//			int outputLength = inputs.getInt("output_length");</comment>
<comment type="line">//			int keySize = inputs.getInt("key_size");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] pwdArr = helper.hex2bytes(pwd);</comment>
<comment type="line">//			byte[] adArr = helper.hex2bytes(ad);</comment>
<comment type="line">//			byte[] saltArr = helper.hex2bytes(salt);</comment>
<comment type="line">//			byte[] gammaArr = helper.hex2bytes(gamma);</comment>
<comment type="line">//			byte[] keyIdentifierArr = helper.hex2bytes(keyIdentifier);</comment>
<comment type="line">//</comment>
<comment type="line">//			String res = outputs.getString("res");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] output = c.keyDerivation(pwdArr, saltArr, adArr, gammaArr, outputLength, keySize, keyIdentifierArr);</comment>
<comment type="line">//			</comment>
<comment type="line">//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
<comment type="line">//	</comment>


<comment type="line">//	@Test</comment>
<comment type="line">//	public void testKeyDerivationButterflyFull(){</comment>
<comment type="line">//		DefaultInstances instance = new DefaultInstances();</comment>
<comment type="line">//		Catena c = instance.initButterflyFull();</comment>
<comment type="line">//		</comment>
<comment type="line">//		JSONArray jsonObj = helper.jsonParserArr(filekeyDerivationButterflyFull);</comment>
<comment type="line">//		for (int i = 0; i&lt;jsonObj.length(); ++i ){</comment>
<comment type="line">//			JSONObject o = (JSONObject) jsonObj.get(i);</comment>
<comment type="line">//			</comment>
<comment type="line">//			JSONObject inputs = o.getJSONObject("inputs");</comment>
<comment type="line">//			JSONObject outputs = o.getJSONObject("outputs");</comment>
<comment type="line">//			</comment>
<comment type="line">//			String pwd = inputs.getString("pwd");</comment>
<comment type="line">//			String ad = inputs.getString("ad");</comment>
<comment type="line">//			String salt = inputs.getString("salt");</comment>
<comment type="line">//			String gamma = inputs.getString("gamma");</comment>
<comment type="line">//			String keyIdentifier = inputs.getString("key_identifier");</comment>
<comment type="line">//			int outputLength = inputs.getInt("output_length");</comment>
<comment type="line">//			int keySize = inputs.getInt("key_size");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] pwdArr = helper.hex2bytes(pwd);</comment>
<comment type="line">//			byte[] adArr = helper.hex2bytes(ad);</comment>
<comment type="line">//			byte[] saltArr = helper.hex2bytes(salt);</comment>
<comment type="line">//			byte[] gammaArr = helper.hex2bytes(gamma);</comment>
<comment type="line">//			byte[] keyIdentifierArr = helper.hex2bytes(keyIdentifier);</comment>
<comment type="line">//</comment>
<comment type="line">//			String res = outputs.getString("res");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] output = c.keyDerivation(pwdArr, saltArr, adArr, gammaArr, outputLength, keySize, keyIdentifierArr);</comment>
<comment type="line">//			</comment>
<comment type="line">//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testKeyDerivationButterflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initButterfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>filekeyDerivationButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>pwd</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>ad</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"ad"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>salt</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>keyIdentifier</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"key_identifier"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outputLength</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"output_length"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>keySize</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"key_size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>adArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>saltArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>keyIdentifierArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>keyIdentifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>keyDerivation</name></name><argument_list>(<argument><expr><name>pwdArr</name></expr></argument>, <argument><expr><name>saltArr</name></expr></argument>, <argument><expr><name>adArr</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>, <argument><expr><name>outputLength</name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>, <argument><expr><name>keyIdentifierArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	
<comment type="line">//	@Test</comment>
<comment type="line">//	public void testKeyDerivationDragonfly(){</comment>
<comment type="line">//		DefaultInstances instance = new DefaultInstances();</comment>
<comment type="line">//		Catena c = instance.initDragonfly();</comment>
<comment type="line">//		</comment>
<comment type="line">//		JSONArray jsonObj = helper.jsonParserArr(filekeyDerivationDragonfly);</comment>
<comment type="line">//		for (int i = 0; i&lt;jsonObj.length(); ++i ){</comment>
<comment type="line">//			JSONObject o = (JSONObject) jsonObj.get(i);</comment>
<comment type="line">//			</comment>
<comment type="line">//			JSONObject inputs = o.getJSONObject("inputs");</comment>
<comment type="line">//			JSONObject outputs = o.getJSONObject("outputs");</comment>
<comment type="line">//			</comment>
<comment type="line">//			String pwd = inputs.getString("pwd");</comment>
<comment type="line">//			String ad = inputs.getString("ad");</comment>
<comment type="line">//			String salt = inputs.getString("salt");</comment>
<comment type="line">//			String gamma = inputs.getString("gamma");</comment>
<comment type="line">//			String keyIdentifier = inputs.getString("key_identifier");</comment>
<comment type="line">//			int outputLength = inputs.getInt("output_length");</comment>
<comment type="line">//			int keySize = inputs.getInt("key_size");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] pwdArr = helper.hex2bytes(pwd);</comment>
<comment type="line">//			byte[] adArr = helper.hex2bytes(ad);</comment>
<comment type="line">//			byte[] saltArr = helper.hex2bytes(salt);</comment>
<comment type="line">//			byte[] gammaArr = helper.hex2bytes(gamma);</comment>
<comment type="line">//			byte[] keyIdentifierArr = helper.hex2bytes(keyIdentifier);</comment>
<comment type="line">//</comment>
<comment type="line">//			String res = outputs.getString("res");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] output = c.keyDerivation(pwdArr, saltArr, adArr, gammaArr, outputLength, keySize, keyIdentifierArr);</comment>
<comment type="line">//			</comment>
<comment type="line">//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
<comment type="line">//	</comment>
<comment type="line">//	@Test</comment>
<comment type="line">//	public void testKeyDerivationDragonflyFull(){</comment>
<comment type="line">//		DefaultInstances instance = new DefaultInstances();</comment>
<comment type="line">//		Catena c = instance.initDragonflyFull();</comment>
<comment type="line">//		</comment>
<comment type="line">//		JSONArray jsonObj = helper.jsonParserArr(filekeyDerivationDragonflyFull);</comment>
<comment type="line">//		for (int i = 0; i&lt;jsonObj.length(); ++i ){</comment>
<comment type="line">//			JSONObject o = (JSONObject) jsonObj.get(i);</comment>
<comment type="line">//			</comment>
<comment type="line">//			JSONObject inputs = o.getJSONObject("inputs");</comment>
<comment type="line">//			JSONObject outputs = o.getJSONObject("outputs");</comment>
<comment type="line">//			</comment>
<comment type="line">//			String pwd = inputs.getString("pwd");</comment>
<comment type="line">//			String ad = inputs.getString("ad");</comment>
<comment type="line">//			String salt = inputs.getString("salt");</comment>
<comment type="line">//			String gamma = inputs.getString("gamma");</comment>
<comment type="line">//			String keyIdentifier = inputs.getString("key_identifier");</comment>
<comment type="line">//			int outputLength = inputs.getInt("output_length");</comment>
<comment type="line">//			int keySize = inputs.getInt("key_size");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] pwdArr = helper.hex2bytes(pwd);</comment>
<comment type="line">//			byte[] adArr = helper.hex2bytes(ad);</comment>
<comment type="line">//			byte[] saltArr = helper.hex2bytes(salt);</comment>
<comment type="line">//			byte[] gammaArr = helper.hex2bytes(gamma);</comment>
<comment type="line">//			byte[] keyIdentifierArr = helper.hex2bytes(keyIdentifier);</comment>
<comment type="line">//</comment>
<comment type="line">//			String res = outputs.getString("res");</comment>
<comment type="line">//			</comment>
<comment type="line">//			byte[] output = c.keyDerivation(pwdArr, saltArr, adArr, gammaArr, outputLength, keySize, keyIdentifierArr);</comment>
<comment type="line">//			</comment>
<comment type="line">//			assertTrue(res.equals(helper.bytes2hex(output).toLowerCase()));</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>

	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testKeyDerivationDragonflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initDragonfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>filekeyDerivationDragonflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>pwd</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>ad</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"ad"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>salt</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>keyIdentifier</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"key_identifier"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outputLength</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"output_length"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>keySize</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"key_size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>adArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>saltArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>keyIdentifierArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>keyIdentifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>keyDerivation</name></name><argument_list>(<argument><expr><name>pwdArr</name></expr></argument>, <argument><expr><name>saltArr</name></expr></argument>, <argument><expr><name>adArr</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>, <argument><expr><name>outputLength</name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>, <argument><expr><name>keyIdentifierArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testCIUpdateDragonflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initDragonfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>gOld</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><name>gOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><name>gOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileciUpdateDragonflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>oldHash</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"oldHash"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>gNew</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"gNew"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>oldHashArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>oldHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<try>try <block>{<block_content>
				<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name><name>c</name><operator>.</operator><name>clientIndependentUpdate</name></name><argument_list>(<argument><expr><name>oldHashArr</name></expr></argument>, <argument><expr><name>gOld</name></expr></argument>, <argument><expr><name>gNew</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>, <argument><expr><name>outLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Could not update Hash."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></catch></try>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testCIUpdateKeyedDragonflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initDragonfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>gOld</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><name>gOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><name>gOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileciUpdateKeyedDragonflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>oldHash</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"oldHash"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>gNew</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"gNew"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>userID</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"userID"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>oldHashArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>oldHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>keyArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>userIDArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>userID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<try>try <block>{<block_content>
				<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name><name>c</name><operator>.</operator><name>keyedClientIndependentUpdate</name></name><argument_list>(<argument><expr><name>oldHashArr</name></expr></argument>, <argument><expr><name>gOld</name></expr></argument>, <argument><expr><name>gNew</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>, <argument><expr><name>outLen</name></expr></argument>, <argument><expr><name>keyArr</name></expr></argument>, <argument><expr><name>userIDArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Could not update Hash."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></catch></try>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testFlapButterfly</name><parameter_list>()</parameter_list><block>{<block_content>
		
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>defaultInstance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>defaultInstance</name><operator>.</operator><name>initButterfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileFlapButterfly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"g"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>pwd</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>flapPub</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>pwdArr</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testFlapButterflyFull</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>defaultInstance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>defaultInstance</name><operator>.</operator><name>initButterflyFull</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileFlapButterflyFull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"g"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>pwd</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>flapPub</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>pwdArr</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testFlapDragonfly</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>defaultInstance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>defaultInstance</name><operator>.</operator><name>initDragonfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileFlapDragonfly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>defaultInstance</name><operator>.</operator><name>initDragonfly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"g"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>pwd</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>flapPub</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>pwdArr</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testFlapDragonflyFull</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>defaultInstance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>defaultInstance</name><operator>.</operator><name>initDragonflyFull</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileFlapDragonflyFull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"g"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>pwd</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gamma</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaArr</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>flapPub</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>pwdArr</name></expr></argument>, <argument><expr><name>gammaArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testTweakButterfly</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>defaultInstance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>defaultInstance</name><operator>.</operator><name>initButterfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>filetweakButterfly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>int</name></type> <name>domain</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>sLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"sLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>aD</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aData</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>string2Bytes</name></name><argument_list>(<argument><expr><name>aD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>testCompTweak</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getVID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getLambda</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>outLen</name></expr></argument>, <argument><expr><name>sLen</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testTweakButterflyFull</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>defaultInstance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>defaultInstance</name><operator>.</operator><name>initButterflyFull</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>filetweakButterflyFull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>int</name></type> <name>domain</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>sLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"sLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>aD</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aData</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>string2Bytes</name></name><argument_list>(<argument><expr><name>aD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>testCompTweak</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getVID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getLambda</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>outLen</name></expr></argument>, <argument><expr><name>sLen</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testTweakDragonfly</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>defaultInstance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>defaultInstance</name><operator>.</operator><name>initDragonfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>filetweakDragonfly</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>int</name></type> <name>domain</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>sLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"sLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>aD</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aData</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>string2Bytes</name></name><argument_list>(<argument><expr><name>aD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>testCompTweak</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getVID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getLambda</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>outLen</name></expr></argument>, <argument><expr><name>sLen</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testTweakDragonflyFull</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>defaultInstance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>defaultInstance</name><operator>.</operator><name>initDragonflyFull</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>filetweakDragonflyFull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>int</name></type> <name>domain</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>sLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"sLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>aD</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aData</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>string2Bytes</name></name><argument_list>(<argument><expr><name>aD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>res</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>testCompTweak</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getVID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getLambda</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>outLen</name></expr></argument>, <argument><expr><name>sLen</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testHInit</name><parameter_list>()</parameter_list><block>{<block_content>
		
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>defaultInstance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>defaultInstance</name><operator>.</operator><name>initDragonflyFull</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileHInit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name>  <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>String</name></type> <name>x</name> 	  <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>xArray</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONArray</name></type> <name>out</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getJSONArray</name></name><argument_list>(<argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>v0</name> <init>= <expr><call><name><name>out</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>v1</name> <init>= <expr><call><name><name>out</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>result</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>testHInit</name></name><argument_list>(<argument><expr><name>xArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>v</name> <init>= <expr><name>v0</name><operator>+</operator><name>v1</name></expr></init></decl>;</decl_stmt>
			
			
			<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>bytes2hex</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testProofOfWorkServerSaltButterflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initButterfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileproofOfWorkServerSaltButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name>  <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwd</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aData</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdExp</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>saltExp</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aDataExp</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaExp</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outLenExp</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>outHashExp</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"outHash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>pExp</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>modeExp</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			
			<decl_stmt><decl><type><name>POWstruct</name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>proofOfWorkServer</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>outLen</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>pwdExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>saltExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>salt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>aDataExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>aData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>gammaExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>gamma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>outHashExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>rHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>outLenExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>outLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>pExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>modeExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>

	
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testProofOfWorkServerPwdButterflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initButterfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileproofOfWorkServerPwdButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name>  <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwd</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aData</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwdExp</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>saltExp</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aDataExp</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gammaExp</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outLenExp</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>outHashExp</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"outHash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>pExp</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>modeExp</name> <init>= <expr><call><name><name>outputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			
			<decl_stmt><decl><type><name>POWstruct</name></type> <name>output</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>proofOfWorkServer</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>outLen</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>pwdExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>saltExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>salt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>aDataExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>aData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>gammaExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>gamma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>outHashExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>rHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>outLenExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>outLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>pExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>modeExp</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testProofOfWorkClientPwdButterflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initButterfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileproofOfWorkClientPwdButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name>  <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwd</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aData</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>resExp</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>POWstruct</name></type> <name>input</name> <init>= <expr><name><name>c</name><operator>.</operator></name>new <call><name>POWstruct</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>pwd</name></name> <operator>=</operator> <name>pwd</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>salt</name></name> <operator>=</operator> <name>salt</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>aData</name></name> <operator>=</operator> <name>aData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>gamma</name></name> <operator>=</operator> <name>gamma</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>outLen</name></name> <operator>=</operator> <name>outLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>rHash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>actuals</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>proofOfWorkClient</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>resExp</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Test</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>testProofOfWorkClientSaltButterflyReduced</name><parameter_list>()</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name>DefaultInstances</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DefaultInstances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Catena</name></type> <name>c</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>initButterfly</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGHigh</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setGLow</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>JSONArray</name></type> <name>jsonObj</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>jsonParserArr</name></name><argument_list>(<argument><expr><name>fileproofOfWorkClientSaltButterflyReduced</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>jsonObj</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{<block_content>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>o</name> <init>= <expr><operator>(</operator><name>JSONObject</name><operator>)</operator> <call><name><name>jsonObj</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>inputs</name>  <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>JSONObject</name></type> <name>outputs</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pwd</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"salt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>aData</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aData"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>gamma</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>outLen</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"outLen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>resExp</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>hex2bytes</name></name><argument_list>(<argument><expr><call><name><name>outputs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"res"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>POWstruct</name></type> <name>input</name> <init>= <expr><name><name>c</name><operator>.</operator></name>new <call><name>POWstruct</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>pwd</name></name> <operator>=</operator> <name>pwd</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>salt</name></name> <operator>=</operator> <name>salt</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>aData</name></name> <operator>=</operator> <name>aData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>gamma</name></name> <operator>=</operator> <name>gamma</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>outLen</name></name> <operator>=</operator> <name>outLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>input</name><operator>.</operator><name>rHash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>actuals</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>proofOfWorkClient</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>resExp</name></expr></argument>, <argument><expr><name>actuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
}</block></class>
</unit>
