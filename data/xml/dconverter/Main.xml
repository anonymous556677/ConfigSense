<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/density-converter/src/main/java/at/favre/tools/dconvert/Main.java"><comment type="block">/*
 *  Copyright 2016 Patrick Favre-Bulle
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name></name>;</package>

<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>Arguments</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>ui</name><operator>.</operator><name>CLIInterpreter</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>ui</name><operator>.</operator><name>GUI</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>MiscUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Entry point of the app. Use arg -h to get help.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Main</name> <block>{
    <constructor><specifier>private</specifier> <name>Main</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>rawArgs</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name><name>rawArgs</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>new</operator> <call><name>GUI</name><argument_list>()</argument_list></call><operator>.</operator><call><name>launchApp</name><argument_list>(<argument><expr><name>rawArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Arguments</name></type> <name>args</name> <init>= <expr><call><name><name>CLIInterpreter</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>rawArgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>args</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>args</name> <operator>==</operator> <name><name>Arguments</name><operator>.</operator><name>START_GUI</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"start gui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>new</operator> <call><name>GUI</name><argument_list>()</argument_list></call><operator>.</operator><call><name>launchApp</name><argument_list>(<argument><expr><name>rawArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"start converting "</literal> <operator>+</operator> <call><name><name>args</name><operator>.</operator><name>filesToProcess</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>DConvert</name><argument_list>()</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DConvert</name><operator>.</operator><name>HandlerCallback</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onProgress</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>progress</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>MiscUtil</name><operator>.</operator><name>getCmdProgressBar</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onFinished</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>finishedJobs</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Exception</name></argument>&gt;</argument_list></name></type> <name>exceptions</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>haltedDuringProcess</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>log</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name><name>MiscUtil</name><operator>.</operator><name>getCmdProgressBar</name></name><argument_list>(<argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>verboseLog</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Log:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>haltedDuringProcess</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"abort due to error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>exceptions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"found "</literal> <operator>+</operator> <call><name><name>exceptions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" errors during execution"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>verboseLog</name></name></expr>)</condition> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>Exception</name></type> <name>exception</name> <range>: <expr><name>exceptions</name></expr></range></decl></init>)</control> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\terror: "</literal> <operator>+</operator> <call><name><name>exception</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>exception</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"execution finished ("</literal> <operator>+</operator> <name>time</name> <operator>+</operator> <literal type="string">"ms) with "</literal> <operator>+</operator> <name>finishedJobs</name> <operator>+</operator> <literal type="string">" finsihed jobs and "</literal> <operator>+</operator> <call><name><name>exceptions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
