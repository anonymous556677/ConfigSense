<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/density-converter/src/main/java/at/favre/tools/dconvert/ui/GUIController.java"><comment type="block">/*
 *  Copyright 2016 Patrick Favre-Bulle
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>DConvert</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>postprocessing</name><operator>.</operator><name>MozJpegProcessor</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>postprocessing</name><operator>.</operator><name>PngCrushProcessor</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>postprocessing</name><operator>.</operator><name>WebpProcessor</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidArgumentException</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>MiscUtil</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>application</name><operator>.</operator><name>Platform</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>FXCollections</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>event</name><operator>.</operator><name>EventHandler</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextArea</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>image</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>image</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>layout</name><operator>.</operator><name>ColumnConstraints</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>layout</name><operator>.</operator><name>GridPane</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>layout</name><operator>.</operator><name>HBox</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>layout</name><operator>.</operator><name>VBox</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>DirectoryChooser</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>FileChooser</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>util</name><operator>.</operator><name>StringConverter</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>MessageFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * JavaFx main controller for GUI
 */</comment>
<class><specifier>public</specifier> class <name>GUIController</name> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <name>VBox</name></type> <name>vboxOptionsCheckboxes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>VBox</name></type> <name>vboxPostProcessors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelRounding</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelThreads</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>HBox</name></type> <name>hboxWhy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>VBox</name></type> <name>vboxFillFreeSpace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbCleanBeforeConvert</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelDownScale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ChoiceBox</name></type> <name>choiceDownScale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelUpScale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ChoiceBox</name></type> <name>choiceUpScale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>IPreferenceStore</name></type> <name>preferenceStore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>FileChooser</name></type> <name>srcFileChooser</name> <init>= <expr><operator>new</operator> <call><name>FileChooser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DirectoryChooser</name></type> <name>srcDirectoryChooser</name> <init>= <expr><operator>new</operator> <call><name>DirectoryChooser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ResourceBundle</name></type> <name>bundle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelPostProcessor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>TextField</name></type> <name>textFieldSrcPath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Button</name></type> <name>btnSrcFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Button</name></type> <name>btnSrcFolder</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ProgressBar</name></type> <name>progressBar</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Button</name></type> <name>btnConvert</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>TextField</name></type> <name>textFieldDstPath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Button</name></type> <name>btnDstFolder</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ChoiceBox</name></type> <name>choiceCompression</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ChoiceBox</name></type> <name>choiceCompressionQuality</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ChoiceBox</name></type> <name>choiceRounding</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ChoiceBox</name></type> <name>choiceThreads</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbSkipExisting</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbSkipUpscaling</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbAndroidIncludeLdpiTvdpi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbHaltOnError</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbEnablePngCrush</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbEnableMozJpeg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbKeepUnoptimized</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Slider</name></type> <name>scaleSlider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelScale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelResult</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>TextArea</name></type> <name>textFieldConsole</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbPostConvertWebp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbMipmapInsteadDrawable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>GridPane</name></type> <name>gridPaneChoiceBoxes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>GridPane</name></type> <name>gridPanePostProcessors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>GridPane</name></type> <name>gridPaneOptionsCheckboxes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelScaleSubtitle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbAntiAliasing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Button</name></type> <name>btnReset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>TextField</name></type> <name>textFieldDp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelDpWidth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelDpHeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ToggleGroup</name></type> <name>scaleTypeToggleGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>RadioButton</name></type> <name>rbFactor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>RadioButton</name></type> <name>rbDpWidth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>RadioButton</name></type> <name>rbDpHeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>GridPane</name></type> <name>gridPaneScaleFactorLabel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelDpPostFix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbDryRun</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>GridPane</name></type> <name>rootGridPane</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Label</name></type> <name>labelWhyPP</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Button</name></type> <name>btnDstFolderOpen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CheckBox</name></type> <name>cbIosCreateImageset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>GridPane</name></type> <name>gridPaneToggleGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ToggleButton</name></type> <name>tgAndroid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ToggleButton</name></type> <name>tgIos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ToggleButton</name></type> <name>tgWindows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ToggleButton</name></type> <name>tgWeb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>RadioButton</name></type> <name>rbOptSimple</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>RadioButton</name></type> <name>rbOptAdvanced</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ToggleGroup</name></type> <name>optionTypeToggleGroup</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Stage</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name>IPreferenceStore</name></type> <name>store</name></decl></parameter>, <parameter><decl><type><name>ResourceBundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bundle</name></name> <operator>=</operator> <name>bundle</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>preferenceStore</name></name> <operator>=</operator> <name>store</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setupLayout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>btnSrcFile</name><operator>.</operator><name>setOnAction</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
            <expr_stmt><expr><call><name><name>srcFileChooser</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"main.filechooser.titel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>textFieldSrcPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>file</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>textFieldSrcPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>file</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>srcFileChooser</name><operator>.</operator><name>setInitialDirectory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.home"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>srcFileChooser</name><operator>.</operator><name>setInitialDirectory</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>srcFileChooser</name><operator>.</operator><name>setSelectedExtensionFilter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>FileChooser</name><operator>.</operator><name>ExtensionFilter</name></name><argument_list>(<argument><expr><literal type="string">"Images"</literal></expr></argument>, <argument><expr><literal type="string">"*.jpg"</literal></expr></argument>, <argument><expr><literal type="string">"*.jpeg"</literal></expr></argument>, <argument><expr><literal type="string">"*.png"</literal></expr></argument>, <argument><expr><literal type="string">"*.gif"</literal></expr></argument>, <argument><expr><literal type="string">"*.psd"</literal></expr></argument>, <argument><expr><literal type="string">"*.svg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>srcFile</name> <init>= <expr><call><name><name>srcFileChooser</name><operator>.</operator><name>showOpenDialog</name></name><argument_list>(<argument><expr><call><name><name>btnSrcFile</name><operator>.</operator><name>getScene</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>srcFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>textFieldSrcPath</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>srcFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>textFieldDstPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>textFieldDstPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>textFieldDstPath</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>srcFile</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>btnSrcFolder</name><operator>.</operator><name>setOnAction</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FolderPicker</name><argument_list>(<argument><expr><name>srcDirectoryChooser</name></expr></argument>, <argument><expr><name>textFieldSrcPath</name></expr></argument>, <argument><expr><name>textFieldDstPath</name></expr></argument>, <argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btnDstFolder</name><operator>.</operator><name>setOnAction</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FolderPicker</name><argument_list>(<argument><expr><name>srcDirectoryChooser</name></expr></argument>, <argument><expr><name>textFieldDstPath</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btnConvert</name><operator>.</operator><name>setOnAction</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
            <decl_stmt><decl><type><name>WinTaskbarProgress</name></type> <name>winTaskbarProgress</name> <init>= <expr><operator>new</operator> <call><name>WinTaskbarProgress</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>Arguments</name></type> <name>arg</name> <init>= <expr><call><name>getFromUI</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>saveToPrefs</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>btnConvert</name><operator>.</operator><name>setDisable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>labelResult</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>textFieldConsole</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>textFieldConsole</name><operator>.</operator><name>setDisable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>btnConvert</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><operator>new</operator> <call><name>DConvert</name><argument_list>()</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DConvert</name><operator>.</operator><name>HandlerCallback</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onProgress</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>progress</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Platform</name><operator>.</operator><name>runLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
                            <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>winTaskbarProgress</name><operator>.</operator><name>updateProgress</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onFinished</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>finishedJobs</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Exception</name></argument>&gt;</argument_list></name></type> <name>exceptions</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>haltedDuringProcess</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>log</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Platform</name><operator>.</operator><name>runLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
                            <expr_stmt><expr><call><name>resetUIAfterExecution</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>labelResult</name><operator>.</operator><name>setText</name></name><argument_list>(
                                    <argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"main.label.finish"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finishedJobs</name></expr></argument>, <argument><expr><call><name><name>exceptions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>MiscUtil</name><operator>.</operator><name>duration</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>textFieldConsole</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>textFieldConsole</name><operator>.</operator><name>appendText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>exceptions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>winTaskbarProgress</name><operator>.</operator><name>error</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <decl_stmt><decl><type><name>Alert</name></type> <name>alert</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>WARNING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"main.alert.title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"main.alert.content"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>exceptions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><call><name><name>winTaskbarProgress</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>resetUIAfterExecution</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>stacktrace</name> <init>= <expr><call><name><name>MiscUtil</name><operator>.</operator><name>getStackTrace</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>labelResult</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Error: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Alert</name></type> <name>alert</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>WARNING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>stacktrace</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">600</literal></expr> ?</condition><then> <expr><call><name><name>stacktrace</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">600</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"..."</literal></expr> </then><else>: <expr><name>stacktrace</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>btnDstFolder</name><operator>.</operator><name>setGraphic</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImageView</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Image</name><argument_list>(<argument><expr><literal type="string">"img/folder-symbol.png"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btnSrcFolder</name><operator>.</operator><name>setGraphic</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImageView</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Image</name><argument_list>(<argument><expr><literal type="string">"img/folder-symbol.png"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btnSrcFile</name><operator>.</operator><name>setGraphic</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImageView</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Image</name><argument_list>(<argument><expr><literal type="string">"img/file-symbol.png"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btnDstFolderOpen</name><operator>.</operator><name>setGraphic</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImageView</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Image</name><argument_list>(<argument><expr><literal type="string">"img/eye.png"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>btnReset</name><operator>.</operator><name>setOnAction</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
            <expr_stmt><expr><call><name>saveToPrefs</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Arguments</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>loadPrefs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>scaleTypeToggleGroup</name><operator>.</operator><name>selectedToggleProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>ov</name></decl></parameter>, <parameter><decl><name>old_toggle</name></decl></parameter>, <parameter><decl><name>new_toggle</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
            <expr_stmt><expr><call><name><name>scaleSlider</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>rbDpWidth</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>rbDpHeight</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>gridPaneScaleFactorLabel</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>rbDpWidth</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>rbDpHeight</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>textFieldDp</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><call><name><name>rbDpWidth</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>rbDpHeight</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>labelDpPostFix</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><call><name><name>rbDpWidth</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>rbDpHeight</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>labelDpWidth</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><call><name><name>rbDpWidth</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>labelDpHeight</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><call><name><name>rbDpHeight</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>optionTypeToggleGroup</name><operator>.</operator><name>selectedToggleProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>observable</name></decl></parameter>, <parameter><decl><name>oldValue</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>stage</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>GUI</name><operator>.</operator><name>MIN_HEIGHT</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>setHeight</name></name><argument_list>(<argument><expr><name><name>GUI</name><operator>.</operator><name>MIN_HEIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>gridPaneOptionsCheckboxes</name><operator>.</operator><name>managedProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>gridPaneOptionsCheckboxes</name><operator>.</operator><name>visibleProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>gridPanePostProcessors</name><operator>.</operator><name>managedProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>gridPanePostProcessors</name><operator>.</operator><name>visibleProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>labelPostProcessor</name><operator>.</operator><name>managedProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>labelPostProcessor</name><operator>.</operator><name>visibleProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hboxWhy</name><operator>.</operator><name>managedProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hboxWhy</name><operator>.</operator><name>visibleProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vboxOptionsCheckboxes</name><operator>.</operator><name>managedProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vboxOptionsCheckboxes</name><operator>.</operator><name>visibleProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vboxPostProcessors</name><operator>.</operator><name>managedProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vboxPostProcessors</name><operator>.</operator><name>visibleProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>gridPaneChoiceBoxes</name><operator>.</operator><name>managedProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>gridPaneChoiceBoxes</name><operator>.</operator><name>visibleProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textFieldConsole</name><operator>.</operator><name>managedProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textFieldConsole</name><operator>.</operator><name>visibleProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vboxFillFreeSpace</name><operator>.</operator><name>managedProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptSimple</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vboxFillFreeSpace</name><operator>.</operator><name>visibleProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bind</name><argument_list>(<argument><expr><call><name><name>rbOptSimple</name><operator>.</operator><name>selectedProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>scaleSlider</name><operator>.</operator><name>valueProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>observable</name></decl></parameter>, <parameter><decl><name>oldValue</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
            <expr_stmt><expr><call><name><name>labelScale</name><operator>.</operator><name>setText</name></name><argument_list>(
                    <argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"main.label.factor"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><call><name><name>scaleSlider</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">4f</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>labelScaleSubtitle</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getNameForScale</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>scaleSlider</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scaleSlider</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name><name>Arguments</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setPlatformToogles</name><argument_list>(<argument><expr><name><name>Arguments</name><operator>.</operator><name>DEFAULT_PLATFORM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>choiceCompression</name><operator>.</operator><name>setConverter</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>StringConverter</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>EOutputCompressionMode</name><operator>)</operator> <name>object</name><operator>)</operator><operator>.</operator><name>rbKey</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>Object</name></type> <name>fromString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>EOutputCompressionMode</name><operator>.</operator><name>getFromString</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>choiceCompression</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>(
                <argument><expr><name><name>EOutputCompressionMode</name><operator>.</operator><name>SAME_AS_INPUT_PREF_PNG</name></name></expr></argument>, <argument><expr><name><name>EOutputCompressionMode</name><operator>.</operator><name>SAME_AS_INPUT_STRICT</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Separator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>EOutputCompressionMode</name><operator>.</operator><name>AS_JPG</name></name></expr></argument>,
                <argument><expr><name><name>EOutputCompressionMode</name><operator>.</operator><name>AS_PNG</name></name></expr></argument>, <argument><expr><name><name>EOutputCompressionMode</name><operator>.</operator><name>AS_GIF</name></name></expr></argument>, <argument><expr><name><name>EOutputCompressionMode</name><operator>.</operator><name>AS_BMP</name></name></expr></argument>, <argument><expr><name><name>EOutputCompressionMode</name><operator>.</operator><name>AS_JPG_AND_PNG</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>choiceCompression</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><name><name>Arguments</name><operator>.</operator><name>DEFAULT_OUT_COMPRESSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>choiceCompressionQuality</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>(
                <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0.1f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0.2f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0.3f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0.6f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0.7f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0.75f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0.8f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0.85f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0.9f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">0.95f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>choiceCompressionQuality</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><call><name><name>Float</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>Arguments</name><operator>.</operator><name>DEFAULT_COMPRESSION_QUALITY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>choiceRounding</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>(
                <argument><expr><name><name>RoundingHandler</name><operator>.</operator><name>Strategy</name><operator>.</operator><name>ROUND_HALF_UP</name></name></expr></argument>, <argument><expr><name><name>RoundingHandler</name><operator>.</operator><name>Strategy</name><operator>.</operator><name>CEIL</name></name></expr></argument>, <argument><expr><name><name>RoundingHandler</name><operator>.</operator><name>Strategy</name><operator>.</operator><name>FLOOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>choiceRounding</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><name><name>Arguments</name><operator>.</operator><name>DEFAULT_ROUNDING_STRATEGY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>choiceThreads</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>(
                <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>choiceThreads</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><name><name>Arguments</name><operator>.</operator><name>DEFAULT_THREAD_COUNT</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>choiceDownScale</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>(<argument><expr><call><name><name>EScalingAlgorithm</name><operator>.</operator><name>getForType</name></name><argument_list>(<argument><expr><name><name>EScalingAlgorithm</name><operator>.</operator><name>Type</name><operator>.</operator><name>DOWNSCALING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>choiceDownScale</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><name><name>Arguments</name><operator>.</operator><name>DEFAULT_DOWNSCALING_QUALITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>choiceUpScale</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>(<argument><expr><call><name><name>EScalingAlgorithm</name><operator>.</operator><name>getForType</name></name><argument_list>(<argument><expr><name><name>EScalingAlgorithm</name><operator>.</operator><name>Type</name><operator>.</operator><name>UPSCALING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>choiceUpScale</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><name><name>Arguments</name><operator>.</operator><name>DEFAULT_UPSCALING_QUALITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>labelVersion</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"v"</literal> <operator>+</operator> <call><name><name>GUIController</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getImplementationVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>textFieldDp</name><operator>.</operator><name>textProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>observable</name></decl></parameter>, <parameter><decl><name>oldValue</name></decl></parameter>, <parameter><decl><name>newValue</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>newValue</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"\\d*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>textFieldDp</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>newValue</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"[^\\d]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>textFieldDp</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>textFieldDp</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>textFieldDp</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>labelWhyPP</name><operator>.</operator><name>setOnMouseClicked</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
            <decl_stmt><decl><type><name>Alert</name></type> <name>alert</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setHeaderText</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"alert.whypp.title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"alert.whypp.text"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>btnDstFolderOpen</name><operator>.</operator><name>setOnAction</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>event</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>Desktop</name><operator>.</operator><name>getDesktop</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>open</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>textFieldDstPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>textFieldDstPath</name><operator>.</operator><name>textProperty</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>observable</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>textFieldDstPath</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>File</name></type> <name>dstFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>textFieldDstPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>dstFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>dstFolder</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>btnDstFolderOpen</name><operator>.</operator><name>setDisable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>btnDstFolderOpen</name><operator>.</operator><name>setDisable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>loadPrefs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PostProcessorChecker</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>toJpgQ</name><parameter_list>(<parameter><decl><type><name>Float</name></type> <name>floatQuality</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%.0f"</literal></expr></argument>, <argument><expr><name>floatQuality</name> <operator>*</operator> <literal type="number">100f</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"%"</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setPlatformToogles</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>EPlatform</name></argument>&gt;</argument_list></name></type> <name>platformSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tgAndroid</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><call><name><name>platformSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>EPlatform</name><operator>.</operator><name>ANDROID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tgIos</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><call><name><name>platformSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>EPlatform</name><operator>.</operator><name>IOS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tgWindows</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><call><name><name>platformSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>EPlatform</name><operator>.</operator><name>WINDOWS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tgWeb</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><call><name><name>platformSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>EPlatform</name><operator>.</operator><name>WEB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setupLayout</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column1M</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column1M</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column2M</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column2M</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column3M</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column3M</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column4M</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column4M</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rootGridPane</name><operator>.</operator><name>getColumnConstraints</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>column1M</name></expr></argument>, <argument><expr><name>column2M</name></expr></argument>, <argument><expr><name>column3M</name></expr></argument>, <argument><expr><name>column4M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column1</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column1</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column2</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column2</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column3</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column3</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column4</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column4</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>gridPaneChoiceBoxes</name><operator>.</operator><name>getColumnConstraints</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>column1</name></expr></argument>, <argument><expr><name>column2</name></expr></argument>, <argument><expr><name>column3</name></expr></argument>, <argument><expr><name>column4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column1C</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column1C</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column2C</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column2C</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>gridPaneOptionsCheckboxes</name><operator>.</operator><name>getColumnConstraints</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>column1C</name></expr></argument>, <argument><expr><name>column2C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>gridPanePostProcessors</name><operator>.</operator><name>getColumnConstraints</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>column1C</name></expr></argument>, <argument><expr><name>column2C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column1D</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column1D</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column2D</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column2D</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column3D</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column3D</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ColumnConstraints</name></type> <name>column4D</name> <init>= <expr><operator>new</operator> <call><name>ColumnConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column4D</name><operator>.</operator><name>setPercentWidth</name></name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>gridPaneToggleGroup</name><operator>.</operator><name>getColumnConstraints</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>column1D</name></expr></argument>, <argument><expr><name>column2D</name></expr></argument>, <argument><expr><name>column3D</name></expr></argument>, <argument><expr><name>column4D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>saveToPrefs</name><parameter_list>(<parameter><decl><type><name>Arguments</name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>preferenceStore</name><operator>.</operator><name>save</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>loadPrefs</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Arguments</name></type> <name>args</name> <init>= <expr><call><name><name>preferenceStore</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>args</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>textFieldSrcPath</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>args</name><operator>.</operator><name>src</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>args</name><operator>.</operator><name>src</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>textFieldDstPath</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>args</name><operator>.</operator><name>dst</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>args</name><operator>.</operator><name>dst</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>scaleSlider</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name><name>Arguments</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>textFieldDp</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>args</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>scaleMode</name></name> <operator>==</operator> <name><name>EScaleMode</name><operator>.</operator><name>FACTOR</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>rbFactor</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>scaleSlider</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>textFieldDp</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>.</operator><name>scaleMode</name></name> <operator>==</operator> <name><name>EScaleMode</name><operator>.</operator><name>DP_WIDTH</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>rbDpWidth</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>.</operator><name>scaleMode</name></name> <operator>==</operator> <name><name>EScaleMode</name><operator>.</operator><name>DP_HEIGHT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>rbDpHeight</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>setPlatformToogles</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>platform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>choiceCompression</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>outputCompressionMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>choiceCompressionQuality</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><call><name>toJpgQ</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>compressionQuality</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>choiceRounding</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>roundingHandler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>choiceThreads</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>threadCount</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>choiceDownScale</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>downScalingAlgorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>choiceUpScale</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>upScalingAlgorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>cbSkipExisting</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>skipExistingFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cbSkipUpscaling</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>skipUpscaling</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cbAndroidIncludeLdpiTvdpi</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>includeAndroidLdpiTvdpi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cbAntiAliasing</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>enableAntiAliasing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cbMipmapInsteadDrawable</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>createMipMapInsteadOfDrawableDir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cbHaltOnError</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>haltOnError</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cbDryRun</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>dryRun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cbEnablePngCrush</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>enablePngCrush</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cbPostConvertWebp</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>postConvertWebp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cbEnableMozJpeg</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>enableMozJpeg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cbKeepUnoptimized</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>keepUnoptimizedFilesPostProcessor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cbIosCreateImageset</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>iosCreateImagesetFolders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cbCleanBeforeConvert</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>clearDirBeforeConvert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>guiAdvancedOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rbOptSimple</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><operator>!</operator><name><name>args</name><operator>.</operator><name>guiAdvancedOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Arguments</name></type> <name>getFromUI</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>skipValidation</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidArgumentException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><name><name>Arguments</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><name>scale</name> <operator>=</operator> <ternary><condition><expr><call><name><name>rbFactor</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>scaleSlider</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Float</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>textFieldDp</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skipValidation</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>InvalidArgumentException</name><argument_list>(
                        <argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"error.parse.dp"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>textFieldDp</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>EPlatform</name></argument>&gt;</argument_list></name></type> <name>platformSet</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>tgAndroid</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>platformSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>EPlatform</name><operator>.</operator><name>ANDROID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>tgIos</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>platformSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>EPlatform</name><operator>.</operator><name>IOS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>tgWindows</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>platformSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>EPlatform</name><operator>.</operator><name>WINDOWS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>tgWeb</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>platformSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>EPlatform</name><operator>.</operator><name>WEB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Arguments</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>Arguments</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>textFieldSrcPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>dstFolder</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>textFieldDstPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>textFieldDstPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>textFieldDstPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>scaleMode</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>rbFactor</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>EScaleMode</name><operator>.</operator><name>FACTOR</name></name></expr> </then><else>: <expr><ternary><condition><expr><call><name><name>rbDpWidth</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>EScaleMode</name><operator>.</operator><name>DP_WIDTH</name></name></expr> </then><else>: <expr><name><name>EScaleMode</name><operator>.</operator><name>DP_HEIGHT</name></name></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>platform</name></name><argument_list>(<argument><expr><name>platformSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>compression</name></name><argument_list>(<argument><expr><operator>(</operator><name>EOutputCompressionMode</name><operator>)</operator> <call><name><name>choiceCompression</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItem</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>toJpgQFloat</name><argument_list>(<argument><expr><call><name><name>choiceCompressionQuality</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>scaleRoundingStragy</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>RoundingHandler</name><operator>.</operator><name>Strategy</name></name><operator>)</operator> <call><name><name>choiceRounding</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>threadCount</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>choiceThreads</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>downScaleAlgorithm</name></name><argument_list>(<argument><expr><operator>(</operator><name>EScalingAlgorithm</name><operator>)</operator> <call><name><name>choiceDownScale</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>upScaleAlgorithm</name></name><argument_list>(<argument><expr><operator>(</operator><name>EScalingAlgorithm</name><operator>)</operator> <call><name><name>choiceUpScale</name><operator>.</operator><name>getSelectionModel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>skipExistingFiles</name></name><argument_list>(<argument><expr><call><name><name>cbSkipExisting</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>skipUpscaling</name></name><argument_list>(<argument><expr><call><name><name>cbSkipUpscaling</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>verboseLog</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>includeAndroidLdpiTvdpi</name></name><argument_list>(<argument><expr><call><name><name>cbAndroidIncludeLdpiTvdpi</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>haltOnError</name></name><argument_list>(<argument><expr><call><name><name>cbHaltOnError</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>createMipMapInsteadOfDrawableDir</name></name><argument_list>(<argument><expr><call><name><name>cbMipmapInsteadDrawable</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>antiAliasing</name></name><argument_list>(<argument><expr><call><name><name>cbAntiAliasing</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>dryRun</name></name><argument_list>(<argument><expr><call><name><name>cbDryRun</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>enablePngCrush</name></name><argument_list>(<argument><expr><call><name><name>cbEnablePngCrush</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>postConvertWebp</name></name><argument_list>(<argument><expr><call><name><name>cbPostConvertWebp</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>enableMozJpeg</name></name><argument_list>(<argument><expr><call><name><name>cbEnableMozJpeg</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>keepUnoptimizedFilesPostProcessor</name></name><argument_list>(<argument><expr><call><name><name>cbKeepUnoptimized</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>iosCreateImagesetFolders</name></name><argument_list>(<argument><expr><call><name><name>cbIosCreateImageset</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>guiAdvancedOptions</name></name><argument_list>(<argument><expr><call><name><name>rbOptAdvanced</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>clearDirBeforeConvert</name></name><argument_list>(<argument><expr><call><name><name>cbCleanBeforeConvert</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>skipParamValidation</name></name><argument_list>(<argument><expr><name>skipValidation</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>float</name></type> <name>toJpgQFloat</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>selectedItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>raw</name> <init>= <expr><call><name><name>selectedItem</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>raw</name> <operator>=</operator> <call><name><name>raw</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"%"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rawInt</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>float</name><operator>)</operator> <name>rawInt</name> <operator>/</operator> <literal type="number">100f</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>resetUIAfterExecution</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btnConvert</name><operator>.</operator><name>setDisable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textFieldConsole</name><operator>.</operator><name>setDisable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btnConvert</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"main.btn.convert"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrcForTest</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>srcFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>srcFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>textFieldSrcPath</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>srcFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>textFieldDstPath</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>textFieldDstPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>textFieldDstPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>textFieldDstPath</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>srcFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getNameForScale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>scaleString</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>scale</name> <operator>*</operator> <literal type="number">4f</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>scaleString</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="string">"0.75"</literal></expr>:</case>
                <return>return <expr><literal type="string">"ldpi / "</literal> <operator>+</operator> <call><name>getDpi</name><argument_list>(<argument><expr><name>scaleString</name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="string">"1.00"</literal></expr>:</case>
                <return>return <expr><literal type="string">"mdpi / 1x / "</literal> <operator>+</operator> <call><name>getDpi</name><argument_list>(<argument><expr><name>scaleString</name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="string">"1.50"</literal></expr>:</case>
                <return>return <expr><literal type="string">"hdpi / "</literal> <operator>+</operator> <call><name>getDpi</name><argument_list>(<argument><expr><name>scaleString</name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="string">"2.00"</literal></expr>:</case>
                <return>return <expr><literal type="string">"xhdpi / 2x / "</literal> <operator>+</operator> <call><name>getDpi</name><argument_list>(<argument><expr><name>scaleString</name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="string">"3.00"</literal></expr>:</case>
                <return>return <expr><literal type="string">"xxhdpi / 3x / "</literal> <operator>+</operator> <call><name>getDpi</name><argument_list>(<argument><expr><name>scaleString</name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="string">"4.00"</literal></expr>:</case>
                <return>return <expr><literal type="string">"xxxhdpi / "</literal> <operator>+</operator> <call><name>getDpi</name><argument_list>(<argument><expr><name>scaleString</name></expr></argument>)</argument_list></call></expr>;</return>
            <default>default:</default>
                <return>return <expr><call><name>getDpi</name><argument_list>(<argument><expr><name>scaleString</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDpi</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>scaleString</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%.0f"</literal></expr></argument>, <argument><expr><call><name><name>Float</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>scaleString</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">160</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"dpi"</literal></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>FolderPicker</name> <super_list><implements>implements <super><name><name>EventHandler</name><argument_list type="generic">&lt;<argument><name>ActionEvent</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DirectoryChooser</name></type> <name>directoryChooser</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TextField</name></type> <name>textFieldPath</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TextField</name></type> <name>dstTextFieldPath</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ResourceBundle</name></type> <name>bundle</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>FolderPicker</name><parameter_list>(<parameter><decl><type><name>DirectoryChooser</name></type> <name>directoryChooser</name></decl></parameter>, <parameter><decl><type><name>TextField</name></type> <name>textFieldPath</name></decl></parameter>, <parameter><decl><type><name>TextField</name></type> <name>dstTextFieldPath</name></decl></parameter>, <parameter><decl><type><name>ResourceBundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>directoryChooser</name></name> <operator>=</operator> <name>directoryChooser</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>textFieldPath</name></name> <operator>=</operator> <name>textFieldPath</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dstTextFieldPath</name></name> <operator>=</operator> <name>dstTextFieldPath</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bundle</name></name> <operator>=</operator> <name>bundle</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>handle</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>directoryChooser</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"main.dirchooser.titel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>textFieldPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>dir</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name><name>dir</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>dir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name><name>dir</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>

            <if_stmt><if>if <condition>(<expr><call><name><name>textFieldPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>dir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>dir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>directoryChooser</name><operator>.</operator><name>setInitialDirectory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.home"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>directoryChooser</name><operator>.</operator><name>setInitialDirectory</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>srcFile</name> <init>= <expr><call><name><name>directoryChooser</name><operator>.</operator><name>showDialog</name></name><argument_list>(<argument><expr><call><name><name>textFieldPath</name><operator>.</operator><name>getScene</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>srcFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>textFieldPath</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>srcFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>dstTextFieldPath</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>dstTextFieldPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>dstTextFieldPath</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>dstTextFieldPath</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>srcFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>PostProcessorChecker</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>pngcrushSupported</name> <init>= <expr><operator>new</operator> <call><name>PngCrushProcessor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSupported</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>mozJpegSupported</name> <init>= <expr><operator>new</operator> <call><name>MozJpegProcessor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSupported</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>webpSupported</name> <init>= <expr><operator>new</operator> <call><name>WebpProcessor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSupported</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>Platform</name><operator>.</operator><name>runLater</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
                <expr_stmt><expr><call><name><name>cbEnablePngCrush</name><operator>.</operator><name>setDisable</name></name><argument_list>(<argument><expr><operator>!</operator><name>pngcrushSupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cbEnableMozJpeg</name><operator>.</operator><name>setDisable</name></name><argument_list>(<argument><expr><operator>!</operator><name>mozJpegSupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cbPostConvertWebp</name><operator>.</operator><name>setDisable</name></name><argument_list>(<argument><expr><operator>!</operator><name>webpSupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>labelWhyPP</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><operator>!</operator><name>pngcrushSupported</name> <operator>||</operator> <operator>!</operator><name>mozJpegSupported</name> <operator>||</operator> <operator>!</operator><name>webpSupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
