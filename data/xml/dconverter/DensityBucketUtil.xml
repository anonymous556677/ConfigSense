<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/density-converter/src/main/java/at/favre/tools/dconvert/util/DensityBucketUtil.java"><comment type="block">/*
 *  Copyright 2016 Patrick Favre-Bulle
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>Arguments</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>EScaleMode</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>descriptors</name><operator>.</operator><name>DensityDescriptor</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Helps assembling needed densities to convert to
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>DensityBucketUtil</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>SVG_UPSCALE_FACTOR</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>DensityBucketUtil</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>DensityDescriptor</name></extends></parameter>&gt;</parameter_list> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>Dimension</name></argument>&gt;</argument_list></name></type> <name>getDensityBuckets</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></type> <name>densities</name></decl></parameter>, <parameter><decl><type><name>Dimension</name></type> <name>srcDimension</name></decl></parameter>, <parameter><decl><type><name>Arguments</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isNinePatch</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>isNinePatch</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>srcDimension</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><call><name><name>srcDimension</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>srcDimension</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <switch>switch <condition>(<expr><name><name>args</name><operator>.</operator><name>scaleMode</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>DP_WIDTH</name></expr>:</case>
                <return>return <expr><call><name>getDensityBucketsWithDpScale</name><argument_list>(<argument><expr><name>densities</name></expr></argument>, <argument><expr><name>srcDimension</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><name>DP_HEIGHT</name></expr>:</case>
                <return>return <expr><call><name>getDensityBucketsHeightDpScale</name><argument_list>(<argument><expr><name>densities</name></expr></argument>, <argument><expr><name>srcDimension</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</return>
            <default>default:</default>
            <case>case <expr><name>FACTOR</name></expr>:</case>
                <return>return <expr><call><name>getDensityBucketsWithFactorScale</name><argument_list>(<argument><expr><name>densities</name></expr></argument>, <argument><expr><name>srcDimension</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>DensityDescriptor</name></extends></parameter>&gt;</parameter_list> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>Dimension</name></argument>&gt;</argument_list></name></type> <name>getDensityBucketsWithDpScale</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></type> <name>densities</name></decl></parameter>, <parameter><decl><type><name>Dimension</name></type> <name>srcDimension</name></decl></parameter>, <parameter><decl><type><name>Arguments</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><name>scale</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>baseWidth</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>baseHeight</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>scaleFactor</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>Dimension</name></argument>&gt;</argument_list></name></type> <name>bucketMap</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>densities</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>density</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>baseWidth</name> <operator>*</operator> <name><name>density</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>srcDimension</name><operator>.</operator><name>width</name></name> <operator>||</operator> <operator>!</operator><name><name>args</name><operator>.</operator><name>skipUpscaling</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>density</name></decl></parameter></parameter_list> -&gt; <block>{
            <expr><call><name><name>bucketMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>density</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>baseWidth</name> <operator>*</operator> <name><name>density</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>baseHeight</name> <operator>*</operator> <name><name>density</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
        </block_content>}</block></function>)</block>;</class>
        <return>return <expr><name>bucketMap</name></expr>;</return>
    }

    private <function><type><specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>DensityDescriptor</name></extends></parameter>&gt;</parameter_list> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>Dimension</name></argument>&gt;</argument_list></name></type> <name>getDensityBucketsHeightDpScale</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></type> <name>densities</name></decl></parameter>, <parameter><decl><type><name>Dimension</name></type> <name>srcDimension</name></decl></parameter>, <parameter><decl><type><name>Arguments</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><name>scale</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>baseWidth</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>scaleFactor</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>baseHeight</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>Dimension</name></argument>&gt;</argument_list></name></type> <name>bucketMap</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>densities</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>density</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>baseHeight</name> <operator>*</operator> <name><name>density</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>srcDimension</name><operator>.</operator><name>height</name></name> <operator>||</operator> <operator>!</operator><name><name>args</name><operator>.</operator><name>skipUpscaling</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>density</name></decl></parameter></parameter_list> -&gt; <block>{
            <expr><call><name><name>bucketMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>density</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>baseWidth</name> <operator>*</operator> <name><name>density</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>baseHeight</name> <operator>*</operator> <name><name>density</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
        </block_content>}</block></function>)<empty_stmt>;</empty_stmt>
        <return>return <expr><name>bucketMap</name></expr>;</return>
    }

    private <function><type><specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>DensityDescriptor</name></extends></parameter>&gt;</parameter_list> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>Dimension</name></argument>&gt;</argument_list></name></type> <name>getDensityBucketsWithFactorScale</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></type> <name>densities</name></decl></parameter>, <parameter><decl><type><name>Dimension</name></type> <name>srcDimension</name></decl></parameter>, <parameter><decl><type><name>Arguments</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>baseWidth</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name>scale</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>baseHeight</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name>scale</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>Dimension</name></argument>&gt;</argument_list></name></type> <name>bucketMap</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>densities</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>density</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name>scale</name> <operator>&gt;=</operator> <name><name>density</name><operator>.</operator><name>scale</name></name> <operator>||</operator> <operator>!</operator><name><name>args</name><operator>.</operator><name>skipUpscaling</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>density</name></decl></parameter></parameter_list> -&gt; <block>{
            <expr><call><name><name>bucketMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>density</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>baseWidth</name> <operator>*</operator> <name><name>density</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>baseHeight</name> <operator>*</operator> <name><name>density</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
        </block_content>}</block></function>)<empty_stmt>;</empty_stmt>
        <return>return <expr><name>bucketMap</name></expr>;</return>
    }

    private <function><type><specifier>static</specifier> <name>Dimension</name></type> <name>getHqDimension</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>Arguments</name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Dimension</name></type> <name>srcDimension</name> <init>= <expr><call><name><name>ImageUtil</name><operator>.</operator><name>getImageDimension</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Dimension</name></type> <name>hqDimension</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>scaleMode</name></name> <operator>==</operator> <name><name>EScaleMode</name><operator>.</operator><name>FACTOR</name></name> <operator>&amp;&amp;</operator> <name><name>args</name><operator>.</operator><name>scale</name></name> <operator>&lt;</operator> <name>SVG_UPSCALE_FACTOR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>hqDimension</name> <operator>=</operator> <operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>SVG_UPSCALE_FACTOR</name> <operator>/</operator> <name><name>args</name><operator>.</operator><name>scale</name></name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>SVG_UPSCALE_FACTOR</name> <operator>/</operator> <name><name>args</name><operator>.</operator><name>scale</name></name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>.</operator><name>scaleMode</name></name> <operator>==</operator> <name><name>EScaleMode</name><operator>.</operator><name>DP_WIDTH</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>args</name><operator>.</operator><name>scale</name></name> <operator>*</operator> <name>SVG_UPSCALE_FACTOR</name> <operator>&lt;</operator> <name><name>srcDimension</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><name><name>args</name><operator>.</operator><name>scale</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name>SVG_UPSCALE_FACTOR</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>hqDimension</name> <operator>=</operator> <operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>scaleFactor</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>scaleFactor</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>.</operator><name>scaleMode</name></name> <operator>==</operator> <name><name>EScaleMode</name><operator>.</operator><name>DP_HEIGHT</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>args</name><operator>.</operator><name>scale</name></name> <operator>*</operator> <name>SVG_UPSCALE_FACTOR</name> <operator>&lt;</operator> <name><name>srcDimension</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><name><name>args</name><operator>.</operator><name>scale</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>height</name></name> <operator>*</operator> <name>SVG_UPSCALE_FACTOR</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>hqDimension</name> <operator>=</operator> <operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>scaleFactor</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>args</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>scaleFactor</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>srcDimension</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>hqDimension</name> <operator>=</operator> <name>srcDimension</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>hqDimension</name></expr>;</return>
    </block_content>}</block></function>
}
</unit>
