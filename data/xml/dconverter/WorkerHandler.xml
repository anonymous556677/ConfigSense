<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/density-converter/src/main/java/at/favre/tools/dconvert/WorkerHandler.java"><comment type="block">/*
 *  Copyright 2016 Patrick Favre-Bulle
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name></name>;</package>

<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>Arguments</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>IPlatformConverter</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>Result</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>postprocessing</name><operator>.</operator><name>IPostProcessor</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ArrayBlockingQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadPoolExecutor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Handles post processing tasks
 */</comment>
<class><specifier>public</specifier> class <name><name>WorkerHandler</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>processors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ExecutorService</name></type> <name>threadPool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Arguments</name></type> <name>arguments</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Callback</name></type> <name>callback</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>jobCount</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>WorkerHandler</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>processors</name></decl></parameter>, <parameter><decl><type><name>Arguments</name></type> <name>arguments</name></decl></parameter>, <parameter><decl><type><name>Callback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>processors</name></name> <operator>=</operator> <name>processors</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadPool</name></name> <operator>=</operator> <operator>new</operator> <call><name>ThreadPoolExecutor</name><argument_list>(<argument><expr><name><name>arguments</name><operator>.</operator><name>threadCount</name></name></expr></argument>, <argument><expr><name><name>arguments</name><operator>.</operator><name>threadCount</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayBlockingQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>arguments</name></name> <operator>=</operator> <name>arguments</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>allFiles</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>jobCount</name></name> <operator>=</operator> <call><name><name>allFiles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>processors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>InternalCallback</name></type> <name>internalCallback</name> <init>= <expr><operator>new</operator> <call><name>InternalCallback</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>T</name></type> <name>processor</name> <range>: <expr><name>processors</name></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>File</name></type> <name>fileToProcess</name> <range>: <expr><name>allFiles</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>threadPool</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Worker</name><argument_list>(<argument><expr><name>fileToProcess</name></expr></argument>, <argument><expr><name>processor</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>, <argument><expr><name>internalCallback</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>threadPool</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>jobCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onFinished</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <class><specifier>private</specifier> class <name>Worker</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>unprocessedFile</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>T</name></type> <name>processor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>InternalCallback</name></type> <name>callback</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Arguments</name></type> <name>arguments</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Worker</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>unprocessedFile</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>processors</name></decl></parameter>, <parameter><decl><type><name>Arguments</name></type> <name>arguments</name></decl></parameter>, <parameter><decl><type><name>InternalCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unprocessedFile</name></name> <operator>=</operator> <name>unprocessedFile</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>arguments</name></name> <operator>=</operator> <name>arguments</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>processor</name></name> <operator>=</operator> <name>processors</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Result</name></type> <name>result</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>IPostProcessor</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isInstance</name></name></name><argument_list>(<argument><expr><name>processor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>IPostProcessor</name><operator>)</operator> <name>processor</name><operator>)</operator><operator>.</operator><call><name>process</name><argument_list>(<argument><expr><name>unprocessedFile</name></expr></argument>, <argument><expr><name><name>arguments</name><operator>.</operator><name>keepUnoptimizedFilesPostProcessor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>IPlatformConverter</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isInstance</name></name></name><argument_list>(<argument><expr><name>processor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>IPlatformConverter</name><operator>)</operator> <name>processor</name><operator>)</operator><operator>.</operator><call><name>convert</name><argument_list>(<argument><expr><name>unprocessedFile</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onJobFinished</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>InternalCallback</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>currentJobCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Exception</name></argument>&gt;</argument_list></name></type> <name>exceptionList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Callback</name></type> <name>callback</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuilder</name></type> <name>logBuilder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>canceled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>InternalCallback</name><parameter_list>(<parameter><decl><type><name>Callback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>synchronized</specifier> <name>void</name></type> <name>onJobFinished</name><parameter_list>(<parameter><decl><type><name>Result</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>canceled</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>currentJobCount</name><operator>++</operator></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>log</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>log</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>processedFiles</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>files</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>processedFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>exception</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>exceptionList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><name><name>arguments</name><operator>.</operator><name>haltOnError</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>canceled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>threadPool</name><operator>.</operator><name>shutdownNow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onFinished</name></name><argument_list>(<argument><expr><name>currentJobCount</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>logBuilder</name></expr></argument>, <argument><expr><name>exceptionList</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>canceled</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>currentJobCount</name> <operator>==</operator> <name>jobCount</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onFinished</name></name><argument_list>(<argument><expr><name>currentJobCount</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>logBuilder</name></expr></argument>, <argument><expr><name>exceptionList</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onProgress</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>currentJobCount</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>jobCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <interface><specifier>public</specifier> interface <name>Callback</name> <block>{
        <function_decl><type><name>void</name></type> <name>onProgress</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>percent</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onFinished</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>finishedJobs</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>outFiles</name></decl></parameter>, <parameter><decl><type><name>StringBuilder</name></type> <name>log</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Exception</name></argument>&gt;</argument_list></name></type> <name>exceptions</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>haltedDuringProcess</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>
}</block></class>
</unit>
