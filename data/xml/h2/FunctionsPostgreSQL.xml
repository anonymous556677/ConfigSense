<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/mode/FunctionsPostgreSQL.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mode</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>StringJoiner</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Parser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>RightOwner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ValueExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>CurrentGeneralValueSpecification</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>server</name><operator>.</operator><name>pg</name><operator>.</operator><name>PgServer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBigint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBoolean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueInteger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueVarchar</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Functions for {@link org.h2.engine.Mode.ModeEnum#PostgreSQL} compatibility
 * mode.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>FunctionsPostgreSQL</name> <super_list><extends>extends <super><name>ModeFunction</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CURRENT_DATABASE</name> <init>= <expr><literal type="number">3001</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CURRTID2</name> <init>= <expr><name>CURRENT_DATABASE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FORMAT_TYPE</name> <init>= <expr><name>CURRTID2</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HAS_DATABASE_PRIVILEGE</name> <init>= <expr><name>FORMAT_TYPE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HAS_SCHEMA_PRIVILEGE</name> <init>= <expr><name>HAS_DATABASE_PRIVILEGE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HAS_TABLE_PRIVILEGE</name> <init>= <expr><name>HAS_SCHEMA_PRIVILEGE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LASTVAL</name> <init>= <expr><name>HAS_TABLE_PRIVILEGE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION</name> <init>= <expr><name>LASTVAL</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>OBJ_DESCRIPTION</name> <init>= <expr><name>VERSION</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PG_ENCODING_TO_CHAR</name> <init>= <expr><name>OBJ_DESCRIPTION</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PG_GET_EXPR</name> <init>= <expr><name>PG_ENCODING_TO_CHAR</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PG_GET_INDEXDEF</name> <init>= <expr><name>PG_GET_EXPR</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PG_GET_USERBYID</name> <init>= <expr><name>PG_GET_INDEXDEF</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PG_POSTMASTER_START_TIME</name> <init>= <expr><name>PG_GET_USERBYID</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PG_RELATION_SIZE</name> <init>= <expr><name>PG_POSTMASTER_START_TIME</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PG_TABLE_IS_VISIBLE</name> <init>= <expr><name>PG_RELATION_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SET_CONFIG</name> <init>= <expr><name>PG_TABLE_IS_VISIBLE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ARRAY_TO_STRING</name> <init>= <expr><name>SET_CONFIG</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PG_STAT_GET_NUMSCANS</name> <init>= <expr><name>ARRAY_TO_STRING</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TO_DATE</name> <init>= <expr><name>PG_STAT_GET_NUMSCANS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TO_TIMESTAMP</name> <init>= <expr><name>TO_DATE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FunctionInfo</name></argument>&gt;</argument_list></name></type> <name>FUNCTIONS</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"CURRENT_DATABASE"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"CURRENT_DATABASE"</literal></expr></argument>, <argument><expr><name>CURRENT_DATABASE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"CURRTID2"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"CURRTID2"</literal></expr></argument>, <argument><expr><name>CURRTID2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"FORMAT_TYPE"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"FORMAT_TYPE"</literal></expr></argument>, <argument><expr><name>FORMAT_TYPE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"HAS_DATABASE_PRIVILEGE"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"HAS_DATABASE_PRIVILEGE"</literal></expr></argument>, <argument><expr><name>HAS_DATABASE_PRIVILEGE</name></expr></argument>,
                <argument><expr><name>VAR_ARGS</name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"HAS_SCHEMA_PRIVILEGE"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"HAS_SCHEMA_PRIVILEGE"</literal></expr></argument>, <argument><expr><name>HAS_SCHEMA_PRIVILEGE</name></expr></argument>, <argument><expr><name>VAR_ARGS</name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"HAS_TABLE_PRIVILEGE"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"HAS_TABLE_PRIVILEGE"</literal></expr></argument>, <argument><expr><name>HAS_TABLE_PRIVILEGE</name></expr></argument>, <argument><expr><name>VAR_ARGS</name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"LASTVAL"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"LASTVAL"</literal></expr></argument>, <argument><expr><name>LASTVAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"VERSION"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"VERSION"</literal></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"OBJ_DESCRIPTION"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"OBJ_DESCRIPTION"</literal></expr></argument>, <argument><expr><name>OBJ_DESCRIPTION</name></expr></argument>, <argument><expr><name>VAR_ARGS</name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"PG_ENCODING_TO_CHAR"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"PG_ENCODING_TO_CHAR"</literal></expr></argument>, <argument><expr><name>PG_ENCODING_TO_CHAR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"PG_GET_EXPR"</literal></expr></argument>, <comment type="line">//</comment>
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"PG_GET_EXPR"</literal></expr></argument>, <argument><expr><name>PG_GET_EXPR</name></expr></argument>, <argument><expr><name>VAR_ARGS</name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"PG_GET_INDEXDEF"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"PG_GET_INDEXDEF"</literal></expr></argument>, <argument><expr><name>PG_GET_INDEXDEF</name></expr></argument>, <argument><expr><name>VAR_ARGS</name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"PG_GET_USERBYID"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"PG_GET_USERBYID"</literal></expr></argument>, <argument><expr><name>PG_GET_USERBYID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"PG_POSTMASTER_START_TIME"</literal></expr></argument>, <comment type="line">//</comment>
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"PG_POSTMASTER_START_TIME"</literal></expr></argument>, <argument><expr><name>PG_POSTMASTER_START_TIME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
                        <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"PG_RELATION_SIZE"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"PG_RELATION_SIZE"</literal></expr></argument>, <argument><expr><name>PG_RELATION_SIZE</name></expr></argument>, <argument><expr><name>VAR_ARGS</name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"PG_TABLE_IS_VISIBLE"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"PG_TABLE_IS_VISIBLE"</literal></expr></argument>, <argument><expr><name>PG_TABLE_IS_VISIBLE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"SET_CONFIG"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"SET_CONFIG"</literal></expr></argument>, <argument><expr><name>SET_CONFIG</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"ARRAY_TO_STRING"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"ARRAY_TO_STRING"</literal></expr></argument>, <argument><expr><name>ARRAY_TO_STRING</name></expr></argument>, <argument><expr><name>VAR_ARGS</name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"PG_STAT_GET_NUMSCANS"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"PG_STAT_GET_NUMSCANS"</literal></expr></argument>, <argument><expr><name>PG_STAT_GET_NUMSCANS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"TO_DATE"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"TO_DATE"</literal></expr></argument>, <argument><expr><name>TO_DATE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"TO_TIMESTAMP"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <call><name>FunctionInfo</name><argument_list>(<argument><expr><literal type="string">"TO_TIMESTAMP"</literal></expr></argument>, <argument><expr><name>TO_TIMESTAMP</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Returns mode-specific function for a given name, or {@code null}.
     *
     * @param upperName
     *            the upper-case name of a function
     * @return the function with specified name or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FunctionsPostgreSQL</name></type> <name>getFunction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>upperName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>FunctionInfo</name></type> <name>info</name> <init>= <expr><call><name><name>FUNCTIONS</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>FunctionsPostgreSQL</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>private</specifier> <name>FunctionsPostgreSQL</name><parameter_list>(<parameter><decl><type><name>FunctionInfo</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>checkParameterCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>HAS_DATABASE_PRIVILEGE</name></expr>:</case>
        <case>case <expr><name>HAS_SCHEMA_PRIVILEGE</name></expr>:</case>
        <case>case <expr><name>HAS_TABLE_PRIVILEGE</name></expr>:</case>
            <expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>OBJ_DESCRIPTION</name></expr>:</case>
        <case>case <expr><name>PG_RELATION_SIZE</name></expr>:</case>
            <expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PG_GET_INDEXDEF</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_PARAMETER_COUNT_2</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"1, 3"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return;</return>
        <case>case <expr><name>PG_GET_EXPR</name></expr>:</case>
        <case>case <expr><name>ARRAY_TO_STRING</name></expr>:</case>
            <expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><name>min</name> <operator>||</operator> <name>len</name></argument> &gt;</argument_list></name> <name>max</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_PARAMETER_COUNT_2</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>min</name> <operator>+</operator> <literal type="string">".."</literal> <operator>+</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>optimize</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>CURRENT_DATABASE</name></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>CurrentGeneralValueSpecification</name><argument_list>(<argument><expr><name><name>CurrentGeneralValueSpecification</name><operator>.</operator><name>CURRENT_CATALOG</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
        <default>default:</default>
            <decl_stmt><decl><type><name>boolean</name></type> <name>allConst</name> <init>= <expr><call><name>optimizeArguments</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>returnDataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>allConst</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></switch>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name>getArgumentsValues</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>v0</name> <init>= <expr><call><name>getNullOrValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>v1</name> <init>= <expr><call><name>getNullOrValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>v2</name> <init>= <expr><call><name>getNullOrValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>result</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>CURRTID2</name></expr>:</case>
            <comment type="line">// Not implemented</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FORMAT_TYPE</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><name>v0</name> <operator>!=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> ?</condition><then> <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>PgServer</name><operator>.</operator><name>formatType</name></name><argument_list>(<argument><expr><call><name><name>v0</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> <comment type="line">//</comment>
                    </then><else>: <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>HAS_DATABASE_PRIVILEGE</name></expr>:</case>
        <case>case <expr><name>HAS_SCHEMA_PRIVILEGE</name></expr>:</case>
        <case>case <expr><name>HAS_TABLE_PRIVILEGE</name></expr>:</case>
        <case>case <expr><name>PG_TABLE_IS_VISIBLE</name></expr>:</case>
            <comment type="line">// Not implemented</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueBoolean</name><operator>.</operator><name>TRUE</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>LASTVAL</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getLastIdentity</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>CURRENT_SEQUENCE_VALUE_IS_NOT_DEFINED_IN_SESSION_1</name></name></expr></argument>, <argument><expr><literal type="string">"lastval()"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>result</name><operator>.</operator><name>convertToBigint</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>VERSION</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ValueVarchar</name>
                    <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"PostgreSQL "</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>PG_VERSION</name></name> <operator>+</operator> <literal type="string">" server protocol using H2 "</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>FULL_VERSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>OBJ_DESCRIPTION</name></expr>:</case>
            <comment type="line">// Not implemented</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PG_ENCODING_TO_CHAR</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>encodingToChar</name><argument_list>(<argument><expr><call><name><name>v0</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PG_GET_EXPR</name></expr>:</case>
            <comment type="line">// Not implemented</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PG_GET_INDEXDEF</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>getIndexdef</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>v0</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PG_GET_USERBYID</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getUserbyid</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>v0</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PG_POSTMASTER_START_TIME</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemSession</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSessionStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PG_RELATION_SIZE</name></expr>:</case>
            <comment type="line">// Optional second argument is ignored</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>relationSize</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SET_CONFIG</name></expr>:</case>
            <comment type="line">// Not implemented</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>v1</name><operator>.</operator><name>convertTo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ARRAY_TO_STRING</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>v0</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name> <operator>||</operator> <name>v1</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>StringJoiner</name></type> <name>joiner</name> <init>= <expr><operator>new</operator> <call><name>StringJoiner</name><argument_list>(<argument><expr><call><name><name>v1</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>v0</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"ARRAY_TO_STRING array"</literal></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>nullString</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>v2</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>nullString</name> <operator>=</operator> <call><name><name>v2</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Value</name></type> <name>v</name> <range>: <expr><operator>(</operator><operator>(</operator><name>ValueArray</name><operator>)</operator> <name>v0</name><operator>)</operator><operator>.</operator><call><name>getList</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>joiner</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nullString</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>joiner</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>nullString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>joiner</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PG_STAT_GET_NUMSCANS</name></expr>:</case>
            <comment type="line">// Not implemented</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TO_DATE</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ToDateParser</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>v0</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v1</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>convertToDate</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TO_TIMESTAMP</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ToDateParser</name><operator>.</operator><name>toTimestampTz</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>v0</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v1</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>encodingToChar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
            <return>return <expr><literal type="string">"SQL_ASCII"</literal></expr>;</return>
        <case>case <expr><literal type="number">6</literal></expr>:</case>
            <return>return <expr><literal type="string">"UTF8"</literal></expr>;</return>
        <case>case <expr><literal type="number">8</literal></expr>:</case>
            <return>return <expr><literal type="string">"LATIN1"</literal></expr>;</return>
        <default>default:</default>
            <comment type="line">// This function returns empty string for unknown encodings</comment>
            <return>return <expr><ternary><condition><expr><name>code</name> <operator>&lt;</operator> <literal type="number">40</literal></expr> ?</condition><then> <expr><literal type="string">"UTF8"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Value</name></type> <name>getIndexdef</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indexId</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>ordinalPosition</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>pretty</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllSchemasNoMeta</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Index</name></type> <name>index</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllIndexes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>indexId</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>index</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isHidden</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>ordinal</name></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ordinalPosition</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>(</operator><name>ordinal</name> <operator>=</operator> <call><name><name>ordinalPosition</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <return>return <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ordinal</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ordinal</name> <operator>&lt;=</operator> <operator>(</operator><name>columns</name> <operator>=</operator> <call><name><name>index</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>length</name></expr>)</condition> <block>{<block_content>
                            <return>return <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>columns</name><index>[<expr><name>ordinal</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getUserbyid</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>User</name></type> <name>u</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
        <label><name>search</name>:</label> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>u</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>uid</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>u</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break <name>search</name>;</break>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>u</name><operator>.</operator><name>isAdmin</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>RightOwner</name></type> <name>rightOwner</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllUsersAndRoles</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>rightOwner</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>uid</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>rightOwner</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <break>break <name>search</name>;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><literal type="string">"unknown (OID="</literal> <operator>+</operator> <name>uid</name> <operator>+</operator> <literal type="char">')'</literal></expr>;</return>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSettings</name><argument_list>()</argument_list></call><operator>.</operator><name>databaseToLower</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>toLowerEnglish</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Value</name></type> <name>relationSize</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>tableOidOrName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Table</name></type> <name>t</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>tableOidOrName</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><call><name><name>tableOidOrName</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllSchemasNoMeta</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>tid</name> <operator>==</operator> <call><name><name>table</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>new</operator> <call><name>Parser</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>parseTableName</name><argument_list>(<argument><expr><call><name><name>tableOidOrName</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>getDiskSpaceUsed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
