<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/table/InformationSchemaTable.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>IntervalQualifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>Trigger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Command</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Parser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>Constraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>Constraint</name><operator>.</operator><name>Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintCheck</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintDomain</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintReferential</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintUnique</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>QueryStatisticsData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Right</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>RightOwner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Role</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name><operator>.</operator><name>State</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Setting</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionVisitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ValueExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>MetaIndex</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>FileStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>MVStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>db</name><operator>.</operator><name>Store</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SearchRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Constant</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Domain</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>FunctionAlias</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Sequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>TriggerObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>UserDefinedFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>FunctionAlias</name><operator>.</operator><name>JavaMethod</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>InDoubtTransaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>DateTimeUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>MathUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>NetworkConnectionInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZoneProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>geometry</name><operator>.</operator><name>EWKTUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>CompareMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ExtTypeInfoEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ExtTypeInfoGeometry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ExtTypeInfoRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBigint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBoolean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueDouble</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueInteger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueToObjectConverter2</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueVarchar</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is responsible to build the INFORMATION_SCHEMA tables.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>InformationSchemaTable</name> <super_list><extends>extends <super><name>MetaTable</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CHARACTER_SET_NAME</name> <init>= <expr><literal type="string">"Unicode"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Standard table</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INFORMATION_SCHEMA_CATALOG_NAME</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Standard views</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CHECK_CONSTRAINTS</name> <init>= <expr><name>INFORMATION_SCHEMA_CATALOG_NAME</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>COLLATIONS</name> <init>= <expr><name>CHECK_CONSTRAINTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>COLUMNS</name> <init>= <expr><name>COLLATIONS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>COLUMN_PRIVILEGES</name> <init>= <expr><name>COLUMNS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTRAINT_COLUMN_USAGE</name> <init>= <expr><name>COLUMN_PRIVILEGES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DOMAINS</name> <init>= <expr><name>CONSTRAINT_COLUMN_USAGE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DOMAIN_CONSTRAINTS</name> <init>= <expr><name>DOMAINS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ELEMENT_TYPES</name> <init>= <expr><name>DOMAIN_CONSTRAINTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FIELDS</name> <init>= <expr><name>ELEMENT_TYPES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>KEY_COLUMN_USAGE</name> <init>= <expr><name>FIELDS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PARAMETERS</name> <init>= <expr><name>KEY_COLUMN_USAGE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>REFERENTIAL_CONSTRAINTS</name> <init>= <expr><name>PARAMETERS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ROUTINES</name> <init>= <expr><name>REFERENTIAL_CONSTRAINTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SCHEMATA</name> <init>= <expr><name>ROUTINES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SEQUENCES</name> <init>= <expr><name>SCHEMATA</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TABLES</name> <init>= <expr><name>SEQUENCES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TABLE_CONSTRAINTS</name> <init>= <expr><name>TABLES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TABLE_PRIVILEGES</name> <init>= <expr><name>TABLE_CONSTRAINTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TRIGGERS</name> <init>= <expr><name>TABLE_PRIVILEGES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VIEWS</name> <init>= <expr><name>TRIGGERS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Extensions</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANTS</name> <init>= <expr><name>VIEWS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ENUM_VALUES</name> <init>= <expr><name>CONSTANTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INDEXES</name> <init>= <expr><name>ENUM_VALUES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INDEX_COLUMNS</name> <init>= <expr><name>INDEXES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>IN_DOUBT</name> <init>= <expr><name>INDEX_COLUMNS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LOCKS</name> <init>= <expr><name>IN_DOUBT</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>QUERY_STATISTICS</name> <init>= <expr><name>LOCKS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RIGHTS</name> <init>= <expr><name>QUERY_STATISTICS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ROLES</name> <init>= <expr><name>RIGHTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SESSIONS</name> <init>= <expr><name>ROLES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SESSION_STATE</name> <init>= <expr><name>SESSIONS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SETTINGS</name> <init>= <expr><name>SESSION_STATE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SYNONYMS</name> <init>= <expr><name>SETTINGS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>USERS</name> <init>= <expr><name>SYNONYMS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The number of meta table types. Supported meta table types are
     * {@code 0..META_TABLE_TYPE_COUNT - 1}.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>META_TABLE_TYPE_COUNT</name> <init>= <expr><name>USERS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isView</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create a new metadata table.
     *
     * @param schema the schema
     * @param id the object id
     * @param type the meta table type
     */</comment>
    <constructor><specifier>public</specifier> <name>InformationSchemaTable</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>cols</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>indexColumnName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isView</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Standard table</comment>
        <case>case <expr><name>INFORMATION_SCHEMA_CATALOG_NAME</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"INFORMATION_SCHEMA_CATALOG_NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CATALOG_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <comment type="line">// Standard views</comment>
        <case>case <expr><name>CHECK_CONSTRAINTS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"CHECK_CONSTRAINTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHECK_CLAUSE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"CONSTRAINT_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>COLLATIONS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"COLLATIONS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PAD_ATTRIBUTE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"LANGUAGE_TAG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>COLUMNS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ORDINAL_POSITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_DEFAULT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_NULLABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_MAXIMUM_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_OCTET_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION_RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATETIME_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAXIMUM_CARDINALITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DTD_IDENTIFIER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_IDENTITY"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IDENTITY_GENERATION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IDENTITY_START"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IDENTITY_INCREMENT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IDENTITY_MAXIMUM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IDENTITY_MINIMUM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IDENTITY_CYCLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_GENERATED"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GENERATION_EXPRESSION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_SRID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IDENTITY_BASE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IDENTITY_CACHE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_ON_UPDATE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_VISIBLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_ON_NULL"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SELECTIVITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>COLUMN_PRIVILEGES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"COLUMN_PRIVILEGES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTOR"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTEE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PRIVILEGE_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_GRANTABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CONSTRAINT_COLUMN_USAGE</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_COLUMN_USAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DOMAINS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"DOMAINS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_MAXIMUM_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_OCTET_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION_RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATETIME_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_DEFAULT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAXIMUM_CARDINALITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DTD_IDENTIFIER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_SRID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_ON_UPDATE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PARENT_DOMAIN_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PARENT_DOMAIN_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PARENT_DOMAIN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"DOMAIN_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DOMAIN_CONSTRAINTS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_CONSTRAINTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_DEFERRABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INITIALLY_DEFERRED"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"DOMAIN_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ELEMENT_TYPES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"ELEMENT_TYPES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"OBJECT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"OBJECT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"OBJECT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"OBJECT_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLECTION_TYPE_IDENTIFIER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_MAXIMUM_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_OCTET_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION_RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATETIME_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAXIMUM_CARDINALITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DTD_IDENTIFIER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_SRID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELDS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"FIELDS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"OBJECT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"OBJECT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"OBJECT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"OBJECT_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ROW_IDENTIFIER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"FIELD_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ORDINAL_POSITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_MAXIMUM_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_OCTET_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION_RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATETIME_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAXIMUM_CARDINALITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DTD_IDENTIFIER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_SRID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>KEY_COLUMN_USAGE</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"KEY_COLUMN_USAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ORDINAL_POSITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"POSITION_IN_UNIQUE_CONSTRAINT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PARAMETERS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"PARAMETERS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SPECIFIC_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SPECIFIC_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SPECIFIC_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ORDINAL_POSITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PARAMETER_MODE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_RESULT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"AS_LOCATOR"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PARAMETER_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_MAXIMUM_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_OCTET_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION_RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATETIME_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAXIMUM_CARDINALITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DTD_IDENTIFIER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PARAMETER_DEFAULT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_SRID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>REFERENTIAL_CONSTRAINTS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"REFERENTIAL_CONSTRAINTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"UNIQUE_CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"UNIQUE_CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"UNIQUE_CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MATCH_OPTION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"UPDATE_RULE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DELETE_RULE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"CONSTRAINT_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ROUTINES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"ROUTINES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SPECIFIC_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SPECIFIC_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SPECIFIC_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ROUTINE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ROUTINE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ROUTINE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ROUTINE_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_MAXIMUM_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_OCTET_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION_RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATETIME_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAXIMUM_CARDINALITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DTD_IDENTIFIER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ROUTINE_BODY"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ROUTINE_DEFINITION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"EXTERNAL_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"EXTERNAL_LANGUAGE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PARAMETER_STYLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_DETERMINISTIC"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_SRID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SCHEMATA</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"SCHEMATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CATALOG_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SCHEMA_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SCHEMA_OWNER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_CHARACTER_SET_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_CHARACTER_SET_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_CHARACTER_SET_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SQL_PATH"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_COLLATION_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">// // MySQL</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SEQUENCES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"SEQUENCES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION_RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"START_VALUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MINIMUM_VALUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAXIMUM_VALUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INCREMENT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CYCLE_OPTION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"BASE_VALUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CACHE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"SEQUENCE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TABLES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"TABLES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_INSERTABLE_INTO"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COMMIT_ACTION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STORAGE_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"LAST_MODIFICATION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CLASS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ROW_COUNT_ESTIMATE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TABLE_CONSTRAINTS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"TABLE_CONSTRAINTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_DEFERRABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INITIALLY_DEFERRED"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ENFORCED"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TABLE_PRIVILEGES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"TABLE_PRIVILEGES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTOR"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTEE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PRIVILEGE_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_GRANTABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"WITH_HIERARCHY"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TRIGGERS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"TRIGGERS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TRIGGER_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TRIGGER_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TRIGGER_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"EVENT_MANIPULATION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"EVENT_OBJECT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"EVENT_OBJECT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"EVENT_OBJECT_TABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ACTION_ORIENTATION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ACTION_TIMING"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_ROLLBACK"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"JAVA_CLASS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"QUEUE_SIZE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NO_WAIT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"EVENT_OBJECT_TABLE"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>VIEWS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"VIEWS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"VIEW_DEFINITION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHECK_OPTION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_UPDATABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INSERTABLE_INTO"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_TRIGGER_UPDATABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_TRIGGER_DELETABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_TRIGGER_INSERTABLE_INTO"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STATUS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <comment type="line">// Extensions</comment>
        <case>case <expr><name>CONSTANTS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"CONSTANTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTANT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTANT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTANT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"VALUE_DEFINITION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_MAXIMUM_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_OCTET_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION_RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATETIME_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAXIMUM_CARDINALITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DTD_IDENTIFIER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY_SRID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"CONSTANT_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ENUM_VALUES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"ENUM_VALUES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"OBJECT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"OBJECT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"OBJECT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"OBJECT_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ENUM_IDENTIFIER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"VALUE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"VALUE_ORDINAL"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>INDEXES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"INDEXES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_TYPE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_GENERATED"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_CLASS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>INDEX_COLUMNS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"INDEX_COLUMNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ORDINAL_POSITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ORDERING_SPECIFICATION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NULL_ORDERING"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_UNIQUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>IN_DOUBT</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"IN_DOUBT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TRANSACTION_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TRANSACTION_STATE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>LOCKS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"LOCKS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SESSION_ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"LOCK_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>QUERY_STATISTICS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"QUERY_STATISTICS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SQL_STATEMENT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"EXECUTION_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MIN_EXECUTION_TIME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAX_EXECUTION_TIME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CUMULATIVE_EXECUTION_TIME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"AVERAGE_EXECUTION_TIME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STD_DEV_EXECUTION_TIME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MIN_ROW_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAX_ROW_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CUMULATIVE_ROW_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"AVERAGE_ROW_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STD_DEV_ROW_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RIGHTS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"RIGHTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTEE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTEETYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTEDROLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"RIGHTS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ROLES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"ROLES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ROLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SESSIONS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"SESSIONS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SESSION_ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"USER_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SERVER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CLIENT_ADDR"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CLIENT_INFO"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SESSION_START"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_TIMESTAMP_TZ</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ISOLATION_LEVEL"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"EXECUTING_STATEMENT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"EXECUTING_STATEMENT_START"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_TIMESTAMP_TZ</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONTAINS_UNCOMMITTED"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SESSION_STATE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"BLOCKER_ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SLEEP_SINCE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_TIMESTAMP_TZ</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SESSION_STATE</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"SESSION_STATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STATE_KEY"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STATE_COMMAND"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SETTINGS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"SETTINGS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SETTING_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SETTING_VALUE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SYNONYMS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"SYNONYMS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SYNONYM_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SYNONYM_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SYNONYM_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SYNONYM_FOR"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SYNONYM_FOR_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STATUS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"SYNONYM_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>USERS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"USERS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isView</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"USER_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_ADMIN"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>,
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name>setColumns</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>indexColumnName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>indexColumn</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>metaIndex</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>indexColumn</name> <operator>=</operator> <call><name>getColumn</name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>sysIdentifier</name></name><argument_list>(<argument><expr><name>indexColumnName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>indexCols</name> <init>= <expr><call><name><name>IndexColumn</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{ <expr><name><name>cols</name><index>[<expr><name>indexColumn</name></expr>]</index></name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>metaIndex</name> <operator>=</operator> <operator>new</operator> <call><name>MetaIndex</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>indexCols</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isView</name></name> <operator>=</operator> <name>isView</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>generateRows</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>SearchRow</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>SearchRow</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Value</name></type> <name>indexFrom</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>indexTo</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>indexColumn</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>indexFrom</name> <operator>=</operator> <call><name><name>first</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>indexColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>last</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>indexTo</name> <operator>=</operator> <call><name><name>last</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>indexColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>catalog</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Standard table</comment>
        <case>case <expr><name>INFORMATION_SCHEMA_CATALOG_NAME</name></expr>:</case>
            <expr_stmt><expr><call><name>informationSchemaCatalogName</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <comment type="line">// Standard views</comment>
        <case>case <expr><name>CHECK_CONSTRAINTS</name></expr>:</case>
            <expr_stmt><expr><call><name>checkConstraints</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>COLLATIONS</name></expr>:</case>
            <expr_stmt><expr><call><name>collations</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>COLUMNS</name></expr>:</case>
            <expr_stmt><expr><call><name>columns</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>COLUMN_PRIVILEGES</name></expr>:</case>
            <expr_stmt><expr><call><name>columnPrivileges</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CONSTRAINT_COLUMN_USAGE</name></expr>:</case>
            <expr_stmt><expr><call><name>constraintColumnUsage</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DOMAINS</name></expr>:</case>
            <expr_stmt><expr><call><name>domains</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DOMAIN_CONSTRAINTS</name></expr>:</case>
            <expr_stmt><expr><call><name>domainConstraints</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ELEMENT_TYPES</name></expr>:</case>
            <expr_stmt><expr><call><name>elementTypesFields</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>ELEMENT_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FIELDS</name></expr>:</case>
            <expr_stmt><expr><call><name>elementTypesFields</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>FIELDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>KEY_COLUMN_USAGE</name></expr>:</case>
            <expr_stmt><expr><call><name>keyColumnUsage</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PARAMETERS</name></expr>:</case>
            <expr_stmt><expr><call><name>parameters</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>REFERENTIAL_CONSTRAINTS</name></expr>:</case>
            <expr_stmt><expr><call><name>referentialConstraints</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ROUTINES</name></expr>:</case>
            <expr_stmt><expr><call><name>routines</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SCHEMATA</name></expr>:</case>
            <expr_stmt><expr><call><name>schemata</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SEQUENCES</name></expr>:</case>
            <expr_stmt><expr><call><name>sequences</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TABLES</name></expr>:</case>
            <expr_stmt><expr><call><name>tables</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TABLE_CONSTRAINTS</name></expr>:</case>
            <expr_stmt><expr><call><name>tableConstraints</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TABLE_PRIVILEGES</name></expr>:</case>
            <expr_stmt><expr><call><name>tablePrivileges</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TRIGGERS</name></expr>:</case>
            <expr_stmt><expr><call><name>triggers</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>VIEWS</name></expr>:</case>
            <expr_stmt><expr><call><name>views</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <comment type="line">// Extensions</comment>
        <case>case <expr><name>CONSTANTS</name></expr>:</case>
            <expr_stmt><expr><call><name>constants</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ENUM_VALUES</name></expr>:</case>
            <expr_stmt><expr><call><name>elementTypesFields</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>ENUM_VALUES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>INDEXES</name></expr>:</case>
            <expr_stmt><expr><call><name>indexes</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>INDEX_COLUMNS</name></expr>:</case>
            <expr_stmt><expr><call><name>indexes</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>IN_DOUBT</name></expr>:</case>
            <expr_stmt><expr><call><name>inDoubt</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>LOCKS</name></expr>:</case>
            <expr_stmt><expr><call><name>locks</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>QUERY_STATISTICS</name></expr>:</case>
            <expr_stmt><expr><call><name>queryStatistics</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RIGHTS</name></expr>:</case>
            <expr_stmt><expr><call><name>rights</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ROLES</name></expr>:</case>
            <expr_stmt><expr><call><name>roles</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SESSIONS</name></expr>:</case>
            <expr_stmt><expr><call><name>sessions</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SESSION_STATE</name></expr>:</case>
            <expr_stmt><expr><call><name>sessionState</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SETTINGS</name></expr>:</case>
            <expr_stmt><expr><call><name>settings</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SYNONYMS</name></expr>:</case>
            <expr_stmt><expr><call><name>synonyms</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>USERS</name></expr>:</case>
            <expr_stmt><expr><call><name>users</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <return>return <expr><name>rows</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>informationSchemaCatalogName</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// CATALOG_NAME</comment>
                <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkConstraints</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllConstraints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Type</name></type> <name>constraintType</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>CHECK</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>ConstraintCheck</name></type> <name>check</name> <init>= <expr><operator>(</operator><name>ConstraintCheck</name><operator>)</operator> <name>constraint</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>check</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>constraintType</name> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>DOMAIN</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>constraintName</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>constraintName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>checkConstraints</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>, <argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkConstraints</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Constraint</name></type> <name>constraint</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>constraintName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// CONSTRAINT_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// CONSTRAINT_SCHEMA</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// CONSTRAINT_NAME</comment>
                <argument><expr><name>constraintName</name></expr></argument>,
                <comment type="line">// CHECK_CLAUSE</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getExpression</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>, <argument><expr><name><name>Expression</name><operator>.</operator><name>WITHOUT_PARENTHESES</name></name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>collations</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>mainSchemaName</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>collations</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><literal type="string">"OFF"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Locale</name></type> <name>l</name> <range>: <expr><call><name><name>CompareMode</name><operator>.</operator><name>getCollationLocales</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>collations</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><call><name><name>CompareMode</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>l</name><operator>.</operator><name>toLanguageTag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>collations</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mainSchemaName</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>languageTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="string">"und"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>languageTag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>languageTag</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// COLLATION_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// COLLATION_SCHEMA</comment>
                <argument><expr><name>mainSchemaName</name></expr></argument>,
                <comment type="line">// COLLATION_NAME</comment>
                <argument><expr><name>name</name></expr></argument>,
                <comment type="line">// PAD_ATTRIBUTE</comment>
                <argument><expr><literal type="string">"NO PAD"</literal></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// LANGUAGE_TAG</comment>
                <argument><expr><name>languageTag</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>columns</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>mainSchemaName</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>collation</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>indexFrom</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>indexFrom</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>indexFrom</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tableName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getTableOrViewByName</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>columns</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>findLocalTempTable</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>columns</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>columns</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getLocalTempTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>columns</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>columns</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mainSchemaName</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>cols</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>cols</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition><incr/>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>columns</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>++</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>columns</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mainSchemaName</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>Column</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ordinalPosition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DataTypeInformation</name></type> <name>dt</name> <init>= <expr><call><name><name>DataTypeInformation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>characterSetCatalog</name></decl>, <decl><type ref="prev"/><name>characterSetSchema</name></decl>, <decl><type ref="prev"/><name>characterSetName</name></decl>, <decl><type ref="prev"/><name>collationName</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>dt</name><operator>.</operator><name>hasCharsetAndCollation</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>catalog</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetSchema</name> <operator>=</operator> <name>mainSchemaName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetName</name> <operator>=</operator> <name>CHARACTER_SET_NAME</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>collationName</name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>characterSetSchema</name> <operator>=</operator> <name>characterSetName</name> <operator>=</operator> <name>collationName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>Domain</name></type> <name>domain</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getDomain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>domainCatalog</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>domainSchema</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>domainName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>domain</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>domainCatalog</name> <operator>=</operator> <name>catalog</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>domainSchema</name> <operator>=</operator> <call><name><name>domain</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>domainName</name> <operator>=</operator> <call><name><name>domain</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>columnDefault</name></decl>, <decl><type ref="prev"/><name>isGenerated</name></decl>, <decl><type ref="prev"/><name>generationExpression</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>isIdentity</name></decl>, <decl><type ref="prev"/><name>identityGeneration</name></decl>, <decl><type ref="prev"/><name>identityCycle</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>identityStart</name></decl>, <decl><type ref="prev"/><name>identityIncrement</name></decl>, <decl><type ref="prev"/><name>identityMaximum</name></decl>, <decl><type ref="prev"/><name>identityMinimum</name></decl>, <decl><type ref="prev"/><name>identityBase</name></decl>, <decl><type ref="prev"/><name>identityCache</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Sequence</name></type> <name>sequence</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getSequence</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>columnDefault</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>isGenerated</name> <operator>=</operator> <literal type="string">"NEVER"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>generationExpression</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>isIdentity</name> <operator>=</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>identityGeneration</name> <operator>=</operator> <ternary><condition><expr><call><name><name>c</name><operator>.</operator><name>isGeneratedAlways</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"ALWAYS"</literal></expr> </then><else>: <expr><literal type="string">"BY DEFAULT"</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>identityStart</name> <operator>=</operator> <call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getStartValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>identityIncrement</name> <operator>=</operator> <call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getIncrement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>identityMaximum</name> <operator>=</operator> <call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getMaxValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>identityMinimum</name> <operator>=</operator> <call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getMinValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Sequence</name><operator>.</operator><name>Cycle</name></name></type> <name>cycle</name> <init>= <expr><call><name><name>sequence</name><operator>.</operator><name>getCycle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>identityCycle</name> <operator>=</operator> <ternary><condition><expr><call><name><name>cycle</name><operator>.</operator><name>isCycle</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>identityBase</name> <operator>=</operator> <ternary><condition><expr><name>cycle</name> <operator>!=</operator> <name><name>Sequence</name><operator>.</operator><name>Cycle</name><operator>.</operator><name>EXHAUSTED</name></name></expr> ?</condition><then> <expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getBaseValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>identityCache</name> <operator>=</operator> <call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getCacheSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>isGenerated</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>columnDefault</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>isGenerated</name> <operator>=</operator> <literal type="string">"ALWAYS"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>generationExpression</name> <operator>=</operator> <call><name><name>c</name><operator>.</operator><name>getDefaultSQL</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>columnDefault</name> <operator>=</operator> <call><name><name>c</name><operator>.</operator><name>getDefaultSQL</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>isGenerated</name> <operator>=</operator> <literal type="string">"NEVER"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>generationExpression</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>isIdentity</name> <operator>=</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>identityGeneration</name> <operator>=</operator> <name>identityCycle</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>identityStart</name> <operator>=</operator> <name>identityIncrement</name> <operator>=</operator> <name>identityMaximum</name> <operator>=</operator> <name>identityMinimum</name> <operator>=</operator> <name>identityBase</name> <operator>=</operator> <name>identityCache</name>
                    <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// TABLE_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// TABLE_SCHEMA</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// TABLE_NAME</comment>
                <argument><expr><name>tableName</name></expr></argument>,
                <comment type="line">// COLUMN_NAME</comment>
                <argument><expr><call><name><name>c</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// ORDINAL_POSITION</comment>
                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ordinalPosition</name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// COLUMN_DEFAULT</comment>
                <argument><expr><name>columnDefault</name></expr></argument>,
                <comment type="line">// IS_NULLABLE</comment>
                <argument><expr><ternary><condition><expr><call><name><name>c</name><operator>.</operator><name>isNullable</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// DATA_TYPE</comment>
                <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><name><name>dt</name><operator>.</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// CHARACTER_MAXIMUM_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_OCTET_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecision</name></name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION_RADIX</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecisionRadix</name></name></expr></argument>,
                <comment type="line">// NUMERIC_SCALE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericScale</name></name></expr></argument>,
                <comment type="line">// DATETIME_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>datetimePrecision</name></name></expr></argument>,
                <comment type="line">// INTERVAL_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalType</name></name></expr></argument>,
                <comment type="line">// INTERVAL_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_SET_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_NAME</comment>
                <argument><expr><name>characterSetName</name></expr></argument>,
                <comment type="line">// COLLATION_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// COLLATION_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// COLLATION_NAME</comment>
                <argument><expr><name>collationName</name></expr></argument>,
                <comment type="line">// DOMAIN_CATALOG</comment>
                <argument><expr><name>domainCatalog</name></expr></argument>,
                <comment type="line">// DOMAIN_SCHEMA</comment>
                <argument><expr><name>domainSchema</name></expr></argument>,
                <comment type="line">// DOMAIN_NAME</comment>
                <argument><expr><name>domainName</name></expr></argument>,
                <comment type="line">// MAXIMUM_CARDINALITY</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>maximumCardinality</name></name></expr></argument>,
                <comment type="line">// DTD_IDENTIFIER</comment>
                <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>ordinalPosition</name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// IS_IDENTITY</comment>
                <argument><expr><name>isIdentity</name></expr></argument>,
                <comment type="line">// IDENTITY_GENERATION</comment>
                <argument><expr><name>identityGeneration</name></expr></argument>,
                <comment type="line">// IDENTITY_START</comment>
                <argument><expr><name>identityStart</name></expr></argument>,
                <comment type="line">// IDENTITY_INCREMENT</comment>
                <argument><expr><name>identityIncrement</name></expr></argument>,
                <comment type="line">// IDENTITY_MAXIMUM</comment>
                <argument><expr><name>identityMaximum</name></expr></argument>,
                <comment type="line">// IDENTITY_MINIMUM</comment>
                <argument><expr><name>identityMinimum</name></expr></argument>,
                <comment type="line">// IDENTITY_CYCLE</comment>
                <argument><expr><name>identityCycle</name></expr></argument>,
                <comment type="line">// IS_GENERATED</comment>
                <argument><expr><name>isGenerated</name></expr></argument>,
                <comment type="line">// GENERATION_EXPRESSION</comment>
                <argument><expr><name>generationExpression</name></expr></argument>,
                <comment type="line">// DECLARED_DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredDataType</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericPrecision</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_SCALE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericScale</name></name></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// GEOMETRY_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometryType</name></name></expr></argument>,
                <comment type="line">// GEOMETRY_SRID</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometrySrid</name></name></expr></argument>,
                <comment type="line">// IDENTITY_BASE</comment>
                <argument><expr><name>identityBase</name></expr></argument>,
                <comment type="line">// IDENTITY_CACHE</comment>
                <argument><expr><name>identityCache</name></expr></argument>,
                <comment type="line">// COLUMN_ON_UPDATE</comment>
                <argument><expr><call><name><name>c</name><operator>.</operator><name>getOnUpdateSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// IS_VISIBLE</comment>
                <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getVisible</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// DEFAULT_ON_NULL</comment>
                <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>isDefaultOnNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// SELECTIVITY</comment>
                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getSelectivity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name><name>c</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>columnPrivileges</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Right</name></type> <name>r</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllRights</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>DbObject</name></type> <name>object</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantedObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>object</name> <operator>instanceof</operator> <name>Table</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><operator>(</operator><name>Table</name><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>DbObject</name></type> <name>grantee</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantee</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getRightMask</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>addPrivileges</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>grantee</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>constraintColumnUsage</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllConstraints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>constraintColumnUsage</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>constraintColumnUsage</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Constraint</name></type> <name>constraint</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>CHECK</name></expr>:</case>
        <case>case <expr><name>DOMAIN</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>constraint</name><operator>.</operator><name>getExpression</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEverything</name><argument_list>(<argument><expr><call><name><name>ExpressionVisitor</name><operator>.</operator><name>getColumnsVisitor</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>addConstraintColumnUsage</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>REFERENTIAL</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getRefTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name> <range>: <expr><call><name><name>constraint</name><operator>.</operator><name>getReferencedColumns</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>addConstraintColumnUsage</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <comment type="line">//$FALL-THROUGH$</comment>
        <case>case <expr><name>PRIMARY_KEY</name></expr>:</case>
        <case>case <expr><name>UNIQUE</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name> <range>: <expr><call><name><name>constraint</name><operator>.</operator><name>getReferencedColumns</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>addConstraintColumnUsage</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>domains</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>mainSchemaName</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>collation</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Domain</name></type> <name>domain</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllDomains</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>domainName</name> <init>= <expr><call><name><name>domain</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>domainName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>domains</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>domains</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mainSchemaName</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><name>Domain</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>domainName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Domain</name></type> <name>parentDomain</name> <init>= <expr><call><name><name>domain</name><operator>.</operator><name>getDomain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name><name>domain</name><operator>.</operator><name>getDataType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DataTypeInformation</name></type> <name>dt</name> <init>= <expr><call><name><name>DataTypeInformation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>characterSetCatalog</name></decl>, <decl><type ref="prev"/><name>characterSetSchema</name></decl>, <decl><type ref="prev"/><name>characterSetName</name></decl>, <decl><type ref="prev"/><name>collationName</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>dt</name><operator>.</operator><name>hasCharsetAndCollation</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>catalog</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetSchema</name> <operator>=</operator> <name>mainSchemaName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetName</name> <operator>=</operator> <name>CHARACTER_SET_NAME</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>collationName</name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>characterSetSchema</name> <operator>=</operator> <name>characterSetName</name> <operator>=</operator> <name>collationName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// DOMAIN_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// DOMAIN_SCHEMA</comment>
                <argument><expr><call><name><name>domain</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// DOMAIN_NAME</comment>
                <argument><expr><name>domainName</name></expr></argument>,
                <comment type="line">// DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>dataType</name></name></expr></argument>,
                <comment type="line">// CHARACTER_MAXIMUM_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_OCTET_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_SET_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_NAME</comment>
                <argument><expr><name>characterSetName</name></expr></argument>,
                <comment type="line">// COLLATION_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// COLLATION_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// COLLATION_NAME</comment>
                <argument><expr><name>collationName</name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecision</name></name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION_RADIX</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecisionRadix</name></name></expr></argument>,
                <comment type="line">// NUMERIC_SCALE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericScale</name></name></expr></argument>,
                <comment type="line">// DATETIME_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>datetimePrecision</name></name></expr></argument>,
                <comment type="line">// INTERVAL_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalType</name></name></expr></argument>,
                <comment type="line">// INTERVAL_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalPrecision</name></name></expr></argument>,
                <comment type="line">// DOMAIN_DEFAULT</comment>
                <argument><expr><call><name><name>domain</name><operator>.</operator><name>getDefaultSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// MAXIMUM_CARDINALITY</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>maximumCardinality</name></name></expr></argument>,
                <comment type="line">// DTD_IDENTIFIER</comment>
                <argument><expr><literal type="string">"TYPE"</literal></expr></argument>,
                <comment type="line">// DECLARED_DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredDataType</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_PRECISION INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericPrecision</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_SCALE INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericScale</name></name></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// GEOMETRY_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometryType</name></name></expr></argument>,
                <comment type="line">// GEOMETRY_SRID INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometrySrid</name></name></expr></argument>,
                <comment type="line">// DOMAIN_ON_UPDATE</comment>
                <argument><expr><call><name><name>domain</name><operator>.</operator><name>getOnUpdateSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// PARENT_DOMAIN_CATALOG</comment>
                <argument><expr><ternary><condition><expr><name>parentDomain</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>catalog</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// PARENT_DOMAIN_SCHEMA</comment>
                <argument><expr><ternary><condition><expr><name>parentDomain</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>parentDomain</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// PARENT_DOMAIN_NAME</comment>
                <argument><expr><ternary><condition><expr><name>parentDomain</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>parentDomain</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name><name>domain</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>domainConstraints</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllConstraints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>DOMAIN</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ConstraintDomain</name></type> <name>domainConstraint</name> <init>= <expr><operator>(</operator><name>ConstraintDomain</name><operator>)</operator> <name>constraint</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Domain</name></type> <name>domain</name> <init>= <expr><call><name><name>domainConstraint</name><operator>.</operator><name>getDomain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>domainName</name> <init>= <expr><call><name><name>domain</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>domainName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>domainConstraints</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>domainConstraint</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>domainConstraints</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>,
            <parameter><decl><type><name>ConstraintDomain</name></type> <name>constraint</name></decl></parameter>, <parameter><decl><type><name>Domain</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>domainName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// CONSTRAINT_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// CONSTRAINT_SCHEMA</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// CONSTRAINT_NAME</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// DOMAIN_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// DOMAIN_SCHEMA</comment>
                <argument><expr><call><name><name>domain</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// DOMAIN_NAME</comment>
                <argument><expr><name>domainName</name></expr></argument>,
                <comment type="line">// IS_DEFERRABLE</comment>
                <argument><expr><literal type="string">"NO"</literal></expr></argument>,
                <comment type="line">// INITIALLY_DEFERRED</comment>
                <argument><expr><literal type="string">"NO"</literal></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>elementTypesFields</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>mainSchemaName</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>collation</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>schemaName</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>elementTypesFieldsForTable</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>,
                        <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>Domain</name></type> <name>domain</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllDomains</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>elementTypesFieldsRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>,
                        <argument><expr><call><name><name>domain</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"DOMAIN"</literal></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><call><name><name>domain</name><operator>.</operator><name>getDataType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>UserDefinedFunction</name></type> <name>userDefinedFunction</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllFunctionsAndAggregates</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>userDefinedFunction</name> <operator>instanceof</operator> <name>FunctionAlias</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>JavaMethod</name><index>[]</index></name></type> <name>methods</name></decl>;</decl_stmt>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><name>methods</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>FunctionAlias</name><operator>)</operator> <name>userDefinedFunction</name><operator>)</operator><operator>.</operator><call><name>getJavaMethods</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></catch></try>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>methods</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name><name>FunctionAlias</name><operator>.</operator><name>JavaMethod</name></name></type> <name>method</name> <init>= <expr><name><name>methods</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getDataType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>specificName</name> <init>= <expr><name>name</name> <operator>+</operator> <literal type="char">'_'</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>typeInfo</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>typeInfo</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>elementTypesFieldsRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>,
                                    <argument><expr><name>specificName</name></expr></argument>, <argument><expr><literal type="string">"ROUTINE"</literal></expr></argument>, <argument><expr><literal type="string">"RESULT"</literal></expr></argument>, <argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>columnList</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getColumnClasses</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>o</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><ternary><condition><expr><call><name><name>method</name><operator>.</operator><name>hasConnectionParam</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr>
                                </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>columnList</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <expr_stmt><expr><call><name>elementTypesFieldsRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>,
                                    <argument><expr><name>specificName</name></expr></argument>, <argument><expr><literal type="string">"ROUTINE"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>ValueToObjectConverter2</name><operator>.</operator><name>classToType</name></name><argument_list>(<argument><expr><name><name>columnList</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>Constant</name></type> <name>constant</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllConstants</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>elementTypesFieldsRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>,
                        <argument><expr><call><name><name>constant</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"CONSTANT"</literal></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><call><name><name>constant</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getLocalTempTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>elementTypesFieldsForTable</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>,
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>elementTypesFieldsForTable</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>mainSchemaName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>cols</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cols</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>elementTypesFieldsRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>,
                    <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>elementTypesFieldsRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>mainSchemaName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectSchema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectType</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>typeInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><call><name><name>typeInfo</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ENUM_VALUES</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>enumValues</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>objectSchema</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>, <argument><expr><name>objectType</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><name>typeInfo</name> <operator>=</operator> <operator>(</operator><name>TypeInfo</name><operator>)</operator> <call><name><name>typeInfo</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>dtdIdentifier</name> <init>= <expr><name>identifier</name> <operator>+</operator> <literal type="char">'_'</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ELEMENT_TYPES</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>elementTypes</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>objectSchema</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>,
                        <argument><expr><name>objectType</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>dtdIdentifier</name></expr></argument>, <argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>elementTypesFieldsRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>objectSchema</name></expr></argument>,
                    <argument><expr><name>objectName</name></expr></argument>, <argument><expr><name>objectType</name></expr></argument>, <argument><expr><name>dtdIdentifier</name></expr></argument>, <argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>ExtTypeInfoRow</name></type> <name>ext</name> <init>= <expr><operator>(</operator><name>ExtTypeInfoRow</name><operator>)</operator> <call><name><name>typeInfo</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ordinalPosition</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>ext</name><operator>.</operator><name>getFields</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>typeInfo</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>fieldName</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>dtdIdentifier</name> <init>= <expr><name>identifier</name> <operator>+</operator> <literal type="char">'_'</literal> <operator>+</operator> <operator>++</operator><name>ordinalPosition</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FIELDS</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>fields</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>objectSchema</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>,
                            <argument><expr><name>objectType</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>ordinalPosition</name></expr></argument>, <argument><expr><name>dtdIdentifier</name></expr></argument>, <argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>elementTypesFieldsRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>objectSchema</name></expr></argument>,
                        <argument><expr><name>objectName</name></expr></argument>, <argument><expr><name>objectType</name></expr></argument>, <argument><expr><name>dtdIdentifier</name></expr></argument>, <argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>elementTypes</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mainSchemaName</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectSchema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>collectionIdentifier</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>dtdIdentifier</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>typeInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DataTypeInformation</name></type> <name>dt</name> <init>= <expr><call><name><name>DataTypeInformation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>characterSetCatalog</name></decl>, <decl><type ref="prev"/><name>characterSetSchema</name></decl>, <decl><type ref="prev"/><name>characterSetName</name></decl>, <decl><type ref="prev"/><name>collationName</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>dt</name><operator>.</operator><name>hasCharsetAndCollation</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>catalog</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetSchema</name> <operator>=</operator> <name>mainSchemaName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetName</name> <operator>=</operator> <name>CHARACTER_SET_NAME</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>collationName</name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>characterSetSchema</name> <operator>=</operator> <name>characterSetName</name> <operator>=</operator> <name>collationName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// OBJECT_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// OBJECT_SCHEMA</comment>
                <argument><expr><name>objectSchema</name></expr></argument>,
                <comment type="line">// OBJECT_NAME</comment>
                <argument><expr><name>objectName</name></expr></argument>,
                <comment type="line">// OBJECT_TYPE</comment>
                <argument><expr><name>objectType</name></expr></argument>,
                <comment type="line">// COLLECTION_TYPE_IDENTIFIER</comment>
                <argument><expr><name>collectionIdentifier</name></expr></argument>,
                <comment type="line">// DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>dataType</name></name></expr></argument>,
                <comment type="line">// CHARACTER_MAXIMUM_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_OCTET_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_SET_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_NAME</comment>
                <argument><expr><name>characterSetName</name></expr></argument>,
                <comment type="line">// COLLATION_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// COLLATION_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// COLLATION_NAME</comment>
                <argument><expr><name>collationName</name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecision</name></name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION_RADIX</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecisionRadix</name></name></expr></argument>,
                <comment type="line">// NUMERIC_SCALE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericScale</name></name></expr></argument>,
                <comment type="line">// DATETIME_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>datetimePrecision</name></name></expr></argument>,
                <comment type="line">// INTERVAL_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalType</name></name></expr></argument>,
                <comment type="line">// INTERVAL_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalPrecision</name></name></expr></argument>,
                <comment type="line">// MAXIMUM_CARDINALITY</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>maximumCardinality</name></name></expr></argument>,
                <comment type="line">// DTD_IDENTIFIER</comment>
                <argument><expr><name>dtdIdentifier</name></expr></argument>,
                <comment type="line">// DECLARED_DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredDataType</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_PRECISION INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericPrecision</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_SCALE INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericScale</name></name></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// GEOMETRY_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometryType</name></name></expr></argument>,
                <comment type="line">// GEOMETRY_SRID INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometrySrid</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>fields</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mainSchemaName</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectSchema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rowIdentifier</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ordinalPosition</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dtdIdentifier</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>typeInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DataTypeInformation</name></type> <name>dt</name> <init>= <expr><call><name><name>DataTypeInformation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>characterSetCatalog</name></decl>, <decl><type ref="prev"/><name>characterSetSchema</name></decl>, <decl><type ref="prev"/><name>characterSetName</name></decl>, <decl><type ref="prev"/><name>collationName</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>dt</name><operator>.</operator><name>hasCharsetAndCollation</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>catalog</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetSchema</name> <operator>=</operator> <name>mainSchemaName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetName</name> <operator>=</operator> <name>CHARACTER_SET_NAME</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>collationName</name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>characterSetSchema</name> <operator>=</operator> <name>characterSetName</name> <operator>=</operator> <name>collationName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// OBJECT_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// OBJECT_SCHEMA</comment>
                <argument><expr><name>objectSchema</name></expr></argument>,
                <comment type="line">// OBJECT_NAME</comment>
                <argument><expr><name>objectName</name></expr></argument>,
                <comment type="line">// OBJECT_TYPE</comment>
                <argument><expr><name>objectType</name></expr></argument>,
                <comment type="line">// ROW_IDENTIFIER</comment>
                <argument><expr><name>rowIdentifier</name></expr></argument>,
                <comment type="line">// FIELD_NAME</comment>
                <argument><expr><name>fieldName</name></expr></argument>,
                <comment type="line">// ORDINAL_POSITION</comment>
                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ordinalPosition</name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>dataType</name></name></expr></argument>,
                <comment type="line">// CHARACTER_MAXIMUM_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_OCTET_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_SET_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_NAME</comment>
                <argument><expr><name>characterSetName</name></expr></argument>,
                <comment type="line">// COLLATION_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// COLLATION_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// COLLATION_NAME</comment>
                <argument><expr><name>collationName</name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecision</name></name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION_RADIX</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecisionRadix</name></name></expr></argument>,
                <comment type="line">// NUMERIC_SCALE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericScale</name></name></expr></argument>,
                <comment type="line">// DATETIME_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>datetimePrecision</name></name></expr></argument>,
                <comment type="line">// INTERVAL_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalType</name></name></expr></argument>,
                <comment type="line">// INTERVAL_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalPrecision</name></name></expr></argument>,
                <comment type="line">// MAXIMUM_CARDINALITY</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>maximumCardinality</name></name></expr></argument>,
                <comment type="line">// DTD_IDENTIFIER</comment>
                <argument><expr><name>dtdIdentifier</name></expr></argument>,
                <comment type="line">// DECLARED_DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredDataType</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_PRECISION INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericPrecision</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_SCALE INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericScale</name></name></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// GEOMETRY_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometryType</name></name></expr></argument>,
                <comment type="line">// GEOMETRY_SRID INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometrySrid</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>keyColumnUsage</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllConstraints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Constraint</name><operator>.</operator><name>Type</name></name></type> <name>constraintType</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>indexColumns</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>UNIQUE</name></name> <operator>||</operator> <name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>PRIMARY_KEY</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>indexColumns</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConstraintUnique</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getColumns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>indexColumns</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getColumns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>indexColumns</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>keyColumnUsage</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>, <argument><expr><name>constraintType</name></expr></argument>, <argument><expr><name>indexColumns</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>keyColumnUsage</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Constraint</name></type> <name>constraint</name></decl></parameter>,
            <parameter><decl><type><name><name>Constraint</name><operator>.</operator><name>Type</name></name></type> <name>constraintType</name></decl></parameter>, <parameter><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>indexColumns</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ConstraintUnique</name></type> <name>referenced</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>referenced</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getReferencedConstraint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>referenced</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>indexColumns</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>IndexColumn</name></type> <name>indexColumn</name> <init>= <expr><name><name>indexColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueInteger</name></type> <name>ordinalPosition</name> <init>= <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueInteger</name></type> <name>positionInUniqueConstraint</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>referenced</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Column</name></type> <name>c</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getRefColumns</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>column</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>refColumns</name> <init>= <expr><call><name><name>referenced</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>refColumns</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>refColumns</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name><name>column</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>positionInUniqueConstraint</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// CONSTRAINT_CATALOG</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// CONSTRAINT_SCHEMA</comment>
                    <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// CONSTRAINT_NAME</comment>
                    <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_CATALOG</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// TABLE_SCHEMA</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_NAME</comment>
                    <argument><expr><name>tableName</name></expr></argument>,
                    <comment type="line">// COLUMN_NAME</comment>
                    <argument><expr><name><name>indexColumn</name><operator>.</operator><name>columnName</name></name></expr></argument>,
                    <comment type="line">// ORDINAL_POSITION</comment>
                    <argument><expr><name>ordinalPosition</name></expr></argument>,
                    <comment type="line">// POSITION_IN_UNIQUE_CONSTRAINT</comment>
                    <argument><expr><name>positionInUniqueConstraint</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parameters</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>mainSchemaName</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>collation</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>UserDefinedFunction</name></type> <name>userDefinedFunction</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllFunctionsAndAggregates</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>userDefinedFunction</name> <operator>instanceof</operator> <name>FunctionAlias</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>JavaMethod</name><index>[]</index></name></type> <name>methods</name></decl>;</decl_stmt>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><name>methods</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>FunctionAlias</name><operator>)</operator> <name>userDefinedFunction</name><operator>)</operator><operator>.</operator><call><name>getJavaMethods</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></catch></try>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>methods</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name><name>FunctionAlias</name><operator>.</operator><name>JavaMethod</name></name></type> <name>method</name> <init>= <expr><name><name>methods</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>columnList</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getColumnClasses</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>o</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><ternary><condition><expr><call><name><name>method</name><operator>.</operator><name>hasConnectionParam</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr>
                                </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>columnList</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <expr_stmt><expr><call><name>parameters</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">'_'</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
                                    <argument><expr><call><name><name>ValueToObjectConverter2</name><operator>.</operator><name>classToType</name></name><argument_list>(<argument><expr><name><name>columnList</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parameters</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mainSchemaName</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>specificName</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>typeInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DataTypeInformation</name></type> <name>dt</name> <init>= <expr><call><name><name>DataTypeInformation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>characterSetCatalog</name></decl>, <decl><type ref="prev"/><name>characterSetSchema</name></decl>, <decl><type ref="prev"/><name>characterSetName</name></decl>, <decl><type ref="prev"/><name>collationName</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>dt</name><operator>.</operator><name>hasCharsetAndCollation</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>catalog</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetSchema</name> <operator>=</operator> <name>mainSchemaName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetName</name> <operator>=</operator> <name>CHARACTER_SET_NAME</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>collationName</name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>characterSetSchema</name> <operator>=</operator> <name>characterSetName</name> <operator>=</operator> <name>collationName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// SPECIFIC_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// SPECIFIC_SCHEMA</comment>
                <argument><expr><name>schema</name></expr></argument>,
                <comment type="line">// SPECIFIC_NAME</comment>
                <argument><expr><name>specificName</name></expr></argument>,
                <comment type="line">// ORDINAL_POSITION</comment>
                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// PARAMETER_MODE</comment>
                <argument><expr><literal type="string">"IN"</literal></expr></argument>,
                <comment type="line">// IS_RESULT</comment>
                <argument><expr><literal type="string">"NO"</literal></expr></argument>,
                <comment type="line">// AS_LOCATOR</comment>
                <argument><expr><ternary><condition><expr><call><name><name>DataType</name><operator>.</operator><name>isLargeObject</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// PARAMETER_NAME</comment>
                <argument><expr><literal type="string">"P"</literal> <operator>+</operator> <name>pos</name></expr></argument>,
                <comment type="line">// DATA_TYPE</comment>
                <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><name><name>dt</name><operator>.</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// CHARACTER_MAXIMUM_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_OCTET_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_SET_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_NAME</comment>
                <argument><expr><name>characterSetName</name></expr></argument>,
                <comment type="line">// COLLATION_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// COLLATION_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// COLLATION_NAME</comment>
                <argument><expr><name>collationName</name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecision</name></name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION_RADIX</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecisionRadix</name></name></expr></argument>,
                <comment type="line">// NUMERIC_SCALE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericScale</name></name></expr></argument>,
                <comment type="line">// DATETIME_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>datetimePrecision</name></name></expr></argument>,
                <comment type="line">// INTERVAL_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalType</name></name></expr></argument>,
                <comment type="line">// INTERVAL_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalPrecision</name></name></expr></argument>,
                <comment type="line">// MAXIMUM_CARDINALITY</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>maximumCardinality</name></name></expr></argument>,
                <comment type="line">// DTD_IDENTIFIER</comment>
                <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// DECLARED_DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredDataType</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_PRECISION INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericPrecision</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_SCALE INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericScale</name></name></expr></argument>,
                <comment type="line">// PARAMETER_DEFAULT</comment>
                <argument><expr><literal type="null">null</literal></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// GEOMETRY_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometryType</name></name></expr></argument>,
                <comment type="line">// GEOMETRY_SRID INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometrySrid</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>referentialConstraints</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllConstraints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><call><name><name>constraint</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>constraintName</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>constraintName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>referentialConstraints</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name></expr></argument>, <argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>referentialConstraints</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>,
            <parameter><decl><type><name>ConstraintReferential</name></type> <name>constraint</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>constraintName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ConstraintUnique</name></type> <name>unique</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getReferencedConstraint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// CONSTRAINT_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// CONSTRAINT_SCHEMA</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// CONSTRAINT_NAME</comment>
                <argument><expr><name>constraintName</name></expr></argument>,
                <comment type="line">// UNIQUE_CONSTRAINT_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// UNIQUE_CONSTRAINT_SCHEMA</comment>
                <argument><expr><call><name><name>unique</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// UNIQUE_CONSTRAINT_NAME</comment>
                <argument><expr><call><name><name>unique</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// MATCH_OPTION</comment>
                <argument><expr><literal type="string">"NONE"</literal></expr></argument>,
                <comment type="line">// UPDATE_RULE</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getUpdateAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSqlName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// DELETE_RULE</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getDeleteAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSqlName</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>routines</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>admin</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>mainSchemaName</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>collation</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>schemaName</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>UserDefinedFunction</name></type> <name>userDefinedFunction</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllFunctionsAndAggregates</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>userDefinedFunction</name> <operator>instanceof</operator> <name>FunctionAlias</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>FunctionAlias</name></type> <name>alias</name> <init>= <expr><operator>(</operator><name>FunctionAlias</name><operator>)</operator> <name>userDefinedFunction</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>JavaMethod</name><index>[]</index></name></type> <name>methods</name></decl>;</decl_stmt>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><name>methods</name> <operator>=</operator> <call><name><name>alias</name><operator>.</operator><name>getJavaMethods</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></catch></try>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>methods</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name><name>FunctionAlias</name><operator>.</operator><name>JavaMethod</name></name></type> <name>method</name> <init>= <expr><name><name>methods</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getDataType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>routineType</name></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>typeInfo</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>typeInfo</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>routineType</name> <operator>=</operator> <literal type="string">"PROCEDURE"</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>typeInfo</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name>routineType</name> <operator>=</operator> <literal type="string">"FUNCTION"</literal></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><call><name>routines</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                <argument><expr><name>name</name> <operator>+</operator> <literal type="char">'_'</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>routineType</name></expr></argument>, <argument><expr><ternary><condition><expr><name>admin</name></expr> ?</condition><then> <expr><call><name><name>alias</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                <argument><expr><call><name><name>alias</name><operator>.</operator><name>getJavaClassName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">'.'</literal> <operator>+</operator> <call><name><name>alias</name><operator>.</operator><name>getJavaMethodName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>typeInfo</name></expr></argument>,
                                <argument><expr><call><name><name>alias</name><operator>.</operator><name>isDeterministic</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>alias</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>routines</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AGGREGATE"</literal></expr></argument>,
                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getJavaClassName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_NULL</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
                            <argument><expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>routines</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mainSchemaName</name></decl></parameter>, <comment type="line">//</comment>
            <parameter><decl><type><name>String</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>specificName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>routineType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>definition</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>externalName</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>typeInfo</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>deterministic</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>remarks</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DataTypeInformation</name></type> <name>dt</name> <init>= <expr><ternary><condition><expr><name>typeInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>DataTypeInformation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>DataTypeInformation</name><operator>.</operator><name>NULL</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>characterSetCatalog</name></decl>, <decl><type ref="prev"/><name>characterSetSchema</name></decl>, <decl><type ref="prev"/><name>characterSetName</name></decl>, <decl><type ref="prev"/><name>collationName</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>dt</name><operator>.</operator><name>hasCharsetAndCollation</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>catalog</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetSchema</name> <operator>=</operator> <name>mainSchemaName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetName</name> <operator>=</operator> <name>CHARACTER_SET_NAME</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>collationName</name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>characterSetSchema</name> <operator>=</operator> <name>characterSetName</name> <operator>=</operator> <name>collationName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// SPECIFIC_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// SPECIFIC_SCHEMA</comment>
                <argument><expr><name>schema</name></expr></argument>,
                <comment type="line">// SPECIFIC_NAME</comment>
                <argument><expr><name>specificName</name></expr></argument>,
                <comment type="line">// ROUTINE_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// ROUTINE_SCHEMA</comment>
                <argument><expr><name>schema</name></expr></argument>,
                <comment type="line">// ROUTINE_NAME</comment>
                <argument><expr><name>name</name></expr></argument>,
                <comment type="line">// ROUTINE_TYPE</comment>
                <argument><expr><name>routineType</name></expr></argument>,
                <comment type="line">// DATA_TYPE</comment>
                <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><name><name>dt</name><operator>.</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// CHARACTER_MAXIMUM_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_OCTET_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_SET_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_NAME</comment>
                <argument><expr><name>characterSetName</name></expr></argument>,
                <comment type="line">// COLLATION_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// COLLATION_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// COLLATION_NAME</comment>
                <argument><expr><name>collationName</name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecision</name></name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION_RADIX</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecisionRadix</name></name></expr></argument>,
                <comment type="line">// NUMERIC_SCALE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericScale</name></name></expr></argument>,
                <comment type="line">// DATETIME_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>datetimePrecision</name></name></expr></argument>,
                <comment type="line">// INTERVAL_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalType</name></name></expr></argument>,
                <comment type="line">// INTERVAL_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalPrecision</name></name></expr></argument>,
                <comment type="line">// MAXIMUM_CARDINALITY</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>maximumCardinality</name></name></expr></argument>,
                <comment type="line">// DTD_IDENTIFIER</comment>
                <argument><expr><literal type="string">"RESULT"</literal></expr></argument>,
                <comment type="line">// ROUTINE_BODY</comment>
                <argument><expr><literal type="string">"EXTERNAL"</literal></expr></argument>,
                <comment type="line">// ROUTINE_DEFINITION</comment>
                <argument><expr><name>definition</name></expr></argument>,
                <comment type="line">// EXTERNAL_NAME</comment>
                <argument><expr><name>externalName</name></expr></argument>,
                <comment type="line">// EXTERNAL_LANGUAGE</comment>
                <argument><expr><literal type="string">"JAVA"</literal></expr></argument>,
                <comment type="line">// PARAMETER_STYLE</comment>
                <argument><expr><literal type="string">"GENERAL"</literal></expr></argument>,
                <comment type="line">// IS_DETERMINISTIC</comment>
                <argument><expr><ternary><condition><expr><name>deterministic</name></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// DECLARED_DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredDataType</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_PRECISION INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericPrecision</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_SCALE INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericScale</name></name></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// GEOMETRY_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometryType</name></name></expr></argument>,
                <comment type="line">// GEOMETRY_SRID INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometrySrid</name></name></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><name>remarks</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>schemata</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>mainSchemaName</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>collation</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// CATALOG_NAME</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// SCHEMA_NAME</comment>
                    <argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// SCHEMA_OWNER</comment>
                    <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getOwner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// DEFAULT_CHARACTER_SET_CATALOG</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// DEFAULT_CHARACTER_SET_SCHEMA</comment>
                    <argument><expr><name>mainSchemaName</name></expr></argument>,
                    <comment type="line">// DEFAULT_CHARACTER_SET_NAME</comment>
                    <argument><expr><name>CHARACTER_SET_NAME</name></expr></argument>,
                    <comment type="line">// SQL_PATH</comment>
                    <argument><expr><literal type="null">null</literal></expr></argument>,
                    <comment type="line">// extensions</comment>
                    <comment type="line">// DEFAULT_COLLATION_NAME</comment>
                    <argument><expr><name>collation</name></expr></argument>,
                    <comment type="line">// REMARKS</comment>
                    <argument><expr><call><name><name>schema</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sequences</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Sequence</name></type> <name>sequence</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllSequences</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>sequence</name><operator>.</operator><name>getBelongsToTable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>sequenceName</name> <init>= <expr><call><name><name>sequence</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>sequenceName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>sequences</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>sequence</name></expr></argument>, <argument><expr><name>sequenceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sequences</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Sequence</name></type> <name>sequence</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>sequenceName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DataTypeInformation</name></type> <name>dt</name> <init>= <expr><call><name><name>DataTypeInformation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getDataType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Sequence</name><operator>.</operator><name>Cycle</name></name></type> <name>cycle</name> <init>= <expr><call><name><name>sequence</name><operator>.</operator><name>getCycle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// SEQUENCE_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// SEQUENCE_SCHEMA</comment>
                <argument><expr><call><name><name>sequence</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// SEQUENCE_NAME</comment>
                <argument><expr><name>sequenceName</name></expr></argument>,
                <comment type="line">// DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>dataType</name></name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION</comment>
                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getEffectivePrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION_RADIX</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecisionRadix</name></name></expr></argument>,
                <comment type="line">// NUMERIC_SCALE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericScale</name></name></expr></argument>,
                <comment type="line">// START_VALUE</comment>
                <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getStartValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// MINIMUM_VALUE</comment>
                <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getMinValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// MAXIMUM_VALUE</comment>
                <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getMaxValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// INCREMENT</comment>
                <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getIncrement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// CYCLE_OPTION</comment>
                <argument><expr><ternary><condition><expr><call><name><name>cycle</name><operator>.</operator><name>isCycle</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// DECLARED_DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredDataType</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericPrecision</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_SCALE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericScale</name></name></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// BASE_VALUE</comment>
                <argument><expr><ternary><condition><expr><name>cycle</name> <operator>!=</operator> <name><name>Sequence</name><operator>.</operator><name>Cycle</name><operator>.</operator><name>EXHAUSTED</name></name></expr> ?</condition><then> <expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getBaseValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// CACHE</comment>
                <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sequence</name><operator>.</operator><name>getCacheSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name><name>sequence</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>tables</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>tables</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getLocalTempTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tables</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>tables</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>commitAction</name></decl>, <decl><type ref="prev"/><name>storageType</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isTemporary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>commitAction</name> <operator>=</operator> <ternary><condition><expr><call><name><name>table</name><operator>.</operator><name>getOnCommitTruncate</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"DELETE"</literal></expr> </then><else>: <expr><ternary><condition><expr><call><name><name>table</name><operator>.</operator><name>getOnCommitDrop</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"DROP"</literal></expr> </then><else>: <expr><literal type="string">"PRESERVE"</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>storageType</name> <operator>=</operator> <ternary><condition><expr><call><name><name>table</name><operator>.</operator><name>isGlobalTemporary</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"GLOBAL TEMPORARY"</literal></expr> </then><else>: <expr><literal type="string">"LOCAL TEMPORARY"</literal></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>commitAction</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><call><name><name>table</name><operator>.</operator><name>getTableType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>TABLE_LINK</name></expr>:</case>
                <expr_stmt><expr><name>storageType</name> <operator>=</operator> <literal type="string">"TABLE LINK"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>EXTERNAL_TABLE_ENGINE</name></expr>:</case>
                <expr_stmt><expr><name>storageType</name> <operator>=</operator> <literal type="string">"EXTERNAL"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name>storageType</name> <operator>=</operator> <ternary><condition><expr><call><name><name>table</name><operator>.</operator><name>isPersistIndexes</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"CACHED"</literal></expr> </then><else>: <expr><literal type="string">"MEMORY"</literal></expr></else></ternary></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>lastModification</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getMaxDataModificationId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// TABLE_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// TABLE_SCHEMA</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// TABLE_NAME</comment>
                <argument><expr><name>tableName</name></expr></argument>,
                <comment type="line">// TABLE_TYPE</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getSQLTableType</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// IS_INSERTABLE_INTO"</comment>
                <argument><expr><ternary><condition><expr><call><name><name>table</name><operator>.</operator><name>isInsertable</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// COMMIT_ACTION</comment>
                <argument><expr><name>commitAction</name></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// STORAGE_TYPE</comment>
                <argument><expr><name>storageType</name></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// LAST_MODIFICATION</comment>
                <argument><expr><ternary><condition><expr><name>lastModification</name> <operator>!=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr> ?</condition><then> <expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>lastModification</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// TABLE_CLASS</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// ROW_COUNT_ESTIMATE</comment>
                <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getRowCountApproximation</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>tableConstraints</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllConstraints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Constraint</name><operator>.</operator><name>Type</name></name></type> <name>constraintType</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>DOMAIN</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>tableConstraints</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>, <argument><expr><name>constraintType</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>tableConstraints</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Constraint</name></type> <name>constraint</name></decl></parameter>,
            <parameter><decl><type><name><name>Constraint</name><operator>.</operator><name>Type</name></name></type> <name>constraintType</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>enforced</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>constraintType</name> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>enforced</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>enforced</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getReferentialIntegrity</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>table</name><operator>.</operator><name>getCheckForeignKeyConstraints</name></name><argument_list>()</argument_list></call>
                    <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getRefTable</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCheckForeignKeyConstraints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// CONSTRAINT_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// CONSTRAINT_SCHEMA</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// CONSTRAINT_NAME</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// CONSTRAINT_TYPE</comment>
                <argument><expr><call><name><name>constraintType</name><operator>.</operator><name>getSqlName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// TABLE_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// TABLE_SCHEMA</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// TABLE_NAME</comment>
                <argument><expr><name>tableName</name></expr></argument>,
                <comment type="line">// IS_DEFERRABLE</comment>
                <argument><expr><literal type="string">"NO"</literal></expr></argument>,
                <comment type="line">// INITIALLY_DEFERRED</comment>
                <argument><expr><literal type="string">"NO"</literal></expr></argument>,
                <comment type="line">// ENFORCED</comment>
                <argument><expr><ternary><condition><expr><name>enforced</name></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// INDEX_CATALOG</comment>
                <argument><expr><ternary><condition><expr><name>index</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>catalog</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// INDEX_SCHEMA</comment>
                <argument><expr><ternary><condition><expr><name>index</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>index</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// INDEX_NAME</comment>
                <argument><expr><ternary><condition><expr><name>index</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>tablePrivileges</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <comment type="line">//</comment>
            <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Right</name></type> <name>r</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllRights</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>DbObject</name></type> <name>object</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantedObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>object</name> <operator>instanceof</operator> <name>Table</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><operator>(</operator><name>Table</name><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>addPrivileges</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getGrantee</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getRightMask</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>triggers</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>TriggerObject</name></type> <name>trigger</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTriggers</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>trigger</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>typeMask</name> <init>= <expr><call><name><name>trigger</name><operator>.</operator><name>getTypeMask</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>typeMask</name> <operator>&amp;</operator> <name><name>Trigger</name><operator>.</operator><name>INSERT</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>triggers</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>trigger</name></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>typeMask</name> <operator>&amp;</operator> <name><name>Trigger</name><operator>.</operator><name>UPDATE</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>triggers</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>trigger</name></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>typeMask</name> <operator>&amp;</operator> <name><name>Trigger</name><operator>.</operator><name>DELETE</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>triggers</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>trigger</name></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>typeMask</name> <operator>&amp;</operator> <name><name>Trigger</name><operator>.</operator><name>SELECT</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>triggers</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>trigger</name></expr></argument>, <argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>triggers</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>TriggerObject</name></type> <name>trigger</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>eventManipulation</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// TRIGGER_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// TRIGGER_SCHEMA</comment>
                <argument><expr><call><name><name>trigger</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// TRIGGER_NAME</comment>
                <argument><expr><call><name><name>trigger</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// EVENT_MANIPULATION</comment>
                <argument><expr><name>eventManipulation</name></expr></argument>,
                <comment type="line">// EVENT_OBJECT_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// EVENT_OBJECT_SCHEMA</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// EVENT_OBJECT_TABLE</comment>
                <argument><expr><name>tableName</name></expr></argument>,
                <comment type="line">// ACTION_ORIENTATION</comment>
                <argument><expr><ternary><condition><expr><call><name><name>trigger</name><operator>.</operator><name>isRowBased</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"ROW"</literal></expr> </then><else>: <expr><literal type="string">"STATEMENT"</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// ACTION_TIMING</comment>
                <argument><expr><ternary><condition><expr><call><name><name>trigger</name><operator>.</operator><name>isInsteadOf</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"INSTEAD OF"</literal></expr> </then><else>: <expr><ternary><condition><expr><call><name><name>trigger</name><operator>.</operator><name>isBefore</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"BEFORE"</literal></expr> </then><else>: <expr><literal type="string">"AFTER"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// IS_ROLLBACK</comment>
                <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>trigger</name><operator>.</operator><name>isOnRollback</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// JAVA_CLASS</comment>
                <argument><expr><call><name><name>trigger</name><operator>.</operator><name>getTriggerClassName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// QUEUE_SIZE</comment>
                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>trigger</name><operator>.</operator><name>getQueueSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// NO_WAIT</comment>
                <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>trigger</name><operator>.</operator><name>isNoWait</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name><name>trigger</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>views</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isView</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>views</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getLocalTempTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isView</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>views</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>views</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>viewDefinition</name></decl>, <decl><type ref="prev"/><name>status</name> <init>= <expr><literal type="string">"VALID"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>instanceof</operator> <name>TableView</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TableView</name></type> <name>view</name> <init>= <expr><operator>(</operator><name>TableView</name><operator>)</operator> <name>table</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>viewDefinition</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>getQuery</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>view</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"INVALID"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>viewDefinition</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TriggerObject</name></argument>&gt;</argument_list></name></type> <name>triggers</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getTriggers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>triggers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>TriggerObject</name></type> <name>trigger</name> <range>: <expr><name>triggers</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>trigger</name><operator>.</operator><name>isInsteadOf</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mask</name> <operator>|=</operator> <call><name><name>trigger</name><operator>.</operator><name>getTypeMask</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// TABLE_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// TABLE_SCHEMA</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// TABLE_NAME</comment>
                <argument><expr><name>tableName</name></expr></argument>,
                <comment type="line">// VIEW_DEFINITION</comment>
                <argument><expr><name>viewDefinition</name></expr></argument>,
                <comment type="line">// CHECK_OPTION</comment>
                <argument><expr><literal type="string">"NONE"</literal></expr></argument>,
                <comment type="line">// IS_UPDATABLE</comment>
                <argument><expr><literal type="string">"NO"</literal></expr></argument>,
                <comment type="line">// INSERTABLE_INTO</comment>
                <argument><expr><literal type="string">"NO"</literal></expr></argument>,
                <comment type="line">// IS_TRIGGER_UPDATABLE</comment>
                <argument><expr><ternary><condition><expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name><name>Trigger</name><operator>.</operator><name>UPDATE</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// IS_TRIGGER_DELETABLE</comment>
                <argument><expr><ternary><condition><expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name><name>Trigger</name><operator>.</operator><name>DELETE</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// IS_TRIGGER_INSERTABLE_INTO</comment>
                <argument><expr><ternary><condition><expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name><name>Trigger</name><operator>.</operator><name>INSERT</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>,
                <comment type="line">// extensions</comment>
                <comment type="line">// STATUS</comment>
                <argument><expr><name>status</name></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>constants</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>mainSchemaName</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>collation</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Constant</name></type> <name>constant</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllConstants</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>constantName</name> <init>= <expr><call><name><name>constant</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>constantName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>constants</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>mainSchemaName</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>constant</name></expr></argument>, <argument><expr><name>constantName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>constants</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mainSchemaName</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><name>Constant</name></type> <name>constant</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>constantName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ValueExpression</name></type> <name>expr</name> <init>= <expr><call><name><name>constant</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name><name>expr</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DataTypeInformation</name></type> <name>dt</name> <init>= <expr><call><name><name>DataTypeInformation</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>characterSetCatalog</name></decl>, <decl><type ref="prev"/><name>characterSetSchema</name></decl>, <decl><type ref="prev"/><name>characterSetName</name></decl>, <decl><type ref="prev"/><name>collationName</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>dt</name><operator>.</operator><name>hasCharsetAndCollation</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>catalog</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetSchema</name> <operator>=</operator> <name>mainSchemaName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>characterSetName</name> <operator>=</operator> <name>CHARACTER_SET_NAME</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>collationName</name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>characterSetCatalog</name> <operator>=</operator> <name>characterSetSchema</name> <operator>=</operator> <name>characterSetName</name> <operator>=</operator> <name>collationName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// CONSTANT_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// CONSTANT_SCHEMA</comment>
                <argument><expr><call><name><name>constant</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// CONSTANT_NAME</comment>
                <argument><expr><name>constantName</name></expr></argument>,
                <comment type="line">// VALUE_DEFINITION</comment>
                <argument><expr><call><name><name>expr</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>dataType</name></name></expr></argument>,
                <comment type="line">// CHARACTER_MAXIMUM_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_OCTET_LENGTH</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>characterPrecision</name></name></expr></argument>,
                <comment type="line">// CHARACTER_SET_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// CHARACTER_SET_NAME</comment>
                <argument><expr><name>characterSetName</name></expr></argument>,
                <comment type="line">// COLLATION_CATALOG</comment>
                <argument><expr><name>characterSetCatalog</name></expr></argument>,
                <comment type="line">// COLLATION_SCHEMA</comment>
                <argument><expr><name>characterSetSchema</name></expr></argument>,
                <comment type="line">// COLLATION_NAME</comment>
                <argument><expr><name>collationName</name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecision</name></name></expr></argument>,
                <comment type="line">// NUMERIC_PRECISION_RADIX</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericPrecisionRadix</name></name></expr></argument>,
                <comment type="line">// NUMERIC_SCALE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>numericScale</name></name></expr></argument>,
                <comment type="line">// DATETIME_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>datetimePrecision</name></name></expr></argument>,
                <comment type="line">// INTERVAL_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalType</name></name></expr></argument>,
                <comment type="line">// INTERVAL_PRECISION</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>intervalPrecision</name></name></expr></argument>,
                <comment type="line">// MAXIMUM_CARDINALITY</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>maximumCardinality</name></name></expr></argument>,
                <comment type="line">// DTD_IDENTIFIER</comment>
                <argument><expr><literal type="string">"TYPE"</literal></expr></argument>,
                <comment type="line">// DECLARED_DATA_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredDataType</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_PRECISION INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericPrecision</name></name></expr></argument>,
                <comment type="line">// DECLARED_NUMERIC_SCALE INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>declaredNumericScale</name></name></expr></argument>,
                <comment type="line">// GEOMETRY_TYPE</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometryType</name></name></expr></argument>,
                <comment type="line">// GEOMETRY_SRID INT</comment>
                <argument><expr><name><name>dt</name><operator>.</operator><name>geometrySrid</name></name></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name><name>constant</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>enumValues</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectSchema</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>objectName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>enumIdentifier</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>typeInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ExtTypeInfoEnum</name></type> <name>ext</name> <init>= <expr><operator>(</operator><name>ExtTypeInfoEnum</name><operator>)</operator> <call><name><name>typeInfo</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ext</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ordinal</name> <init>= <expr><ternary><condition><expr><call><name><name>session</name><operator>.</operator><name>zeroBasedEnums</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name><name>ext</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ordinal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// OBJECT_CATALOG</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// OBJECT_SCHEMA</comment>
                    <argument><expr><name>objectSchema</name></expr></argument>,
                    <comment type="line">// OBJECT_NAME</comment>
                    <argument><expr><name>objectName</name></expr></argument>,
                    <comment type="line">// OBJECT_TYPE</comment>
                    <argument><expr><name>objectType</name></expr></argument>,
                    <comment type="line">// ENUM_IDENTIFIER</comment>
                    <argument><expr><name>enumIdentifier</name></expr></argument>,
                    <comment type="line">// VALUE_NAME</comment>
                    <argument><expr><call><name><name>ext</name><operator>.</operator><name>getEnumerator</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// VALUE_ORDINAL</comment>
                    <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ordinal</name></expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>indexes</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>columns</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>indexFrom</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>indexFrom</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>indexFrom</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tableName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getTableOrViewByName</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>indexes</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>findLocalTempTable</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>indexes</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>indexes</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getLocalTempTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>indexes</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>indexes</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getIndexes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>indexes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>Index</name></type> <name>index</name> <range>: <expr><name>indexes</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>columns</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>indexColumns</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>indexes</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>indexes</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>,
            <parameter><decl><type><name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// INDEX_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// INDEX_SCHEMA</comment>
                <argument><expr><call><name><name>index</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// INDEX_NAME</comment>
                <argument><expr><call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// TABLE_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// TABLE_SCHEMA</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// TABLE_NAME</comment>
                <argument><expr><name>tableName</name></expr></argument>,
                <comment type="line">// INDEX_TYPE_NAME</comment>
                <argument><expr><call><name><name>index</name><operator>.</operator><name>getIndexType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// IS_GENERATED</comment>
                <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getIndexType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBelongsToConstraint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name><name>index</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// INDEX_CLASS</comment>
                <argument><expr><call><name><name>index</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>indexColumns</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>cols</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>getIndexColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>uniqueColumnCount</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>getUniqueColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>cols</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>IndexColumn</name></type> <name>idxCol</name> <init>= <expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>sortType</name> <init>= <expr><name><name>idxCol</name><operator>.</operator><name>sortType</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// INDEX_CATALOG</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// INDEX_SCHEMA</comment>
                    <argument><expr><call><name><name>index</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// INDEX_NAME</comment>
                    <argument><expr><call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_CATALOG</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// TABLE_SCHEMA</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_NAME</comment>
                    <argument><expr><name>tableName</name></expr></argument>,
                    <comment type="line">// COLUMN_NAME</comment>
                    <argument><expr><call><name><name>idxCol</name><operator>.</operator><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// ORDINAL_POSITION</comment>
                    <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>++</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// ORDERING_SPECIFICATION</comment>
                    <argument><expr><ternary><condition><expr><operator>(</operator><name>sortType</name> <operator>&amp;</operator> <name><name>SortOrder</name><operator>.</operator><name>DESCENDING</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"ASC"</literal></expr> </then><else>: <expr><literal type="string">"DESC"</literal></expr></else></ternary></expr></argument>,
                    <comment type="line">// NULL_ORDERING</comment>
                    <argument><expr><ternary><condition><expr><operator>(</operator><name>sortType</name> <operator>&amp;</operator> <name><name>SortOrder</name><operator>.</operator><name>NULLS_FIRST</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"FIRST"</literal></expr>
                            </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>sortType</name> <operator>&amp;</operator> <name><name>SortOrder</name><operator>.</operator><name>NULLS_LAST</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"LAST"</literal></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></else></ternary></expr></argument>,
                    <comment type="line">// IS_UNIQUE</comment>
                    <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name> <operator>&lt;=</operator> <name>uniqueColumnCount</name></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>inDoubt</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>InDoubtTransaction</name></argument>&gt;</argument_list></name></type> <name>prepared</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getInDoubtTransactions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>prepared</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>InDoubtTransaction</name></type> <name>prep</name> <range>: <expr><name>prepared</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                            <comment type="line">// TRANSACTION_NAME</comment>
                            <argument><expr><call><name><name>prep</name><operator>.</operator><name>getTransactionName</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// TRANSACTION_STATE</comment>
                            <argument><expr><call><name><name>prep</name><operator>.</operator><name>getStateDescription</name></name><argument_list>()</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>locks</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SessionLocal</name></type> <name>s</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getSessions</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>locks</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>locks</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>locks</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>SessionLocal</name></type> <name>sessionWithLocks</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>sessionWithLocks</name><operator>.</operator><name>getLocks</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// TABLE_SCHEMA</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_NAME</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// SESSION_ID</comment>
                    <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>sessionWithLocks</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// LOCK_TYPE</comment>
                    <argument><expr><ternary><condition><expr><call><name><name>table</name><operator>.</operator><name>isLockedExclusivelyBy</name></name><argument_list>(<argument><expr><name>sessionWithLocks</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"WRITE"</literal></expr> </then><else>: <expr><literal type="string">"READ"</literal></expr></else></ternary></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>queryStatistics</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>QueryStatisticsData</name></type> <name>control</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getQueryStatisticsData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>control</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>QueryStatisticsData</name><operator>.</operator><name>QueryEntry</name></name></type> <name>entry</name> <range>: <expr><call><name><name>control</name><operator>.</operator><name>getQueries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// SQL_STATEMENT</comment>
                        <argument><expr><name><name>entry</name><operator>.</operator><name>sqlStatement</name></name></expr></argument>,
                        <comment type="line">// EXECUTION_COUNT</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// MIN_EXECUTION_TIME</comment>
                        <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>executionTimeMinNanos</name></name> <operator>/</operator> <literal type="number">1_000_000d</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// MAX_EXECUTION_TIME</comment>
                        <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>executionTimeMaxNanos</name></name> <operator>/</operator> <literal type="number">1_000_000d</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// CUMULATIVE_EXECUTION_TIME</comment>
                        <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>executionTimeCumulativeNanos</name></name> <operator>/</operator> <literal type="number">1_000_000d</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// AVERAGE_EXECUTION_TIME</comment>
                        <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>executionTimeMeanNanos</name></name> <operator>/</operator> <literal type="number">1_000_000d</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// STD_DEV_EXECUTION_TIME</comment>
                        <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getExecutionTimeStandardDeviation</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1_000_000d</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// MIN_ROW_COUNT</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>rowCountMin</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// MAX_ROW_COUNT</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>rowCountMax</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// CUMULATIVE_ROW_COUNT</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>rowCountCumulative</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// AVERAGE_ROW_COUNT</comment>
                        <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>rowCountMean</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// STD_DEV_ROW_COUNT</comment>
                        <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getRowCountStandardDeviation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>rights</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexFrom</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>indexTo</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>Right</name></type> <name>r</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllRights</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Role</name></type> <name>role</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantedRole</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DbObject</name></type> <name>grantee</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantee</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>rightType</name> <init>= <expr><ternary><condition><expr><call><name><name>grantee</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>DbObject</name><operator>.</operator><name>USER</name></name></expr> ?</condition><then> <expr><literal type="string">"USER"</literal></expr> </then><else>: <expr><literal type="string">"ROLE"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>role</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>DbObject</name></type> <name>object</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantedObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>object</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>Schema</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>schema</name> <operator>=</operator> <operator>(</operator><name>Schema</name><operator>)</operator> <name>object</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>Table</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>table</name> <operator>=</operator> <operator>(</operator><name>Table</name><operator>)</operator> <name>object</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>table</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>schemaName</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>schema</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// GRANTEE</comment>
                        <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// GRANTEETYPE</comment>
                        <argument><expr><name>rightType</name></expr></argument>,
                        <comment type="line">// GRANTEDROLE</comment>
                        <argument><expr><literal type="null">null</literal></expr></argument>,
                        <comment type="line">// RIGHTS</comment>
                        <argument><expr><call><name><name>r</name><operator>.</operator><name>getRights</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// TABLE_SCHEMA</comment>
                        <argument><expr><name>schemaName</name></expr></argument>,
                        <comment type="line">// TABLE_NAME</comment>
                        <argument><expr><name>tableName</name></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// GRANTEE</comment>
                        <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// GRANTEETYPE</comment>
                        <argument><expr><name>rightType</name></expr></argument>,
                        <comment type="line">// GRANTEDROLE</comment>
                        <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// RIGHTS</comment>
                        <argument><expr><literal type="null">null</literal></expr></argument>,
                        <comment type="line">// TABLE_SCHEMA</comment>
                        <argument><expr><literal type="null">null</literal></expr></argument>,
                        <comment type="line">// TABLE_NAME</comment>
                        <argument><expr><literal type="null">null</literal></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>roles</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>admin</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>RightOwner</name></type> <name>rightOwner</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllUsersAndRoles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>rightOwner</name> <operator>instanceof</operator> <name>Role</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Role</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>Role</name><operator>)</operator> <name>rightOwner</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>admin</name> <operator>||</operator> <call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isRoleGranted</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                            <comment type="line">// ROLE_NAME</comment>
                            <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// REMARKS</comment>
                            <argument><expr><call><name><name>r</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sessions</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SessionLocal</name></type> <name>s</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getSessions</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>sessions</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>sessions</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sessions</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>SessionLocal</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>NetworkConnectionInfo</name></type> <name>networkConnectionInfo</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getNetworkConnectionInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Command</name></type> <name>command</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getCurrentCommand</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>blockingSessionId</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getBlockingSessionId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// SESSION_ID</comment>
                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// USER_NAME</comment>
                <argument><expr><call><name><name>s</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// SERVER</comment>
                <argument><expr><ternary><condition><expr><name>networkConnectionInfo</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>networkConnectionInfo</name><operator>.</operator><name>getServer</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                <comment type="line">// CLIENT_ADDR</comment>
                <argument><expr><ternary><condition><expr><name>networkConnectionInfo</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>networkConnectionInfo</name><operator>.</operator><name>getClient</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                <comment type="line">// CLIENT_INFO</comment>
                <argument><expr><ternary><condition><expr><name>networkConnectionInfo</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>networkConnectionInfo</name><operator>.</operator><name>getClientInfo</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                <comment type="line">// SESSION_START</comment>
                <argument><expr><call><name><name>s</name><operator>.</operator><name>getSessionStart</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// ISOLATION_LEVEL</comment>
                <argument><expr><call><name><name>session</name><operator>.</operator><name>getIsolationLevel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// EXECUTING_STATEMENT</comment>
                <argument><expr><ternary><condition><expr><name>command</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>command</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                <comment type="line">// EXECUTING_STATEMENT_START</comment>
                <argument><expr><ternary><condition><expr><name>command</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>s</name><operator>.</operator><name>getCommandStartOrEnd</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                <comment type="line">// CONTAINS_UNCOMMITTED</comment>
                <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>hasPendingTransaction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// SESSION_STATE</comment>
                <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// BLOCKER_ID</comment>
                <argument><expr><ternary><condition><expr><name>blockingSessionId</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>blockingSessionId</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                <comment type="line">// SLEEP_SINCE</comment>
                <argument><expr><ternary><condition><expr><call><name><name>s</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>State</name><operator>.</operator><name>SLEEP</name></name></expr> ?</condition><then> <expr><call><name><name>s</name><operator>.</operator><name>getCommandStartOrEnd</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sessionState</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getVariableNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getVariable</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"SET @"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// STATE_KEY</comment>
                    <argument><expr><literal type="string">"@"</literal> <operator>+</operator> <name>name</name></expr></argument>,
                    <comment type="line">// STATE_COMMAND</comment>
                    <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getLocalTempTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// STATE_KEY</comment>
                    <argument><expr><literal type="string">"TABLE "</literal> <operator>+</operator> <call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// STATE_COMMAND</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>path</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getSchemaSearchPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>path</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"SET SCHEMA_SEARCH_PATH "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>path</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// STATE_KEY</comment>
                    <argument><expr><literal type="string">"SCHEMA_SEARCH_PATH"</literal></expr></argument>,
                    <comment type="line">// STATE_COMMAND</comment>
                    <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>schema</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// STATE_KEY</comment>
                    <argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>,
                    <comment type="line">// STATE_COMMAND</comment>
                    <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"SET SCHEMA "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>TimeZoneProvider</name></type> <name>currentTimeZone</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>currentTimeZone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>currentTimeZone</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>getTimeZone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// STATE_KEY</comment>
                    <argument><expr><literal type="string">"TIME ZONE"</literal></expr></argument>,
                    <comment type="line">// STATE_COMMAND</comment>
                    <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteStringSQL</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"SET TIME ZONE "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>currentTimeZone</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>settings</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Setting</name></type> <name>s</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSettings</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getStringValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getIntValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"info.BUILD_ID"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>BUILD_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"info.VERSION_MAJOR"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>VERSION_MAJOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"info.VERSION_MINOR"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>VERSION_MINOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"info.VERSION"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>FULL_VERSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>settings</name> <init>= <expr><block>{
                    <expr><literal type="string">"java.runtime.version"</literal></expr>, <expr><literal type="string">"java.vm.name"</literal></expr>,
                    <expr><literal type="string">"java.vendor"</literal></expr>, <expr><literal type="string">"os.name"</literal></expr>, <expr><literal type="string">"os.arch"</literal></expr>, <expr><literal type="string">"os.version"</literal></expr>,
                    <expr><literal type="string">"sun.os.patch.level"</literal></expr>, <expr><literal type="string">"file.separator"</literal></expr>,
                    <expr><literal type="string">"path.separator"</literal></expr>, <expr><literal type="string">"line.separator"</literal></expr>, <expr><literal type="string">"user.country"</literal></expr>,
                    <expr><literal type="string">"user.language"</literal></expr>, <expr><literal type="string">"user.variant"</literal></expr>, <expr><literal type="string">"file.encoding"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><name>settings</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"property."</literal> <operator>+</operator> <name>s</name></expr></argument>, <argument><expr><call><name><name>Utils</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT_NULL_ORDERING"</literal></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getDefaultNullOrdering</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"EXCLUSIVE"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>database</name><operator>.</operator><name>getExclusiveSession</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"FALSE"</literal></expr> </then><else>: <expr><literal type="string">"TRUE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"MODE"</literal></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"QUERY_TIMEOUT"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getQueryTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"TIME ZONE"</literal></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>currentTimeZone</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"TRUNCATE_LARGE_LENGTH"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>session</name><operator>.</operator><name>isTruncateLargeLength</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"VARIABLE_BINARY"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>session</name><operator>.</operator><name>isVariableBinary</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"OLD_INFORMATION_SCHEMA"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>session</name><operator>.</operator><name>isOldInformationSchema</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>nonKeywords</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getNonKeywords</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nonKeywords</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"NON_KEYWORDS"</literal></expr></argument>, <argument><expr><call><name><name>Parser</name><operator>.</operator><name>formatNonKeywords</name></name><argument_list>(<argument><expr><name>nonKeywords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"RETENTION_TIME"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>getRetentionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// database settings</comment>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSortedSettings</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>Store</name></type> <name>store</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MVStore</name></type> <name>mvStore</name> <init>= <expr><call><name><name>store</name><operator>.</operator><name>getMvStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileStore</name></type> <name>fs</name> <init>= <expr><call><name><name>mvStore</name><operator>.</operator><name>getFileStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.FILE_WRITE"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>getWriteCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.FILE_WRITE_BYTES"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>getWriteBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.FILE_READ"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>getReadCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.FILE_READ_BYTES"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>getReadBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.UPDATE_FAILURE_PERCENT"</literal></expr></argument>,
                    <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>, <argument><expr><literal type="string">"%.2f%%"</literal></expr></argument>, <argument><expr><literal type="number">100</literal> <operator>*</operator> <call><name><name>mvStore</name><operator>.</operator><name>getUpdateFailureRatio</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.FILL_RATE"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getFillRate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.CHUNKS_FILL_RATE"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getChunksFillRate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.CHUNKS_FILL_RATE_RW"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getRewritableChunksFillRate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.FILE_SIZE"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content><comment type="block">/**/</comment></block_content>}</block></catch></try>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.CHUNK_COUNT"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getChunkCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.PAGE_COUNT"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getPageCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.PAGE_COUNT_LIVE"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getLivePageCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.PAGE_SIZE"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getPageSplitSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.CACHE_MAX_SIZE"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getCacheSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.CACHE_SIZE"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getCacheSizeUsed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.CACHE_HIT_RATIO"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getCacheHitRatio</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"info.TOC_CACHE_HIT_RATIO"</literal></expr></argument>,
                    <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getTocCacheHitRatio</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <argument><expr><literal type="string">"info.LEAF_RATIO"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getLeafRatio</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>synonyms</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>TableSynonym</name></type> <name>synonym</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSynonyms</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// SYNONYM_CATALOG</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// SYNONYM_SCHEMA</comment>
                    <argument><expr><call><name><name>synonym</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// SYNONYM_NAME</comment>
                    <argument><expr><call><name><name>synonym</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// SYNONYM_FOR</comment>
                    <argument><expr><call><name><name>synonym</name><operator>.</operator><name>getSynonymForName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// SYNONYM_FOR_SCHEMA</comment>
                    <argument><expr><call><name><name>synonym</name><operator>.</operator><name>getSynonymForSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// TYPE NAME</comment>
                    <argument><expr><literal type="string">"SYNONYM"</literal></expr></argument>,
                    <comment type="line">// STATUS</comment>
                    <argument><expr><literal type="string">"VALID"</literal></expr></argument>,
                    <comment type="line">// REMARKS</comment>
                    <argument><expr><call><name><name>synonym</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>users</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>User</name></type> <name>currentUser</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>currentUser</name><operator>.</operator><name>isAdmin</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>RightOwner</name></type> <name>rightOwner</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllUsersAndRoles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>rightOwner</name> <operator>instanceof</operator> <name>User</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>users</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><operator>(</operator><name>User</name><operator>)</operator> <name>rightOwner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>users</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>currentUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>users</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// USER_NAME</comment>
                <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// IS_ADMIN</comment>
                <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>isAdmin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name><name>user</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addConstraintColumnUsage</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>,
            <parameter><decl><type><name>Constraint</name></type> <name>constraint</name></decl></parameter>, <parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// TABLE_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// TABLE_SCHEMA</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// TABLE_NAME</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// COLUMN_NAME</comment>
                <argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// CONSTRAINT_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// CONSTRAINT_SCHEMA</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// CONSTRAINT_NAME</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addPrivileges</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>DbObject</name></type> <name>grantee</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <comment type="line">//</comment>
            <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightMask</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rightMask</name> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>SELECT</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addPrivilege</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>grantee</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"SELECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rightMask</name> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>INSERT</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addPrivilege</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>grantee</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rightMask</name> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>UPDATE</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addPrivilege</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>grantee</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rightMask</name> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>DELETE</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addPrivilege</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>grantee</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addPrivilege</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>DbObject</name></type> <name>grantee</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>isGrantable</name> <init>= <expr><literal type="string">"NO"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>grantee</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>DbObject</name><operator>.</operator><name>USER</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>User</name></type> <name>user</name> <init>= <expr><operator>(</operator><name>User</name><operator>)</operator> <name>grantee</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>user</name><operator>.</operator><name>isAdmin</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// the right is grantable if the grantee is an admin</comment>
                <expr_stmt><expr><name>isGrantable</name> <operator>=</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// GRANTOR</comment>
                    <argument><expr><literal type="null">null</literal></expr></argument>,
                    <comment type="line">// GRANTEE</comment>
                    <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_CATALOG</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// TABLE_SCHEMA</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_NAME</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// PRIVILEGE_TYPE</comment>
                    <argument><expr><name>right</name></expr></argument>,
                    <comment type="line">// IS_GRANTABLE</comment>
                    <argument><expr><name>isGrantable</name></expr></argument>,
                    <comment type="line">// WITH_HIERARCHY</comment>
                    <argument><expr><literal type="string">"NO"</literal></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// GRANTOR</comment>
                    <argument><expr><literal type="null">null</literal></expr></argument>,
                    <comment type="line">// GRANTEE</comment>
                    <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_CATALOG</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// TABLE_SCHEMA</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_NAME</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// COLUMN_NAME</comment>
                    <argument><expr><name>column</name></expr></argument>,
                    <comment type="line">// PRIVILEGE_TYPE</comment>
                    <argument><expr><name>right</name></expr></argument>,
                    <comment type="line">// IS_GRANTABLE</comment>
                    <argument><expr><name>isGrantable</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getMaxDataModificationId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SETTINGS</name></expr>:</case>
        <case>case <expr><name>SEQUENCES</name></expr>:</case>
        <case>case <expr><name>IN_DOUBT</name></expr>:</case>
        <case>case <expr><name>SESSIONS</name></expr>:</case>
        <case>case <expr><name>LOCKS</name></expr>:</case>
        <case>case <expr><name>SESSION_STATE</name></expr>:</case>
            <return>return <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
        </block_content>}</block></switch>
        <return>return <expr><call><name><name>database</name><operator>.</operator><name>getModificationDataId</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isView</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>isView</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getRowCount</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getRowCount</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getRowCountApproximation</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getRowCount</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>getRowCount</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>approximation</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>INFORMATION_SCHEMA_CATALOG_NAME</name></expr>:</case>
            <return>return <expr><literal type="number">1L</literal></expr>;</return>
        <case>case <expr><name>COLLATIONS</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Locale</name><index>[]</index></name></type> <name>locales</name> <init>= <expr><call><name><name>CompareMode</name><operator>.</operator><name>getCollationLocales</name></name><argument_list>(<argument><expr><name>approximation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>locales</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>locales</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SCHEMATA</name></expr>:</case>
            <return>return <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllSchemas</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name>IN_DOUBT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>InDoubtTransaction</name></argument>&gt;</argument_list></name></type> <name>inDoubt</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInDoubtTransactions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>inDoubt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name><name>inDoubt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="number">0L</literal></expr>;</return>
        <case>case <expr><name>ROLES</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>RightOwner</name></type> <name>rightOwner</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllUsersAndRoles</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>rightOwner</name> <operator>instanceof</operator> <name>Role</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>count</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>SESSIONS</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSessionCount</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><literal type="number">1L</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        <case>case <expr><name>USERS</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>RightOwner</name></type> <name>rightOwner</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllUsersAndRoles</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>rightOwner</name> <operator>instanceof</operator> <name>User</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>count</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><literal type="number">1L</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></switch>
        <if_stmt><if>if <condition>(<expr><name>approximation</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>ROW_COUNT_APPROXIMATION</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>canGetRowCount</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>INFORMATION_SCHEMA_CATALOG_NAME</name></expr>:</case>
        <case>case <expr><name>COLLATIONS</name></expr>:</case>
        <case>case <expr><name>SCHEMATA</name></expr>:</case>
        <case>case <expr><name>IN_DOUBT</name></expr>:</case>
        <case>case <expr><name>SESSIONS</name></expr>:</case>
        <case>case <expr><name>USERS</name></expr>:</case>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name>ROLES</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Data type information.
     */</comment>
    <class><specifier>static</specifier> <specifier>final</specifier> class <name>DataTypeInformation</name> <block>{

        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>DataTypeInformation</name></type> <name>NULL</name> <init>= <expr><operator>new</operator> <call><name>DataTypeInformation</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * DATA_TYPE.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>dataType</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * CHARACTER_MAXIMUM_LENGTH and CHARACTER_OCTET_LENGTH.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Value</name></type> <name>characterPrecision</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * NUMERIC_PRECISION.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Value</name></type> <name>numericPrecision</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * NUMERIC_PRECISION_RADIX.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Value</name></type> <name>numericPrecisionRadix</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * NUMERIC_SCALE.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Value</name></type> <name>numericScale</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * DATETIME_PRECISION.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Value</name></type> <name>datetimePrecision</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * INTERVAL_PRECISION.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Value</name></type> <name>intervalPrecision</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * INTERVAL_TYPE.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Value</name></type> <name>intervalType</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * MAXIMUM_CARDINALITY.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Value</name></type> <name>maximumCardinality</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasCharsetAndCollation</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * DECLARED_DATA_TYPE.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>declaredDataType</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * DECLARED_NUMERIC_PRECISION.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Value</name></type> <name>declaredNumericPrecision</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * DECLARED_NUMERIC_SCALE.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Value</name></type> <name>declaredNumericScale</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * GEOMETRY_TYPE.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>geometryType</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * GEOMETRY_SRID.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Value</name></type> <name>geometrySrid</name></decl>;</decl_stmt>

        <function><type><specifier>static</specifier> <name>DataTypeInformation</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>typeInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>typeInfo</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>dataType</name> <init>= <expr><call><name><name>Value</name><operator>.</operator><name>getTypeName</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueBigint</name></type> <name>characterPrecision</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueInteger</name></type> <name>numericPrecision</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>numericScale</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>numericPrecisionRadix</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>,
                    <decl><type ref="prev"/><name>datetimePrecision</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>intervalPrecision</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>maximumCardinality</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>intervalType</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hasCharsetAndCollation</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>declaredDataType</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueInteger</name></type> <name>declaredNumericPrecision</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>declaredNumericScale</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>geometryType</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueInteger</name></type> <name>geometrySrid</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>:</case>
                <expr_stmt><expr><name>hasCharsetAndCollation</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <comment type="line">//$FALL-THROUGH$</comment>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
                <expr_stmt><expr><name>characterPrecision</name> <operator>=</operator> <call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
                <expr_stmt><expr><name>numericPrecision</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>numericScale</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>numericPrecisionRadix</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>declaredDataType</name> <operator>=</operator> <name>dataType</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><name>numericPrecision</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>numericScale</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>numericPrecisionRadix</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>declaredDataType</name> <operator>=</operator> <ternary><condition><expr><call><name><name>typeInfo</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"DECIMAL"</literal></expr> </then><else>: <expr><literal type="string">"NUMERIC"</literal></expr></else></ternary></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>typeInfo</name><operator>.</operator><name>getDeclaredPrecision</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>declaredNumericPrecision</name> <operator>=</operator> <name>numericPrecision</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>typeInfo</name><operator>.</operator><name>getDeclaredScale</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>declaredNumericScale</name> <operator>=</operator> <name>numericScale</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><name>numericPrecision</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>numericPrecisionRadix</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>declaredPrecision</name> <init>= <expr><call><name><name>typeInfo</name><operator>.</operator><name>getDeclaredPrecision</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>declaredPrecision</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>declaredDataType</name> <operator>=</operator> <literal type="string">"FLOAT"</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>declaredPrecision</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>declaredNumericPrecision</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>declaredPrecision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>declaredDataType</name> <operator>=</operator> <name>dataType</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>:</case>
                <expr_stmt><expr><name>numericPrecision</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>numericPrecisionRadix</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>declaredDataType</name> <operator>=</operator> <name>dataType</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>typeInfo</name><operator>.</operator><name>getDeclaredPrecision</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>declaredNumericPrecision</name> <operator>=</operator> <name>numericPrecision</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MONTH</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_SECOND</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_HOUR</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_MINUTE</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_MINUTE</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>:</case>
                <expr_stmt><expr><name>intervalType</name> <operator>=</operator> <call><name><name>IntervalQualifier</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>type</name> <operator>-</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>dataType</name> <operator>=</operator> <literal type="string">"INTERVAL"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>intervalPrecision</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//$FALL-THROUGH$</comment>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case>
                <expr_stmt><expr><name>datetimePrecision</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case> <block>{<block_content>
                <decl_stmt><decl><type><name>ExtTypeInfoGeometry</name></type> <name>extTypeInfo</name> <init>= <expr><operator>(</operator><name>ExtTypeInfoGeometry</name><operator>)</operator> <call><name><name>typeInfo</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>extTypeInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>typeCode</name> <init>= <expr><call><name><name>extTypeInfo</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>typeCode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>geometryType</name> <operator>=</operator> <call><name><name>EWKTUtils</name><operator>.</operator><name>formatGeometryTypeAndDimensionSystem</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>typeCode</name></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>Integer</name></type> <name>srid</name> <init>= <expr><call><name><name>extTypeInfo</name><operator>.</operator><name>getSrid</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>srid</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>geometrySrid</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>srid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
                <expr_stmt><expr><name>maximumCardinality</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch>
            <return>return <expr><operator>new</operator> <call><name>DataTypeInformation</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>, <argument><expr><name>characterPrecision</name></expr></argument>, <argument><expr><name>numericPrecision</name></expr></argument>, <argument><expr><name>numericPrecisionRadix</name></expr></argument>,
                    <argument><expr><name>numericScale</name></expr></argument>, <argument><expr><name>datetimePrecision</name></expr></argument>, <argument><expr><name>intervalPrecision</name></expr></argument>,
                    <argument><expr><ternary><condition><expr><name>intervalType</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>intervalType</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>maximumCardinality</name></expr></argument>,
                    <argument><expr><name>hasCharsetAndCollation</name></expr></argument>, <argument><expr><name>declaredDataType</name></expr></argument>, <argument><expr><name>declaredNumericPrecision</name></expr></argument>, <argument><expr><name>declaredNumericScale</name></expr></argument>,
                    <argument><expr><name>geometryType</name></expr></argument>, <argument><expr><name>geometrySrid</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <constructor><specifier>private</specifier> <name>DataTypeInformation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataType</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>characterPrecision</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>numericPrecision</name></decl></parameter>,
                <parameter><decl><type><name>Value</name></type> <name>numericPrecisionRadix</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>numericScale</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>datetimePrecision</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>intervalPrecision</name></decl></parameter>,
                <parameter><decl><type><name>Value</name></type> <name>intervalType</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>maximumCardinality</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hasCharsetAndCollation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>declaredDataType</name></decl></parameter>,
                <parameter><decl><type><name>Value</name></type> <name>declaredNumericPrecision</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>declaredNumericScale</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>geometryType</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>geometrySrid</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataType</name></name> <operator>=</operator> <name>dataType</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>characterPrecision</name></name> <operator>=</operator> <name>characterPrecision</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numericPrecision</name></name> <operator>=</operator> <name>numericPrecision</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numericPrecisionRadix</name></name> <operator>=</operator> <name>numericPrecisionRadix</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numericScale</name></name> <operator>=</operator> <name>numericScale</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>datetimePrecision</name></name> <operator>=</operator> <name>datetimePrecision</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>intervalPrecision</name></name> <operator>=</operator> <name>intervalPrecision</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>intervalType</name></name> <operator>=</operator> <name>intervalType</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maximumCardinality</name></name> <operator>=</operator> <name>maximumCardinality</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hasCharsetAndCollation</name></name> <operator>=</operator> <name>hasCharsetAndCollation</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>declaredDataType</name></name> <operator>=</operator> <name>declaredDataType</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>declaredNumericPrecision</name></name> <operator>=</operator> <name>declaredNumericPrecision</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>declaredNumericScale</name></name> <operator>=</operator> <name>declaredNumericScale</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>geometryType</name></name> <operator>=</operator> <name>geometryType</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>geometrySrid</name></name> <operator>=</operator> <name>geometrySrid</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

    }</block></class>

}</block></class>
</unit>
