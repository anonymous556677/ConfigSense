<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/jmx/DatabaseInfo.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jmx</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>management</name><operator>.</operator><name>ManagementFactory</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Hashtable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>JMException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>MBeanServer</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>ObjectName</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Command</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>ConnectionInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>NetworkConnectionInfo</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The MBean implementation.
 *
 * @author Eric Dong
 * @author Thomas Mueller
 */</comment>
<class><specifier>public</specifier> class <name>DatabaseInfo</name> <super_list><implements>implements <super><name>DatabaseInfoMBean</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ObjectName</name></argument>&gt;</argument_list></name></type> <name>MBEANS</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Database. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Database</name></type> <name>database</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>DatabaseInfo</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>database</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>database</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Argument 'database' must not be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>database</name></name> <operator>=</operator> <name>database</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns a JMX new ObjectName instance.
     *
     * @param name name of the MBean
     * @param path the path
     * @return a new ObjectName instance
     * @throws JMException if the ObjectName could not be created
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ObjectName</name></type> <name>getObjectName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>JMException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name><name>path</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Hashtable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>Hashtable</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>ObjectName</name><argument_list>(<argument><expr><literal type="string">"org.h2"</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Registers an MBean for the database.
     *
     * @param connectionInfo connection info
     * @param database database
     * @throws JMException on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>registerMBean</name><parameter_list>(<parameter><decl><type><name>ConnectionInfo</name></type> <name>connectionInfo</name></decl></parameter>,
            <parameter><decl><type><name>Database</name></type> <name>database</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JMException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>connectionInfo</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>MBEANS</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>MBeanServer</name></type> <name>mbeanServer</name> <init>= <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getPlatformMBeanServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectName</name></type> <name>mbeanObjectName</name> <init>= <expr><call><name>getObjectName</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>MBEANS</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mbeanObjectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>DatabaseInfo</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>DatabaseInfo</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>mbean</name> <init>= <expr><operator>new</operator> <call><name>DocumentedMBean</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>DatabaseInfoMBean</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mbeanServer</name><operator>.</operator><name>registerMBean</name></name><argument_list>(<argument><expr><name>mbean</name></expr></argument>, <argument><expr><name>mbeanObjectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Unregisters the MBean for the database if one is registered.
     *
     * @param name database name
     * @throws JMException on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>unregisterMBean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ObjectName</name></type> <name>mbeanObjectName</name> <init>= <expr><call><name><name>MBEANS</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mbeanObjectName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>MBeanServer</name></type> <name>mbeanServer</name> <init>= <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getPlatformMBeanServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mbeanServer</name><operator>.</operator><name>unregisterMBean</name></name><argument_list>(<argument><expr><name>mbeanObjectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isExclusive</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>database</name><operator>.</operator><name>getExclusiveSession</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isReadOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>database</name><operator>.</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getMode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getTraceLevel</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>database</name><operator>.</operator><name>getTraceSystem</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLevelFile</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setTraceLevel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>getTraceSystem</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLevelFile</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getFileWriteCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>isPersistent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>database</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMvStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFileStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWriteCount</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getFileReadCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>isPersistent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>database</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMvStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFileStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReadCount</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getFileSize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>isPersistent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMvStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFileStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>size</name> <operator>/</operator> <literal type="number">1024</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getCacheSizeMax</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>isPersistent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>database</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMvStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCacheSize</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setCacheSizeMax</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>kb</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>isPersistent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>setCacheSize</name></name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getCacheSize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>isPersistent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>database</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMvStore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCacheSizeUsed</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>Constants</name><operator>.</operator><name>FULL_VERSION</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>listSettings</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>e</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSortedSettings</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>listSessions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buff</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SessionLocal</name></type> <name>session</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getSessions</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"session id: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" user: "</literal></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>append</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>NetworkConnectionInfo</name></type> <name>networkConnectionInfo</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getNetworkConnectionInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>networkConnectionInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"server: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>networkConnectionInfo</name><operator>.</operator><name>getServer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <comment type="line">//</comment>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"clientAddr: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>networkConnectionInfo</name><operator>.</operator><name>getClient</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>clientInfo</name> <init>= <expr><call><name><name>networkConnectionInfo</name><operator>.</operator><name>getClientInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>clientInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"clientInfo: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>clientInfo</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"connected: "</literal></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>append</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getSessionStart</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Command</name></type> <name>command</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getCurrentCommand</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"statement: "</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"started: "</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getCommandStartOrEnd</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getLocks</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isLockedExclusivelyBy</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"write lock on "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"read lock on "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
                        <call><name>append</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
                        <call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>buff</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
