<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/command/query/SelectUnion.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionVisitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Parameter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>LazyResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>LocalResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultTarget</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>ColumnResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a union SELECT statement.
 */</comment>
<class><specifier>public</specifier> class <name>SelectUnion</name> <super_list><extends>extends <super><name>Query</name></super></extends></super_list> <block>{

    <enum><specifier>public</specifier> enum <name>UnionType</name> <block>{
        <comment type="block" format="javadoc">/**
         * The type of a UNION statement.
         */</comment>
        <decl><name>UNION</name></decl>,

        <comment type="block" format="javadoc">/**
         * The type of a UNION ALL statement.
         */</comment>
        <decl><name>UNION_ALL</name></decl>,

        <comment type="block" format="javadoc">/**
         * The type of an EXCEPT statement.
         */</comment>
        <decl><name>EXCEPT</name></decl>,

        <comment type="block" format="javadoc">/**
         * The type of an INTERSECT statement.
         */</comment>
        <decl><name>INTERSECT</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>UnionType</name></type> <name>unionType</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The left hand side of the union (the first subquery).
     */</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>left</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The right hand side of the union (the second subquery).
     */</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Query</name></type> <name>right</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isForUpdate</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SelectUnion</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>UnionType</name></type> <name>unionType</name></decl></parameter>, <parameter><decl><type><name>Query</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>Query</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unionType</name></name> <operator>=</operator> <name>unionType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>query</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isUnion</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>UnionType</name></type> <name>getUnionType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>unionType</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Query</name></type> <name>getLeft</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>left</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Query</name></type> <name>getRight</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>right</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Value</name><index>[]</index></name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>newValues</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>columnCount</name> <operator>==</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <comment type="line">// re-use the array if possible</comment>
            <expr_stmt><expr><name>newValues</name> <operator>=</operator> <name>values</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// create a new array if needed,</comment>
            <comment type="line">// for the value hash set</comment>
            <expr_stmt><expr><name>newValues</name> <operator>=</operator> <operator>new</operator> <name><name>Value</name><index>[<expr><name>columnCount</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>newValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>convertTo</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>newValues</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>LocalResult</name></type> <name>getEmptyResult</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>createLocalResult</name><argument_list>(<argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>ResultInterface</name></type> <name>queryWithoutCache</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>maxRows</name></decl></parameter>, <parameter><decl><type><name>ResultTarget</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>OffsetFetch</name></type> <name>offsetFetch</name> <init>= <expr><call><name>getOffsetFetch</name><argument_list>(<argument><expr><name>maxRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>offset</name> <init>= <expr><name><name>offsetFetch</name><operator>.</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>fetch</name> <init>= <expr><name><name>offsetFetch</name><operator>.</operator><name>fetch</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>fetchPercent</name> <init>= <expr><name><name>offsetFetch</name><operator>.</operator><name>fetchPercent</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><name>optimizeInsertFromSelect</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>unionType</name> <operator>==</operator> <name><name>UnionType</name><operator>.</operator><name>UNION_ALL</name></name> <operator>&amp;&amp;</operator> <name>target</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>sort</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>distinct</name> <operator>&amp;&amp;</operator> <name>fetch</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="null">null</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>isLazyQueryExecution</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>unionType</name> <operator>==</operator> <name><name>UnionType</name><operator>.</operator><name>UNION_ALL</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>distinct</name> <operator>&amp;&amp;</operator>
                <name>sort</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>randomAccessResult</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isForUpdate</name> <operator>&amp;&amp;</operator>
                <name>offset</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>fetchPercent</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>withTies</name> <operator>&amp;&amp;</operator> <call><name>isReadOnly</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// limit 0 means no rows</comment>
            <if_stmt><if>if <condition>(<expr><name>fetch</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>LazyResultUnion</name></type> <name>lazyResult</name> <init>= <expr><operator>new</operator> <call><name>LazyResultUnion</name><argument_list>(<argument><expr><name>expressionArray</name></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>fetch</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>lazyResult</name><operator>.</operator><name>setLimit</name></name><argument_list>(<argument><expr><name>fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>lazyResult</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>LocalResult</name></type> <name>result</name> <init>= <expr><call><name>createLocalResult</name><argument_list>(<argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sort</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setSortOrder</name></name><argument_list>(<argument><expr><name>sort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>distinct</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>setDistinctIfPossible</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>setDistinctIfPossible</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setDistinct</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name>unionType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>UNION</name></expr>:</case>
        <case>case <expr><name>EXCEPT</name></expr>:</case>
            <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>setDistinctIfPossible</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>setDistinctIfPossible</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setDistinct</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>UNION_ALL</name></expr>:</case>
            <break>break;</break>
        <case>case <expr><name>INTERSECT</name></expr>:</case>
            <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>setDistinctIfPossible</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>setDistinctIfPossible</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>unionType</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <decl_stmt><decl><type><name>ResultInterface</name></type> <name>l</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResultInterface</name></type> <name>r</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>unionType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>UNION_ALL</name></expr>:</case>
        <case>case <expr><name>UNION</name></expr>:</case> <block>{<block_content>
            <while>while <condition>(<expr><call><name><name>l</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name>convert</name><argument_list>(<argument><expr><call><name><name>l</name><operator>.</operator><name>currentRow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <while>while <condition>(<expr><call><name><name>r</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name>convert</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>currentRow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>EXCEPT</name></expr>:</case> <block>{<block_content>
            <while>while <condition>(<expr><call><name><name>l</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name>convert</name><argument_list>(<argument><expr><call><name><name>l</name><operator>.</operator><name>currentRow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <while>while <condition>(<expr><call><name><name>r</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>removeDistinct</name></name><argument_list>(<argument><expr><call><name>convert</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>currentRow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>INTERSECT</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>LocalResult</name></type> <name>temp</name> <init>= <expr><call><name>createLocalResult</name><argument_list>(<argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>setDistinct</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>l</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name>convert</name><argument_list>(<argument><expr><call><name><name>l</name><operator>.</operator><name>currentRow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <while>while <condition>(<expr><call><name><name>r</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name>convert</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>currentRow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>temp</name><operator>.</operator><name>containsDistinct</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>unionType</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>finishResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>fetch</name></expr></argument>, <argument><expr><name>fetchPercent</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>LocalResult</name></type> <name>createLocalResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>columnCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>LocalResult</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>expressionArray</name></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>checkInit</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>checkInit</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <call><name><name>right</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_COUNT_DOES_NOT_MATCH</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>le</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getExpressions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// set the expressions to get the right column count and names,</comment>
        <comment type="line">// but can't validate at this time</comment>
        <expr_stmt><expr><name>expressions</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>l</name> <init>= <expr><call><name><name>le</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>visibleColumnCount</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>withTies</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hasOrder</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>WITH_TIES_WITHOUT_ORDER_BY</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>prepare</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isPrepared</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// sometimes a subquery is prepared twice (CREATE TABLE AS SELECT)</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>checkInit</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"not initialized"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>isPrepared</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// set the correct expressions now</comment>
        <expr_stmt><expr><name>expressions</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>le</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getExpressions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>re</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>getExpressions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>l</name> <init>= <expr><call><name><name>le</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>r</name> <init>= <expr><call><name><name>re</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Column</name></type> <name>col</name> <init>= <expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><call><name><name>l</name><operator>.</operator><name>getAlias</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>TypeInfo</name><operator>.</operator><name>getHigherType</name></name><argument_list>(<argument><expr><call><name><name>l</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>orderList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>initOrder</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>prepareOrder</name><argument_list>(<argument><expr><name>orderList</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>cleanupOrder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>resultColumnCount</name> <operator>=</operator> <call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>expressionArray</name> <operator>=</operator> <call><name><name>expressions</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>double</name></type> <name>getCost</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>left</name><operator>.</operator><name>getCost</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>right</name><operator>.</operator><name>getCost</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>getTables</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getTables</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>right</name><operator>.</operator><name>getTables</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>set</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setForUpdate</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>forUpdate</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>setForUpdate</name></name><argument_list>(<argument><expr><name>forUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>setForUpdate</name></name><argument_list>(<argument><expr><name>forUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>isForUpdate</name> <operator>=</operator> <name>forUpdate</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>mapColumns</name><parameter_list>(<parameter><decl><type><name>ColumnResolver</name></type> <name>resolver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setEvaluatable</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>tableFilter</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>tableFilter</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>tableFilter</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addGlobalCondition</name><parameter_list>(<parameter><decl><type><name>Parameter</name></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnId</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>comparisonType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>addParameter</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>unionType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>UNION_ALL</name></expr>:</case>
        <case>case <expr><name>UNION</name></expr>:</case>
        <case>case <expr><name>INTERSECT</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>addGlobalCondition</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>columnId</name></expr></argument>, <argument><expr><name>comparisonType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>addGlobalCondition</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>columnId</name></expr></argument>, <argument><expr><name>comparisonType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>EXCEPT</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>addGlobalCondition</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>columnId</name></expr></argument>, <argument><expr><name>comparisonType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>unionType</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getPlanSQL</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buff</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>left</name><operator>.</operator><name>getPlanSQL</name></name><argument_list>(<argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>unionType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>UNION_ALL</name></expr>:</case>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\nUNION ALL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>UNION</name></expr>:</case>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\nUNION\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>INTERSECT</name></expr>:</case>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\nINTERSECT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>EXCEPT</name></expr>:</case>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\nEXCEPT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>unionType</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>right</name><operator>.</operator><name>getPlanSQL</name></name><argument_list>(<argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendEndOfQueryToSQL</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>isForUpdate</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\nFOR UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>buff</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isEverything</name><parameter_list>(<parameter><decl><type><name>ExpressionVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>left</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>right</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>updateAggregate</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>updateAggregate</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>updateAggregate</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>fireBeforeSelectTriggers</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>fireBeforeSelectTriggers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>fireBeforeSelectTriggers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>allowGlobalConditions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>left</name><operator>.</operator><name>allowGlobalConditions</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>right</name><operator>.</operator><name>allowGlobalConditions</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isConstantQuery</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>isConstantQuery</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>left</name><operator>.</operator><name>isConstantQuery</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>right</name><operator>.</operator><name>isConstantQuery</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Lazy execution for this union.
     */</comment>
    <class><specifier>private</specifier> <specifier>final</specifier> class <name>LazyResultUnion</name> <super_list><extends>extends <super><name>LazyResult</name></super></extends></super_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResultInterface</name></type> <name>l</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResultInterface</name></type> <name>r</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>leftDone</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>rightDone</name></decl>;</decl_stmt>

        <constructor><name>LazyResultUnion</name><parameter_list>(<parameter><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>expressions</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name>getSession</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>expressions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>columnCount</name></name> <operator>=</operator> <name>columnCount</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>getVisibleColumnCount</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>columnCount</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name><name>Value</name><index>[]</index></name></type> <name>fetchNextRow</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>rightDone</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>leftDone</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name><name>left</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>l</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name><name>l</name><operator>.</operator><name>currentRow</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>leftDone</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>right</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>r</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>r</name><operator>.</operator><name>currentRow</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>rightDone</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>leftDone</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>rightDone</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
