<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/command/Parser.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 *
 * Nicolas Fortin, Atelier SIG, IRSTV FR CNRS 24888
 * Support for the operator "&amp;&amp;" as an alias for SPATIAL_INTERSECTS
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>ASTERISK</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>AT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>BIGGER</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>BIGGER_EQUAL</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>CLOSE_BRACE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>CLOSE_BRACKET</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>CLOSE_PAREN</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>COLON</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>COLON_COLON</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>COLON_EQ</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>COMMA</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>CONCATENATION</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>DOT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>END_OF_INPUT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>EQUAL</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>LITERAL</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>MINUS_SIGN</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>NOT_EQUAL</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>NOT_TILDE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>OPEN_BRACE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>OPEN_BRACKET</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>OPEN_PAREN</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>PARAMETER</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>PERCENT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>PLUS_SIGN</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>SEMICOLON</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>SLASH</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>SMALLER</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>SMALLER_EQUAL</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>SPATIAL_INTERSECTS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>TILDE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Token</name><operator>.</operator><name>TOKENS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>ALL</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>AND</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>ANY</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>ARRAY</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>AS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>ASYMMETRIC</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>AUTHORIZATION</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>BETWEEN</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CASE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CAST</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CHECK</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CONSTRAINT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CROSS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CURRENT_CATALOG</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CURRENT_DATE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CURRENT_PATH</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CURRENT_ROLE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CURRENT_SCHEMA</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CURRENT_TIME</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CURRENT_TIMESTAMP</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>CURRENT_USER</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>DAY</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>DEFAULT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>DISTINCT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>ELSE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>END</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>EXCEPT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>EXISTS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>FALSE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>FETCH</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>FIRST_KEYWORD</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>FOR</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>FOREIGN</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>FROM</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>FULL</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>GROUP</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>HAVING</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>HOUR</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>IDENTIFIER</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>IF</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>IN</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>INNER</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>INTERSECT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>INTERVAL</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>IS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>JOIN</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>KEY</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>LAST_KEYWORD</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>LEFT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>LIKE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>LIMIT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>LOCALTIME</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>LOCALTIMESTAMP</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>MINUS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>MINUTE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>MONTH</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>NATURAL</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>NOT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>NULL</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>OFFSET</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>ON</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>OR</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>ORDER</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>PRIMARY</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>QUALIFY</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>RIGHT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>ROW</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>ROWNUM</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>SECOND</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>SELECT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>SESSION_USER</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>SET</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>SOME</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>SYMMETRIC</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>SYSTEM_USER</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>TABLE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>TO</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>TRUE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>UNION</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>UNIQUE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>UNKNOWN</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>USER</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>USING</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>VALUE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>VALUES</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>WHEN</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>WHERE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>WINDOW</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>WITH</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>YEAR</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name><operator>.</operator><name>_ROWID_</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>Charset</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>Collator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>IntervalQualifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>Trigger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterDomainAddConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterDomainDropConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterDomainExpressions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterDomainRename</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterDomainRenameConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterIndexRename</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterSchemaRename</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterSequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterTableAddConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterTableAlterColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterTableDropConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterTableRename</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterTableRenameColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterTableRenameConstraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterUser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>AlterView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>Analyze</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CommandWithColumns</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateAggregate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateConstant</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateDomain</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateFunctionAlias</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateIndex</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateLinkedTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateRole</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateSchema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateSequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateSynonym</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateTrigger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateUser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DeallocateProcedure</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DefineCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropAggregate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropConstant</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropDomain</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropFunctionAlias</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropIndex</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropRole</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropSchema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropSequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropSynonym</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropTrigger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropUser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DropView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>GrantRevoke</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>PrepareProcedure</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>SequenceOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>SetComment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>TruncateTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>AlterTableSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>BackupCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>Call</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>CommandWithValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>DataChangeStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>Delete</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>ExecuteImmediate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>ExecuteProcedure</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>Explain</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>Help</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>Insert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>Merge</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>MergeUsing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>NoOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>RunScriptCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>ScriptCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>SetClauseList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>SetSessionCharacteristics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>SetTypes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>TransactionCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>Update</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>Query</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>QueryOrderBy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>Select</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>SelectUnion</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>TableValueConstructor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintActionType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>ConnectionInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbSettings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>IsolationLevel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Mode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Mode</name><operator>.</operator><name>ModeEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Procedure</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Right</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Alias</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ArrayConstructorByQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ArrayElementReference</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>BinaryOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>BinaryOperation</name><operator>.</operator><name>OpType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ConcatenationOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>DomainValueExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionWithFlags</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionWithVariableParameters</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>FieldReference</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Format</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Format</name><operator>.</operator><name>FormatEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Parameter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Rownum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>SearchedCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>SequenceValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>SimpleCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Subquery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>TimeZoneOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>TypedValueExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>UnaryOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ValueExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Variable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Wildcard</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>aggregate</name><operator>.</operator><name>AbstractAggregate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>aggregate</name><operator>.</operator><name>Aggregate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>aggregate</name><operator>.</operator><name>AggregateType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>aggregate</name><operator>.</operator><name>JavaAggregate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>aggregate</name><operator>.</operator><name>ListaggArguments</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>analysis</name><operator>.</operator><name>DataAnalysisOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>analysis</name><operator>.</operator><name>Window</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>analysis</name><operator>.</operator><name>WindowFrame</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>analysis</name><operator>.</operator><name>WindowFrameBound</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>analysis</name><operator>.</operator><name>WindowFrameBoundType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>analysis</name><operator>.</operator><name>WindowFrameExclusion</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>analysis</name><operator>.</operator><name>WindowFrameUnits</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>analysis</name><operator>.</operator><name>WindowFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>analysis</name><operator>.</operator><name>WindowFunctionType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>BetweenPredicate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>BooleanTest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>CompareLike</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>CompareLike</name><operator>.</operator><name>LikeType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>Comparison</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>ConditionAndOr</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>ConditionAndOrN</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>ConditionIn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>ConditionInParameter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>ConditionInQuery</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>ConditionLocalAndGlobal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>ConditionNot</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>ExistsPredicate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>IsJsonPredicate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>NullPredicate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>TypePredicate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>UniquePredicate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>ArrayFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>BitFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>BuiltinFunctions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>CSVWriteFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>CardinalityExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>CastSpecification</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>CoalesceFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>CompatibilitySequenceValueFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>CompressFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>ConcatFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>CryptFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>CurrentDateTimeValueFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>CurrentGeneralValueSpecification</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>DBObjectFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>DataTypeSQLFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>DateTimeFormatFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>DateTimeFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>DayMonthNameFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>FileFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>HashFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>JavaFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>JsonConstructorFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>LengthFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>MathFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>MathFunction1</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>MathFunction2</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>NullIfFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>RandFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>RegexpFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>SessionControlFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>SetFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>SignalFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>SoundexFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>StringFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>StringFunction1</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>StringFunction2</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>SubstringFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>SysInfoFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>TableInfoFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>ToCharFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>TrimFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>TruncateValueFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>XMLFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>table</name><operator>.</operator><name>ArrayTableFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>table</name><operator>.</operator><name>CSVReadFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>table</name><operator>.</operator><name>JavaTableFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>table</name><operator>.</operator><name>LinkSchemaFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>table</name><operator>.</operator><name>TableFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mode</name><operator>.</operator><name>FunctionsPostgreSQL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mode</name><operator>.</operator><name>ModeFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mode</name><operator>.</operator><name>OnDuplicateKeyValues</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mode</name><operator>.</operator><name>Regclass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Domain</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>FunctionAlias</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Sequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>UserAggregate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>UserDefinedFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>DataChangeDeltaTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>DataChangeDeltaTable</name><operator>.</operator><name>ResultOption</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>DualTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>FunctionTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>IndexColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>IndexHints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>RangeTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>HasSQL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>IntervalUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>geometry</name><operator>.</operator><name>EWKTUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONItemType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>json</name><operator>.</operator><name>JsonConstructorUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>CompareMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ExtTypeInfoEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ExtTypeInfoGeometry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ExtTypeInfoNumeric</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ExtTypeInfoRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBigint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueDate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueDouble</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueGeometry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueInteger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueInterval</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueJson</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNumeric</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTime</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTimeTimeZone</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTimestamp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTimestampTimeZone</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueUuid</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueVarchar</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The parser is used to convert a SQL statement string to an command object.
 *
 * @author Thomas Mueller
 * @author Noel Grandin
 * @author Nicolas Fortin, Atelier SIG, IRSTV FR CNRS 24888
 */</comment>
<class><specifier>public</specifier> class <name>Parser</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WITH_STATEMENT_SUPPORTS_LIMITED_SUB_STATEMENTS</name> <init>=
            <expr><literal type="string">"WITH statement supports only SELECT, TABLE, VALUES, "</literal> <operator>+</operator>
            <literal type="string">"CREATE TABLE, INSERT, UPDATE, MERGE or DELETE statements"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Database</name></type> <name>database</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SessionLocal</name></type> <name>session</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @see org.h2.engine.DbSettings#databaseToLower
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>identifiersToLower</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * @see org.h2.engine.DbSettings#databaseToUpper
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>identifiersToUpper</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @see org.h2.engine.SessionLocal#isVariableBinary()
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>variableBinary</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BitSet</name></type> <name>nonKeywords</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tokenIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Token</name></type> <name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>currentTokenType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>currentToken</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>sqlCommand</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CreateView</name></type> <name>createView</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Prepared</name></type> <name>currentPrepared</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Select</name></type> <name>currentSelect</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>TableView</name></argument>&gt;</argument_list></name></type> <name>cteCleanups</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Parameter</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Parameter</name></argument>&gt;</argument_list></name></type> <name>suppliedParameters</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>schemaName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>expectedList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rightsChecked</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>recompileAlways</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>literalsChecked</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>orderInFrom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>parseDomainConstraint</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Parses the specified collection of non-keywords.
     *
     * @param nonKeywords array of non-keywords in upper case
     * @return bit set of non-keywords, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BitSet</name></type> <name>parseNonKeywords</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>nonKeywords</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>nonKeywords</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>BitSet</name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>nonKeyword</name> <range>: <expr><name>nonKeywords</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>binarySearch</name></name><argument_list>(<argument><expr><name>TOKENS</name></expr></argument>, <argument><expr><name>FIRST_KEYWORD</name></expr></argument>, <argument><expr><name>LAST_KEYWORD</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nonKeyword</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><ternary><condition><expr><call><name><name>set</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>set</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Formats a comma-separated list of keywords.
     *
     * @param nonKeywords bit set of non-keywords, or {@code null}
     * @return comma-separated list of non-keywords
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>formatNonKeywords</name><parameter_list>(<parameter><decl><type><name>BitSet</name></type> <name>nonKeywords</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nonKeywords</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>nonKeywords</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name><name>nonKeywords</name><operator>.</operator><name>nextSetBit</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>FIRST_KEYWORD</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>LAST_KEYWORD</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>builder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>TOKENS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a new instance of parser.
     *
     * @param session the session
     */</comment>
    <constructor><specifier>public</specifier> <name>Parser</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>database</name></name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DbSettings</name></type> <name>settings</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identifiersToLower</name></name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>databaseToLower</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identifiersToUpper</name></name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>databaseToUpper</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>variableBinary</name></name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>isVariableBinary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nonKeywords</name></name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getNonKeywords</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new instance of parser for special use cases.
     */</comment>
    <constructor><specifier>public</specifier> <name>Parser</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>database</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>identifiersToLower</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>identifiersToUpper</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>variableBinary</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nonKeywords</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>session</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Parse the statement and prepare it for execution.
     *
     * @param sql the SQL statement to parse
     * @return the prepared object
     */</comment>
    <function><type><specifier>public</specifier> <name>Prepared</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Prepared</name></type> <name>p</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>END_OF_INPUT</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse a statement or a list of statements, and prepare it for execution.
     *
     * @param sql the SQL statement to parse
     * @return the command object
     */</comment>
    <function><type><specifier>public</specifier> <name>Command</name></type> <name>prepareCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Prepared</name></type> <name>p</name> <init>= <expr><call><name>parse</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>SEMICOLON</name> <operator>&amp;&amp;</operator> <name>currentTokenType</name> <operator>!=</operator> <name>END_OF_INPUT</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><name>SEMICOLON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>CommandContainer</name><operator>.</operator><name>clearCTE</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>t</name></expr>;</throw>
            </block_content>}</block></catch></try>
            <decl_stmt><decl><type><name>int</name></type> <name>sqlIndex</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sqlIndex</name> <operator>&lt;</operator> <call><name><name>sql</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>sql</name> <operator>=</operator> <call><name><name>sql</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sqlIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>CommandContainer</name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name>CommandContainer</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>SEMICOLON</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>END_OF_INPUT</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name>prepareCommandList</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name><name>sqlCommand</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getRemainingTokens</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>c</name></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>addSQL</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CommandList</name></type> <name>prepareCommandList</name><parameter_list>(<parameter><decl><type><name>CommandContainer</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>Prepared</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>remainingSql</name></decl></parameter>,
            <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>remainingTokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Prepared</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>p</name> <operator>instanceof</operator> <name>DefineCommand</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Next commands may depend on results of this command.</comment>
                    <return>return <expr><operator>new</operator> <call><name>CommandList</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>remainingSql</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>suppliedParameters</name> <operator>=</operator> <name>parameters</name></expr>;</expr_stmt>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse</name><argument_list>(<argument><expr><name>remainingSql</name></expr></argument>, <argument><expr><name>remainingTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <comment type="line">// This command may depend on results of previous commands.</comment>
                    <if_stmt><if>if <condition>(<expr><call><name><name>ex</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>CANNOT_MIX_INDEXED_AND_UNINDEXED_PARAMS</name></name></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><name>ex</name></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                    <return>return <expr><operator>new</operator> <call><name>CommandList</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>remainingSql</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></catch></try>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>SEMICOLON</name> <operator>&amp;&amp;</operator> <name>currentTokenType</name> <operator>!=</operator> <name>END_OF_INPUT</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><name>SEMICOLON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <while>while <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>SEMICOLON</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>END_OF_INPUT</name></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>remainingSql</name> <operator>=</operator> <call><name><name>sqlCommand</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>remainingTokens</name> <operator>=</operator> <call><name>getRemainingTokens</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><operator>new</operator> <call><name>CommandList</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>clearCTE</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>t</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>getRemainingTokens</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>subList</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><name>tokenIndex</name></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>remainingTokens</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>subList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>subList</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Token</name><operator>.</operator><name>EndOfInputToken</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Token</name></type> <name>token</name> <range>: <expr><name>remainingTokens</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>subtractFromStart</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>remainingTokens</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse the statement, but don't prepare it for execution.
     *
     * @param sql the SQL statement to parse
     * @param tokens tokens, or null
     * @return the prepared object
     */</comment>
    <function><type><name>Prepared</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Prepared</name></type> <name>p</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <comment type="line">// first, try the fast variant</comment>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>SYNTAX_ERROR_1</name></name></expr>)</condition> <block>{<block_content>
                <comment type="line">// now, get the detailed exception</comment>
                <expr_stmt><expr><call><name>resetTokenIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parse</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>addSQL</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setPrepareAlways</name></name><argument_list>(<argument><expr><name>recompileAlways</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setParameterList</name></name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withExpectedList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>withExpectedList</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>expectedList</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>expectedList</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>parameters</name> <operator>=</operator> <ternary><condition><expr><name>suppliedParameters</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>suppliedParameters</name></expr> </then><else>: <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentSelect</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentPrepared</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>createView</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cteCleanups</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>recompileAlways</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Prepared</name></type> <name>p</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parsePrepared</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setCteCleanups</name></name><argument_list>(<argument><expr><name>cteCleanups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>cteCleanups</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>CommandContainer</name><operator>.</operator><name>clearCTE</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>cteCleanups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><name>t</name></expr>;</throw>
        </block_content>}</block></catch></try>
        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parsePrepared</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Prepared</name></type> <name>c</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>END_OF_INPUT</name></expr>:</case>
        <case>case <expr><name>SEMICOLON</name></expr>:</case>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setSQL</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>c</name></expr>;</return>
        <case>case <expr><name>PARAMETER</name></expr>:</case>
            <comment type="line">// read the ? as a parameter</comment>
            <comment type="line">// this is an 'out' parameter - set a dummy value</comment>
            <expr_stmt><expr><call><name>readParameter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setValue</name><argument_list>(<argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>start</name> <operator>=</operator> <name>tokenIndex</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"CALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>OPEN_PAREN</name></expr>:</case>
        <case>case <expr><name>SELECT</name></expr>:</case>
        <case>case <expr><name>TABLE</name></expr>:</case>
        <case>case <expr><name>VALUES</name></expr>:</case>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseQuery</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>WITH</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseWithStatementOrQuery</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SET</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>IDENTIFIER</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/*
             * Convert a-z to A-Z. This method is safe, because only A-Z
             * characters are considered below.
             *
             * Unquoted identifier is never empty.
             */</comment>
            <switch>switch <condition>(<expr><call><name><name>currentToken</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffdf</literal></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'A'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseAlter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ANALYZE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseAnalyze</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'B'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"BACKUP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseBackup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseBegin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'C'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CALL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseCall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHECKPOINT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseCheckpoint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseComment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'D'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseDelete</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseDrop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DECLARE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// support for DECLARE GLOBAL TEMPORARY TABLE...</comment>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnum</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>ModeEnum</name><operator>.</operator><name>MSSQLServer</name></name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DEALLOCATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="block">/*
                     * PostgreSQL-style DEALLOCATE is disabled in MSSQLServer
                     * mode because PostgreSQL-style EXECUTE is redefined in
                     * this mode.
                     */</comment>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseDeallocate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'E'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"EXPLAIN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseExplain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnum</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>ModeEnum</name><operator>.</operator><name>MSSQLServer</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"EXECUTE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseExecutePostgre</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"EXEC"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"EXECUTE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseExecuteSQLServer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'G'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"GRANT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseGrantRevoke</name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>GRANT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'H'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"HELP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseHelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'I'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseInsert</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'M'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MERGE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseMerge</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'P'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PREPARE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parsePrepare</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'R'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ROLLBACK"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseRollback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"REVOKE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseGrantRevoke</name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>REVOKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RUNSCRIPT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseRunScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RELEASE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseReleaseSavepoint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>replaceInto</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"REPLACE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseReplace</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'S'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SAVEPOINT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseSavepoint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SCRIPT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SHUTDOWN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SHOW"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseShow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'T'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TRUNCATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseTruncate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'U'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseUpdate</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"USE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>parseUse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></switch>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>parameters</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><call><name><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>parameters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>withParamValues</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_BRACE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>withParamValues</name></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>readLong</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <call><name><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>parameters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COLON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>expr</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name><name>expr</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>expr</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_BRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Parameter</name></type> <name>p</name> <range>: <expr><name>parameters</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>checkSet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>withParamValues</name> <operator>||</operator> <call><name><name>c</name><operator>.</operator><name>getSQL</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setSQL</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>c</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DbException</name></type> <name>getSyntaxError</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>expectedList</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>DbException</name><operator>.</operator><name>getSyntaxError</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>, <argument><expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>DbException</name><operator>.</operator><name>getSyntaxError</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>, <argument><expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><name>expectedList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseBackup</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>BackupCommand</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>BackupCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFileName</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseAnalyze</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Analyze</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Analyze</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name>readTableOrView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTable</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SAMPLE_SIZE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTop</name></name><argument_list>(<argument><expr><call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TransactionCommand</name></type> <name>parseBegin</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TransactionCommand</name></type> <name>command</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"WORK"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>TransactionCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>BEGIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TransactionCommand</name></type> <name>parseCommit</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TransactionCommand</name></type> <name>command</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>TransactionCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>COMMIT_TRANSACTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTransactionName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>TransactionCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>COMMIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"WORK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TransactionCommand</name></type> <name>parseShutdown</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>CommandInterface</name><operator>.</operator><name>SHUTDOWN</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IMMEDIATELY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>CommandInterface</name><operator>.</operator><name>SHUTDOWN_IMMEDIATELY</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COMPACT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>CommandInterface</name><operator>.</operator><name>SHUTDOWN_COMPACT</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DEFRAG"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>CommandInterface</name><operator>.</operator><name>SHUTDOWN_DEFRAG</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SCRIPT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>TransactionCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TransactionCommand</name></type> <name>parseRollback</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TransactionCommand</name></type> <name>command</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>TransactionCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ROLLBACK_TRANSACTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTransactionName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"WORK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"SAVEPOINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>TransactionCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ROLLBACK_TO_SAVEPOINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSavepointName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>TransactionCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ROLLBACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parsePrepare</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TransactionCommand</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>TransactionCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>PREPARE_COMMIT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTransactionName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>parsePrepareProcedure</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parsePrepareProcedure</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnum</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ModeEnum</name><operator>.</operator><name>MSSQLServer</name></name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            <comment type="block">/*
             * PostgreSQL-style PREPARE is disabled in MSSQLServer mode
             * because PostgreSQL-style EXECUTE is redefined in this
             * mode.
             */</comment>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>procedureName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name>parseColumnForTable</name><argument_list>(<argument><expr><literal type="string">"C"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Prepared</name></type> <name>prep</name> <init>= <expr><call><name>parsePrepared</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrepareProcedure</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>PrepareProcedure</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setProcedureName</name></name><argument_list>(<argument><expr><name>procedureName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPrepared</name></name><argument_list>(<argument><expr><name>prep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TransactionCommand</name></type> <name>parseSavepoint</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TransactionCommand</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>TransactionCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>SAVEPOINT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSavepointName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseReleaseSavepoint</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Prepared</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SAVEPOINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Schema</name></type> <name>findSchema</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schemaName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>findSchema</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"SESSION"</literal></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// for local temporary tables</comment>
                <expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>schema</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Schema</name></type> <name>getSchema</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schemaName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name>findSchema</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SCHEMA_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>schema</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Schema</name></type> <name>getSchema</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getSchema</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <comment type="block">/*
     * Gets the current schema for scenarios that need a guaranteed, non-null schema object.
     *
     * This routine is solely here
     * because of the function readIdentifierWithSchema(String defaultSchemaName) - which
     * is often called with a null parameter (defaultSchemaName) - then 6 lines into the function
     * that routine nullifies the state field schemaName - which I believe is a bug.
     *
     * There are about 7 places where "readIdentifierWithSchema(null)" is called in this file.
     *
     * In other words when is it legal to not have an active schema defined by schemaName ?
     * I don't think it's ever a valid case. I don't understand when that would be allowed.
     * I spent a long time trying to figure this out.
     * As another proof of this point, the command "SET SCHEMA=NULL" is not a valid command.
     *
     * I did try to fix this in readIdentifierWithSchema(String defaultSchemaName)
     * - but every fix I tried cascaded so many unit test errors - so
     * I gave up. I think this needs a bigger effort to fix his, as part of bigger, dedicated story.
     *
     */</comment>
    <function><type><specifier>private</specifier> <name>Schema</name></type> <name>getSchemaWithDefault</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schemaName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getSchema</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Column</name></type> <name>readTableColumn</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>columnName</name> <operator>=</operator> <call><name>readTableColumn</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>filter</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColumn</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>readTableColumn</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableAlias</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>schema</name> <init>= <expr><name>tableAlias</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>tableAlias</name> <operator>=</operator> <name>columnName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>columnName</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>checkDatabaseName</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>schema</name> <operator>=</operator> <name>tableAlias</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tableAlias</name> <operator>=</operator> <name>columnName</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>columnName</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equalsToken</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><call><name><name>filter</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SCHEMA_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equalsToken</name><argument_list>(<argument><expr><name>tableAlias</name></expr></argument>, <argument><expr><call><name><name>filter</name><operator>.</operator><name>getTableAlias</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>TABLE_OR_VIEW_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>tableAlias</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>columnName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Update</name></type> <name>parseUpdate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Update</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Update</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>currentPrepared</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>fetch</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>topInDML</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TOP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fetch</name> <operator>=</operator> <call><name>readTerm</name><argument_list>()</argument_list></call><operator>.</operator><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>TableFilter</name></type> <name>filter</name> <init>= <expr><call><name>readSimpleTableFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableFilter</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSetClauseList</name></name><argument_list>(<argument><expr><call><name>readUpdateSetClause</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>allowUsingFromClauseInUpdateStatement</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TableFilter</name></type> <name>fromTable</name> <init>= <expr><call><name>readTablePrimary</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFromTableFilter</name></name><argument_list>(<argument><expr><name>fromTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WHERE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCondition</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fetch</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// for MySQL compatibility</comment>
            <comment type="line">// (this syntax is supported, but ignored)</comment>
            <expr_stmt><expr><call><name>readIfOrderBy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fetch</name> <operator>=</operator> <call><name>readFetchOrLimit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFetch</name></name><argument_list>(<argument><expr><name>fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setSQL</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>SetClauseList</name></type> <name>readUpdateSetClause</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SetClauseList</name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name>SetClauseList</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readTableColumn</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addMultiple</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name>readTableColumn</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addSingle</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>readExpressionOrDefault</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TableFilter</name></type> <name>readSimpleTableFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>TableFilter</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>readTableOrView</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readFromAlias</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rightsChecked</name></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Delete</name></type> <name>parseDelete</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Delete</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Delete</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>fetch</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>topInDML</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TOP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>fetch</name> <operator>=</operator> <call><name>readTerm</name><argument_list>()</argument_list></call><operator>.</operator><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>currentPrepared</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnum</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ModeEnum</name><operator>.</operator><name>MySQL</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableFilter</name></name><argument_list>(<argument><expr><call><name>readSimpleTableFilter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WHERE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCondition</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fetch</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>fetch</name> <operator>=</operator> <call><name>readFetchOrLimit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFetch</name></name><argument_list>(<argument><expr><name>fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setSQL</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readFetchOrLimit</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>fetch</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FETCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"FIRST"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"NEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ROW</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ROWS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>fetch</name> <operator>=</operator> <call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>fetch</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call><operator>.</operator><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>ROW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ROWS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ONLY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>limit</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>LIMIT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>fetch</name> <operator>=</operator> <call><name>readTerm</name><argument_list>()</argument_list></call><operator>.</operator><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>fetch</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>IndexColumn</name><index>[]</index></name></type> <name>parseIndexColumnList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IndexColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IndexColumn</name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>parseSortType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><call><name><name>columns</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>IndexColumn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>parseSortType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>sortType</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ASC"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DESC"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>SortOrder</name><operator>.</operator><name>DESCENDING</name></name></expr> </then><else>: <expr><name><name>SortOrder</name><operator>.</operator><name>ASCENDING</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NULLS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"FIRST"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>sortType</name> <operator>|=</operator> <name><name>SortOrder</name><operator>.</operator><name>NULLS_FIRST</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"LAST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sortType</name> <operator>|=</operator> <name><name>SortOrder</name><operator>.</operator><name>NULLS_LAST</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>sortType</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>parseColumnList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><call><name><name>columns</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Column</name><index>[]</index></name></type> <name>parseColumnList</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name>parseColumn</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DUPLICATE_COLUMN_NAME_1</name></name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>columns</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Column</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Column</name></type> <name>parseColumn</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>_ROWID_</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>table</name><operator>.</operator><name>getRowIdColumn</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>table</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read comma or closing brace.
     *
     * @return {@code true} if comma is read, {@code false} if brace is read
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>readIfMore</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseHelp</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>conditions</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>END_OF_INPUT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>conditions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>currentToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><operator>new</operator> <call><name>Help</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>conditions</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseShow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>paramValues</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buff</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"SELECT "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CLIENT_ENCODING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// for PostgreSQL compatibility</comment>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"'UNICODE' CLIENT_ENCODING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_TRANSACTION_ISOLATION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// for PostgreSQL compatibility</comment>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"'read committed' DEFAULT_TRANSACTION_ISOLATION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// for PostgreSQL compatibility</comment>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"LEVEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"LOWER(ISOLATION_LEVEL) TRANSACTION_ISOLATION FROM INFORMATION_SCHEMA.SESSIONS "</literal>
                    <operator>+</operator> <literal type="string">"WHERE SESSION_ID = SESSION_ID()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DATESTYLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// for PostgreSQL compatibility</comment>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"'ISO' DATESTYLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SEARCH_PATH"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// for PostgreSQL compatibility</comment>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>searchPath</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getSchemaSearchPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>searchPathBuff</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>searchPath</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>searchPath</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>searchPathBuff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>searchPathBuff</name></expr></argument>, <argument><expr><name><name>searchPath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>HasSQL</name><operator>.</operator><name>QUOTE_ONLY_WHEN_REQUIRED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteStringSQL</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name><name>searchPathBuff</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" SEARCH_PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SERVER_VERSION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// for PostgreSQL compatibility</comment>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"'"</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>PG_VERSION</name></name> <operator>+</operator> <literal type="string">"' SERVER_VERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SERVER_ENCODING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// for PostgreSQL compatibility</comment>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"'UTF8' SERVER_ENCODING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SSL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// for PostgreSQL compatibility</comment>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"'off' SSL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TABLES"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// for MySQL compatibility</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>schema</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME, TABLE_SCHEMA FROM "</literal>
                    <operator>+</operator> <literal type="string">"INFORMATION_SCHEMA.TABLES "</literal>
                    <operator>+</operator> <literal type="string">"WHERE TABLE_SCHEMA=? ORDER BY TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>paramValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// for MySQL compatibility</comment>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>schemaName</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>paramValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"C.COLUMN_NAME FIELD, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>oldInformationSchema</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>isOldInformationSchema</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>oldInformationSchema</name></expr>
                    ?</condition><then> <expr><literal type="string">"C.COLUMN_TYPE"</literal></expr>
                    </then><else>: <expr><literal type="string">"DATA_TYPE_SQL(?2, ?1, 'TABLE', C.DTD_IDENTIFIER)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" TYPE, "</literal>
                    <operator>+</operator> <literal type="string">"C.IS_NULLABLE \"NULL\", "</literal>
                    <operator>+</operator> <literal type="string">"CASE (SELECT MAX(I.INDEX_TYPE_NAME) FROM "</literal>
                    <operator>+</operator> <literal type="string">"INFORMATION_SCHEMA.INDEXES I "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldInformationSchema</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"JOIN INFORMATION_SCHEMA.INDEX_COLUMNS IC "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"WHERE I.TABLE_SCHEMA=C.TABLE_SCHEMA "</literal>
                    <operator>+</operator> <literal type="string">"AND I.TABLE_NAME=C.TABLE_NAME "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>oldInformationSchema</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"AND I.COLUMN_NAME=C.COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"AND IC.TABLE_SCHEMA=C.TABLE_SCHEMA "</literal>
                        <operator>+</operator> <literal type="string">"AND IC.TABLE_NAME=C.TABLE_NAME "</literal>
                        <operator>+</operator> <literal type="string">"AND IC.INDEX_SCHEMA=I.INDEX_SCHEMA "</literal>
                        <operator>+</operator> <literal type="string">"AND IC.INDEX_NAME=I.INDEX_NAME "</literal>
                        <operator>+</operator> <literal type="string">"AND IC.COLUMN_NAME=C.COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal>
                    <operator>+</operator> <literal type="string">"WHEN 'PRIMARY KEY' THEN 'PRI' "</literal>
                    <operator>+</operator> <literal type="string">"WHEN 'UNIQUE INDEX' THEN 'UNI' ELSE '' END `KEY`, "</literal>
                    <operator>+</operator> <literal type="string">"COALESCE(COLUMN_DEFAULT, 'NULL') `DEFAULT` "</literal>
                    <operator>+</operator> <literal type="string">"FROM INFORMATION_SCHEMA.COLUMNS C "</literal>
                    <operator>+</operator> <literal type="string">"WHERE C.TABLE_NAME=?1 AND C.TABLE_SCHEMA=?2 "</literal>
                    <operator>+</operator> <literal type="string">"ORDER BY C.ORDINAL_POSITION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>paramValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DATABASES"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SCHEMAS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// for MySQL compatibility</comment>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnum</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ModeEnum</name><operator>.</operator><name>PostgreSQL</name></name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// for PostgreSQL compatibility</comment>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"NAME, SETTING FROM PG_CATALOG.PG_SETTINGS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getAllowLiterals</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <comment type="line">// need to temporarily enable it, in case we are in</comment>
            <comment type="line">// ALLOW_LITERALS_NUMBERS mode</comment>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setAllowLiterals</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>prepare</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>buff</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>paramValues</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <finally>finally <block>{<block_content>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setAllowLiterals</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Prepared</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>,
            <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>paramValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Prepared</name></type> <name>prep</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Parameter</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><call><name><name>prep</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>params</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>paramValues</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>prep</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isDerivedTable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>tokenType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OPEN_PAREN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <decl_stmt><decl><type><name>boolean</name></type> <name>query</name> <init>= <expr><call><name>isDirectQuery</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <label><name>s</name>:</label> <if_stmt><if>if <condition>(<expr><name>query</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>scanToCloseParen</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>query</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <break>break <name>s</name>;</break>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
                <switch>switch <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>tokenType</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>SEMICOLON</name></expr>:</case>
                <case>case <expr><name>END_OF_INPUT</name></expr>:</case>
                    <expr_stmt><expr><name>query</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break <name>s</name>;</break>
                <case>case <expr><name>OPEN_PAREN</name></expr>:</case>
                    <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>scanToCloseParen</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>query</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        <break>break <name>s</name>;</break>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name>CLOSE_PAREN</name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><operator>--</operator><name>level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <break>break <name>s</name>;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>JOIN</name></expr>:</case>
                    <expr_stmt><expr><name>query</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break <name>s</name>;</break>
                <default>default:</default>
                    <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>query</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isQuery</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>tokenType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OPEN_PAREN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <decl_stmt><decl><type><name>boolean</name></type> <name>query</name> <init>= <expr><call><name>isDirectQuery</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <label><name>s</name>:</label> <if_stmt><if>if <condition>(<expr><name>query</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>scanToCloseParen</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>query</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break <name>s</name>;</break>
                </block_content>}</block></if></if_stmt>
                <switch>switch <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>tokenType</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <default>default:</default>
                    <expr_stmt><expr><name>query</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break <name>s</name>;</break>
                <case>case <expr><name>END_OF_INPUT</name></expr>:</case>
                <case>case <expr><name>SEMICOLON</name></expr>:</case>
                <case>case <expr><name>CLOSE_PAREN</name></expr>:</case>
                <case>case <expr><name>ORDER</name></expr>:</case>
                <case>case <expr><name>OFFSET</name></expr>:</case>
                <case>case <expr><name>FETCH</name></expr>:</case>
                <case>case <expr><name>LIMIT</name></expr>:</case>
                <case>case <expr><name>UNION</name></expr>:</case>
                <case>case <expr><name>EXCEPT</name></expr>:</case>
                <case>case <expr><name>MINUS</name></expr>:</case>
                <case>case <expr><name>INTERSECT</name></expr>:</case>
                </block_content>}</block></switch>
            </block_content>}</block> while <condition>(<expr><operator>--</operator><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>query</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>scanToCloseParen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <switch>switch <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>tokenType</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>SEMICOLON</name></expr>:</case>
            <case>case <expr><name>END_OF_INPUT</name></expr>:</case>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            <case>case <expr><name>OPEN_PAREN</name></expr>:</case>
                <expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>CLOSE_PAREN</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><operator>--</operator><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></switch>
            <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isQueryQuick</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>tokenType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OPEN_PAREN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><call><name>isDirectQuery</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isDirectQuery</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>query</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>tokenType</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SELECT</name></expr>:</case>
        <case>case <expr><name>VALUES</name></expr>:</case>
        <case>case <expr><name>WITH</name></expr>:</case>
            <expr_stmt><expr><name>query</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TABLE</name></expr>:</case>
            <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>tokenType</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>OPEN_PAREN</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>query</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <return>return <expr><name>query</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseMerge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"INTO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TableFilter</name></type> <name>targetTableFilter</name> <init>= <expr><call><name>readSimpleTableFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>USING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseMergeUsing</name><argument_list>(<argument><expr><name>targetTableFilter</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>parseMergeInto</name><argument_list>(<argument><expr><name>targetTableFilter</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseMergeInto</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>targetTableFilter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Merge</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Merge</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>currentPrepared</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTable</name></name><argument_list>(<argument><expr><call><name><name>targetTableFilter</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isQueryQuick</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setQuery</name></name><argument_list>(<argument><expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><call><name>parseColumnList</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>KEY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setKeys</name></name><argument_list>(<argument><expr><call><name>parseColumnList</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>VALUES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>parseValuesForCommand</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setQuery</name></name><argument_list>(<argument><expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>setSQL</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>MergeUsing</name></type> <name>parseMergeUsing</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>targetTableFilter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MergeUsing</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>MergeUsing</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>targetTableFilter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>currentPrepared</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSourceTableFilter</name></name><argument_list>(<argument><expr><call><name>readTableReference</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>condition</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOnCondition</name></name><argument_list>(<argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>WHEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <do>do <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>matched</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MATCHED"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>parseWhenMatched</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>parseWhenNotMatched</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WHEN</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

        <expr_stmt><expr><call><name>setSQL</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseWhenMatched</name><parameter_list>(<parameter><decl><type><name>MergeUsing</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>and</name> <init>= <expr><ternary><condition><expr><call><name>readIf</name><argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"THEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>MergeUsing</name><operator>.</operator><name>When</name></name></type> <name>when</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>MergeUsing</name><operator>.</operator><name>WhenMatchedThenUpdate</name></name></type> <name>update</name> <init>= <expr><name><name>command</name><operator>.</operator></name>new <call><name>WhenMatchedThenUpdate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>update</name><operator>.</operator><name>setSetClauseList</name></name><argument_list>(<argument><expr><call><name>readUpdateSetClause</name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>getTargetTableFilter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>when</name> <operator>=</operator> <name>update</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>when</name> <operator>=</operator> <name><name>command</name><operator>.</operator></name>new <call><name>WhenMatchedThenDelete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>and</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>mergeWhere</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>WHERE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>and</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>when</name><operator>.</operator><name>setAndCondition</name></name><argument_list>(<argument><expr><name>and</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addWhen</name></name><argument_list>(<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseWhenNotMatched</name><parameter_list>(<parameter><decl><type><name>MergeUsing</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>NOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"MATCHED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>and</name> <init>= <expr><ternary><condition><expr><call><name>readIf</name><argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"THEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><ternary><condition><expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>parseColumnList</name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>getTargetTableFilter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Boolean</name></type> <name>overridingSystem</name> <init>= <expr><call><name>readIfOverriding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>VALUES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpressionOrDefault</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>MergeUsing</name><operator>.</operator><name>WhenNotMatched</name></name></type> <name>when</name> <init>= <expr><name><name>command</name><operator>.</operator></name>new <call><name>WhenNotMatched</name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><name>overridingSystem</name></expr></argument>,
                <argument><expr><call><name><name>values</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>when</name><operator>.</operator><name>setAndCondition</name></name><argument_list>(<argument><expr><name>and</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addWhen</name></name><argument_list>(<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Insert</name></type> <name>parseInsert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Insert</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Insert</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>currentPrepared</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Mode</name></type> <name>mode</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>onDuplicateKeyUpdate</name></name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IGNORE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIgnore</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"INTO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name>readTableOrView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTable</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isQueryQuick</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setQuery</name></name><argument_list>(<argument><expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>columns</name> <operator>=</operator> <call><name>parseColumnList</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Boolean</name></type> <name>overridingSystem</name> <init>= <expr><call><name>readIfOverriding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOverridingSystem</name></name><argument_list>(<argument><expr><name>overridingSystem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>requireQuery</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DIRECT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>requireQuery</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setInsertFromSelect</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SORTED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>requireQuery</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <label><name>readValues</name>:</label> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>requireQuery</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>overridingSystem</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>VALUES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break <name>readValues</name>;</break>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>VALUES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>parseValuesForCommand</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break <name>readValues</name>;</break>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>parseInsertSet</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break <name>readValues</name>;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setQuery</name></name><argument_list>(<argument><expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>onDuplicateKeyUpdate</name></name> <operator>||</operator> <name><name>mode</name><operator>.</operator><name>insertOnConflict</name></name> <operator>||</operator> <name><name>mode</name><operator>.</operator><name>isolationLevelInSelectOrInsertStatement</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>parseInsertCompatibility</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>setSQL</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Boolean</name></type> <name>readIfOverriding</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Boolean</name></type> <name>overridingSystem</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"OVERRIDING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>USER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>overridingSystem</name> <operator>=</operator> <name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"SYSTEM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>overridingSystem</name> <operator>=</operator> <name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>overridingSystem</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseInsertSet</name><parameter_list>(<parameter><decl><type><name>Insert</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>columns</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columnList</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>columnList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>parseColumn</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpressionOrDefault</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><call><name><name>columnList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Column</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseInsertCompatibility</name><parameter_list>(<parameter><decl><type><name>Insert</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>Mode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>onDuplicateKeyUpdate</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"DUPLICATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <do>do <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>schemaOrTableName</name> <init>= <expr><name>columnName</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>tableOrColumnName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>schemaOrTableName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SCHEMA_NAME_MUST_MATCH</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><name>columnName</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name>columnName</name> <operator>=</operator> <name>tableOrColumnName</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>tableOrColumnName</name> <operator>=</operator> <name>schemaOrTableName</name></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>tableOrColumnName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>TABLE_OR_VIEW_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>tableOrColumnName</name></expr></argument>)</argument_list></call></expr>;</throw>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addAssignmentForDuplicate</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>readExpressionOrDefault</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>insertOnConflict</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"CONFLICT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"DO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"NOTHING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIgnore</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>isolationLevelInSelectOrInsertStatement</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>parseIsolationClause</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * MySQL compatibility. REPLACE is similar to MERGE.
     */</comment>
    <function><type><specifier>private</specifier> <name>Merge</name></type> <name>parseReplace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Merge</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Merge</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>currentPrepared</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"INTO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name>readTableOrView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTable</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isQueryQuick</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setQuery</name></name><argument_list>(<argument><expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><call><name>parseColumnList</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>VALUES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>parseValuesForCommand</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setQuery</name></name><argument_list>(<argument><expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>setSQL</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseValuesForCommand</name><parameter_list>(<parameter><decl><type><name>CommandWithValues</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>multiColumn</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ROW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>multiColumn</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>multiColumn</name> <operator>=</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>multiColumn</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <do>do <block>{<block_content>
                        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpressionOrDefault</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpressionOrDefault</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TableFilter</name></type> <name>readTablePrimary</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>alias</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <label><name>label</name>:</label> <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isDerivedTable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// Derived table</comment>
                <return>return <expr><call><name>readDerivedTableWithCorrelation</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// Parenthesized joined table</comment>
                <decl_stmt><decl><type><name>TableFilter</name></type> <name>tableFilter</name> <init>= <expr><call><name>readTableReference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name>readCorrelation</name><argument_list>(<argument><expr><name>tableFilter</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>VALUES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TableValueConstructor</name></type> <name>query</name> <init>= <expr><call><name>parseValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getNextSystemIdentifier</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>table</name> <operator>=</operator> <call><name><name>query</name><operator>.</operator><name>toTable</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>createView</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Table function derived table</comment>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ArrayTableFunction</name></type> <name>function</name> <init>= <expr><call><name>readTableFunction</name><argument_list>(<argument><expr><name><name>ArrayTableFunction</name><operator>.</operator><name>TABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>table</name> <operator>=</operator> <operator>new</operator> <call><name>FunctionTable</name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>quoted</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>backupIndex</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tableName</name> <operator>=</operator> <call><name>readIdentifierWithSchema2</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>quoted</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>readDataChangeDeltaTable</name><argument_list>(<argument><expr><call><name>upperName</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backupIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break <name>label</name>;</break>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>schemaName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>schema</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>findSchema</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>isDualTable</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>table</name> <operator>=</operator> <operator>new</operator> <call><name>DualTable</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break <name>label</name>;</break>
                    </block_content>}</block></if></if_stmt>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SCHEMA_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>foundLeftParen</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>foundLeftParen</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// Sybase compatibility with</comment>
                <comment type="line">// "select * from test (index table1_index)"</comment>
                <expr_stmt><expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>foundLeftParen</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>foundLeftParen</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Schema</name></type> <name>mainSchema</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>equalsToken</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>RangeTable</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call>
                        <operator>||</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>RangeTable</name><operator>.</operator><name>ALIAS</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>min</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>max</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>Expression</name></type> <name>step</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>table</name> <operator>=</operator> <operator>new</operator> <call><name>RangeTable</name><argument_list>(<argument><expr><name>mainSchema</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>table</name> <operator>=</operator> <operator>new</operator> <call><name>RangeTable</name><argument_list>(<argument><expr><name>mainSchema</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>table</name> <operator>=</operator> <operator>new</operator> <call><name>FunctionTable</name><argument_list>(<argument><expr><name>mainSchema</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>readTableFunction</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>readTableOrView</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>derivedColumnNames</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IndexHints</name></type> <name>indexHints</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIfUseIndex</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>indexHints</name> <operator>=</operator> <call><name>parseIndexHints</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>readFromAlias</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>alias</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>derivedColumnNames</name> <operator>=</operator> <call><name>readDerivedColumnNames</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIfUseIndex</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>indexHints</name> <operator>=</operator> <call><name>parseIndexHints</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name>buildTableFilter</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>derivedColumnNames</name></expr></argument>, <argument><expr><name>indexHints</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TableFilter</name></type> <name>readCorrelation</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>tableFilter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>alias</name> <init>= <expr><call><name>readFromAlias</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>alias</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>tableFilter</name><operator>.</operator><name>setAlias</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>derivedColumnNames</name> <init>= <expr><call><name>readDerivedColumnNames</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>derivedColumnNames</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>tableFilter</name><operator>.</operator><name>setDerivedColumns</name></name><argument_list>(<argument><expr><name>derivedColumnNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>tableFilter</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TableFilter</name></type> <name>readDerivedTableWithCorrelation</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>parseQueryExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>alias</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>derivedColumnNames</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IndexHints</name></type> <name>indexHints</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIfUseIndex</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getNextSystemIdentifier</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>table</name> <operator>=</operator> <call><name><name>query</name><operator>.</operator><name>toTable</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>createView</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexHints</name> <operator>=</operator> <call><name>parseIndexHints</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>readFromAlias</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>alias</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>derivedColumnNames</name> <operator>=</operator> <call><name>readDerivedColumnNames</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columnTemplates</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>derivedColumnNames</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>columnTemplates</name> <operator>=</operator> <call><name><name>TableView</name><operator>.</operator><name>createQueryColumnTemplateList</name></name><argument_list>(
                            <argument><expr><call><name><name>derivedColumnNames</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>toArray</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Column</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>table</name> <operator>=</operator> <call><name><name>query</name><operator>.</operator><name>toTable</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>, <argument><expr><name>columnTemplates</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>createView</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIfUseIndex</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>indexHints</name> <operator>=</operator> <call><name>parseIndexHints</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getNextSystemIdentifier</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>table</name> <operator>=</operator> <call><name><name>query</name><operator>.</operator><name>toTable</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>createView</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name>buildTableFilter</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>derivedColumnNames</name></expr></argument>, <argument><expr><name>indexHints</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TableFilter</name></type> <name>buildTableFilter</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>alias</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>derivedColumnNames</name></decl></parameter>,
            <parameter><decl><type><name>IndexHints</name></type> <name>indexHints</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>discardWithTableHints</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>discardWithTableHints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// inherit alias for CTE as views from table name</comment>
        <if_stmt><if>if <condition>(<expr><name>alias</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>table</name><operator>.</operator><name>isView</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>table</name><operator>.</operator><name>isTableExpression</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>TableFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>TableFilter</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>rightsChecked</name></expr></argument>,
                <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><name>orderInFrom</name><operator>++</operator></expr></argument>, <argument><expr><name>indexHints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>derivedColumnNames</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>setDerivedColumns</name></name><argument_list>(<argument><expr><name>derivedColumnNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>filter</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Table</name></type> <name>readDataChangeDeltaTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>resultOptionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backupIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DataChangeStatement</name></type> <name>statement</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResultOption</name></type> <name>resultOption</name> <init>= <expr><name><name>ResultOption</name><operator>.</operator><name>FINAL</name></name></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>resultOptionName</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="string">"OLD"</literal></expr>:</case>
            <expr_stmt><expr><name>resultOption</name> <operator>=</operator> <name><name>ResultOption</name><operator>.</operator><name>OLD</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>statement</name> <operator>=</operator> <call><name>parseUpdate</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>statement</name> <operator>=</operator> <call><name>parseDelete</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MERGE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>statement</name> <operator>=</operator> <operator>(</operator><name>DataChangeStatement</name><operator>)</operator> <call><name>parseMerge</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>replaceInto</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"REPLACE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>statement</name> <operator>=</operator> <call><name>parseReplace</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="string">"NEW"</literal></expr>:</case>
            <expr_stmt><expr><name>resultOption</name> <operator>=</operator> <name><name>ResultOption</name><operator>.</operator><name>NEW</name></name></expr>;</expr_stmt>
            <comment type="line">//$FALL-THROUGH$</comment>
        <case>case <expr><literal type="string">"FINAL"</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>statement</name> <operator>=</operator> <call><name>parseInsert</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>statement</name> <operator>=</operator> <call><name>parseUpdate</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MERGE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>statement</name> <operator>=</operator> <operator>(</operator><name>DataChangeStatement</name><operator>)</operator> <call><name>parseMerge</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>replaceInto</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"REPLACE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>statement</name> <operator>=</operator> <call><name>parseReplace</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>backupIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><literal type="string">"OLD TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><literal type="string">"NEW TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><literal type="string">"FINAL TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentSelect</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Lobs aren't copied, so use it for more safety</comment>
            <expr_stmt><expr><call><name><name>currentSelect</name><operator>.</operator><name>setNeverLazy</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>DataChangeDeltaTable</name><argument_list>(<argument><expr><call><name>getSchemaWithDefault</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>, <argument><expr><name>resultOption</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TableFunction</name></type> <name>readTableFunction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><call><name>upperName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="string">"UNNEST"</literal></expr>:</case>
                <return>return <expr><call><name>readUnnestFunction</name><argument_list>()</argument_list></call></expr>;</return>
            <case>case <expr><literal type="string">"TABLE_DISTINCT"</literal></expr>:</case>
                <return>return <expr><call><name>readTableFunction</name><argument_list>(<argument><expr><name><name>ArrayTableFunction</name><operator>.</operator><name>TABLE_DISTINCT</name></name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="string">"CSVREAD"</literal></expr>:</case>
                <expr_stmt><expr><name>recompileAlways</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CSVReadFunction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="string">"LINK_SCHEMA"</literal></expr>:</case>
                <expr_stmt><expr><name>recompileAlways</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinkSchemaFunction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>FunctionAlias</name></type> <name>functionAlias</name> <init>= <expr><call><name>getFunctionAliasWithinPath</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>functionAlias</name><operator>.</operator><name>isDeterministic</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>recompileAlways</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>argList</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>argList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>JavaTableFunction</name><argument_list>(<argument><expr><name>functionAlias</name></expr></argument>, <argument><expr><call><name><name>argList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>readIfUseIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"USE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>IndexHints</name></type> <name>parseIndexHints</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>LinkedHashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>indexNames</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>indexName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getIndex</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>indexNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>IndexHints</name><operator>.</operator><name>createUseIndexHints</name></name><argument_list>(<argument><expr><name>indexNames</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>readFromAlias</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>alias</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isIdentifier</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>alias</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>readDerivedColumnNames</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>derivedColumnNames</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>derivedColumnNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <return>return <expr><name>derivedColumnNames</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>discardWithTableHints</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name>discardTableHint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>discardTableHint</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseTruncate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name>readTableOrView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>restart</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>truncateTableRestartIdentity</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CONTINUE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>restart</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RESTART"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>restart</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>TruncateTable</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>TruncateTable</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTable</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setRestart</name></name><argument_list>(<argument><expr><name>restart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>readIfExists</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>ifExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>IF</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>EXISTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>ifExists</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseComment</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>column</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DbObject</name><operator>.</operator><name>TABLE_OR_VIEW</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLUMN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>column</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DbObject</name><operator>.</operator><name>TABLE_OR_VIEW</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CONSTANT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DbObject</name><operator>.</operator><name>CONSTANT</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CONSTRAINT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ALIAS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DbObject</name><operator>.</operator><name>FUNCTION_ALIAS</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DbObject</name><operator>.</operator><name>INDEX</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ROLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DbObject</name><operator>.</operator><name>ROLE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DbObject</name><operator>.</operator><name>SCHEMA</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DbObject</name><operator>.</operator><name>SEQUENCE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DbObject</name><operator>.</operator><name>TRIGGER</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>USER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DbObject</name><operator>.</operator><name>USER</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DOMAIN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>DbObject</name><operator>.</operator><name>DOMAIN</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>SetComment</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>SetComment</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>objectName</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>column</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// can't use readIdentifierWithSchema() because</comment>
            <comment type="line">// it would not read [catalog.]schema.table.column correctly</comment>
            <expr_stmt><expr><name>objectName</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tmpSchemaName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>allowEmpty</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>allowEmptySchemaValuesAsDefaultSchema</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><ternary><condition><expr><name>allowEmpty</name> <operator>&amp;&amp;</operator> <name>currentTokenType</name> <operator>==</operator> <name>DOT</name></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tmpSchemaName</name> <operator>=</operator> <name>objectName</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>objectName</name> <operator>=</operator> <name>columnName</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>columnName</name> <operator>=</operator> <ternary><condition><expr><name>allowEmpty</name> <operator>&amp;&amp;</operator> <name>currentTokenType</name> <operator>==</operator> <name>DOT</name></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>checkDatabaseName</name><argument_list>(<argument><expr><name>tmpSchemaName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tmpSchemaName</name> <operator>=</operator> <name>objectName</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>objectName</name> <operator>=</operator> <name>columnName</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>columnName</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>columnName</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>objectName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getSyntaxError</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>, <argument><expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"table.column"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <ternary><condition><expr><name>tmpSchemaName</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>tmpSchemaName</name></expr> </then><else>: <expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setColumn</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setColumnName</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>objectName</name> <operator>=</operator> <call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSchemaName</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setObjectName</name></name><argument_list>(<argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setObjectType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>IS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCommentExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseDrop</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DropTable</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropTable</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addTable</name></name><argument_list>(<argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CASCADE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDropAction</name></name><argument_list>(<argument><expr><name><name>ConstraintActionType</name><operator>.</operator><name>CASCADE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RESTRICT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDropAction</name></name><argument_list>(<argument><expr><name><name>ConstraintActionType</name><operator>.</operator><name>RESTRICT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IGNORE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// TODO SET_DEFAULT works in the same way as CASCADE</comment>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDropAction</name></name><argument_list>(<argument><expr><name><name>ConstraintActionType</name><operator>.</operator><name>SET_DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>indexName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DropIndex</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIndexName</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//Support for MySQL: DROP INDEX index_name ON tbl_name</comment>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>USER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DropUser</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropUser</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setUserName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CASCADE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>sequenceName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DropSequence</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropSequence</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSequenceName</name></name><argument_list>(<argument><expr><name>sequenceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CONSTANT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>constantName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DropConstant</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropConstant</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setConstantName</name></name><argument_list>(<argument><expr><name>constantName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>triggerName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DropTrigger</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropTrigger</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTriggerName</name></name><argument_list>(<argument><expr><name>triggerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>viewName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DropView</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropView</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setViewName</name></name><argument_list>(<argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ConstraintActionType</name></type> <name>dropAction</name> <init>= <expr><call><name>parseCascadeOrRestrict</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>dropAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDropAction</name></name><argument_list>(<argument><expr><name>dropAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ROLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DropRole</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropRole</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setRoleName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ALIAS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>aliasName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DropFunctionAlias</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropFunctionAlias</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                    <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setAliasName</name></name><argument_list>(<argument><expr><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DropSchema</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropSchema</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSchemaName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ConstraintActionType</name></type> <name>dropAction</name> <init>= <expr><call><name>parseCascadeOrRestrict</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>dropAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDropAction</name></name><argument_list>(<argument><expr><name>dropAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"OBJECTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>DropDatabase</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropDatabase</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDropAllObjects</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"FILES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDeleteFiles</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DOMAIN"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TYPE"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DATATYPE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseDropDomain</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"AGGREGATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseDropAggregate</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SYNONYM"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>synonymName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DropSynonym</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropSynonym</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSynonymName</name></name><argument_list>(<argument><expr><name>synonymName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DropDomain</name></type> <name>parseDropDomain</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>domainName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DropDomain</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropDomain</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDomainName</name></name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfDomainExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ConstraintActionType</name></type> <name>dropAction</name> <init>= <expr><call><name>parseCascadeOrRestrict</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dropAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDropAction</name></name><argument_list>(<argument><expr><name>dropAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DropAggregate</name></type> <name>parseDropAggregate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DropAggregate</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropAggregate</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TableFilter</name></type> <name>readTableReference</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>TableFilter</name></type> <name>top</name></decl>, <decl><type ref="prev"/><name>last</name> <init>= <expr><name>top</name> <operator>=</operator> <call><name>readTablePrimary</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>join</name></decl>;</init><condition>;</condition> <incr><expr><name>last</name> <operator>=</operator> <name>join</name></expr></incr>)</control> <block>{<block_content>
            <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>RIGHT</name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"OUTER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>JOIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// the right hand side is the 'inner' table usually</comment>
                <expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>readTableReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>on</name> <init>= <expr><call><name>readJoinSpecification</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>join</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addJoin</name><argument_list>(<argument><expr><name>join</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>top</name> <operator>=</operator> <name>join</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>LEFT</name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"OUTER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>JOIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>readTableReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>on</name> <init>= <expr><call><name>readJoinSpecification</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>join</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addJoin</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>join</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>FULL</name></expr>:</case>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            <case>case <expr><name>INNER</name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>JOIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>readTableReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>on</name> <init>= <expr><call><name>readJoinSpecification</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>join</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addJoin</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>join</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>JOIN</name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>readTableReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>on</name> <init>= <expr><call><name>readJoinSpecification</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>join</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addJoin</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>join</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>CROSS</name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>JOIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>readTablePrimary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addJoin</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>join</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>NATURAL</name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>JOIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>readTablePrimary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>on</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Column</name></type> <name>column1</name> <range>: <expr><call><name><name>last</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColumns</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>Column</name></type> <name>column2</name> <init>= <expr><call><name><name>join</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><call><name><name>last</name><operator>.</operator><name>getColumnName</name></name><argument_list>(<argument><expr><name>column1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>column2</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>on</name> <operator>=</operator> <call><name>addJoinColumn</name><argument_list>(<argument><expr><name>on</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>join</name></expr></argument>, <argument><expr><name>column1</name></expr></argument>, <argument><expr><name>column2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>addJoin</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>join</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <default>default:</default>
                <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// FULL is intentionally excluded</comment>
                    <expr_stmt><expr><call><name>addMultipleExpected</name><argument_list>(<argument><expr><name>RIGHT</name></expr></argument>, <argument><expr><name>LEFT</name></expr></argument>, <argument><expr><name>INNER</name></expr></argument>, <argument><expr><name>JOIN</name></expr></argument>, <argument><expr><name>CROSS</name></expr></argument>, <argument><expr><name>NATURAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>top</name></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readJoinSpecification</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>filter1</name></decl></parameter>, <parameter><decl><type><name>TableFilter</name></type> <name>filter2</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>rightJoin</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>on</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>on</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>USING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>on</name> <operator>=</operator> <call><name>addJoinColumn</name><argument_list>(<argument><expr><name>on</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter2</name></expr></argument>, <argument><expr><call><name><name>filter1</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>filter2</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rightJoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>on</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>addJoinColumn</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>on</name></decl></parameter>, <parameter><decl><type><name>TableFilter</name></type> <name>filter1</name></decl></parameter>, <parameter><decl><type><name>TableFilter</name></type> <name>filter2</name></decl></parameter>, <parameter><decl><type><name>Column</name></type> <name>column1</name></decl></parameter>,
            <parameter><decl><type><name>Column</name></type> <name>column2</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>rightJoin</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rightJoin</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>filter1</name><operator>.</operator><name>addCommonJoinColumns</name></name><argument_list>(<argument><expr><name>column1</name></expr></argument>, <argument><expr><name>column2</name></expr></argument>, <argument><expr><name>filter2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>filter2</name><operator>.</operator><name>addCommonJoinColumnToExclude</name></name><argument_list>(<argument><expr><name>column2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>filter1</name><operator>.</operator><name>addCommonJoinColumns</name></name><argument_list>(<argument><expr><name>column1</name></expr></argument>, <argument><expr><name>column1</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>filter2</name><operator>.</operator><name>addCommonJoinColumnToExclude</name></name><argument_list>(<argument><expr><name>column2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>tableExpr</name> <init>= <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><call><name><name>filter1</name><operator>.</operator><name>getSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>filter1</name><operator>.</operator><name>getTableAlias</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>filter1</name><operator>.</operator><name>getColumnName</name></name><argument_list>(<argument><expr><name>column1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>joinExpr</name> <init>= <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><call><name><name>filter2</name><operator>.</operator><name>getSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>filter2</name><operator>.</operator><name>getTableAlias</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>filter2</name><operator>.</operator><name>getColumnName</name></name><argument_list>(<argument><expr><name>column2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>equal</name> <init>= <expr><operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><name><name>Comparison</name><operator>.</operator><name>EQUAL</name></name></expr></argument>, <argument><expr><name>tableExpr</name></expr></argument>, <argument><expr><name>joinExpr</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>on</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>on</name> <operator>=</operator> <name>equal</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>on</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr></argument>, <argument><expr><name>on</name></expr></argument>, <argument><expr><name>equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>on</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add one join to another. This method creates nested join between them if
     * required.
     *
     * @param top parent join
     * @param join child join
     * @param outer if child join is an outer join
     * @param on the join condition
     * @see TableFilter#addJoin(TableFilter, boolean, Expression)
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addJoin</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>TableFilter</name></type> <name>join</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>outer</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>on</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>join</name><operator>.</operator><name>getJoin</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>joinTable</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>PREFIX_JOIN</name></name> <operator>+</operator> <call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TableFilter</name></type> <name>n</name> <init>= <expr><operator>new</operator> <call><name>TableFilter</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DualTable</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>joinTable</name></expr></argument>, <argument><expr><name>rightsChecked</name></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><call><name><name>join</name><operator>.</operator><name>getOrderInFrom</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>n</name><operator>.</operator><name>setNestedJoin</name></name><argument_list>(<argument><expr><name>join</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>join</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>top</name><operator>.</operator><name>addJoin</name></name><argument_list>(<argument><expr><name>join</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>, <argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseExecutePostgre</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IMMEDIATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ExecuteImmediate</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>ExecuteProcedure</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>ExecuteProcedure</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>procedureName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Procedure</name></type> <name>p</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getProcedure</name></name><argument_list>(<argument><expr><name>procedureName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FUNCTION_ALIAS_NOT_FOUND_1</name></name></expr></argument>,
                    <argument><expr><name>procedureName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setProcedure</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseExecuteSQLServer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Call</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Call</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>currentPrepared</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>schemaName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>checkDatabaseName</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>FunctionAlias</name></type> <name>functionAlias</name> <init>= <expr><call><name>getFunctionAliasWithinPath</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                <argument><expr><ternary><condition><expr><name>schemaName</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>args</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>argList</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>SEMICOLON</name> <operator>&amp;&amp;</operator> <name>currentTokenType</name> <operator>!=</operator> <name>END_OF_INPUT</name></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>argList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name><name>argList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JavaFunction</name><argument_list>(<argument><expr><name>functionAlias</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>FunctionAlias</name></type> <name>getFunctionAliasWithinPath</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>UserDefinedFunction</name></type> <name>userDefinedFunction</name> <init>= <expr><call><name>findUserDefinedFunctionWithinPath</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>userDefinedFunction</name> <operator>instanceof</operator> <name>FunctionAlias</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>FunctionAlias</name><operator>)</operator> <name>userDefinedFunction</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FUNCTION_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DeallocateProcedure</name></type> <name>parseDeallocate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PLAN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DeallocateProcedure</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DeallocateProcedure</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setProcedureName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Explain</name></type> <name>parseExplain</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Explain</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Explain</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ANALYZE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExecuteCommand</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PLAN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>FOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SELECT</name></expr>:</case>
        <case>case <expr><name>TABLE</name></expr>:</case>
        <case>case <expr><name>VALUES</name></expr>:</case>
        <case>case <expr><name>WITH</name></expr>:</case>
        <case>case <expr><name>OPEN_PAREN</name></expr>:</case>
            <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setNeverLazy</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCommand</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCommand</name></name><argument_list>(<argument><expr><call><name>parseDelete</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCommand</name></name><argument_list>(<argument><expr><call><name>parseUpdate</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCommand</name></name><argument_list>(<argument><expr><call><name>parseInsert</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MERGE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCommand</name></name><argument_list>(<argument><expr><call><name>parseMerge</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></switch>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Query</name></type> <name>parseQuery</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>paramIndex</name> <init>= <expr><call><name><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Query</name></type> <name>command</name> <init>= <expr><call><name>parseQueryExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Parameter</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>paramIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>parameters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setParameterList</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseWithStatementOrQuery</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>paramIndex</name> <init>= <expr><call><name><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Prepared</name></type> <name>command</name> <init>= <expr><call><name>parseWith</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Parameter</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>paramIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>parameters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setParameterList</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>command</name> <operator>instanceof</operator> <name>Query</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><operator>(</operator><name>Query</name><operator>)</operator> <name>command</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>setSQL</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Query</name></type> <name>parseQueryExpression</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Query</name></type> <name>query</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>query</name> <operator>=</operator> <operator>(</operator><name>Query</name><operator>)</operator> <call><name>parseWith</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SYNTAX_ERROR_1</name></name></expr></argument>, <argument><expr><literal type="string">"WITH statement supports only query in this context"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
            <comment type="line">// recursive can not be lazy</comment>
            <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setNeverLazy</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>parseQueryExpressionBodyAndEndOfQuery</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>query</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Query</name></type> <name>parseQueryExpressionBodyAndEndOfQuery</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Query</name></type> <name>command</name> <init>= <expr><call><name>parseQueryExpressionBody</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>parseEndOfQuery</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setSQL</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Query</name></type> <name>parseQueryExpressionBody</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Query</name></type> <name>command</name> <init>= <expr><call><name>parseQueryTerm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>SelectUnion</name><operator>.</operator><name>UnionType</name></name></type> <name>type</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>UNION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SelectUnion</name><operator>.</operator><name>UnionType</name><operator>.</operator><name>UNION_ALL</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>DISTINCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SelectUnion</name><operator>.</operator><name>UnionType</name><operator>.</operator><name>UNION</name></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>EXCEPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>MINUS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SelectUnion</name><operator>.</operator><name>UnionType</name><operator>.</operator><name>EXCEPT</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>SelectUnion</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>parseQueryTerm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Query</name></type> <name>parseQueryTerm</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Query</name></type> <name>command</name> <init>= <expr><call><name>parseQueryPrimary</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>INTERSECT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>SelectUnion</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SelectUnion</name><operator>.</operator><name>UnionType</name><operator>.</operator><name>INTERSECT</name></name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>parseQueryPrimary</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseEndOfQuery</name><parameter_list>(<parameter><decl><type><name>Query</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ORDER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Select</name></type> <name>oldSelect</name> <init>= <expr><name>currentSelect</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>command</name> <operator>instanceof</operator> <name>Select</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>currentSelect</name> <operator>=</operator> <operator>(</operator><name>Select</name><operator>)</operator> <name>command</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>orderList</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>canBeNumber</name> <init>= <expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>QueryOrderBy</name></type> <name>order</name> <init>= <expr><operator>new</operator> <call><name>QueryOrderBy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>expr</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>canBeNumber</name> <operator>&amp;&amp;</operator> <name>expr</name> <operator>instanceof</operator> <name>ValueExpression</name> <operator>&amp;&amp;</operator> <call><name><name>expr</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>order</name><operator>.</operator><name>columnIndexExpr</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>expr</name> <operator>instanceof</operator> <name>Parameter</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>recompileAlways</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>order</name><operator>.</operator><name>columnIndexExpr</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>order</name><operator>.</operator><name>expression</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name><name>order</name><operator>.</operator><name>sortType</name></name> <operator>=</operator> <call><name>parseSortType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>orderList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOrder</name></name><argument_list>(<argument><expr><name>orderList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentSelect</name> <operator>=</operator> <name>oldSelect</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>getFetch</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// make sure aggregate functions will not work here</comment>
            <decl_stmt><decl><type><name>Select</name></type> <name>temp</name> <init>= <expr><name>currentSelect</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>currentSelect</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hasOffsetOrFetch</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <comment type="line">// Standard SQL OFFSET / FETCH</comment>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OFFSET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>hasOffsetOrFetch</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOffset</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call><operator>.</operator><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>ROW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ROWS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FETCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>hasOffsetOrFetch</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"FIRST"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"NEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ROW</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ROWS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFetch</name></name><argument_list>(<argument><expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFetch</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call><operator>.</operator><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PERCENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFetchPercent</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>ROW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ROWS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TIES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setWithTies</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ONLY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// MySQL-style LIMIT / OFFSET</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasOffsetOrFetch</name> <operator>&amp;&amp;</operator> <call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>limit</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>LIMIT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Expression</name></type> <name>limit</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call><operator>.</operator><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OFFSET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOffset</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call><operator>.</operator><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// MySQL: [offset, ] rowcount</comment>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>offset</name> <init>= <expr><name>limit</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call><operator>.</operator><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOffset</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFetch</name></name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>currentSelect</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FOR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"OF"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <do>do <block>{<block_content>
                        <expr_stmt><expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOWAIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// TODO parser: select for update nowait: should not wait</comment>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setForUpdate</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"READ"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>FETCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ONLY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>isolationLevelInSelectOrInsertStatement</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>parseIsolationClause</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * DB2 isolation clause
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseIsolationClause</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RR"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// concurrent-access-resolution clause</comment>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"USE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"KEEP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SHARE"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                            <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"EXCLUSIVE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <comment type="line">// ignore</comment>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"LOCKS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CS"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UR"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// ignore</comment>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Query</name></type> <name>parseQueryPrimary</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Query</name></type> <name>command</name> <init>= <expr><call><name>parseQueryExpressionBodyAndEndOfQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>SELECT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseSelect</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseExplicitTable</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>VALUES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>parseValues</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseSelectFromPart</name><parameter_list>(<parameter><decl><type><name>Select</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <do>do <block>{<block_content>
            <decl_stmt><decl><type><name>TableFilter</name></type> <name>top</name> <init>= <expr><call><name>readTableReference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addTableFilter</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isOuter</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>TableFilter</name></type> <name>n</name> <init>= <expr><call><name><name>top</name><operator>.</operator><name>getNestedJoin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>n</name><operator>.</operator><name>visit</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>f</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>command</name><operator>.</operator><name>addTableFilter</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>TableFilter</name></type> <name>join</name> <init>= <expr><call><name><name>top</name><operator>.</operator><name>getJoin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>join</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>isOuter</name> <operator>=</operator> <name>isOuter</name> <operator>|</operator> <call><name><name>join</name><operator>.</operator><name>isJoinOuter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>isOuter</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addTableFilter</name></name><argument_list>(<argument><expr><name>join</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <comment type="line">// make flat so the optimizer can work better</comment>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>on</name> <init>= <expr><call><name><name>join</name><operator>.</operator><name>getJoinCondition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>on</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addCondition</name></name><argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>removeJoinCondition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>top</name><operator>.</operator><name>removeJoin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addTableFilter</name></name><argument_list>(<argument><expr><name>join</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>top</name> <operator>=</operator> <name>join</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseSelectExpressions</name><parameter_list>(<parameter><decl><type><name>Select</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>topInSelect</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TOP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Select</name></type> <name>temp</name> <init>= <expr><name>currentSelect</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// make sure aggregate functions will not work in TOP and LIMIT</comment>
            <expr_stmt><expr><name>currentSelect</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <comment type="line">// can't read more complex expressions here because</comment>
            <comment type="line">// SELECT TOP 1 +? A FROM TEST could mean</comment>
            <comment type="line">// SELECT TOP (1+?) A FROM TEST or</comment>
            <comment type="line">// SELECT TOP 1 (+?) AS A FROM TEST</comment>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFetch</name></name><argument_list>(<argument><expr><call><name>readTerm</name><argument_list>()</argument_list></call><operator>.</operator><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PERCENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFetchPercent</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TIES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setWithTies</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>currentSelect</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DISTINCT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>distinctExpressions</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name><name>distinctExpressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDistinct</name></name><argument_list>(<argument><expr><call><name><name>distinctExpressions</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDistinct</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ASTERISK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>parseWildcard</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>FROM</name></expr>:</case>
                <case>case <expr><name>WHERE</name></expr>:</case>
                <case>case <expr><name>GROUP</name></expr>:</case>
                <case>case <expr><name>HAVING</name></expr>:</case>
                <case>case <expr><name>WINDOW</name></expr>:</case>
                <case>case <expr><name>QUALIFY</name></expr>:</case>
                <case>case <expr><name>ORDER</name></expr>:</case>
                <case>case <expr><name>OFFSET</name></expr>:</case>
                <case>case <expr><name>FETCH</name></expr>:</case>
                <case>case <expr><name>CLOSE_PAREN</name></expr>:</case>
                <case>case <expr><name>SEMICOLON</name></expr>:</case>
                <case>case <expr><name>END_OF_INPUT</name></expr>:</case>
                    <break>break;</break>
                <default>default:</default>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>expr</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isIdentifier</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>expr</name> <operator>=</operator> <operator>new</operator> <call><name>Alias</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>aliasColumnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpressions</name></name><argument_list>(<argument><expr><name>expressions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Select</name></type> <name>parseSelect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Select</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Select</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Select</name></type> <name>oldSelect</name> <init>= <expr><name>currentSelect</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Prepared</name></type> <name>oldPrepared</name> <init>= <expr><name>currentPrepared</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>currentSelect</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentPrepared</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>parseSelectExpressions</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// select without FROM</comment>
            <decl_stmt><decl><type><name>TableFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>TableFilter</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DualTable</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>rightsChecked</name></expr></argument>,
                    <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addTableFilter</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>parseSelectFromPart</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WHERE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addCondition</name></name><argument_list>(<argument><expr><call><name>readExpressionWithGlobalConditions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// the group by is read for the outer select (or not a select)</comment>
        <comment type="line">// so that columns that are not grouped can be used</comment>
        <expr_stmt><expr><name>currentSelect</name> <operator>=</operator> <name>oldSelect</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>GROUP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setGroupQuery</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>isToken</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isOrdinaryGroupingSet</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <do>do <block>{<block_content>
                            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>expr</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>groupByColumnIndex</name> <operator>&amp;&amp;</operator> <name>expr</name> <operator>instanceof</operator> <name>ValueExpression</name> <operator>&amp;&amp;</operator>
                            <call><name><name>expr</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>getExpressions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>Expression</name></type> <name>e</name> <range>: <expr><name>expressions</name></expr></range></decl></init>)</control> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>Wildcard</name></expr>)</condition> <block>{<block_content>
                                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>expr</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>idx</name> <operator>&gt;</operator> <call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>GROUP_BY_NOT_IN_THE_RESULT</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>list</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setGroupBy</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>currentSelect</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>HAVING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setGroupQuery</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setHaving</name></name><argument_list>(<argument><expr><call><name>readExpressionWithGlobalConditions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WINDOW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>sqlIndex</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Window</name></type> <name>w</name> <init>= <expr><call><name>readWindowSpecification</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>currentSelect</name><operator>.</operator><name>addWindow</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getSyntaxError</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>, <argument><expr><name>sqlIndex</name></expr></argument>, <argument><expr><literal type="string">"unique identifier"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>QUALIFY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setWindowQuery</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setQualify</name></name><argument_list>(<argument><expr><call><name>readExpressionWithGlobalConditions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setParameterList</name></name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentSelect</name> <operator>=</operator> <name>oldSelect</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentPrepared</name> <operator>=</operator> <name>oldPrepared</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setSQL</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether current opening parenthesis can be a start of ordinary
     * grouping set. This method reads this parenthesis if it is.
     *
     * @return whether current opening parenthesis can be a start of ordinary
     *         grouping set
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isOrdinaryGroupingSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>scanToCloseParen</name><argument_list>(<argument><expr><name>tokenIndex</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Try to parse as expression to get better syntax error</comment>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>tokenType</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// End of query</comment>
        <case>case <expr><name>CLOSE_PAREN</name></expr>:</case>
        <case>case <expr><name>SEMICOLON</name></expr>:</case>
        <case>case <expr><name>END_OF_INPUT</name></expr>:</case>
        <comment type="line">// Next grouping element</comment>
        <case>case <expr><name>COMMA</name></expr>:</case>
        <comment type="line">// Next select clause</comment>
        <case>case <expr><name>HAVING</name></expr>:</case>
        <case>case <expr><name>WINDOW</name></expr>:</case>
        <case>case <expr><name>QUALIFY</name></expr>:</case>
        <comment type="line">// Next query expression body clause</comment>
        <case>case <expr><name>UNION</name></expr>:</case>
        <case>case <expr><name>EXCEPT</name></expr>:</case>
        <case>case <expr><name>MINUS</name></expr>:</case>
        <case>case <expr><name>INTERSECT</name></expr>:</case>
        <comment type="line">// Next query expression clause</comment>
        <case>case <expr><name>ORDER</name></expr>:</case>
        <case>case <expr><name>OFFSET</name></expr>:</case>
        <case>case <expr><name>FETCH</name></expr>:</case>
        <case>case <expr><name>LIMIT</name></expr>:</case>
        <case>case <expr><name>FOR</name></expr>:</case>
            <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>tokenIndex</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <default>default:</default>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Query</name></type> <name>parseExplicitTable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name>readTableOrView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Select</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Select</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TableFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>TableFilter</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>rightsChecked</name></expr></argument>,
                <argument><expr><name>command</name></expr></argument>, <argument><expr><name>orderInFrom</name><operator>++</operator></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addTableFilter</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExplicitTable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setSQL</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setSQL</name><parameter_list>(<parameter><decl><type><name>Prepared</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><name>sqlCommand</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>beginIndex</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>endIndex</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>beginIndex</name> <operator>&lt;</operator> <name>endIndex</name> <operator>&amp;&amp;</operator> <call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>beginIndex</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>beginIndex</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <while>while <condition>(<expr><name>beginIndex</name> <operator>&lt;</operator> <name>endIndex</name> <operator>&amp;&amp;</operator> <call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>endIndex</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>endIndex</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>beginIndex</name></expr></argument>, <argument><expr><name>endIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>commandTokens</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>currentTokenType</name> <operator>==</operator> <name>END_OF_INPUT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>commandTokens</name> <operator>=</operator> <name>tokens</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>beginIndex</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name><name>commandTokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>commandTokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>subtractFromStart</name><argument_list>(<argument><expr><name>beginIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>setStart</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sqlCommand</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>subList</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>tokenIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>commandTokens</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>subList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tokenIndex</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Token</name></type> <name>t</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>clone</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>subtractFromStart</name></name><argument_list>(<argument><expr><name>beginIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>commandTokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>commandTokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Token</name><operator>.</operator><name>EndOfInputToken</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSQL</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>commandTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readExpressionOrDefault</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ValueExpression</name><operator>.</operator><name>DEFAULT</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readExpressionWithGlobalConditions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>r</name> <init>= <expr><call><name>readCondition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readAnd</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>readCondition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"_LOCAL_AND_GLOBAL_"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readAnd</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ConditionLocalAndGlobal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>readCondition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>readExpressionPart2</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readExpression</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>readExpressionPart2</name><argument_list>(<argument><expr><call><name>readAnd</name><argument_list>(<argument><expr><call><name>readCondition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readExpressionPart2</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>r1</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>r1</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>r2</name> <init>= <expr><call><name>readAnd</name><argument_list>(<argument><expr><call><name>readCondition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name><name>ConditionAndOr</name><operator>.</operator><name>OR</name></name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Above logic to avoid allocating an ArrayList for the common case.</comment>
        <comment type="line">// We combine into ConditionAndOrN here rather than letting the optimisation</comment>
        <comment type="line">// pass do it, to avoid StackOverflowError during stuff like mapColumns.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readAnd</name><argument_list>(<argument><expr><call><name>readCondition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><operator>new</operator> <call><name>ConditionAndOrN</name><argument_list>(<argument><expr><name><name>ConditionAndOr</name><operator>.</operator><name>OR</name></name></expr></argument>, <argument><expr><name>expressions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readAnd</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>r</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>expr2</name> <init>= <expr><call><name>readCondition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>expr2</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Above logic to avoid allocating an ArrayList for the common case.</comment>
        <comment type="line">// We combine into ConditionAndOrN here rather than letting the optimisation</comment>
        <comment type="line">// pass do it, to avoid StackOverflowError during stuff like mapColumns.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>expr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readCondition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><operator>new</operator> <call><name>ConditionAndOrN</name><argument_list>(<argument><expr><name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr></argument>, <argument><expr><name>expressions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readCondition</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NOT</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>ConditionNot</name><argument_list>(<argument><expr><call><name>readCondition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>EXISTS</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// can not reduce expression because it might be a union except</comment>
            <comment type="line">// query with distinct</comment>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>ExistsPredicate</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>UNIQUE</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>UniquePredicate</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <default>default:</default>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INTERSECTS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>r1</name> <init>= <expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>r2</name> <init>= <expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><name><name>Comparison</name><operator>.</operator><name>SPATIAL_INTERSECTS</name></name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addMultipleExpected</name><argument_list>(<argument><expr><name>NOT</name></expr></argument>, <argument><expr><name>EXISTS</name></expr></argument>, <argument><expr><name>UNIQUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><literal type="string">"INTERSECTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></switch>
        <decl_stmt><decl><type><name>Expression</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><name>l</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            <comment type="line">// special case: NOT NULL is not part of an expression (as in CREATE</comment>
            <comment type="line">// TABLE TEST(ID INT DEFAULT 0 NOT NULL))</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>backup</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>not</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><name>NOT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>not</name> <operator>&amp;&amp;</operator> <call><name>isToken</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// this really only works for NOT NULL!</comment>
                <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>readConditionRightHandSide</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>;</do>
        <return>return <expr><name>l</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readConditionRightHandSide</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>not</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>whenOperand</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>not</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>IS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readConditionIs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>BETWEEN</name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>symmetric</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><name>SYMMETRIC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>symmetric</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>ASYMMETRIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>a</name> <init>= <expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>BetweenPredicate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><name>symmetric</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>IN</name></expr>:</case>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readInPredicate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>LIKE</name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readLikePredicate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>LikeType</name><operator>.</operator><name>LIKE</name></name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <default>default:</default>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ILIKE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readLikePredicate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>LikeType</name><operator>.</operator><name>ILIKE</name></name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"REGEXP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>b</name> <init>= <expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>recompileAlways</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>CompareLike</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>LikeType</name><operator>.</operator><name>REGEXP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>not</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>whenOperand</name></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="null">null</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>addMultipleExpected</name><argument_list>(<argument><expr><name>BETWEEN</name></expr></argument>, <argument><expr><name>IN</name></expr></argument>, <argument><expr><name>LIKE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>compareType</name> <init>= <expr><call><name>getCompareType</name><argument_list>(<argument><expr><name>currentTokenType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>compareType</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="null">null</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readComparison</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>compareType</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readConditionIs</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>whenOperand</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isNot</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><name>NOT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NULL</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>new</operator> <call><name>NullPredicate</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>isNot</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DISTINCT</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>readComparison</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><ternary><condition><expr><name>isNot</name></expr> ?</condition><then> <expr><name><name>Comparison</name><operator>.</operator><name>EQUAL_NULL_SAFE</name></name></expr> </then><else>: <expr><name><name>Comparison</name><operator>.</operator><name>NOT_EQUAL_NULL_SAFE</name></name></expr></else></ternary></expr></argument>,
                    <argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TRUE</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>new</operator> <call><name>BooleanTest</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>isNot</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FALSE</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>new</operator> <call><name>BooleanTest</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>isNot</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>UNKNOWN</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>new</operator> <call><name>BooleanTest</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>isNot</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"OF"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>readTypePredicate</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>isNot</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"JSON"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>readJsonPredicate</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>isNot</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>addMultipleExpected</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DISTINCT</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <comment type="block">/*
                 * Databases that were created in 1.4.199 and older
                 * versions can contain invalid generated IS [ NOT ]
                 * expressions.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><name>whenOperand</name> <operator>||</operator> <operator>!</operator><call><name><name>session</name><operator>.</operator><name>isQuirksMode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><ternary><condition><expr><name>isNot</name></expr> ?</condition><then> <expr><name><name>Comparison</name><operator>.</operator><name>NOT_EQUAL_NULL_SAFE</name></name></expr> </then><else>: <expr><name><name>Comparison</name><operator>.</operator><name>EQUAL_NULL_SAFE</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>left</name></expr></argument>,
                        <argument><expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></switch>
        <return>return <expr><name>left</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypePredicate</name></type> <name>readTypePredicate</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>not</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>whenOperand</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TypeInfo</name></argument>&gt;</argument_list></name></type> <name>typeList</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>typeList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>parseDataType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><operator>new</operator> <call><name>TypePredicate</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><call><name><name>typeList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>TypeInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readInPredicate</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>not</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>whenOperand</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>whenOperand</name> <operator>&amp;&amp;</operator> <call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>allowEmptyInPredicate</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>not</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isQuery</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>ConditionInQuery</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>Comparison</name><operator>.</operator><name>EQUAL</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Subquery</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><operator>new</operator> <call><name>ConditionIn</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>IsJsonPredicate</name></type> <name>readJsonPredicate</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>not</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>whenOperand</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>JSONItemType</name></type> <name>itemType</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>itemType</name> <operator>=</operator> <name><name>JSONItemType</name><operator>.</operator><name>VALUE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>itemType</name> <operator>=</operator> <name><name>JSONItemType</name><operator>.</operator><name>ARRAY</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"OBJECT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>itemType</name> <operator>=</operator> <name><name>JSONItemType</name><operator>.</operator><name>OBJECT</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SCALAR"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>itemType</name> <operator>=</operator> <name><name>JSONItemType</name><operator>.</operator><name>SCALAR</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>itemType</name> <operator>=</operator> <name><name>JSONItemType</name><operator>.</operator><name>VALUE</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>unique</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>UNIQUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"KEYS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>unique</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"WITHOUT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>UNIQUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"KEYS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>IsJsonPredicate</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><name>unique</name></expr></argument>, <argument><expr><name>itemType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readLikePredicate</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>LikeType</name></type> <name>likeType</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>not</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>whenOperand</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>right</name> <init>= <expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>esc</name> <init>= <expr><ternary><condition><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ESCAPE"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>recompileAlways</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>CompareLike</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>esc</name></expr></argument>, <argument><expr><name>likeType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readComparison</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compareType</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>whenOperand</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isQuery</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionInQuery</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>compareType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><name>compareType</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ANY</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>SOME</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>PARAMETER</name> <operator>&amp;&amp;</operator> <name>compareType</name> <operator>==</operator> <name><name>Comparison</name><operator>.</operator><name>EQUAL</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name>readParameter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionInParameter</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isQuery</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionInQuery</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>compareType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><name>compareType</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><name>compareType</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>left</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readConcat</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>op1</name> <init>= <expr><call><name>readSum</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>CONCATENATION</name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>op2</name> <init>= <expr><call><name>readSum</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CONCATENATION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>ConcatenationOperation</name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name>ConcatenationOperation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <do>do <block>{<block_content>
                        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readSum</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CONCATENATION</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
                    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>doneWithParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>op1</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>op1</name> <operator>=</operator> <operator>new</operator> <call><name>ConcatenationOperation</name><argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>TILDE</name></expr>:</case> <comment type="line">// PostgreSQL compatibility</comment>
                <expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>readTildeCondition</name><argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>NOT_TILDE</name></expr>:</case> <comment type="line">// PostgreSQL compatibility</comment>
                <expr_stmt><expr><name>op1</name> <operator>=</operator> <call><name>readTildeCondition</name><argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <comment type="line">// Don't add compatibility operators</comment>
                <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><name>CONCATENATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>op1</name></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readSum</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>r</name> <init>= <expr><call><name>readFactor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>PLUS_SIGN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>BinaryOperation</name><argument_list>(<argument><expr><name><name>OpType</name><operator>.</operator><name>PLUS</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>readFactor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>MINUS_SIGN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>BinaryOperation</name><argument_list>(<argument><expr><name><name>OpType</name><operator>.</operator><name>MINUS</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>readFactor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><name>r</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readFactor</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>r</name> <init>= <expr><call><name>readTerm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ASTERISK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>BinaryOperation</name><argument_list>(<argument><expr><name><name>OpType</name><operator>.</operator><name>MULTIPLY</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>readTerm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>SLASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>BinaryOperation</name><argument_list>(<argument><expr><name><name>OpType</name><operator>.</operator><name>DIVIDE</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>readTerm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>PERCENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>MathFunction</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>readTerm</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction</name><operator>.</operator><name>MOD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><name>r</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readTildeCondition</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>not</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ASTERISK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>CastSpecification</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR_IGNORECASE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>CompareLike</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name>readSum</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>LikeType</name><operator>.</operator><name>REGEXP</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readAggregate</name><parameter_list>(<parameter><decl><type><name>AggregateType</name></type> <name>aggregateType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>aggregateName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>currentSelect</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>expectedList</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Aggregate</name></type> <name>r</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>aggregateType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>COUNT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ASTERISK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Aggregate</name><argument_list>(<argument><expr><name><name>AggregateType</name><operator>.</operator><name>COUNT_ALL</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>distinct</name> <init>= <expr><call><name>readDistinctAgg</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>on</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>on</name> <operator>instanceof</operator> <name>Wildcard</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>distinct</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// PostgreSQL compatibility: count(t.*)</comment>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Aggregate</name><argument_list>(<argument><expr><name><name>AggregateType</name><operator>.</operator><name>COUNT_ALL</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Aggregate</name><argument_list>(<argument><expr><name><name>AggregateType</name><operator>.</operator><name>COUNT</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Expression</name><index>[]</index></name> <block>{ <expr><name>on</name></expr> }</block></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><name>distinct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>COVAR_POP</name></expr>:</case>
        <case>case <expr><name>COVAR_SAMP</name></expr>:</case>
        <case>case <expr><name>CORR</name></expr>:</case>
        <case>case <expr><name>REGR_SLOPE</name></expr>:</case>
        <case>case <expr><name>REGR_INTERCEPT</name></expr>:</case>
        <case>case <expr><name>REGR_COUNT</name></expr>:</case>
        <case>case <expr><name>REGR_R2</name></expr>:</case>
        <case>case <expr><name>REGR_AVGX</name></expr>:</case>
        <case>case <expr><name>REGR_AVGY</name></expr>:</case>
        <case>case <expr><name>REGR_SXX</name></expr>:</case>
        <case>case <expr><name>REGR_SYY</name></expr>:</case>
        <case>case <expr><name>REGR_SXY</name></expr>:</case>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Aggregate</name><argument_list>(<argument><expr><name>aggregateType</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Expression</name><index>[]</index></name> <block>{ <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr>, <expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr> }</block></expr></argument>,
                    <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>HISTOGRAM</name></expr>:</case>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Aggregate</name><argument_list>(<argument><expr><name>aggregateType</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Expression</name><index>[]</index></name> <block>{ <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr> }</block></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>LISTAGG</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>distinct</name> <init>= <expr><call><name>readDistinctAgg</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>arg</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListaggArguments</name></type> <name>extraArguments</name> <init>= <expr><operator>new</operator> <call><name>ListaggArguments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>orderByList</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="string">"STRING_AGG"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>aggregateName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// PostgreSQL compatibility: string_agg(expression, delimiter)</comment>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>extraArguments</name><operator>.</operator><name>setSeparator</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>orderByList</name> <operator>=</operator> <call><name>readIfOrderBy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="string">"GROUP_CONCAT"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>aggregateName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>orderByList</name> <operator>=</operator> <call><name>readIfOrderBy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SEPARATOR"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>extraArguments</name><operator>.</operator><name>setSeparator</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>extraArguments</name><operator>.</operator><name>setSeparator</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"OVERFLOW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TRUNCATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>extraArguments</name><operator>.</operator><name>setOnOverflowTruncate</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>extraArguments</name><operator>.</operator><name>setFilter</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"WITHOUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>extraArguments</name><operator>.</operator><name>setWithoutCount</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"COUNT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ERROR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>orderByList</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>args</name> <init>= <expr><operator>new</operator> <name><name>Expression</name><index>[]</index></name> <block>{ <expr><name>arg</name></expr> }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>orderByList</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>isToken</name><argument_list>(<argument><expr><literal type="string">"WITHIN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readWithinGroup</name><argument_list>(<argument><expr><name>aggregateType</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>distinct</name></expr></argument>, <argument><expr><name>extraArguments</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Aggregate</name><argument_list>(<argument><expr><name><name>AggregateType</name><operator>.</operator><name>LISTAGG</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><name>distinct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setExtraArguments</name></name><argument_list>(<argument><expr><name>extraArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>orderByList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setOrderByList</name></name><argument_list>(<argument><expr><name>orderByList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>ARRAY_AGG</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>distinct</name> <init>= <expr><call><name>readDistinctAgg</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Aggregate</name><argument_list>(<argument><expr><name><name>AggregateType</name><operator>.</operator><name>ARRAY_AGG</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Expression</name><index>[]</index></name> <block>{ <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr> }</block></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><name>distinct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setOrderByList</name></name><argument_list>(<argument><expr><call><name>readIfOrderBy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>RANK</name></expr>:</case>
        <case>case <expr><name>DENSE_RANK</name></expr>:</case>
        <case>case <expr><name>PERCENT_RANK</name></expr>:</case>
        <case>case <expr><name>CUME_DIST</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isToken</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>readWindowFunction</name><argument_list>(<argument><expr><name>aggregateName</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readWithinGroup</name><argument_list>(<argument><expr><name>aggregateType</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>PERCENTILE_CONT</name></expr>:</case>
        <case>case <expr><name>PERCENTILE_DISC</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>num</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readWithinGroup</name><argument_list>(<argument><expr><name>aggregateType</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Expression</name><index>[]</index></name> <block>{ <expr><name>num</name></expr> }</block></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>MODE</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readWithinGroup</name><argument_list>(<argument><expr><name><name>AggregateType</name><operator>.</operator><name>MODE</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>Expression</name></type> <name>expr</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Aggregate</name><argument_list>(<argument><expr><name><name>AggregateType</name><operator>.</operator><name>MODE</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ORDER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>expr2</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><call><name><name>expr</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name><name>HasSQL</name><operator>.</operator><name>DEFAULT_SQL_FLAGS</name></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>sql2</name> <init>= <expr><call><name><name>expr2</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name><name>HasSQL</name><operator>.</operator><name>DEFAULT_SQL_FLAGS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sql</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>sql2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getSyntaxError</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>IDENTICAL_EXPRESSIONS_SHOULD_BE_USED</name></name></expr></argument>, <argument><expr><name>sqlCommand</name></expr></argument>,
                                <argument><expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>sql2</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>readAggregateOrder</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>readAggregateOrder</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>JSON_OBJECTAGG</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>withKey</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><name>KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>key</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>withKey</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COLON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>value</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Aggregate</name><argument_list>(<argument><expr><name><name>AggregateType</name><operator>.</operator><name>JSON_OBJECTAGG</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Expression</name><index>[]</index></name> <block>{ <expr><name>key</name></expr>, <expr><name>value</name></expr> }</block></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readJsonObjectFunctionFlags</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>JSON_ARRAYAGG</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>distinct</name> <init>= <expr><call><name>readDistinctAgg</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Aggregate</name><argument_list>(<argument><expr><name><name>AggregateType</name><operator>.</operator><name>JSON_ARRAYAGG</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Expression</name><index>[]</index></name> <block>{ <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr> }</block></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>,
                    <argument><expr><name>distinct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setOrderByList</name></name><argument_list>(<argument><expr><call><name>readIfOrderBy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setFlags</name></name><argument_list>(<argument><expr><name><name>JsonConstructorUtils</name><operator>.</operator><name>JSON_ABSENT_ON_NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readJsonObjectFunctionFlags</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
            <decl_stmt><decl><type><name>boolean</name></type> <name>distinct</name> <init>= <expr><call><name>readDistinctAgg</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Aggregate</name><argument_list>(<argument><expr><name>aggregateType</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Expression</name><index>[]</index></name> <block>{ <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr> }</block></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><name>distinct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>readFilterAndOver</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Aggregate</name></type> <name>readWithinGroup</name><parameter_list>(<parameter><decl><type><name>AggregateType</name></type> <name>aggregateType</name></decl></parameter>, <parameter><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>distinct</name></decl></parameter>,
            <parameter><decl><type><name>Object</name></type> <name>extraArguments</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>forHypotheticalSet</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>simple</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"WITHIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Aggregate</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>Aggregate</name><argument_list>(<argument><expr><name>aggregateType</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><name>distinct</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setExtraArguments</name></name><argument_list>(<argument><expr><name>extraArguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>forHypotheticalSet</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>args</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>orderList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>orderList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>parseSortSpecification</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setOrderByList</name></name><argument_list>(<argument><expr><name>orderList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>simple</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readAggregateOrder</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setOrderByList</name></name><argument_list>(<argument><expr><call><name>parseSortSpecificationList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readAggregateOrder</name><parameter_list>(<parameter><decl><type><name>Aggregate</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>parseSortType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>orderList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QueryOrderBy</name></type> <name>order</name> <init>= <expr><operator>new</operator> <call><name>QueryOrderBy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>order</name><operator>.</operator><name>expression</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>parseSortType</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>order</name><operator>.</operator><name>sortType</name></name> <operator>=</operator> <call><name>parseSortType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>orderList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setOrderByList</name></name><argument_list>(<argument><expr><name>orderList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>readIfOrderBy</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ORDER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>parseSortSpecificationList</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>parseSortSpecificationList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>orderList</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>orderList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>parseSortSpecification</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><name>orderList</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>QueryOrderBy</name></type> <name>parseSortSpecification</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>QueryOrderBy</name></type> <name>order</name> <init>= <expr><operator>new</operator> <call><name>QueryOrderBy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>order</name><operator>.</operator><name>expression</name></name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>order</name><operator>.</operator><name>sortType</name></name> <operator>=</operator> <call><name>parseSortType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>order</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readUserDefinedFunctionIf</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>functionName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>UserDefinedFunction</name></type> <name>userDefinedFunction</name> <init>= <expr><call><name>findUserDefinedFunctionWithinPath</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>userDefinedFunction</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>userDefinedFunction</name> <operator>instanceof</operator> <name>FunctionAlias</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>FunctionAlias</name></type> <name>functionAlias</name> <init>= <expr><operator>(</operator><name>FunctionAlias</name><operator>)</operator> <name>userDefinedFunction</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>argList</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name><name>argList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>JavaFunction</name><argument_list>(<argument><expr><name>functionAlias</name></expr></argument>, <argument><expr><call><name><name>argList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>UserAggregate</name></type> <name>aggregate</name> <init>= <expr><operator>(</operator><name>UserAggregate</name><operator>)</operator> <name>userDefinedFunction</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>distinct</name> <init>= <expr><call><name>readDistinctAgg</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <decl_stmt><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>list</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JavaAggregate</name></type> <name>agg</name> <init>= <expr><operator>new</operator> <call><name>JavaAggregate</name><argument_list>(<argument><expr><name>aggregate</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><name>distinct</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>readFilterAndOver</name><argument_list>(<argument><expr><name>agg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>agg</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>readDistinctAgg</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DISTINCT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readFilterAndOver</name><parameter_list>(<parameter><decl><type><name>AbstractAggregate</name></type> <name>aggregate</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"FILTER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>WHERE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>filterCondition</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>aggregate</name><operator>.</operator><name>setFilterCondition</name></name><argument_list>(<argument><expr><name>filterCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>readOver</name><argument_list>(<argument><expr><name>aggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readOver</name><parameter_list>(<parameter><decl><type><name>DataAnalysisOperation</name></type> <name>operation</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"OVER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>operation</name><operator>.</operator><name>setOverCondition</name></name><argument_list>(<argument><expr><call><name>readWindowNameOrSpecification</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>currentSelect</name><operator>.</operator><name>setWindowQuery</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>operation</name><operator>.</operator><name>isAggregate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>currentSelect</name><operator>.</operator><name>setGroupQuery</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Window</name></type> <name>readWindowNameOrSpecification</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name>isToken</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>readWindowSpecification</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name>Window</name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Window</name></type> <name>readWindowSpecification</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>parent</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>IDENTIFIER</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>current</name> <init>= <expr><name>currentToken</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator> <comment type="line">//</comment>
                    <operator>!</operator><call><name>equalsToken</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="string">"PARTITION"</literal></expr></argument>)</argument_list></call> <comment type="line">//</comment>
                    <operator>&amp;&amp;</operator> <operator>!</operator><call><name>equalsToken</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="string">"ROWS"</literal></expr></argument>)</argument_list></call> <comment type="line">//</comment>
                    <operator>&amp;&amp;</operator> <operator>!</operator><call><name>equalsToken</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="string">"RANGE"</literal></expr></argument>)</argument_list></call> <comment type="line">//</comment>
                    <operator>&amp;&amp;</operator> <operator>!</operator><call><name>equalsToken</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="string">"GROUPS"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>partitionBy</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PARTITION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>partitionBy</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>Expression</name></type> <name>expr</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>partitionBy</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>orderBy</name> <init>= <expr><call><name>readIfOrderBy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WindowFrame</name></type> <name>frame</name> <init>= <expr><call><name>readWindowFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>Window</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>partitionBy</name></expr></argument>, <argument><expr><name>orderBy</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>WindowFrame</name></type> <name>readWindowFrame</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>WindowFrameUnits</name></type> <name>units</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ROWS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>units</name> <operator>=</operator> <name><name>WindowFrameUnits</name><operator>.</operator><name>ROWS</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RANGE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>units</name> <operator>=</operator> <name><name>WindowFrameUnits</name><operator>.</operator><name>RANGE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"GROUPS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>units</name> <operator>=</operator> <name><name>WindowFrameUnits</name><operator>.</operator><name>GROUPS</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>WindowFrameBound</name></type> <name>starting</name></decl>, <decl><type ref="prev"/><name>following</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>BETWEEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>starting</name> <operator>=</operator> <call><name>readWindowFrameRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>following</name> <operator>=</operator> <call><name>readWindowFrameRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>starting</name> <operator>=</operator> <call><name>readWindowFrameStarting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>following</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sqlIndex</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WindowFrameExclusion</name></type> <name>exclusion</name> <init>= <expr><name><name>WindowFrameExclusion</name><operator>.</operator><name>EXCLUDE_NO_OTHERS</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"EXCLUDE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CURRENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>exclusion</name> <operator>=</operator> <name><name>WindowFrameExclusion</name><operator>.</operator><name>EXCLUDE_CURRENT_ROW</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>GROUP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>exclusion</name> <operator>=</operator> <name><name>WindowFrameExclusion</name><operator>.</operator><name>EXCLUDE_GROUP</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TIES"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>exclusion</name> <operator>=</operator> <name><name>WindowFrameExclusion</name><operator>.</operator><name>EXCLUDE_TIES</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"OTHERS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>WindowFrame</name></type> <name>frame</name> <init>= <expr><operator>new</operator> <call><name>WindowFrame</name><argument_list>(<argument><expr><name>units</name></expr></argument>, <argument><expr><name>starting</name></expr></argument>, <argument><expr><name>following</name></expr></argument>, <argument><expr><name>exclusion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>frame</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getSyntaxError</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>, <argument><expr><name>sqlIndex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>frame</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>WindowFrameBound</name></type> <name>readWindowFrameStarting</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UNBOUNDED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"PRECEDING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>WindowFrameBound</name><argument_list>(<argument><expr><name><name>WindowFrameBoundType</name><operator>.</operator><name>UNBOUNDED_PRECEDING</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CURRENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>WindowFrameBound</name><argument_list>(<argument><expr><name><name>WindowFrameBoundType</name><operator>.</operator><name>CURRENT_ROW</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>value</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"PRECEDING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>WindowFrameBound</name><argument_list>(<argument><expr><name><name>WindowFrameBoundType</name><operator>.</operator><name>PRECEDING</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>WindowFrameBound</name></type> <name>readWindowFrameRange</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UNBOUNDED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PRECEDING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>WindowFrameBound</name><argument_list>(<argument><expr><name><name>WindowFrameBoundType</name><operator>.</operator><name>UNBOUNDED_PRECEDING</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"FOLLOWING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>WindowFrameBound</name><argument_list>(<argument><expr><name><name>WindowFrameBoundType</name><operator>.</operator><name>UNBOUNDED_FOLLOWING</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CURRENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>WindowFrameBound</name><argument_list>(<argument><expr><name><name>WindowFrameBoundType</name><operator>.</operator><name>CURRENT_ROW</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>value</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PRECEDING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>WindowFrameBound</name><argument_list>(<argument><expr><name><name>WindowFrameBoundType</name><operator>.</operator><name>PRECEDING</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"FOLLOWING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>WindowFrameBound</name><argument_list>(<argument><expr><name><name>WindowFrameBoundType</name><operator>.</operator><name>FOLLOWING</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readFunction</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>upperName</name> <init>= <expr><call><name>upperName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>readFunctionWithSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>allowOverride</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>isAllowBuiltinAliasOverride</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>allowOverride</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name>readUserDefinedFunctionIf</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>e</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>AggregateType</name></type> <name>agg</name> <init>= <expr><call><name><name>Aggregate</name><operator>.</operator><name>getAggregateType</name></name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>agg</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>readAggregate</name><argument_list>(<argument><expr><name>agg</name></expr></argument>, <argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name>readBuiltinFunctionIf</name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>e</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>readWindowFunction</name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>e</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>readCompatibilityFunction</name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>e</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>allowOverride</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>readUserDefinedFunctionIf</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>e</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FUNCTION_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readFunctionWithSchema</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>upperName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnum</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ModeEnum</name><operator>.</operator><name>PostgreSQL</name></name>
                <operator>&amp;&amp;</operator> <call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>sysIdentifier</name></name><argument_list>(<argument><expr><literal type="string">"PG_CATALOG"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>FunctionsPostgreSQL</name></type> <name>function</name> <init>= <expr><call><name><name>FunctionsPostgreSQL</name><operator>.</operator><name>getFunction</name></name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>function</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>function</name> <init>= <expr><call><name>readUserDefinedFunctionIf</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>function</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>function</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FUNCTION_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readCompatibilityFunction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// ||</comment>
        <case>case <expr><literal type="string">"ARRAY_APPEND"</literal></expr>:</case>
        <case>case <expr><literal type="string">"ARRAY_CAT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>ConcatenationOperation</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// []</comment>
        <case>case <expr><literal type="string">"ARRAY_GET"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>ArrayElementReference</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// CARDINALITY</comment>
        <case>case <expr><literal type="string">"ARRAY_LENGTH"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>CardinalityExpression</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// Simple case</comment>
        <case>case <expr><literal type="string">"DECODE"</literal></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>caseOperand</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>canOptimize</name> <init>= <expr><call><name><name>caseOperand</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>caseOperand</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>containsNull</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>a</name> <init>= <expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>SimpleCase</name><operator>.</operator><name>SimpleWhen</name></name></type> <name>when</name> <init>= <expr><call><name>decodeToWhen</name><argument_list>(<argument><expr><name>caseOperand</name></expr></argument>, <argument><expr><name>canOptimize</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>current</name> <init>= <expr><name>when</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>elseResult</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>SimpleCase</name><operator>.</operator><name>SimpleWhen</name></name></type> <name>next</name> <init>= <expr><call><name>decodeToWhen</name><argument_list>(<argument><expr><name>caseOperand</name></expr></argument>, <argument><expr><name>canOptimize</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>current</name><operator>.</operator><name>setWhen</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>current</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>elseResult</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SimpleCase</name><argument_list>(<argument><expr><name>caseOperand</name></expr></argument>, <argument><expr><name>when</name></expr></argument>, <argument><expr><name>elseResult</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <comment type="line">// Searched case</comment>
        <case>case <expr><literal type="string">"CASEWHEN"</literal></expr>:</case>
            <return>return <expr><call><name>readCompatibilityCase</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"NVL2"</literal></expr>:</case>
            <return>return <expr><call><name>readCompatibilityCase</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NullPredicate</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// Cast specification</comment>
        <case>case <expr><literal type="string">"CONVERT"</literal></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>arg</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Column</name></type> <name>column</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>swapConvertFunctionParameters</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>column</name> <operator>=</operator> <call><name>parseColumnWithType</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>readNextArgument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>column</name> <operator>=</operator> <call><name>parseColumnWithType</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>CastSpecification</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <comment type="line">// COALESCE</comment>
        <case>case <expr><literal type="string">"IFNULL"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>CoalesceFunction</name><argument_list>(<argument><expr><name><name>CoalesceFunction</name><operator>.</operator><name>COALESCE</name></name></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"NVL"</literal></expr>:</case>
            <return>return <expr><call><name>readCoalesceFunction</name><argument_list>(<argument><expr><name><name>CoalesceFunction</name><operator>.</operator><name>COALESCE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// CURRENT_CATALOG</comment>
        <case>case <expr><literal type="string">"DATABASE"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>CurrentGeneralValueSpecification</name><argument_list>(<argument><expr><name><name>CurrentGeneralValueSpecification</name><operator>.</operator><name>CURRENT_CATALOG</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// CURRENT_DATE</comment>
        <case>case <expr><literal type="string">"CURDATE"</literal></expr>:</case>
        <case>case <expr><literal type="string">"SYSDATE"</literal></expr>:</case>
        <case>case <expr><literal type="string">"TODAY"</literal></expr>:</case>
            <return>return <expr><call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>CURRENT_DATE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// CURRENT_SCHEMA</comment>
        <case>case <expr><literal type="string">"SCHEMA"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>CurrentGeneralValueSpecification</name><argument_list>(<argument><expr><name><name>CurrentGeneralValueSpecification</name><operator>.</operator><name>CURRENT_SCHEMA</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// CURRENT_TIMESTAMP</comment>
        <case>case <expr><literal type="string">"SYSTIMESTAMP"</literal></expr>:</case>
            <return>return <expr><call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>CURRENT_TIMESTAMP</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// EXTRACT</comment>
        <case>case <expr><literal type="string">"DAY"</literal></expr>:</case>
        <case>case <expr><literal type="string">"DAY_OF_MONTH"</literal></expr>:</case>
        <case>case <expr><literal type="string">"DAYOFMONTH"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>DAY</name></name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DAY_OF_WEEK"</literal></expr>:</case>
        <case>case <expr><literal type="string">"DAYOFWEEK"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>DAY_OF_WEEK</name></name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DAY_OF_YEAR"</literal></expr>:</case>
        <case>case <expr><literal type="string">"DAYOFYEAR"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>DAY_OF_YEAR</name></name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"HOUR"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>HOUR</name></name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ISO_DAY_OF_WEEK"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>ISO_DAY_OF_WEEK</name></name></expr></argument>,
                    <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ISO_WEEK"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>ISO_WEEK</name></name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ISO_YEAR"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>ISO_WEEK_YEAR</name></name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"MINUTE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>MINUTE</name></name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"MONTH"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>MONTH</name></name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"QUARTER"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>QUARTER</name></name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <comment type="line">//</comment>
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SECOND"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>SECOND</name></name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"WEEK"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>WEEK</name></name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"YEAR"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>YEAR</name></name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// LOCALTIME</comment>
        <case>case <expr><literal type="string">"CURTIME"</literal></expr>:</case>
            <return>return <expr><call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>LOCALTIME</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"CURTIME"</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SYSTIME"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>LOCALTIME</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"SYSTIME"</literal></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// LOCALTIMESTAMP</comment>
        <case>case <expr><literal type="string">"NOW"</literal></expr>:</case>
            <return>return <expr><call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>LOCALTIMESTAMP</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"NOW"</literal></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// LOCATE</comment>
        <case>case <expr><literal type="string">"INSTR"</literal></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>arg1</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>StringFunction</name><argument_list>(<argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction</name><operator>.</operator><name>LOCATE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><literal type="string">"POSITION"</literal></expr>:</case> <block>{<block_content>
            <comment type="line">// can't read expression because IN would be read too early</comment>
            <decl_stmt><decl><type><name>Expression</name></type> <name>arg1</name> <init>= <expr><call><name>readConcat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>StringFunction</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>StringFunction</name><operator>.</operator><name>LOCATE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <comment type="line">// LOWER</comment>
        <case>case <expr><literal type="string">"LCASE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>LOWER</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// SUBSTRING</comment>
        <case>case <expr><literal type="string">"SUBSTR"</literal></expr>:</case>
            <return>return <expr><call><name>readSubstringFunction</name><argument_list>()</argument_list></call></expr>;</return>
        <comment type="line">// TRIM</comment>
        <case>case <expr><literal type="string">"LTRIM"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>TrimFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>TrimFunction</name><operator>.</operator><name>LEADING</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"RTRIM"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>TrimFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>TrimFunction</name><operator>.</operator><name>TRAILING</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// UPPER</comment>
        <case>case <expr><literal type="string">"UCASE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>UPPER</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// Sequence value</comment>
        <case>case <expr><literal type="string">"CURRVAL"</literal></expr>:</case>
            <return>return <expr><call><name>readCompatibilitySequenceValueFunction</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"NEXTVAL"</literal></expr>:</case>
            <return>return <expr><call><name>readCompatibilitySequenceValueFunction</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
        <default>default:</default>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>ExpressionWithVariableParameters</name></extends></parameter>&gt;</parameter_list> <name>T</name></type> <name>readParameters</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>expression</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>expression</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>expression</name><operator>.</operator><name>doneWithParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>expression</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>SimpleCase</name><operator>.</operator><name>SimpleWhen</name></name></type> <name>decodeToWhen</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>caseOperand</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>canOptimize</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>whenOperand</name></decl></parameter>,
            <parameter><decl><type><name>Expression</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>canOptimize</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>whenOperand</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>whenOperand</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>containsNull</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>whenOperand</name> <operator>=</operator> <operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><name><name>Comparison</name><operator>.</operator><name>EQUAL_NULL_SAFE</name></name></expr></argument>, <argument><expr><name>caseOperand</name></expr></argument>, <argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name><name>SimpleCase</name><operator>.</operator><name>SimpleWhen</name></name><argument_list>(<argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readCompatibilityCase</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>when</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SearchedCase</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[]</index></name> <block>{ <expr><name>when</name></expr>, <expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr>, <expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readCompatibilitySequenceValueFunction</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>current</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>arg1</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>arg2</name> <init>= <expr><ternary><condition><expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>CompatibilitySequenceValueFunction</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readBuiltinFunctionIf</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>upperName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>upperName</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="string">"ABS"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>MathFunction</name><operator>.</operator><name>ABS</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"MOD"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction</name><operator>.</operator><name>MOD</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SIN"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>SIN</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"COS"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>COS</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"TAN"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>TAN</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"COT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>COT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SINH"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>SINH</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"COSH"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>COSH</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"TANH"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>TANH</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ASIN"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>ASIN</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ACOS"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>ACOS</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ATAN"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>ATAN</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ATAN2"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction2</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction2</name><operator>.</operator><name>ATAN2</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"LOG"</literal></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>arg1</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>MathFunction2</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction2</name><operator>.</operator><name>LOG</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>,
                        <argument><expr><ternary><condition><expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>logIsLogBase10</name></expr> ?</condition><then> <expr><name><name>MathFunction1</name><operator>.</operator><name>LOG10</name></name></expr> </then><else>: <expr><name><name>MathFunction1</name><operator>.</operator><name>LN</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <case>case <expr><literal type="string">"LOG10"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>LOG10</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"LN"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>LN</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"EXP"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>EXP</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"POWER"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction2</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction2</name><operator>.</operator><name>POWER</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SQRT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>SQRT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"FLOOR"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>MathFunction</name><operator>.</operator><name>FLOOR</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"CEIL"</literal></expr>:</case>
        <case>case <expr><literal type="string">"CEILING"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>MathFunction</name><operator>.</operator><name>CEIL</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ROUND"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction</name><operator>.</operator><name>ROUND</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ROUNDMAGIC"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>MathFunction</name><operator>.</operator><name>ROUNDMAGIC</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SIGN"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>MathFunction</name><operator>.</operator><name>SIGN</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"TRUNC"</literal></expr>:</case>
        <case>case <expr><literal type="string">"TRUNCATE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction</name><operator>.</operator><name>TRUNC</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DEGREES"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>DEGREES</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"RADIANS"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>MathFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MathFunction1</name><operator>.</operator><name>RADIANS</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"BITAND"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>BITAND</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"BITOR"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>BITOR</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"BITXOR"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>BITXOR</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"BITNOT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>BITNOT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"BITNAND"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>BITNAND</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"BITNOR"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>BITNOR</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"BITXNOR"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>BITXNOR</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"BITGET"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>BITGET</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"BITCOUNT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>BITCOUNT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"LSHIFT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>LSHIFT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"RSHIFT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>RSHIFT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ULSHIFT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>ULSHIFT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"URSHIFT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>URSHIFT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ROTATELEFT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>ROTATELEFT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ROTATERIGHT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>BitFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BitFunction</name><operator>.</operator><name>ROTATERIGHT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"EXTRACT"</literal></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>field</name> <init>= <expr><call><name>readDateTimeField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>EXTRACT</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><literal type="string">"DATE_TRUNC"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>DATE_TRUNC</name></name></expr></argument>, <argument><expr><call><name>readDateTimeField</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DATEADD"</literal></expr>:</case>
        <case>case <expr><literal type="string">"TIMESTAMPADD"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>DATEADD</name></name></expr></argument>, <argument><expr><call><name>readDateTimeField</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DATEDIFF"</literal></expr>:</case>
        <case>case <expr><literal type="string">"TIMESTAMPDIFF"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DateTimeFunction</name><argument_list>(<argument><expr><name><name>DateTimeFunction</name><operator>.</operator><name>DATEDIFF</name></name></expr></argument>, <argument><expr><call><name>readDateTimeField</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"FORMATDATETIME"</literal></expr>:</case>
            <return>return <expr><call><name>readDateTimeFormatFunction</name><argument_list>(<argument><expr><name><name>DateTimeFormatFunction</name><operator>.</operator><name>FORMATDATETIME</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"PARSEDATETIME"</literal></expr>:</case>
            <return>return <expr><call><name>readDateTimeFormatFunction</name><argument_list>(<argument><expr><name><name>DateTimeFormatFunction</name><operator>.</operator><name>PARSEDATETIME</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DAYNAME"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DayMonthNameFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>DayMonthNameFunction</name><operator>.</operator><name>DAYNAME</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"MONTHNAME"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DayMonthNameFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>DayMonthNameFunction</name><operator>.</operator><name>MONTHNAME</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"CARDINALITY"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>CardinalityExpression</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ARRAY_MAX_CARDINALITY"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>CardinalityExpression</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"LOCATE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction</name><operator>.</operator><name>LOCATE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"INSERT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>StringFunction</name><operator>.</operator><name>INSERT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"REPLACE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction</name><operator>.</operator><name>REPLACE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"LPAD"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction</name><operator>.</operator><name>LPAD</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"RPAD"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction</name><operator>.</operator><name>RPAD</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"TRANSLATE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>StringFunction</name><operator>.</operator><name>TRANSLATE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"UPPER"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>UPPER</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"LOWER"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>LOWER</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ASCII"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>ASCII</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"CHAR"</literal></expr>:</case>
        <case>case <expr><literal type="string">"CHR"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>CHAR</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"STRINGENCODE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>STRINGENCODE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"STRINGDECODE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>STRINGDECODE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"STRINGTOUTF8"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>STRINGTOUTF8</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"UTF8TOSTRING"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>UTF8TOSTRING</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"HEXTORAW"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>HEXTORAW</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"RAWTOHEX"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>RAWTOHEX</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SPACE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>SPACE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"QUOTE_IDENT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction1</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction1</name><operator>.</operator><name>QUOTE_IDENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SUBSTRING"</literal></expr>:</case>
            <return>return <expr><call><name>readSubstringFunction</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"TO_CHAR"</literal></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>arg1</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>arg2</name></decl>, <decl><type ref="prev"/><name>arg3</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>arg2</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arg3</name> <operator>=</operator> <ternary><condition><expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>arg3</name> <operator>=</operator> <name>arg2</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>ToCharFunction</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><literal type="string">"REPEAT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>StringFunction2</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction2</name><operator>.</operator><name>REPEAT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"CHAR_LENGTH"</literal></expr>:</case>
        <case>case <expr><literal type="string">"CHARACTER_LENGTH"</literal></expr>:</case>
        <case>case <expr><literal type="string">"LENGTH"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>LengthFunction</name><argument_list>(<argument><expr><call><name>readIfSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LengthFunction</name><operator>.</operator><name>CHAR_LENGTH</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"OCTET_LENGTH"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>LengthFunction</name><argument_list>(<argument><expr><call><name>readIfSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LengthFunction</name><operator>.</operator><name>OCTET_LENGTH</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"BIT_LENGTH"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>LengthFunction</name><argument_list>(<argument><expr><call><name>readIfSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LengthFunction</name><operator>.</operator><name>BIT_LENGTH</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"TRIM"</literal></expr>:</case>
            <return>return <expr><call><name>readTrimFunction</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"REGEXP_LIKE"</literal></expr>:</case>
            <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><operator>new</operator> <call><name>RegexpFunction</name><argument_list>(<argument><expr><name><name>RegexpFunction</name><operator>.</operator><name>REGEXP_LIKE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"REGEXP_REPLACE"</literal></expr>:</case>
            <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><operator>new</operator> <call><name>RegexpFunction</name><argument_list>(<argument><expr><name><name>RegexpFunction</name><operator>.</operator><name>REGEXP_REPLACE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"REGEXP_SUBSTR"</literal></expr>:</case>
            <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><operator>new</operator> <call><name>RegexpFunction</name><argument_list>(<argument><expr><name><name>RegexpFunction</name><operator>.</operator><name>REGEXP_SUBSTR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"XMLATTR"</literal></expr>:</case>
            <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><operator>new</operator> <call><name>XMLFunction</name><argument_list>(<argument><expr><name><name>XMLFunction</name><operator>.</operator><name>XMLATTR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"XMLCDATA"</literal></expr>:</case>
            <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><operator>new</operator> <call><name>XMLFunction</name><argument_list>(<argument><expr><name><name>XMLFunction</name><operator>.</operator><name>XMLCDATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"XMLCOMMENT"</literal></expr>:</case>
            <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><operator>new</operator> <call><name>XMLFunction</name><argument_list>(<argument><expr><name><name>XMLFunction</name><operator>.</operator><name>XMLCOMMENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"XMLNODE"</literal></expr>:</case>
            <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><operator>new</operator> <call><name>XMLFunction</name><argument_list>(<argument><expr><name><name>XMLFunction</name><operator>.</operator><name>XMLNODE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"XMLSTARTDOC"</literal></expr>:</case>
            <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><operator>new</operator> <call><name>XMLFunction</name><argument_list>(<argument><expr><name><name>XMLFunction</name><operator>.</operator><name>XMLSTARTDOC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"XMLTEXT"</literal></expr>:</case>
            <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><operator>new</operator> <call><name>XMLFunction</name><argument_list>(<argument><expr><name><name>XMLFunction</name><operator>.</operator><name>XMLTEXT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"TRIM_ARRAY"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>ArrayFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>ArrayFunction</name><operator>.</operator><name>TRIM_ARRAY</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ARRAY_CONTAINS"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>ArrayFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>ArrayFunction</name><operator>.</operator><name>ARRAY_CONTAINS</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ARRAY_SLICE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>ArrayFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>ArrayFunction</name><operator>.</operator><name>ARRAY_SLICE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"COMPRESS"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>CompressFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>CompressFunction</name><operator>.</operator><name>COMPRESS</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"EXPAND"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>CompressFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>CompressFunction</name><operator>.</operator><name>EXPAND</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SOUNDEX"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>SoundexFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SoundexFunction</name><operator>.</operator><name>SOUNDEX</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DIFFERENCE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>SoundexFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SoundexFunction</name><operator>.</operator><name>DIFFERENCE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"JSON_OBJECT"</literal></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>JsonConstructorFunction</name></type> <name>function</name> <init>= <expr><operator>new</operator> <call><name>JsonConstructorFunction</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>CLOSE_PAREN</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>readJsonObjectFunctionFlags</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <do>do <block>{<block_content>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>withKey</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><name>KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>withKey</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COLON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>readJsonObjectFunctionFlags</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>doneWithParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>function</name></expr>;</return>
        </block_content>}</block>
        <case>case <expr><literal type="string">"JSON_ARRAY"</literal></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>JsonConstructorFunction</name></type> <name>function</name> <init>= <expr><operator>new</operator> <call><name>JsonConstructorFunction</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>setFlags</name></name><argument_list>(<argument><expr><name><name>JsonConstructorUtils</name><operator>.</operator><name>JSON_ABSENT_ON_NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>CLOSE_PAREN</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>readJsonObjectFunctionFlags</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>readJsonObjectFunctionFlags</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>doneWithParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>function</name></expr>;</return>
        </block_content>}</block>
        <case>case <expr><literal type="string">"ENCRYPT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>CryptFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>CryptFunction</name><operator>.</operator><name>ENCRYPT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DECRYPT"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>CryptFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>CryptFunction</name><operator>.</operator><name>DECRYPT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"COALESCE"</literal></expr>:</case>
            <return>return <expr><call><name>readCoalesceFunction</name><argument_list>(<argument><expr><name><name>CoalesceFunction</name><operator>.</operator><name>COALESCE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"GREATEST"</literal></expr>:</case>
            <return>return <expr><call><name>readCoalesceFunction</name><argument_list>(<argument><expr><name><name>CoalesceFunction</name><operator>.</operator><name>GREATEST</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"LEAST"</literal></expr>:</case>
            <return>return <expr><call><name>readCoalesceFunction</name><argument_list>(<argument><expr><name><name>CoalesceFunction</name><operator>.</operator><name>LEAST</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"NULLIF"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>NullIfFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"CONCAT"</literal></expr>:</case>
            <return>return <expr><call><name>readConcatFunction</name><argument_list>(<argument><expr><name><name>ConcatFunction</name><operator>.</operator><name>CONCAT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"CONCAT_WS"</literal></expr>:</case>
            <return>return <expr><call><name>readConcatFunction</name><argument_list>(<argument><expr><name><name>ConcatFunction</name><operator>.</operator><name>CONCAT_WS</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"HASH"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>HashFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>HashFunction</name><operator>.</operator><name>HASH</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ORA_HASH"</literal></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>arg1</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>HashFunction</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>HashFunction</name><operator>.</operator><name>ORA_HASH</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>HashFunction</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name><name>HashFunction</name><operator>.</operator><name>ORA_HASH</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><literal type="string">"RAND"</literal></expr>:</case>
        <case>case <expr><literal type="string">"RANDOM"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>RandFunction</name><argument_list>(<argument><expr><call><name>readIfSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RandFunction</name><operator>.</operator><name>RAND</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SECURE_RAND"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>RandFunction</name><argument_list>(<argument><expr><call><name>readSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RandFunction</name><operator>.</operator><name>SECURE_RAND</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"RANDOM_UUID"</literal></expr>:</case>
        <case>case <expr><literal type="string">"UUID"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>RandFunction</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>RandFunction</name><operator>.</operator><name>RANDOM_UUID</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ABORT_SESSION"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>SessionControlFunction</name><argument_list>(<argument><expr><call><name>readIfSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SessionControlFunction</name><operator>.</operator><name>ABORT_SESSION</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"CANCEL_SESSION"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>SessionControlFunction</name><argument_list>(<argument><expr><call><name>readIfSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SessionControlFunction</name><operator>.</operator><name>CANCEL_SESSION</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"AUTOCOMMIT"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SysInfoFunction</name><argument_list>(<argument><expr><name><name>SysInfoFunction</name><operator>.</operator><name>AUTOCOMMIT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DATABASE_PATH"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SysInfoFunction</name><argument_list>(<argument><expr><name><name>SysInfoFunction</name><operator>.</operator><name>DATABASE_PATH</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"H2VERSION"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SysInfoFunction</name><argument_list>(<argument><expr><name><name>SysInfoFunction</name><operator>.</operator><name>H2VERSION</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"LOCK_MODE"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SysInfoFunction</name><argument_list>(<argument><expr><name><name>SysInfoFunction</name><operator>.</operator><name>LOCK_MODE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"LOCK_TIMEOUT"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SysInfoFunction</name><argument_list>(<argument><expr><name><name>SysInfoFunction</name><operator>.</operator><name>LOCK_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"MEMORY_FREE"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SysInfoFunction</name><argument_list>(<argument><expr><name><name>SysInfoFunction</name><operator>.</operator><name>MEMORY_FREE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"MEMORY_USED"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SysInfoFunction</name><argument_list>(<argument><expr><name><name>SysInfoFunction</name><operator>.</operator><name>MEMORY_USED</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"READONLY"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SysInfoFunction</name><argument_list>(<argument><expr><name><name>SysInfoFunction</name><operator>.</operator><name>READONLY</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SESSION_ID"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SysInfoFunction</name><argument_list>(<argument><expr><name><name>SysInfoFunction</name><operator>.</operator><name>SESSION_ID</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"TRANSACTION_ID"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SysInfoFunction</name><argument_list>(<argument><expr><name><name>SysInfoFunction</name><operator>.</operator><name>TRANSACTION_ID</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DISK_SPACE_USED"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>TableInfoFunction</name><argument_list>(<argument><expr><call><name>readIfSingleArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>TableInfoFunction</name><operator>.</operator><name>DISK_SPACE_USED</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ESTIMATED_ENVELOPE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>TableInfoFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>TableInfoFunction</name><operator>.</operator><name>ESTIMATED_ENVELOPE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"FILE_READ"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>FileFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>FileFunction</name><operator>.</operator><name>FILE_READ</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"FILE_WRITE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>FileFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>FileFunction</name><operator>.</operator><name>FILE_WRITE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DATA_TYPE_SQL"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DataTypeSQLFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DB_OBJECT_ID"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DBObjectFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>DBObjectFunction</name><operator>.</operator><name>DB_OBJECT_ID</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DB_OBJECT_SQL"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>DBObjectFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readIfArgument</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>DBObjectFunction</name><operator>.</operator><name>DB_OBJECT_SQL</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"CSVWRITE"</literal></expr>:</case>
            <return>return <expr><call><name>readParameters</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CSVWriteFunction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SIGNAL"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>SignalFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"TRUNCATE_VALUE"</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>TruncateValueFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"ZERO"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"PI"</literal></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
        <decl_stmt><decl><type><name>ModeFunction</name></type> <name>function</name> <init>= <expr><call><name><name>ModeFunction</name><operator>.</operator><name>getFunction</name></name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>function</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name>readParameters</name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readDateTimeFormatFunction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>function</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DateTimeFormatFunction</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>DateTimeFormatFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>doneWithParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>f</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readTrimFunction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>needFrom</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LEADING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>TrimFunction</name><operator>.</operator><name>LEADING</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>needFrom</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TRAILING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>TrimFunction</name><operator>.</operator><name>TRAILING</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>needFrom</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>needFrom</name> <operator>=</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"BOTH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>TrimFunction</name><operator>.</operator><name>LEADING</name></name> <operator>|</operator> <name><name>TrimFunction</name><operator>.</operator><name>TRAILING</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>space</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>needFrom</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>space</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>space</name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>space</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>TrimFunction</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>space</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>ArrayTableFunction</name></type> <name>readUnnestFunction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ArrayTableFunction</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>ArrayTableFunction</name><argument_list>(<argument><expr><name><name>ArrayTableFunction</name><operator>.</operator><name>UNNEST</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>Expression</name></type> <name>expr</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TypeInfo</name></type> <name>columnType</name> <init>= <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_NULL</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>expr</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name><name>expr</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>TypeInfo</name></type> <name>exprType</name> <init>= <expr><call><name><name>expr</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>exprType</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>columnType</name> <operator>=</operator> <operator>(</operator><name>TypeInfo</name><operator>)</operator> <call><name><name>exprType</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><literal type="string">"C"</literal> <operator>+</operator> <operator>++</operator><name>i</name></expr></argument>, <argument><expr><name>columnType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ORDINALITY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><literal type="string">"NORD"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>doneWithParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>f</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>ArrayTableFunction</name></type> <name>readTableFunction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>functionType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ArrayTableFunction</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>ArrayTableFunction</name><argument_list>(<argument><expr><name>functionType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>parseColumnWithType</name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>setColumns</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>doneWithParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>f</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readSingleArgument</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>arg</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>arg</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readNextArgument</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readLastArgument</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>arg</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>arg</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readIfSingleArgument</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>arg</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>arg</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readIfArgument</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>arg</name> <init>= <expr><ternary><condition><expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>arg</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readCoalesceFunction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>function</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CoalesceFunction</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>CoalesceFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>doneWithParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>f</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readConcatFunction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>function</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ConcatFunction</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>ConcatFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>function</name> <operator>==</operator> <name><name>ConcatFunction</name><operator>.</operator><name>CONCAT_WS</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readNextArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <while>while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>doneWithParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>f</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readSubstringFunction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// Standard variants are:</comment>
        <comment type="line">// SUBSTRING(X FROM 1)</comment>
        <comment type="line">// SUBSTRING(X FROM 1 FOR 1)</comment>
        <comment type="line">// Different non-standard variants include:</comment>
        <comment type="line">// SUBSTRING(X,1)</comment>
        <comment type="line">// SUBSTRING(X,1,1)</comment>
        <comment type="line">// SUBSTRING(X FOR 1) -- Postgres</comment>
        <decl_stmt><decl><type><name>SubstringFunction</name></type> <name>function</name> <init>= <expr><operator>new</operator> <call><name>SubstringFunction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FOR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FOR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>doneWithParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>function</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>readDateTimeField</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>field</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>IDENTIFIER</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name><name>DateTimeFunction</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><name>currentToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>LITERAL</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name><name>DateTimeFunction</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>YEAR</name></expr>:</case>
            <expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>DateTimeFunction</name><operator>.</operator><name>YEAR</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MONTH</name></expr>:</case>
            <expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>DateTimeFunction</name><operator>.</operator><name>MONTH</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DAY</name></expr>:</case>
            <expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>DateTimeFunction</name><operator>.</operator><name>DAY</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>HOUR</name></expr>:</case>
            <expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>DateTimeFunction</name><operator>.</operator><name>HOUR</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MINUTE</name></expr>:</case>
            <expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>DateTimeFunction</name><operator>.</operator><name>MINUTE</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SECOND</name></expr>:</case>
            <expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>DateTimeFunction</name><operator>.</operator><name>SECOND</name></name></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <if_stmt><if>if <condition>(<expr><name>field</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><literal type="string">"date-time field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>field</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>WindowFunction</name></type> <name>readWindowFunction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>WindowFunctionType</name></type> <name>type</name> <init>= <expr><call><name><name>WindowFunctionType</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentSelect</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numArgs</name> <init>= <expr><call><name><name>WindowFunction</name><operator>.</operator><name>getMinArgumentCount</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>args</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>numArgs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// There is no functions with numArgs == 0 &amp;&amp; numArgsMax &gt; 0</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>numArgsMax</name> <init>= <expr><call><name><name>WindowFunction</name><operator>.</operator><name>getMaxArgumentCount</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>args</name> <operator>=</operator> <operator>new</operator> <name><name>Expression</name><index>[<expr><name>numArgsMax</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>numArgs</name> <operator>==</operator> <name>numArgsMax</name></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numArgs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>numArgsMax</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>numArgs</name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>numArgsMax</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>WindowFunction</name></type> <name>function</name> <init>= <expr><operator>new</operator> <call><name>WindowFunction</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>currentSelect</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NTH_VALUE</name></expr>:</case>
            <expr_stmt><expr><call><name>readFromFirstOrLast</name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//$FALL-THROUGH$</comment>
        <case>case <expr><name>LEAD</name></expr>:</case>
        <case>case <expr><name>LAG</name></expr>:</case>
        <case>case <expr><name>FIRST_VALUE</name></expr>:</case>
        <case>case <expr><name>LAST_VALUE</name></expr>:</case>
            <expr_stmt><expr><call><name>readRespectOrIgnoreNulls</name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//$FALL-THROUGH$</comment>
        <default>default:</default>
            <comment type="line">// Avoid warning</comment>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name>readOver</name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>function</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readFromFirstOrLast</name><parameter_list>(<parameter><decl><type><name>WindowFunction</name></type> <name>function</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"FIRST"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"LAST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>setFromLast</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readRespectOrIgnoreNulls</name><parameter_list>(<parameter><decl><type><name>WindowFunction</name></type> <name>function</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RESPECT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"NULLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IGNORE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"NULLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>setIgnoreNulls</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>readJsonObjectFunctionFlags</name><parameter_list>(<parameter><decl><type><name>ExpressionWithFlags</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>forArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name><name>function</name><operator>.</operator><name>getFlags</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name><name>JsonConstructorUtils</name><operator>.</operator><name>JSON_ABSENT_ON_NULL</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ABSENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name><name>JsonConstructorUtils</name><operator>.</operator><name>JSON_ABSENT_ON_NULL</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>forArray</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>UNIQUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"KEYS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name><name>JsonConstructorUtils</name><operator>.</operator><name>JSON_WITH_UNIQUE_KEYS</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"WITHOUT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>UNIQUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"KEYS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name><name>JsonConstructorUtils</name><operator>.</operator><name>JSON_WITH_UNIQUE_KEYS</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>function</name><operator>.</operator><name>setFlags</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readKeywordCompatibilityFunctionOrColumn</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>nonKeyword</name> <init>= <expr><name>nonKeywords</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>nonKeywords</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currentTokenType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name>currentToken</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>readCompatibilityFunction</name><argument_list>(<argument><expr><call><name>upperName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nonKeyword</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>readTermObjectDot</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readCurrentDateTimeValueFunction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hasParen</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>hasParen</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>function</name> <operator>!=</operator> <name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>CURRENT_DATE</name></name> <operator>&amp;&amp;</operator> <name>currentTokenType</name> <operator>!=</operator> <name>CLOSE_PAREN</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>readInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>scale</name> <operator>&gt;</operator> <name><name>ValueTime</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_SCALE</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>,
                            <comment type="block">/* compile-time constant */</comment> <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>ValueTime</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>isAllowBuiltinAliasOverride</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>FunctionAlias</name></type> <name>functionAlias</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>findFunction</name><argument_list>(<argument><expr><ternary><condition><expr><name>name</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><call><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>functionAlias</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>JavaFunction</name><argument_list>(<argument><expr><name>functionAlias</name></expr></argument>,
                        <argument><expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>new</operator> <name><name>Expression</name><index>[]</index></name> <block>{ <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr>
                                </then><else>: <expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>CurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readIfWildcardRowidOrSequencePseudoColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ASTERISK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseWildcard</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>_ROWID_</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nextvalAndCurrvalPseudoColumns</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>readIfSequencePseudoColumn</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Wildcard</name></type> <name>parseWildcard</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Wildcard</name></type> <name>wildcard</name> <init>= <expr><operator>new</operator> <call><name>Wildcard</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>EXCEPT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ExpressionColumn</name></argument>&gt;</argument_list></name></type> <name>exceptColumns</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>t</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>s</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>checkDatabaseName</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>s</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>t</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>exceptColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name><name>wildcard</name><operator>.</operator><name>setExceptColumns</name></name><argument_list>(<argument><expr><name>exceptColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>wildcard</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>SequenceValue</name></type> <name>readIfSequencePseudoColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>objectName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isToken</name><argument_list>(<argument><expr><literal type="string">"NEXTVAL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Sequence</name></type> <name>sequence</name> <init>= <expr><call><name>findSequence</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>SequenceValue</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>, <argument><expr><call><name>getCurrentPrepared</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isToken</name><argument_list>(<argument><expr><literal type="string">"CURRVAL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Sequence</name></type> <name>sequence</name> <init>= <expr><call><name>findSequence</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>SequenceValue</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readTermObjectDot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>objectName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>expr</name> <init>= <expr><call><name>readIfWildcardRowidOrSequencePseudoColumn</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>expr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>expr</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>readFunction</name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>schema</name> <init>= <expr><name>objectName</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>objectName</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>readIfWildcardRowidOrSequencePseudoColumn</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>expr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>expr</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>checkDatabaseName</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name>readFunction</name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>checkDatabaseName</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>schema</name> <operator>=</operator> <name>objectName</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>objectName</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>readIfWildcardRowidOrSequencePseudoColumn</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>expr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>expr</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>objectName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkDatabaseName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>databaseName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>database</name><operator>.</operator><name>getIgnoreCatalogs</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>equalsToken</name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATABASE_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Parameter</name></type> <name>readParameter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>Token</name><operator>.</operator><name>ParameterToken</name></name><operator>)</operator> <name>token</name><operator>)</operator><operator>.</operator><call><name>index</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>parameters</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>parameters</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>MAX_PARAMETER_INDEX</name></name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"parameter index"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>index</name><operator>--</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>index</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>ensureCapacity</name></name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>index</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name><name>parameters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readTerm</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>r</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>AT</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Variable</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COLON_EQ</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>SetFunction</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>PARAMETER</name></expr>:</case>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readParameter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TABLE</name></expr>:</case>
        <case>case <expr><name>SELECT</name></expr>:</case>
        <case>case <expr><name>WITH</name></expr>:</case>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Subquery</name><argument_list>(<argument><expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MINUS_SIGN</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>negate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>rType</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>rType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>BIGINT</name></name> <operator>&amp;&amp;</operator>
                        <call><name><name>r</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLong</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// convert Integer.MIN_VALUE to type 'int'</comment>
                    <comment type="line">// (Integer.MAX_VALUE+1 is of type 'long')</comment>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>NUMERIC</name></name> <operator>&amp;&amp;</operator>
                        <call><name><name>r</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBigDecimal</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>MIN_LONG_DECIMAL</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// convert Long.MIN_VALUE to type 'long'</comment>
                    <comment type="line">// (Long.MAX_VALUE+1 is of type 'decimal')</comment>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ValueBigint</name><operator>.</operator><name>MIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>UnaryOperation</name><argument_list>(<argument><expr><call><name>readTerm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>PLUS_SIGN</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readTerm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>OPEN_PAREN</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ValueRow</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isQuery</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Subquery</name><argument_list>(<argument><expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <do>do <block>{<block_content>
                        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>ExpressionList</name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name> <operator>instanceof</operator> <name>BinaryOperation</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>BinaryOperation</name></type> <name>binaryOperation</name> <init>= <expr><operator>(</operator><name>BinaryOperation</name><operator>)</operator> <name>r</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>binaryOperation</name><operator>.</operator><name>getOperationType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>OpType</name><operator>.</operator><name>MINUS</name></name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>ti</name> <init>= <expr><call><name>readIntervalQualifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ti</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>binaryOperation</name><operator>.</operator><name>setForcedType</name></name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>FieldReference</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>ARRAY</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_BRACKET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_BRACKET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ValueArray</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <do>do <block>{<block_content>
                        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_BRACKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>ExpressionList</name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Query</name></type> <name>q</name> <init>= <expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayConstructorByQuery</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>INTERVAL</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readInterval</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ROW</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ValueRow</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>ExpressionList</name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>TRUE</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>ValueExpression</name><operator>.</operator><name>TRUE</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FALSE</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>ValueExpression</name><operator>.</operator><name>FALSE</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>UNKNOWN</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>TypedValueExpression</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ROWNUM</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentSelect</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>currentPrepared</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Rownum</name><argument_list>(<argument><expr><call><name>getCurrentPrepared</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>NULL</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>ValueExpression</name><operator>.</operator><name>NULL</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>_ROWID_</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>LITERAL</name></expr>:</case>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>VALUES</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>onDuplicateKeyUpdate</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>currentPrepared</name> <operator>instanceof</operator> <name>Insert</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readOnDuplicateKeyValues</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Insert</name><operator>)</operator> <name>currentPrepared</name><operator>)</operator><operator>.</operator><call><name>getTable</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>currentPrepared</name> <operator>instanceof</operator> <name>Update</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Update</name></type> <name>update</name> <init>= <expr><operator>(</operator><name>Update</name><operator>)</operator> <name>currentPrepared</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readOnDuplicateKeyValues</name><argument_list>(<argument><expr><call><name><name>update</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Subquery</name><argument_list>(<argument><expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CASE</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readCase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CAST</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>arg</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name>parseColumnWithType</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>CastSpecification</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CURRENT_CATALOG</name></expr>:</case>
            <return>return <expr><call><name>readCurrentGeneralValueSpecification</name><argument_list>(<argument><expr><name><name>CurrentGeneralValueSpecification</name><operator>.</operator><name>CURRENT_CATALOG</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>CURRENT_DATE</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>CURRENT_DATE</name></name></expr></argument>, <argument><expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CURRENT_PATH</name></expr>:</case>
            <return>return <expr><call><name>readCurrentGeneralValueSpecification</name><argument_list>(<argument><expr><name><name>CurrentGeneralValueSpecification</name><operator>.</operator><name>CURRENT_PATH</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>CURRENT_ROLE</name></expr>:</case>
            <return>return <expr><call><name>readCurrentGeneralValueSpecification</name><argument_list>(<argument><expr><name><name>CurrentGeneralValueSpecification</name><operator>.</operator><name>CURRENT_ROLE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>CURRENT_SCHEMA</name></expr>:</case>
            <return>return <expr><call><name>readCurrentGeneralValueSpecification</name><argument_list>(<argument><expr><name><name>CurrentGeneralValueSpecification</name><operator>.</operator><name>CURRENT_SCHEMA</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>CURRENT_TIME</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>CURRENT_TIME</name></name></expr></argument>, <argument><expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CURRENT_TIMESTAMP</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>CURRENT_TIMESTAMP</name></name></expr></argument>, <argument><expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CURRENT_USER</name></expr>:</case>
        <case>case <expr><name>USER</name></expr>:</case>
            <return>return <expr><call><name>readCurrentGeneralValueSpecification</name><argument_list>(<argument><expr><name><name>CurrentGeneralValueSpecification</name><operator>.</operator><name>CURRENT_USER</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>SESSION_USER</name></expr>:</case>
            <return>return <expr><call><name>readCurrentGeneralValueSpecification</name><argument_list>(<argument><expr><name><name>CurrentGeneralValueSpecification</name><operator>.</operator><name>SESSION_USER</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>SYSTEM_USER</name></expr>:</case>
            <return>return <expr><call><name>readCurrentGeneralValueSpecification</name><argument_list>(<argument><expr><name><name>CurrentGeneralValueSpecification</name><operator>.</operator><name>SYSTEM_USER</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>ANY</name></expr>:</case>
        <case>case <expr><name>SOME</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>readAggregate</name><argument_list>(<argument><expr><name><name>AggregateType</name><operator>.</operator><name>ANY</name></name></expr></argument>, <argument><expr><literal type="string">"ANY"</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>DAY</name></expr>:</case>
        <case>case <expr><name>HOUR</name></expr>:</case>
        <case>case <expr><name>MINUTE</name></expr>:</case>
        <case>case <expr><name>MONTH</name></expr>:</case>
        <case>case <expr><name>SECOND</name></expr>:</case>
        <case>case <expr><name>YEAR</name></expr>:</case>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readKeywordCompatibilityFunctionOrColumn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>LEFT</name></expr>:</case>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readColumnIfNotFunction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>StringFunction2</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction2</name><operator>.</operator><name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>LOCALTIME</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>LOCALTIME</name></name></expr></argument>, <argument><expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>LOCALTIMESTAMP</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>LOCALTIMESTAMP</name></name></expr></argument>, <argument><expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr></argument>, <comment type="line">//</comment>
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RIGHT</name></expr>:</case>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readColumnIfNotFunction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>StringFunction2</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StringFunction2</name><operator>.</operator><name>RIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>SET</name></expr>:</case>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readColumnIfNotFunction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readSetFunction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>VALUE</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>parseDomainConstraint</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>DomainValueExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <comment type="line">//$FALL-THROUGH$</comment>
        <default>default:</default>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isIdentifier</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <comment type="line">//$FALL-THROUGH$</comment>
        <case>case <expr><name>IDENTIFIER</name></expr>:</case>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name>currentToken</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>quoted</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readFunction</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readTermObjectDot</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>quoted</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>readTermWithIdentifier</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_BRACKET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayElementReference</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_BRACKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <label><name>colonColon</name>:</label> <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COLON_COLON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnum</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ModeEnum</name><operator>.</operator><name>PostgreSQL</name></name></expr>)</condition> <block>{<block_content>
                <comment type="line">// PostgreSQL compatibility</comment>
                <if_stmt><if>if <condition>(<expr><call><name>isToken</name><argument_list>(<argument><expr><literal type="string">"PG_CATALOG"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"PG_CATALOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"REGCLASS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Regclass</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break <name>colonColon</name>;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>CastSpecification</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>parseColumnWithType</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>TypeInfo</name></type> <name>ti</name> <init>= <expr><call><name>readIntervalQualifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ti</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>CastSpecification</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"AT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>TimeZoneOperation</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LOCAL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>TimeZoneOperation</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"FORMAT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"JSON"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>Format</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>FormatEnum</name><operator>.</operator><name>JSON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></for>
        <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readCurrentGeneralValueSpecification</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>specification</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>CurrentGeneralValueSpecification</name><argument_list>(<argument><expr><name>specification</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readColumnIfNotFunction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>nonKeyword</name> <init>= <expr><name>nonKeywords</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>nonKeywords</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currentTokenType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name>currentToken</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nonKeyword</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>readTermObjectDot</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readSetFunction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SetFunction</name></type> <name>function</name> <init>= <expr><operator>new</operator> <call><name>SetFunction</name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readLastArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>isAllowBuiltinAliasOverride</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>FunctionAlias</name></type> <name>functionAlias</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>findFunction</name><argument_list>(
                    <argument><expr><call><name><name>function</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>functionAlias</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>JavaFunction</name><argument_list>(<argument><expr><name>functionAlias</name></expr></argument>,
                        <argument><expr><operator>new</operator> <name><name>Expression</name><index>[]</index></name> <block>{ <expr><call><name><name>function</name><operator>.</operator><name>getSubexpression</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>function</name><operator>.</operator><name>getSubexpression</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>function</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readOnDuplicateKeyValues</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>Update</name></type> <name>update</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Column</name></type> <name>c</name> <init>= <expr><call><name>readTableColumn</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TableFilter</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>rightsChecked</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>OnDuplicateKeyValues</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readTermWithIdentifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>quoted</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="block">/*
         * Convert a-z to A-Z. This method is safe, because only A-Z
         * characters are considered below.
         *
         * Unquoted identifier is never empty.
         */</comment>
        <switch>switch <condition>(<expr><call><name><name>name</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffdf</literal></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'C'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"CURRENT"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>FOR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>new</operator> <call><name>SequenceValue</name><argument_list>(<argument><expr><call><name>readSequence</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnum</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ModeEnum</name><operator>.</operator><name>DB2</name></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name>parseDB2SpecialRegisters</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'D'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name> <operator>&amp;&amp;</operator> <call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name> <operator>&amp;&amp;</operator>
                    <operator>(</operator><call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"DATE"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"D"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>date</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueDate</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'E'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name> <operator>&amp;&amp;</operator> <call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name> <comment type="line">//</comment>
                    <operator>&amp;&amp;</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"E"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// the PostgreSQL ODBC driver uses</comment>
                <comment type="line">// LIKE E'PROJECT\\_DATA' instead of LIKE</comment>
                <comment type="line">// 'PROJECT\_DATA'</comment>
                <comment type="line">// N: SQL-92 "National Language" strings</comment>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"\\\\"</literal></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'G'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name> <operator>&amp;&amp;</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>ValueExpression</name></type> <name>v</name> <init>= <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueGeometry</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>v</name></expr>;</return>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARBINARY</name></name> <operator>&amp;&amp;</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>ValueExpression</name></type> <name>v</name> <init>= <expr><call><name><name>ValueExpression</name>
                            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueGeometry</name><operator>.</operator><name>getFromEWKB</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytesNoCopy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>v</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'J'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name> <operator>&amp;&amp;</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"JSON"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>ValueExpression</name></type> <name>v</name> <init>= <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueJson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>v</name></expr>;</return>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARBINARY</name></name> <operator>&amp;&amp;</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"JSON"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>ValueExpression</name></type> <name>v</name> <init>= <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueJson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytesNoCopy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>v</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'N'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"NEXT"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>FOR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>new</operator> <call><name>SequenceValue</name><argument_list>(<argument><expr><call><name>readSequence</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getCurrentPrepared</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'T'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>LITERAL</name> <operator>||</operator> <call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>time</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueTimeTimeZone</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>without</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"WITHOUT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>without</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name> <operator>&amp;&amp;</operator> <call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>time</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueTime</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>without</name></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"TIMESTAMP"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>LITERAL</name> <operator>||</operator> <call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>timestamp</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueTimestampTimeZone</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>without</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"WITHOUT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>without</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name> <operator>&amp;&amp;</operator> <call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>timestamp</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueTimestamp</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>without</name></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name> <operator>&amp;&amp;</operator> <call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>time</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueTime</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"TS"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>timestamp</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueTimestamp</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'U'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name> <operator>&amp;&amp;</operator> <call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name>
                    <operator>&amp;&amp;</operator> <operator>(</operator><call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"UUID"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>uuid</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueUuid</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
        <return>return <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>getCurrentPrepared</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentPrepared</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readInterval</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>negative</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><name>MINUS_SIGN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>negative</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>PLUS_SIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>LITERAL</name> <operator>||</operator> <call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>IntervalQualifier</name></type> <name>qualifier</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>YEAR</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>YEAR_TO_MONTH</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>YEAR</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>MONTH</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>MONTH</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DAY</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>HOUR</name></expr>:</case>
                    <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>DAY_TO_HOUR</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>MINUTE</name></expr>:</case>
                    <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>DAY_TO_MINUTE</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>SECOND</name></expr>:</case>
                    <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>DAY_TO_SECOND</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <throw>throw <expr><call><name>intervalDayError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></switch>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>DAY</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>HOUR</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>MINUTE</name></expr>:</case>
                    <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>HOUR_TO_MINUTE</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>SECOND</name></expr>:</case>
                    <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>HOUR_TO_SECOND</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <throw>throw <expr><call><name>intervalHourError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></switch>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>HOUR</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>MINUTE</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>MINUTE_TO_SECOND</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>MINUTE</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>SECOND</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>SECOND</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name>intervalQualifierError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>IntervalUtils</name><operator>.</operator><name>parseInterval</name></name><argument_list>(<argument><expr><name>qualifier</name></expr></argument>, <argument><expr><name>negative</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_DATETIME_CONSTANT_2</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"INTERVAL"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>parseDB2SpecialRegisters</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Only "CURRENT" name is supported</comment>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TIMESTAMP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>CURRENT_TIMESTAMP</name></name></expr></argument>,
                        <argument><expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>LOCALTIMESTAMP</name></name></expr></argument>, <argument><expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Time with fractional seconds is not supported by DB2</comment>
            <return>return <expr><call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>LOCALTIME</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>readCurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>CURRENT_DATE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// No match, parse CURRENT as a column</comment>
        <return>return <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readCase</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>c</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WHEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SearchedCase</name></type> <name>searched</name> <init>= <expr><operator>new</operator> <call><name>SearchedCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>Expression</name></type> <name>condition</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"THEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>searched</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>searched</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WHEN</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ELSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>searched</name><operator>.</operator><name>addParameter</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>searched</name><operator>.</operator><name>doneWithParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <name>searched</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>caseOperand</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>WHEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>SimpleCase</name><operator>.</operator><name>SimpleWhen</name></name></type> <name>when</name> <init>= <expr><call><name>readSimpleWhenClause</name><argument_list>(<argument><expr><name>caseOperand</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>current</name> <init>= <expr><name>when</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WHEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>SimpleCase</name><operator>.</operator><name>SimpleWhen</name></name></type> <name>next</name> <init>= <expr><call><name>readSimpleWhenClause</name><argument_list>(<argument><expr><name>caseOperand</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>current</name><operator>.</operator><name>setWhen</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>current</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleCase</name><argument_list>(<argument><expr><name>caseOperand</name></expr></argument>, <argument><expr><name>when</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>readIf</name><argument_list>(<argument><expr><name>ELSE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>c</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>SimpleCase</name><operator>.</operator><name>SimpleWhen</name></name></type> <name>readSimpleWhenClause</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>caseOperand</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>whenOperand</name> <init>= <expr><call><name>readWhenOperand</name><argument_list>(<argument><expr><name>caseOperand</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>operands</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>operands</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>whenOperand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>operands</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readWhenOperand</name><argument_list>(<argument><expr><name>caseOperand</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"THEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name><name>SimpleCase</name><operator>.</operator><name>SimpleWhen</name></name><argument_list>(<argument><expr><call><name><name>operands</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Expression</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"THEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name><name>SimpleCase</name><operator>.</operator><name>SimpleWhen</name></name><argument_list>(<argument><expr><name>whenOperand</name></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readWhenOperand</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>caseOperand</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>backup</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>not</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><name>NOT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>whenOperand</name> <init>= <expr><call><name>readConditionRightHandSide</name><argument_list>(<argument><expr><name>caseOperand</name></expr></argument>, <argument><expr><name>not</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>whenOperand</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>not</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>whenOperand</name> <operator>=</operator> <call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>whenOperand</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>readNonNegativeInt</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"non-negative integer"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>v</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>readInt</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>minus</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>MINUS_SIGN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>minus</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>PLUS_SIGN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>LITERAL</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getSyntaxError</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>, <argument><expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"integer"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>minus</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// must do that now, otherwise Integer.MIN_VALUE would not work</comment>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>negate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>readPositiveLong</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>v</name> <init>= <expr><call><name>readLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"positive long"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>v</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>readLong</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>minus</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>MINUS_SIGN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>minus</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>PLUS_SIGN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>LITERAL</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getSyntaxError</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>, <argument><expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>minus</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// must do that now, otherwise Long.MIN_VALUE would not work</comment>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>negate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>readBooleanSetting</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>ON</name></expr>:</case>
        <case>case <expr><name>TRUE</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name>FALSE</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        <case>case <expr><name>LITERAL</name></expr>:</case>
            <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></switch>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"OFF"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addMultipleExpected</name><argument_list>(<argument><expr><name>ON</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>readString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>sqlIndex</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>expr</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>expr</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>s</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></catch></try>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getSyntaxError</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>, <argument><expr><name>sqlIndex</name></expr></argument>, <argument><expr><literal type="string">"character string"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="line">// TODO: why does this function allow defaultSchemaName=null - which resets</comment>
    <comment type="line">// the parser schemaName for everyone ?</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>readIdentifierWithSchema</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>defaultSchemaName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <name>defaultSchemaName</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>readIdentifierWithSchema2</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>s</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>readIdentifierWithSchema2</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>allowEmptySchemaValuesAsDefaultSchema</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>equalsToken</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>database</name><operator>.</operator><name>getIgnoreCatalogs</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>DOT</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>equalsToken</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>database</name><operator>.</operator><name>getIgnoreCatalogs</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>s</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>readIdentifierWithSchema</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>readIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isIdentifier</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="block">/*
             * Sometimes a new keywords are introduced. During metadata
             * initialization phase keywords are accepted as identifiers to
             * allow migration from older versions.
             */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>isQuirksMode</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isKeyword</name><argument_list>(<argument><expr><name>currentTokenType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getSyntaxError</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>, <argument><expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><name>currentToken</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>s</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>equalsToken</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>currentToken</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tokenType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>tokenType</name> <operator>!=</operator> <name>currentTokenType</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><name>tokenType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>readIf</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tokenName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><name>tokenName</name></expr></argument>, <argument><expr><name>currentToken</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><name>tokenName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>readIf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tokenType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>tokenType</name> <operator>==</operator> <name>currentTokenType</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><name>tokenType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isToken</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tokenName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><name>tokenName</name></expr></argument>, <argument><expr><name>currentToken</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><name>tokenName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isToken</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tokenType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>tokenType</name> <operator>==</operator> <name>currentTokenType</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><name>tokenType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>equalsToken</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>b</name> <operator>==</operator> <literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name><name>a</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>identifiersToUpper</name> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentTokenType</name> <operator>==</operator> <name>IDENTIFIER</name> <operator>||</operator> <name>nonKeywords</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>nonKeywords</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currentTokenType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addExpected</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>expectedList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addExpected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tokenType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>expectedList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>TOKENS</name><index>[<expr><name>tokenType</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addMultipleExpected</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>...</modifier></type> <name>tokenTypes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>tokenType</name> <range>: <expr><name>tokenTypes</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>expectedList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>TOKENS</name><index>[<expr><name>tokenType</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>expectedList</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tokenIndex</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>++</operator><name>tokenIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentTokenType</name> <operator>=</operator> <call><name><name>token</name><operator>.</operator><name>tokenType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentToken</name> <operator>=</operator> <call><name><name>token</name><operator>.</operator><name>asIdentifier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentToken</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>currentToken</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>MAX_IDENTIFIER_LENGTH</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>NAME_TOO_LONG_2</name></name></expr></argument>, <argument><expr><call><name><name>currentToken</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>MAX_IDENTIFIER_LENGTH</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>checkLiterals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkLiterals</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>literalsChecked</name> <operator>&amp;&amp;</operator> <name>session</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>session</name><operator>.</operator><name>getAllowLiterals</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>allowed</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getAllowLiterals</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>allowed</name> <operator>==</operator> <name><name>Constants</name><operator>.</operator><name>ALLOW_LITERALS_NONE</name></name>
                    <operator>||</operator> <operator>(</operator><operator>(</operator><name>token</name> <operator>instanceof</operator> <name><name>Token</name><operator>.</operator><name>CharacterStringToken</name></name> <operator>||</operator> <name>token</name> <operator>instanceof</operator> <name><name>Token</name><operator>.</operator><name>BinaryStringToken</name></name><operator>)</operator>
                            <operator>&amp;&amp;</operator> <name>allowed</name> <operator>!=</operator> <name><name>Constants</name><operator>.</operator><name>ALLOW_LITERALS_ALL</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>LITERALS_ARE_NOT_ALLOWED</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>stopOnCloseParen</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sql</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sql</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>sqlCommand</name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tokens</name></name> <operator>=</operator> <ternary><condition><expr><name>tokens</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Tokenizer</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>identifiersToUpper</name></expr></argument>, <argument><expr><name>identifiersToLower</name></expr></argument>, <argument><expr><name>nonKeywords</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>tokenize</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>stopOnCloseParen</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>tokens</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>resetTokenIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>resetTokenIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>tokenIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentTokenType</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentToken</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>setTokenIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <name>tokenIndex</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>expectedList</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tokenIndex</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentTokenType</name> <operator>=</operator> <call><name><name>token</name><operator>.</operator><name>tokenType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentToken</name> <operator>=</operator> <call><name><name>token</name><operator>.</operator><name>asIdentifier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isKeyword</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tokenType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>tokenType</name> <operator>&gt;=</operator> <name>FIRST_KEYWORD</name> <operator>&amp;&amp;</operator> <name>tokenType</name> <operator>&lt;=</operator> <name>LAST_KEYWORD</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isKeyword</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>ParserUtil</name><operator>.</operator><name>isKeyword</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>!</operator><name>identifiersToUpper</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>upperName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>identifiersToUpper</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Column</name></type> <name>parseColumnForTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defaultNullable</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Column</name></type> <name>column</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Mode</name></type> <name>mode</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>identityDataType</name></name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>column</name> <operator>=</operator> <operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parseCompatibilityIdentityOptions</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setPrimaryKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mode</name><operator>.</operator><name>serialDataTypes</name></name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"BIGSERIAL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>column</name> <operator>=</operator> <operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setIdentityOptions</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SequenceOptions</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mode</name><operator>.</operator><name>serialDataTypes</name></name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SERIAL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>column</name> <operator>=</operator> <operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setIdentityOptions</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SequenceOptions</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>column</name> <operator>=</operator> <call><name>parseColumnWithType</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INVISIBLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VISIBLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>defaultOnNull</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NullConstraintType</name></type> <name>nullConstraint</name> <init>= <expr><call><name>parseNotNullConstraint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <label><name>defaultIdentityGeneration</name>:</label> <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>column</name><operator>.</operator><name>isIdentity</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setGeneratedExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>defaultOnNull</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break <name>defaultIdentityGeneration</name>;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setDefaultExpression</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"GENERATED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>always</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ALWAYS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>always</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>SequenceOptions</name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name>SequenceOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>parseSequenceOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setIdentityOptions</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>always</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break <name>defaultIdentityGeneration</name>;</break>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>always</name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setGeneratedExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>column</name><operator>.</operator><name>isGenerated</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setOnUpdateExpression</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>nullConstraint</name> <operator>=</operator> <call><name>parseNotNullConstraint</name><argument_list>(<argument><expr><name>nullConstraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>parseCompatibilityIdentity</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>nullConstraint</name> <operator>=</operator> <call><name>parseNotNullConstraint</name><argument_list>(<argument><expr><name>nullConstraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name>nullConstraint</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NULL_IS_ALLOWED</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isIdentity</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_MUST_NOT_BE_NULLABLE_1</name></name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setNullable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>NULL_IS_NOT_ALLOWED</name></expr>:</case>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setNullable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>NO_NULL_CONSTRAINT_FOUND</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>column</name><operator>.</operator><name>isIdentity</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setNullable</name></name><argument_list>(<argument><expr><name>defaultNullable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_MODE_1</name></name></expr></argument>,
                    <argument><expr><literal type="string">"Internal Error - unhandled case: "</literal> <operator>+</operator> <call><name><name>nullConstraint</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>defaultOnNull</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>defaultOnNull</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NULL_TO_DEFAULT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>defaultOnNull</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>defaultOnNull</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setDefaultOnNull</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>column</name><operator>.</operator><name>isGenerated</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setSequence</name></name><argument_list>(<argument><expr><call><name>readSequence</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>isGeneratedAlways</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SELECTIVITY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setSelectivity</name></name><argument_list>(<argument><expr><call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>getEnum</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ModeEnum</name><operator>.</operator><name>MySQL</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHARACTER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readMySQLCharset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLLATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readMySQLCharset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>= <expr><call><name>readCommentIf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>comment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>column</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseCompatibilityIdentityOptions</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SequenceOptions</name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name>SequenceOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setStartValue</name></name><argument_list>(<argument><expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readLong</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setIncrement</name></name><argument_list>(<argument><expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readLong</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setIdentityOptions</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>readCommentIf</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>IS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>readString</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Column</name></type> <name>parseColumnWithType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name>readIfDataType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>typeInfo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>domainName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>getColumnWithDomain</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDomain</name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>parseDataType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name>readIfDataType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>typeInfo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><literal type="string">"data type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>typeInfo</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>readIfDataType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name>readIfDataType1</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>typeInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>typeInfo</name> <operator>=</operator> <call><name>parseArrayType</name><argument_list>(<argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>typeInfo</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>readIfDataType1</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>IDENTIFIER</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>INTERVAL</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name>readIntervalQualifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>typeInfo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>intervalQualifierError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>typeInfo</name></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>NULL</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_NULL</name></name></expr>;</return>
        <case>case <expr><name>ROW</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>parseRowType</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name>ARRAY</name></expr>:</case>
            <comment type="line">// Partial compatibility with 1.4.200 and older versions</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>isQuirksMode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name>parseArrayType</name><argument_list>(<argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><literal type="string">"data type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        <default>default:</default>
            <if_stmt><if>if <condition>(<expr><call><name>isKeyword</name><argument_list>(<argument><expr><name>currentToken</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>addExpected</name><argument_list>(<argument><expr><literal type="string">"data type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>originalCase</name> <init>= <expr><name>currentToken</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>DOT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>original</name> <init>= <expr><call><name>upperName</name><argument_list>(<argument><expr><name>originalCase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>original</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="string">"BINARY"</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VARYING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"BINARY VARYING"</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LARGE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"OBJECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"BINARY LARGE OBJECT"</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>variableBinary</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"VARBINARY"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="string">"CHAR"</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VARYING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"CHAR VARYING"</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LARGE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"OBJECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"CHAR LARGE OBJECT"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="string">"CHARACTER"</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VARYING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"CHARACTER VARYING"</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LARGE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"OBJECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"CHARACTER LARGE OBJECT"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="string">"DATETIME"</literal></expr>:</case>
        <case>case <expr><literal type="string">"DATETIME2"</literal></expr>:</case>
            <return>return <expr><call><name>parseDateTimeType</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DEC"</literal></expr>:</case>
        <case>case <expr><literal type="string">"DECIMAL"</literal></expr>:</case>
            <return>return <expr><call><name>parseNumericType</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DECFLOAT"</literal></expr>:</case>
            <return>return <expr><call><name>parseDecfloatType</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"DOUBLE"</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PRECISION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"DOUBLE PRECISION"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="string">"ENUM"</literal></expr>:</case>
            <return>return <expr><call><name>parseEnumType</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"FLOAT"</literal></expr>:</case>
            <return>return <expr><call><name>parseFloatType</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"GEOMETRY"</literal></expr>:</case>
            <return>return <expr><call><name>parseGeometryType</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"LONG"</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RAW"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"LONG RAW"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="string">"NATIONAL"</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHARACTER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VARYING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"NATIONAL CHARACTER VARYING"</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LARGE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"OBJECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"NATIONAL CHARACTER LARGE OBJECT"</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"NATIONAL CHARACTER"</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"CHAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VARYING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"NATIONAL CHAR VARYING"</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"NATIONAL CHAR"</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="string">"NCHAR"</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VARYING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"NCHAR VARYING"</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LARGE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"OBJECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>original</name> <operator>=</operator> <literal type="string">"NCHAR LARGE OBJECT"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="string">"NUMBER"</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>disallowedTypes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"NUMBER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_DATA_TYPE_1</name></name></expr></argument>, <argument><expr><literal type="string">"NUMBER"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isToken</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="line">//$FALL-THROUGH$</comment>
        <case>case <expr><literal type="string">"NUMERIC"</literal></expr>:</case>
            <return>return <expr><call><name>parseNumericType</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"SMALLDATETIME"</literal></expr>:</case>
            <return>return <expr><call><name>parseDateTimeType</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"TIME"</literal></expr>:</case>
            <return>return <expr><call><name>parseTimeType</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><literal type="string">"TIMESTAMP"</literal></expr>:</case>
            <return>return <expr><call><name>parseTimestampType</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
        <comment type="line">// Domain names can't have multiple words without quotes</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>originalCase</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>original</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Domain</name></type> <name>domain</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>findDomain</name><argument_list>(<argument><expr><name>originalCase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>domain</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Mode</name></type> <name>mode</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DataType</name></type> <name>dataType</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>getTypeByName</name></name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dataType</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>mode</name><operator>.</operator><name>disallowedTypes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_DATA_TYPE_1</name></name></expr></argument>, <argument><expr><name>original</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>precision</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>dataType</name><operator>.</operator><name>specialPrecisionScale</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>precision</name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>defaultPrecision</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>defaultScale</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>dataType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getIgnoreCase</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>t</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"VARCHAR_CASESENSITIVE"</literal></expr></argument>, <argument><expr><name>original</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dataType</name> <operator>=</operator> <call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><name>t</name> <operator>=</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dataType</name><operator>.</operator><name>supportsPrecision</name></name> <operator>||</operator> <name><name>dataType</name><operator>.</operator><name>supportsScale</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MAX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>dataType</name><operator>.</operator><name>supportsPrecision</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>readPrecision</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <name><name>dataType</name><operator>.</operator><name>minPrecision</name></name></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name>getInvalidPrecisionException</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <label><name>badPrecision</name>:</label> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>isQuirksMode</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>session</name><operator>.</operator><name>isTruncateLargeLength</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <switch>switch <condition>(<expr><name><name>dataType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
                            <case>case <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>:</case>
                            <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case>
                            <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>:</case>
                            <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
                            <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
                            <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
                            <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
                                <expr_stmt><expr><name>precision</name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name></expr>;</expr_stmt>
                                <break>break <name>badPrecision</name>;</break>
                            </block_content>}</block></switch>
                        </block_content>}</block></if></if_stmt>
                        <throw>throw <expr><call><name>getInvalidPrecisionException</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>dataType</name><operator>.</operator><name>supportsScale</name></name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>readInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name><name>scale</name> <argument_list type="generic">&lt; <argument><name><name>dataType</name><operator>.</operator><name>minScale</name></name> <operator>||</operator> <name>scale</name></argument> &gt;</argument_list></name> <name><name>dataType</name><operator>.</operator><name>maxScale</name></name></expr>)</condition> <block>{<block_content>
                                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_SCALE</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>dataType</name><operator>.</operator><name>minScale</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>dataType</name><operator>.</operator><name>maxScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>readInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>scale</name> <argument_list type="generic">&lt; <argument><name><name>dataType</name><operator>.</operator><name>minScale</name></name> <operator>||</operator> <name>scale</name></argument> &gt;</argument_list></name> <name><name>dataType</name><operator>.</operator><name>maxScale</name></name></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_SCALE</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>dataType</name><operator>.</operator><name>minScale</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>dataType</name><operator>.</operator><name>maxScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>allNumericTypesHavePrecision</name></name> <operator>&amp;&amp;</operator> <call><name><name>DataType</name><operator>.</operator><name>isNumericType</name></name><argument_list>(<argument><expr><name><name>dataType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// Support for MySQL: INT(11), MEDIUMINT(8) and so on.</comment>
                <comment type="line">// Just ignore the precision.</comment>
                <expr_stmt><expr><call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UNSIGNED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>forBitData</name></name> <operator>&amp;&amp;</operator> <call><name><name>DataType</name><operator>.</operator><name>isStringType</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FOR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"BIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"DATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>dataType</name> <operator>=</operator> <call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><name>t</name> <operator>=</operator> <name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>getInvalidPrecisionException</name><parameter_list>(<parameter><decl><type><name>DataType</name></type> <name>dataType</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_PRECISION</name></name></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>dataType</name><operator>.</operator><name>minPrecision</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Column</name></type> <name>getColumnWithDomain</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>, <parameter><decl><type><name>Domain</name></type> <name>domain</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><call><name><name>domain</name><operator>.</operator><name>getDataType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><call><name><name>domain</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setDomain</name></name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>column</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>parseFloatType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>precision</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>precision</name> <operator>&gt;</operator> <literal type="number">53</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_PRECISION</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"53"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>precision</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>parseNumericType</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decimal</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>precision</name> <init>= <expr><operator>-</operator><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>readPrecision</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>getInvalidNumericPrecisionException</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>isQuirksMode</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>session</name><operator>.</operator><name>isTruncateLargeLength</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>precision</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <throw>throw <expr><call><name>getInvalidNumericPrecisionException</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>readInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>scale</name> <operator>&gt;</operator> <name><name>ValueNumeric</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_SCALE</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>ValueNumeric</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><ternary><condition><expr><name>decimal</name></expr> ?</condition><then> <expr><name><name>ExtTypeInfoNumeric</name><operator>.</operator><name>DECIMAL</name></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>parseDecfloatType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>precision</name> <init>= <expr><operator>-</operator><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>readPrecision</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>precision</name> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>getInvalidNumericPrecisionException</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>getInvalidNumericPrecisionException</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_PRECISION</name></name></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>,
                <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>parseTimeType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&gt;</operator> <name><name>ValueTime</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_SCALE</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>,
                        <comment type="block">/* Folds to a constant */</comment> <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>ValueTime</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"WITHOUT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>parseTimestampType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Allow non-standard TIMESTAMP(..., ...) syntax</comment>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&gt;</operator> <name><name>ValueTimestamp</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_SCALE</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>,
                        <comment type="block">/* Folds to a constant */</comment> <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>ValueTimestamp</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"WITHOUT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>parseDateTimeType</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>smallDateTime</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>smallDateTime</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&gt;</operator> <name><name>ValueTimestamp</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_SCALE</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>,
                            <comment type="block">/* folds to a constant */</comment> <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>ValueTimestamp</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>readIntervalQualifier</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>IntervalQualifier</name></type> <name>qualifier</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>precision</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>scale</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>YEAR</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>YEAR_TO_MONTH</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>YEAR</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>MONTH</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>MONTH</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DAY</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>HOUR</name></expr>:</case>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>DAY_TO_HOUR</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>MINUTE</name></expr>:</case>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>DAY_TO_MINUTE</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>SECOND</name></expr>:</case>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>DAY_TO_SECOND</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <throw>throw <expr><call><name>intervalDayError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></switch>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>DAY</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>HOUR</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>MINUTE</name></expr>:</case>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>HOUR_TO_MINUTE</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>SECOND</name></expr>:</case>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>HOUR_TO_SECOND</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <throw>throw <expr><call><name>intervalHourError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></switch>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>HOUR</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>MINUTE</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>MINUTE_TO_SECOND</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>MINUTE</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>SECOND</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>qualifier</name> <operator>=</operator> <name><name>IntervalQualifier</name><operator>.</operator><name>SECOND</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></switch>
        <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>precision</name> <operator>&gt;</operator> <name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_PRECISION</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_PRECISION</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>,
                        <comment type="block">/* Folds to a constant */</comment> <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_PRECISION</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&gt;</operator> <name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_SCALE</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>,
                        <comment type="block">/* Folds to a constant */</comment> <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><call><name><name>qualifier</name><operator>.</operator><name>ordinal</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DbException</name></type> <name>intervalQualifierError</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addMultipleExpected</name><argument_list>(<argument><expr><name>YEAR</name></expr></argument>, <argument><expr><name>MONTH</name></expr></argument>, <argument><expr><name>DAY</name></expr></argument>, <argument><expr><name>HOUR</name></expr></argument>, <argument><expr><name>MINUTE</name></expr></argument>, <argument><expr><name>SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DbException</name></type> <name>intervalDayError</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addMultipleExpected</name><argument_list>(<argument><expr><name>HOUR</name></expr></argument>, <argument><expr><name>MINUTE</name></expr></argument>, <argument><expr><name>SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DbException</name></type> <name>intervalHourError</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addMultipleExpected</name><argument_list>(<argument><expr><name>MINUTE</name></expr></argument>, <argument><expr><name>SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>parseArrayType</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>componentType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>precision</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_BRACKET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Maximum cardinality may be zero</comment>
            <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>MAX_ARRAY_CARDINALITY</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_VALUE_PRECISION</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>,
                        <comment type="block">/* Folds to a constant */</comment> <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>MAX_ARRAY_CARDINALITY</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_BRACKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>componentType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>parseEnumType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>enumeratorList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>enumeratorList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ExtTypeInfoEnum</name><argument_list>(<argument><expr><call><name><name>enumeratorList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>parseGeometryType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ExtTypeInfoGeometry</name></type> <name>extTypeInfo</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>IDENTIFIER</name> <operator>||</operator> <call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"GEOMETRY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name><name>EWKTUtils</name><operator>.</operator><name>parseGeometryType</name></name><argument_list>(<argument><expr><name>currentToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>/</operator> <literal type="number">1_000</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>currentTokenType</name> <operator>==</operator> <name>IDENTIFIER</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>type</name> <operator>+=</operator> <call><name><name>EWKTUtils</name><operator>.</operator><name>parseDimensionSystem</name></name><argument_list>(<argument><expr><name>currentToken</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1_000</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Integer</name></type> <name>srid</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>srid</name> <operator>=</operator> <call><name>readInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>extTypeInfo</name> <operator>=</operator> <operator>new</operator> <call><name>ExtTypeInfoGeometry</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>srid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>extTypeInfo</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>extTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>parseRowType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></type> <name>fields</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>fields</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>parseDataType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DUPLICATE_COLUMN_NAME_1</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ExtTypeInfoRow</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>readPrecision</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>valueType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>p</name> <init>= <expr><call><name>readPositiveLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>IDENTIFIER</name> <operator>||</operator> <call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>p</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>valueType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>BLOB</name></name> <operator>||</operator> <name>valueType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>CLOB</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>currentToken</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>mul</name></decl>;</decl_stmt>
            <comment type="block">/*
             * Convert a-z to A-Z. This method is safe, because only A-Z
             * characters are considered below.
             */</comment>
            <switch>switch <condition>(<expr><call><name><name>currentToken</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffdf</literal></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'K'</literal></expr>:</case>
                <expr_stmt><expr><name>mul</name> <operator>=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'M'</literal></expr>:</case>
                <expr_stmt><expr><name>mul</name> <operator>=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'G'</literal></expr>:</case>
                <expr_stmt><expr><name>mul</name> <operator>=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'T'</literal></expr>:</case>
                <expr_stmt><expr><name>mul</name> <operator>=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'P'</literal></expr>:</case>
                <expr_stmt><expr><name>mul</name> <operator>=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">50</literal></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></switch>
            <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>/</operator> <name>mul</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"precision"</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>currentToken</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>p</name> <operator>*=</operator> <name>mul</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>IDENTIFIER</name> <operator>||</operator> <call><name><name>token</name><operator>.</operator><name>isQuoted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>p</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name>valueType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHARACTERS"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"OCTETS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>charAndByteLengthUnits</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHAR"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"BYTE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></switch>
        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseCreate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>orReplace</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"REPLACE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>orReplace</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>force</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"FORCE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseCreateView</name><argument_list>(<argument><expr><name>force</name></expr></argument>, <argument><expr><name>orReplace</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ALIAS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseCreateFunctionAlias</name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseCreateSequence</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>USER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseCreateUser</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseCreateTrigger</name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ROLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseCreateRole</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseCreateSchema</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CONSTANT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseCreateConstant</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DOMAIN"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TYPE"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DATATYPE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseCreateDomain</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"AGGREGATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseCreateAggregate</name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LINKED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseCreateLinkedTable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// tables or linked tables</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>memory</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>, <decl><type ref="prev"/><name>cached</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MEMORY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>memory</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CACHED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cached</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LOCAL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TEMPORARY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LINKED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>parseCreateLinkedTable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>parseCreateTable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>cached</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"GLOBAL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TEMPORARY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LINKED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>parseCreateLinkedTable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>parseCreateTable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>cached</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TEMP"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TEMPORARY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LINKED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>parseCreateLinkedTable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>parseCreateTable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>cached</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cached</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>memory</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>cached</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getDefaultTableType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Table</name><operator>.</operator><name>TYPE_CACHED</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>parseCreateTable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>cached</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SYNONYM"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseCreateSynonym</name><argument_list>(<argument><expr><name>orReplace</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hash</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>, <decl><type ref="prev"/><name>primaryKey</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>unique</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>, <decl><type ref="prev"/><name>spatial</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>indexName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Schema</name></type> <name>oldSchema</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>isQuirksMode</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>PRIMARY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"HASH"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>hash</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>primaryKey</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isToken</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ifNotExists</name> <operator>=</operator> <call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>indexName</name> <operator>=</operator> <call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>oldSchema</name> <operator>=</operator> <call><name>getSchema</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>UNIQUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>unique</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"HASH"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>hash</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>unique</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SPATIAL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>spatial</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isToken</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ifNotExists</name> <operator>=</operator> <call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>indexName</name> <operator>=</operator> <call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>oldSchema</name> <operator>=</operator> <call><name>getSchema</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>oldSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>= <expr><call><name>readCommentIf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// PostgreSQL compatibility</comment>
                <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>||</operator> <name>spatial</name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>USING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"BTREE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// default</comment>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"HASH"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>hash</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"RTREE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>spatial</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>CreateIndex</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPrimaryKey</name></name><argument_list>(<argument><expr><name>primaryKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setHash</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSpatial</name></name><argument_list>(<argument><expr><name>spatial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIndexName</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>columns</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>uniqueColumnCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>spatial</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>columns</name> <operator>=</operator> <operator>new</operator> <name><name>IndexColumn</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>IndexColumn</name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>unique</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>uniqueColumnCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>columns</name> <operator>=</operator> <call><name>parseIndexColumnList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>unique</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>uniqueColumnCount</name> <operator>=</operator> <name><name>columns</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INCLUDE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>columnsToInclude</name> <init>= <expr><call><name>parseIndexColumnList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>nonUniqueCount</name> <init>= <expr><name><name>columnsToInclude</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>columns</name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><name>uniqueColumnCount</name> <operator>+</operator> <name>nonUniqueCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>columnsToInclude</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>uniqueColumnCount</name></expr></argument>, <argument><expr><name>nonUniqueCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>primaryKey</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>uniqueColumnCount</name> <operator>=</operator> <name><name>columns</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIndexColumns</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setUniqueColumnCount</name></name><argument_list>(<argument><expr><name>uniqueColumnCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if we expect to see a TABLE clause
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>addRoleOrRight</name><parameter_list>(<parameter><decl><type><name>GrantRevoke</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>SELECT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addRight</name></name><argument_list>(<argument><expr><name><name>Right</name><operator>.</operator><name>SELECT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addRight</name></name><argument_list>(<argument><expr><name><name>Right</name><operator>.</operator><name>DELETE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addRight</name></name><argument_list>(<argument><expr><name><name>Right</name><operator>.</operator><name>INSERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addRight</name></name><argument_list>(<argument><expr><name><name>Right</name><operator>.</operator><name>UPDATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CONNECT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// ignore this right</comment>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RESOURCE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// ignore this right</comment>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addRoleName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>GrantRevoke</name></type> <name>parseGrantRevoke</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>operationType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>GrantRevoke</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>GrantRevoke</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOperationType</name></name><argument_list>(<argument><expr><name>operationType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>tableClauseExpected</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addRight</name></name><argument_list>(<argument><expr><name><name>Right</name><operator>.</operator><name>ALL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tableClauseExpected</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addRight</name></name><argument_list>(<argument><expr><name><name>Right</name><operator>.</operator><name>ALTER_ANY_SCHEMA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addTable</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tableClauseExpected</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>tableClauseExpected</name> <operator>=</operator> <call><name>addRoleOrRight</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>addRoleOrRight</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>tableClauseExpected</name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>ROLES_AND_RIGHT_CANNOT_BE_MIXED</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>tableClauseExpected</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSchema</name></name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <do>do <block>{<block_content>
                        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name>readTableOrView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addTable</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><ternary><condition><expr><name>operationType</name> <operator>==</operator> <name><name>CommandInterface</name><operator>.</operator><name>GRANT</name></name></expr> ?</condition><then> <expr><name>TO</name></expr> </then><else>: <expr><name>FROM</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setGranteeName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TableValueConstructor</name></type> <name>parseValues</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>row</name> <init>= <expr><call><name>parseValuesRow</name><argument_list>(<argument><expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>parseValuesRow</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>row</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>columnCount</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_COUNT_DOES_NOT_MATCH</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><operator>new</operator> <call><name>TableValueConstructor</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>parseValuesRow</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ROW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>row</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><name>row</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Call</name></type> <name>parseCall</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Call</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Call</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>currentPrepared</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>canBeFunction</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>IDENTIFIER</name></expr>:</case>
            <expr_stmt><expr><name>canBeFunction</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TABLE</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableFunction</name></name><argument_list>(<argument><expr><call><name>readTableFunction</name><argument_list>(<argument><expr><name><name>ArrayTableFunction</name><operator>.</operator><name>TABLE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        <default>default:</default>
            <expr_stmt><expr><name>canBeFunction</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>canBeFunction</name> <operator>&amp;&amp;</operator> <call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>FUNCTION_NOT_FOUND_1</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>schemaName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>name</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>checkDatabaseName</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><ternary><condition><expr><name>schemaName</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableFunction</name></name><argument_list>(<argument><expr><call><name>readTableFunction</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateRole</name></type> <name>parseCreateRole</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CreateRole</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateRole</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setRoleName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateSchema</name></type> <name>parseCreateSchema</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CreateSchema</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateSchema</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>authorization</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>AUTHORIZATION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>authorization</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSchemaName</name></name><argument_list>(<argument><expr><name>authorization</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setAuthorization</name></name><argument_list>(<argument><expr><name>authorization</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSchemaName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>AUTHORIZATION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>authorization</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>authorization</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setAuthorization</name></name><argument_list>(<argument><expr><name>authorization</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableEngineParams</name></name><argument_list>(<argument><expr><call><name>readTableEngineParams</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>readTableEngineParams</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tableEngineParams</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>tableEngineParams</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><name>tableEngineParams</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateSequence</name></type> <name>parseCreateSequence</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sequenceName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CreateSequence</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateSequence</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSequenceName</name></name><argument_list>(<argument><expr><name>sequenceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SequenceOptions</name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name>SequenceOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>parseSequenceOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>readIfNotExists</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>IF</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>NOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>EXISTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateConstant</name></type> <name>parseCreateConstant</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>constantName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isKeyword</name><argument_list>(<argument><expr><name>constantName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>CONSTANT_ALREADY_EXISTS_1</name></name></expr></argument>,
                    <argument><expr><name>constantName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>expr</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CreateConstant</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateConstant</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setConstantName</name></name><argument_list>(<argument><expr><name>constantName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateAggregate</name></type> <name>parseCreateAggregate</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>upperName</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isKeyword</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>BuiltinFunctions</name><operator>.</operator><name>isBuiltinFunction</name></name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>upperName</name> <operator>=</operator> <call><name>upperName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>Aggregate</name><operator>.</operator><name>getAggregateType</name></name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FUNCTION_ALIAS_ALREADY_EXISTS_1</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>CreateAggregate</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateAggregate</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setForce</name></name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>FOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setJavaClassMethod</name></name><argument_list>(<argument><expr><call><name>readStringOrIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateDomain</name></type> <name>parseCreateDomain</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>domainName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CreateDomain</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateDomain</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTypeName</name></name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>dataType</name> <init>= <expr><call><name>readIfDataType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dataType</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDataType</name></name><argument_list>(<argument><expr><name>dataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>parentDomainName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setParentDomain</name></name><argument_list>(<argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDomain</name><argument_list>(<argument><expr><name>parentDomainName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDefaultExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOnUpdateExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Compatibility with 1.4.200 and older versions</comment>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SELECTIVITY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>= <expr><call><name>readCommentIf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>comment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>constraintName</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CONSTRAINT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>constraintName</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CHECK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>constraintName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>AlterDomainAddConstraint</name></type> <name>constraint</name> <init>= <expr><operator>new</operator> <call><name>AlterDomainAddConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>constraint</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>constraint</name><operator>.</operator><name>setDomainName</name></name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>parseDomainConstraint</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>constraint</name><operator>.</operator><name>setCheckExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <finally>finally <block>{<block_content>
                <expr_stmt><expr><name>parseDomainConstraint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addConstraintCommand</name></name><argument_list>(<argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateTrigger</name></type> <name>parseCreateTrigger</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>triggerName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>insteadOf</name></decl>, <decl><type ref="prev"/><name>isBefore</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INSTEAD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"OF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isBefore</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>insteadOf</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"BEFORE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>insteadOf</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>isBefore</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"AFTER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>insteadOf</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>isBefore</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>typeMask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>onRollback</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>allowOr</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnum</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ModeEnum</name><operator>.</operator><name>PostgreSQL</name></name></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>typeMask</name> <operator>|=</operator> <name><name>Trigger</name><operator>.</operator><name>INSERT</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>typeMask</name> <operator>|=</operator> <name><name>Trigger</name><operator>.</operator><name>UPDATE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>typeMask</name> <operator>|=</operator> <name><name>Trigger</name><operator>.</operator><name>DELETE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>SELECT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>typeMask</name> <operator>|=</operator> <name><name>Trigger</name><operator>.</operator><name>SELECT</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ROLLBACK"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>onRollback</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>allowOr</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CreateTrigger</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateTrigger</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setForce</name></name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTriggerName</name></name><argument_list>(<argument><expr><name>triggerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setInsteadOf</name></name><argument_list>(<argument><expr><name>insteadOf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setBefore</name></name><argument_list>(<argument><expr><name>isBefore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOnRollback</name></name><argument_list>(<argument><expr><name>onRollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTypeMask</name></name><argument_list>(<argument><expr><name>typeMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FOR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"EACH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ROW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setRowBased</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"STATEMENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"QUEUE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setQueueSize</name></name><argument_list>(<argument><expr><call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNoWait</name></name><argument_list>(<argument><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOWAIT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTriggerSource</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"CALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTriggerClassName</name></name><argument_list>(<argument><expr><call><name>readStringOrIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateUser</name></type> <name>parseCreateUser</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CreateUser</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateUser</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setUserName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><call><name>readCommentIf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PASSWORD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SALT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSalt</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"HASH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setHash</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IDENTIFIED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// uppercase if not quoted</comment>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ADMIN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setAdmin</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateFunctionAlias</name></type> <name>parseCreateFunctionAlias</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>aliasName</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>IDENTIFIER</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>aliasName</name> <operator>=</operator> <name>currentToken</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>aliasName</name> <operator>=</operator> <call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>upperName</name> <init>= <expr><call><name>upperName</name><argument_list>(<argument><expr><name>aliasName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isReservedFunctionName</name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FUNCTION_ALIAS_ALREADY_EXISTS_1</name></name></expr></argument>, <argument><expr><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>CreateFunctionAlias</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateFunctionAlias</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setForce</name></name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setAliasName</name></name><argument_list>(<argument><expr><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDeterministic</name></name><argument_list>(<argument><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DETERMINISTIC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Compatibility with old versions of H2</comment>
        <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOBUFFER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSource</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>FOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setJavaClassMethod</name></name><argument_list>(<argument><expr><call><name>readStringOrIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>readStringOrIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>currentTokenType</name> <operator>!=</operator> <name>IDENTIFIER</name></expr> ?</condition><then> <expr><call><name>readString</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isReservedFunctionName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>tokenType</name> <init>= <expr><call><name><name>ParserUtil</name><operator>.</operator><name>getTokenType</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tokenType</name> <operator>!=</operator> <name><name>ParserUtil</name><operator>.</operator><name>IDENTIFIER</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>isAllowBuiltinAliasOverride</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><name>tokenType</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>CURRENT_DATE</name></expr>:</case>
                <case>case <expr><name>CURRENT_TIME</name></expr>:</case>
                <case>case <expr><name>CURRENT_TIMESTAMP</name></expr>:</case>
                <case>case <expr><name>DAY</name></expr>:</case>
                <case>case <expr><name>HOUR</name></expr>:</case>
                <case>case <expr><name>LOCALTIME</name></expr>:</case>
                <case>case <expr><name>LOCALTIMESTAMP</name></expr>:</case>
                <case>case <expr><name>MINUTE</name></expr>:</case>
                <case>case <expr><name>MONTH</name></expr>:</case>
                <case>case <expr><name>SECOND</name></expr>:</case>
                <case>case <expr><name>YEAR</name></expr>:</case>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></switch>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>Aggregate</name><operator>.</operator><name>getAggregateType</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
                <operator>||</operator> <call><name><name>BuiltinFunctions</name><operator>.</operator><name>isBuiltinFunction</name></name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>database</name><operator>.</operator><name>isAllowBuiltinAliasOverride</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseWith</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TableView</name></argument>&gt;</argument_list></name></type> <name>viewsCreated</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><call><name>parseWith1</name><argument_list>(<argument><expr><name>viewsCreated</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>CommandContainer</name><operator>.</operator><name>clearCTE</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>viewsCreated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>t</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseWith1</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TableView</name></argument>&gt;</argument_list></name></type> <name>viewsCreated</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RECURSIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This WITH statement is not a temporary view - it is part of a persistent view</comment>
        <comment type="line">// as in CREATE VIEW abc AS WITH my_cte - this auto detects that condition.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isTemporary</name> <init>= <expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>isParsingCreateView</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>viewsCreated</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>parseSingleCommonTableExpression</name><argument_list>(<argument><expr><name>isTemporary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

        <decl_stmt><decl><type><name>Prepared</name></type> <name>p</name></decl>;</decl_stmt>
        <comment type="line">// Reverse the order of constructed CTE views - as the destruction order</comment>
        <comment type="line">// (since later created view may depend on previously created views -</comment>
        <comment type="line">//  we preserve that dependency order in the destruction sequence )</comment>
        <comment type="line">// used in setCteCleanups.</comment>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>reverse</name></name><argument_list>(<argument><expr><name>viewsCreated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isQueryQuick</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parseWithQuery</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parseInsert</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setPrepareAlways</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parseUpdate</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setPrepareAlways</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MERGE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parseMerge</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setPrepareAlways</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parseDelete</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setPrepareAlways</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isToken</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SYNTAX_ERROR_1</name></name></expr></argument>,
                        <argument><expr><name>WITH_STATEMENT_SUPPORTS_LIMITED_SUB_STATEMENTS</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>parseCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setPrepareAlways</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SYNTAX_ERROR_1</name></name></expr></argument>,
                    <argument><expr><name>WITH_STATEMENT_SUPPORTS_LIMITED_SUB_STATEMENTS</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Clean up temporary views starting with last to first (in case of</comment>
        <comment type="line">// dependencies) - but only if they are not persistent.</comment>
        <if_stmt><if>if <condition>(<expr><name>isTemporary</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>cteCleanups</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>cteCleanups</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>viewsCreated</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>cteCleanups</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>viewsCreated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseWithQuery</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Query</name></type> <name>query</name> <init>= <expr><call><name>parseQueryExpressionBodyAndEndOfQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setPrepareAlways</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setNeverLazy</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>query</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TableView</name></type> <name>parseSingleCommonTableExpression</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isTemporary</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>cteViewName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>cols</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// column names are now optional - they can be inferred from the named</comment>
        <comment type="line">// query, if not supplied by user</comment>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>parseColumnList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>c</name> <range>: <expr><name>cols</name></expr></range></decl></init>)</control> <block>{<block_content>
                <comment type="line">// we don't really know the type of the column, so STRING will</comment>
                <comment type="line">// have to do, UNKNOWN does not work here</comment>
                <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Table</name></type> <name>oldViewFound</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isTemporary</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>oldViewFound</name> <operator>=</operator> <call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findTableOrView</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>cteViewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>oldViewFound</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>findLocalTempTable</name></name><argument_list>(<argument><expr><name>cteViewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="line">// this persistent check conflicts with check 10 lines down</comment>
        <if_stmt><if>if <condition>(<expr><name>oldViewFound</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>oldViewFound</name> <operator>instanceof</operator> <name>TableView</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>TABLE_OR_VIEW_ALREADY_EXISTS_1</name></name></expr></argument>,
                        <argument><expr><name>cteViewName</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>TableView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TableView</name><operator>)</operator> <name>oldViewFound</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tv</name><operator>.</operator><name>isTableExpression</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>TABLE_OR_VIEW_ALREADY_EXISTS_1</name></name></expr></argument>,
                        <argument><expr><name>cteViewName</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isTemporary</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>oldViewFound</name><operator>.</operator><name>lock</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>Table</name><operator>.</operator><name>EXCLUSIVE_LOCK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeSchemaObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>oldViewFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>removeLocalTempTable</name></name><argument_list>(<argument><expr><name>oldViewFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/*
         * This table is created as a workaround because recursive table
         * expressions need to reference something that look like themselves to
         * work (its removed after creation in this method). Only create table
         * data and table if we don't have a working CTE already.
         */</comment>
        <decl_stmt><decl><type><name>Table</name></type> <name>recursiveTable</name> <init>= <expr><call><name><name>TableView</name><operator>.</operator><name>createShadowTableForRecursiveTableExpression</name></name><argument_list>(
                <argument><expr><name>isTemporary</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>cteViewName</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columnTemplateList</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>querySQLOutput</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Query</name></type> <name>withQuery</name> <init>= <expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isTemporary</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>withQuery</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>columnTemplateList</name> <operator>=</operator> <call><name><name>TableView</name><operator>.</operator><name>createQueryColumnTemplateList</name></name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>withQuery</name></expr></argument>, <argument><expr><name>querySQLOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> <finally>finally <block>{<block_content>
            <expr_stmt><expr><call><name><name>TableView</name><operator>.</operator><name>destroyShadowTableForRecursiveExpression</name></name><argument_list>(<argument><expr><name>isTemporary</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>recursiveTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>

        <return>return <expr><call><name>createCTEView</name><argument_list>(<argument><expr><name>cteViewName</name></expr></argument>,
                <argument><expr><name><name>querySQLOutput</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>columnTemplateList</name></expr></argument>,
                <argument><expr><literal type="boolean">true</literal></expr></argument><comment type="block">/* allowRecursiveQueryDetection */</comment>,
                <argument><expr><literal type="boolean">true</literal></expr></argument><comment type="block">/* add to session */</comment>,
                <argument><expr><name>isTemporary</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TableView</name></type> <name>createCTEView</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cteViewName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>querySQL</name></decl></parameter>,
                                    <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columnTemplateList</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowRecursiveQueryDetection</name></decl></parameter>,
                                    <parameter><decl><type><name>boolean</name></type> <name>addViewToSession</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isTemporary</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name>getSchemaWithDefault</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>allocateObjectId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columnTemplateArray</name> <init>= <expr><call><name><name>columnTemplateList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Column</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// No easy way to determine if this is a recursive query up front, so we just compile</comment>
        <comment type="line">// it twice - once without the flag set, and if we didn't see a recursive term,</comment>
        <comment type="line">// then we just compile it again.</comment>
        <decl_stmt><decl><type><name>TableView</name></type> <name>view</name></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>session</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><name>view</name> <operator>=</operator> <operator>new</operator> <call><name>TableView</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>cteViewName</name></expr></argument>, <argument><expr><name>querySQL</name></expr></argument>,
                    <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>columnTemplateArray</name></expr></argument>, <argument><expr><name>session</name></expr></argument>,
                    <argument><expr><name>allowRecursiveQueryDetection</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* literalsChecked */</comment>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* isTableExpression */</comment>,
                    <argument><expr><name>isTemporary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>view</name><operator>.</operator><name>isRecursiveQueryDetected</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>allowRecursiveQueryDetection</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isTemporary</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>addSchemaObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>lock</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>Table</name><operator>.</operator><name>EXCLUSIVE_LOCK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeSchemaObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>removeLocalTempTable</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>view</name> <operator>=</operator> <operator>new</operator> <call><name>TableView</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>cteViewName</name></expr></argument>, <argument><expr><name>querySQL</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>,
                        <argument><expr><name>columnTemplateArray</name></expr></argument>, <argument><expr><name>session</name></expr></argument>,
                        <argument><expr><literal type="boolean">false</literal></expr></argument><comment type="block">/* assume recursive */</comment>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* literalsChecked */</comment>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* isTableExpression */</comment>,
                        <argument><expr><name>isTemporary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// both removeSchemaObject and removeLocalTempTable hold meta locks</comment>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>unlockMeta</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setTableExpression</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setTemporary</name></name><argument_list>(<argument><expr><name>isTemporary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setHidden</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setOnCommitDrop</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>addViewToSession</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isTemporary</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>addSchemaObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>unlock</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>unlockMeta</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>addLocalTempTable</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>view</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateView</name></type> <name>parseCreateView</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>orReplace</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isTableExpression</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TABLE_EXPRESSION"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>viewName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CreateView</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateView</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>createView</name></name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setViewName</name></name><argument_list>(<argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><call><name>readCommentIf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOrReplace</name></name><argument_list>(<argument><expr><name>orReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setForce</name></name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableExpression</name></name><argument_list>(<argument><expr><name>isTableExpression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>cols</name> <init>= <expr><call><name>parseColumnList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setColumnNames</name></name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>select</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>cache</name></name><argument_list>(<argument><expr><call><name><name>sqlCommand</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Query</name></type> <name>query</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setParsingCreateView</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>parseQuery</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <finally>finally <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setParsingCreateView</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSelect</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>force</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSelectSQL</name></name><argument_list>(<argument><expr><name>select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <while>while <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>END_OF_INPUT</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TransactionCommand</name></type> <name>parseCheckpoint</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TransactionCommand</name></type> <name>command</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SYNC"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>TransactionCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                    <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>CHECKPOINT_SYNC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>TransactionCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                    <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>CHECKPOINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseAlter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseAlterTable</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>USER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseAlterUser</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseAlterIndex</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseAlterSchema</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseAlterSequence</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseAlterView</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DOMAIN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseAlterDomain</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkSchema</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>old</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>getSchema</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>old</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SCHEMA_NAME_MUST_MATCH</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>AlterIndexRename</name></type> <name>parseAlterIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>indexName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>old</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AlterIndexRename</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterIndexRename</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldSchema</name></name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldName</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"RENAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>old</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewName</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DefineCommand</name></type> <name>parseAlterDomain</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifDomainExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>domainName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ADD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>constraintName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CONSTRAINT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ifNotExists</name> <operator>=</operator> <call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>constraintName</name> <operator>=</operator> <call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>comment</name> <operator>=</operator> <call><name>readCommentIf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterDomainAddConstraint</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterDomainAddConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDomainName</name></name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>parseDomainConstraint</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCheckExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <finally>finally <block>{<block_content>
                <expr_stmt><expr><name>parseDomainConstraint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfDomainExists</name></name><argument_list>(<argument><expr><name>ifDomainExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOCHECK"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCheckExisting</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCheckExisting</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CONSTRAINT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>ifConstraintExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>constraintName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>AlterDomainDropConstraint</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterDomainDropConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name>ifConstraintExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDomainName</name></name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfDomainExists</name></name><argument_list>(<argument><expr><name>ifDomainExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>AlterDomainExpressions</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterDomainExpressions</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
                        <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_DOMAIN_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDomainName</name></name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfDomainExists</name></name><argument_list>(<argument><expr><name>ifDomainExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>AlterDomainExpressions</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterDomainExpressions</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
                        <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_DOMAIN_ON_UPDATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDomainName</name></name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfDomainExists</name></name><argument_list>(<argument><expr><name>ifDomainExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RENAME"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CONSTRAINT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>constraintName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>AlterDomainRenameConstraint</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterDomainRenameConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDomainName</name></name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfDomainExists</name></name><argument_list>(<argument><expr><name>ifDomainExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewConstraintName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterDomainRename</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterDomainRename</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDomainName</name></name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfDomainExists</name></name><argument_list>(<argument><expr><name>ifDomainExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewDomainName</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>AlterDomainExpressions</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterDomainExpressions</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
                        <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_DOMAIN_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDomainName</name></name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfDomainExists</name></name><argument_list>(<argument><expr><name>ifDomainExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>AlterDomainExpressions</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterDomainExpressions</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
                        <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_DOMAIN_ON_UPDATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDomainName</name></name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfDomainExists</name></name><argument_list>(<argument><expr><name>ifDomainExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DefineCommand</name></type> <name>parseAlterView</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>viewName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>tableView</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>findTableOrView</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tableView</name> <operator>instanceof</operator> <name>TableView</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>ifExists</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>VIEW_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RENAME"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterTableRename</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableRename</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewTableName</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"RECOMPILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>TableView</name></type> <name>view</name> <init>= <expr><operator>(</operator><name>TableView</name><operator>)</operator> <name>tableView</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AlterView</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterView</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseAlterSchema</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>schemaName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>old</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"RENAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>old</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name>findSchema</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ifExists</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SCHEMA_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>AlterSchemaRename</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterSchemaRename</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldSchema</name></name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewName</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>AlterSequence</name></type> <name>parseAlterSequence</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sequenceName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AlterSequence</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterSequence</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSequenceName</name></name><argument_list>(<argument><expr><name>sequenceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SequenceOptions</name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name>SequenceOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>parseSequenceOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>parseSequenceOptions</name><parameter_list>(<parameter><decl><type><name>SequenceOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>CreateSequence</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowDataType</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>forAlterColumn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>allowDataType</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>TypeInfo</name></type> <name>dataType</name> <init>= <expr><call><name>parseDataType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DataType</name><operator>.</operator><name>isNumericType</name></name><argument_list>(<argument><expr><call><name><name>dataType</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(<argument><expr><call><name><name>dataType</name>
                            <operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"CREATE SEQUENCE AS "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>HasSQL</name><operator>.</operator><name>TRACE_SQL_FLAGS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setDataType</name></name><argument_list>(<argument><expr><name>dataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"START"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setStartValue</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RESTART"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setRestartValue</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>ValueExpression</name><operator>.</operator><name>DEFAULT</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>command</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>parseCreateSequenceOption</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">//</comment>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>forAlterColumn</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parseBasicSequenceOption</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>parseBasicSequenceOption</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>parseCreateSequenceOption</name><parameter_list>(<parameter><decl><type><name>CreateSequence</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"BELONGS_TO_TABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setBelongsToTable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ORDER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Oracle compatibility</comment>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>parseBasicSequenceOption</name><parameter_list>(<parameter><decl><type><name>SequenceOptions</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INCREMENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setIncrement</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MINVALUE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setMinValue</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MAXVALUE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setMaxValue</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CYCLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setCycle</name></name><argument_list>(<argument><expr><name><name>Sequence</name><operator>.</operator><name>Cycle</name><operator>.</operator><name>CYCLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MINVALUE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setMinValue</name></name><argument_list>(<argument><expr><name><name>ValueExpression</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MAXVALUE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setMaxValue</name></name><argument_list>(<argument><expr><name><name>ValueExpression</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CYCLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setCycle</name></name><argument_list>(<argument><expr><name><name>Sequence</name><operator>.</operator><name>Cycle</name><operator>.</operator><name>NO_CYCLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CACHE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setCacheSize</name></name><argument_list>(<argument><expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"EXHAUSTED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setCycle</name></name><argument_list>(<argument><expr><name><name>Sequence</name><operator>.</operator><name>Cycle</name><operator>.</operator><name>EXHAUSTED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CACHE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setCacheSize</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Various compatibility options</comment>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOMINVALUE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setMinValue</name></name><argument_list>(<argument><expr><name><name>ValueExpression</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOMAXVALUE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setMaxValue</name></name><argument_list>(<argument><expr><name><name>ValueExpression</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOCYCLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setCycle</name></name><argument_list>(<argument><expr><name><name>Sequence</name><operator>.</operator><name>Cycle</name><operator>.</operator><name>NO_CYCLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOCACHE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setCacheSize</name></name><argument_list>(<argument><expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>AlterUser</name></type> <name>parseAlterUser</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>userName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>AlterUser</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterUser</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_USER_SET_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>getUser</name></name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PASSWORD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SALT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSalt</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"HASH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setHash</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RENAME"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterUser</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterUser</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_USER_RENAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>getUser</name></name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ADMIN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>AlterUser</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterUser</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_USER_ADMIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>User</name></type> <name>user</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getUser</name></name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setAdmin</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setAdmin</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readIfEqualOrTo</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>AT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>VARIABLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"AUTOCOMMIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>TransactionCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>readBooleanSetting</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>CommandInterface</name><operator>.</operator><name>SET_AUTOCOMMIT_TRUE</name></name></expr>
                    </then><else>: <expr><name><name>CommandInterface</name><operator>.</operator><name>SET_AUTOCOMMIT_FALSE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"EXCLUSIVE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IGNORECASE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>IGNORECASE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>readBooleanSetting</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PASSWORD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterUser</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterUser</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_USER_SET_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SALT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterUser</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterUser</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_USER_SET_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSalt</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"HASH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setHash</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MODE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>MODE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DATABASE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"COLLATION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>parseSetCollation</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLLATION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>parseSetCollation</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CLUSTER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>CLUSTER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DATABASE_EVENT_LISTENER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>DATABASE_EVENT_LISTENER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ALLOW_LITERALS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>ALLOW_LITERALS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>ALLOW_LITERALS_ALL</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>ALLOW_LITERALS_NONE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NUMBERS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>ALLOW_LITERALS_NUMBERS</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_TABLE_TYPE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>DEFAULT_TABLE_TYPE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MEMORY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>Table</name><operator>.</operator><name>TYPE_MEMORY</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CACHED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>Table</name><operator>.</operator><name>TYPE_CACHED</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>SCHEMA</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><call><name>readExpressionOrIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CATALOG"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>CATALOG</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><call><name>readExpressionOrIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><call><name><name>SetTypes</name><operator>.</operator><name>getTypeName</name></name><argument_list>(<argument><expr><name><name>SetTypes</name><operator>.</operator><name>SCHEMA_SEARCH_PATH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>SCHEMA_SEARCH_PATH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setStringArray</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"JAVA_OBJECT_SERIALIZER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>JAVA_OBJECT_SERIALIZER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IGNORE_CATALOGS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>IGNORE_CATALOGS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>readBooleanSetting</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SESSION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"CHARACTERISTICS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>parseSetTransactionMode</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// TODO should affect only the current transaction</comment>
            <return>return <expr><call><name>parseSetTransactionMode</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>TIME_ZONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LOCAL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NON_KEYWORDS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>NON_KEYWORDS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentTokenType</name> <operator>!=</operator> <name>END_OF_INPUT</name> <operator>&amp;&amp;</operator> <name>currentTokenType</name> <operator>!=</operator> <name>SEMICOLON</name></expr>)</condition> <block>{<block_content>
                <do>do <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>currentTokenType</name> <argument_list type="generic">&lt; <argument><name>IDENTIFIER</name> <operator>||</operator> <name>currentTokenType</name></argument> &gt;</argument_list></name> <name>LAST_KEYWORD</name></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>currentToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setStringArray</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_NULL_ORDERING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>DEFAULT_NULL_ORDERING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LOG"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(<argument><expr><literal type="string">"LOG"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>upperName</name> <init>= <expr><call><name>upperName</name><argument_list>(<argument><expr><name>currentToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>ConnectionInfo</name><operator>.</operator><name>isIgnoredByParser</name></name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>SetTypes</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>ModeEnum</name></type> <name>modeEnum</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnum</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>modeEnum</name> <operator>!=</operator> <name><name>ModeEnum</name><operator>.</operator><name>REGULAR</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Prepared</name></type> <name>command</name> <init>= <expr><call><name>readSetCompatibility</name><argument_list>(<argument><expr><name>modeEnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>command</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>isQuirksMode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><name>upperName</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="string">"BINARY_COLLATION"</literal></expr>:</case>
                <case>case <expr><literal type="string">"UUID_COLLATION"</literal></expr>:</case>
                    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></switch>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseSetTransactionMode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>IsolationLevel</name></type> <name>isolationLevel</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"LEVEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"READ"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"UNCOMMITTED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>isolationLevel</name> <operator>=</operator> <name><name>IsolationLevel</name><operator>.</operator><name>READ_UNCOMMITTED</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"COMMITTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>isolationLevel</name> <operator>=</operator> <name><name>IsolationLevel</name><operator>.</operator><name>READ_COMMITTED</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"REPEATABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"READ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isolationLevel</name> <operator>=</operator> <name><name>IsolationLevel</name><operator>.</operator><name>REPEATABLE_READ</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SNAPSHOT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>isolationLevel</name> <operator>=</operator> <name><name>IsolationLevel</name><operator>.</operator><name>SNAPSHOT</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"SERIALIZABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isolationLevel</name> <operator>=</operator> <name><name>IsolationLevel</name><operator>.</operator><name>SERIALIZABLE</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>SetSessionCharacteristics</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>isolationLevel</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>readExpressionOrIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isIdentifier</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseUse</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>SCHEMA</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Set</name></type> <name>parseSetCollation</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>COLLATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>equalsToken</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>CompareMode</name><operator>.</operator><name>OFF</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Collator</name></type> <name>coll</name> <init>= <expr><call><name><name>CompareMode</name><operator>.</operator><name>getCollator</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>coll</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"collation"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"STRENGTH"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>PRIMARY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name><name>Collator</name><operator>.</operator><name>PRIMARY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SECONDARY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name><name>Collator</name><operator>.</operator><name>SECONDARY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TERTIARY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name><name>Collator</name><operator>.</operator><name>TERTIARY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IDENTICAL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name><name>Collator</name><operator>.</operator><name>IDENTICAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><call><name><name>coll</name><operator>.</operator><name>getStrength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>readSetCompatibility</name><parameter_list>(<parameter><decl><type><name>ModeEnum</name></type> <name>modeEnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>modeEnum</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>Derby</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// (CREATE=TRUE in the database URL)</comment>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>HSQLDB</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"LOGSIZE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>MAX_LOG_SIZE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>MySQL</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"FOREIGN_KEY_CHECKS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>REFERENTIAL_INTEGRITY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NAMES"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// Quercus PHP MySQL driver compatibility</comment>
                <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>PostgreSQL</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"STATEMENT_TIMEOUT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>QUERY_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CLIENT_ENCODING"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CLIENT_MIN_MESSAGES"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"JOIN_COLLAPSE_LIMIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DATESTYLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ISO"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equalsToken</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ISO"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SEARCH_PATH"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIfEqualOrTo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Set</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>Set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>SetTypes</name><operator>.</operator><name>SCHEMA_SEARCH_PATH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>pgCatalog</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>sysIdentifier</name></name><argument_list>(<argument><expr><literal type="string">"PG_CATALOG"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>hasPgCatalog</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                <do>do <block>{<block_content>
                    <comment type="line">// some PG clients will send single-quoted alias</comment>
                    <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name></expr> ?</condition><then> <expr><call><name>readString</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><literal type="string">"$user"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>pgCatalog</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>hasPgCatalog</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
                <comment type="line">// If "pg_catalog" is not in the path then it will be searched before</comment>
                <comment type="line">// searching any of the path items. See</comment>
                <comment type="line">// https://www.postgresql.org/docs/8.2/runtime-config-client.html</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasPgCatalog</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>findSchema</name></name><argument_list>(<argument><expr><name>pgCatalog</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pgCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setStringArray</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <default>default:</default>
        </block_content>}</block></switch>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>RunScriptCommand</name></type> <name>parseRunScript</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>RunScriptCommand</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>RunScriptCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>FROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFileNameExpr</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COMPRESSION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCompressionAlgorithm</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CIPHER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCipher</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PASSWORD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHARSET"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCharset</name></name><argument_list>(<argument><expr><call><name><name>Charset</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"FROM_1X"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFrom1X</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"QUIRKS_MODE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setQuirksMode</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VARIABLE_BINARY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setVariableBinary</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>ScriptCommand</name></type> <name>parseScript</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ScriptCommand</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>ScriptCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>data</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>, <decl><type ref="prev"/><name>passwords</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>, <decl><type ref="prev"/><name>settings</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>, <decl><type ref="prev"/><name>version</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>dropTables</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>, <decl><type ref="prev"/><name>simple</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>, <decl><type ref="prev"/><name>withColumns</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NODATA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SIMPLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>simple</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>withColumns</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOPASSWORDS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>passwords</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOSETTINGS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>settings</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOVERSION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dropTables</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"BLOCKSIZE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>blockSize</name> <init>= <expr><call><name>readLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setLobBlockSize</name></name><argument_list>(<argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPasswords</name></name><argument_list>(<argument><expr><name>passwords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSettings</name></name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDrop</name></name><argument_list>(<argument><expr><name>dropTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSimple</name></name><argument_list>(<argument><expr><name>simple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setWithColumns</name></name><argument_list>(<argument><expr><name>withColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFileNameExpr</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COMPRESSION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCompressionAlgorithm</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CIPHER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCipher</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PASSWORD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHARSET"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCharset</name></name><argument_list>(<argument><expr><call><name><name>Charset</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>schemaNames</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>schemaNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSchemaNames</name></name><argument_list>(<argument><expr><name>schemaNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>tables</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>tables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readTableOrView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTables</name></name><argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Is this the Oracle DUAL table or the IBM/DB2 SYSIBM table?
     *
     * @param tableName table name.
     * @return {@code true} if the table is DUAL special table. Otherwise returns {@code false}.
     * @see &lt;a href="https://en.wikipedia.org/wiki/DUAL_table"&gt;Wikipedia: DUAL table&lt;/a&gt;
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isDualTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>schemaName</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>, <argument><expr><literal type="string">"SYS"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"DUAL"</literal></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>||</operator> <operator>(</operator><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>sysDummy1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>schemaName</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>, <argument><expr><literal type="string">"SYSIBM"</literal></expr></argument>)</argument_list></call><operator>)</operator>
                        <operator>&amp;&amp;</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"SYSDUMMY1"</literal></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Table</name></type> <name>readTableOrView</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>readTableOrView</name><argument_list>(<argument><expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Table</name></type> <name>readTableOrView</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schemaName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>resolveTableOrView</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>table</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>resolveTableOrView</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>table</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>schemaNames</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getSchemaSearchPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>schemaNames</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><name>schemaNames</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>Schema</name></type> <name>s</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>table</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>resolveTableOrView</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>table</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isDualTable</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>DualTable</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <throw>throw <expr><call><name>getTableOrViewNotFoundDbException</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DbException</name></type> <name>getTableOrViewNotFoundDbException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schemaName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>getTableOrViewNotFoundDbException</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>currentSchemaName</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>schemaSearchPath</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getSchemaSearchPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schemaSearchPath</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>getTableOrViewNotFoundDbException</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>currentSchemaName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>LinkedHashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>schemaNames</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>schemaNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentSchemaName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>schemaNames</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>schemaSearchPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getTableOrViewNotFoundDbException</name><argument_list>(<argument><expr><name>schemaNames</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DbException</name></type> <name>getTableOrViewNotFoundDbException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getTableOrViewNotFoundDbException</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DbException</name></type> <name>getTableOrViewNotFoundDbException</name><parameter_list>(
            <parameter><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>schemaNames</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>database</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>database</name><operator>.</operator><name>getFirstUserTable</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>TABLE_OR_VIEW_NOT_FOUND_DATABASE_EMPTY_1</name></name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><name>caseInsensitiveIdentifiers</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>TABLE_OR_VIEW_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>candidates</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>schemaName</name> <range>: <expr><name>schemaNames</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>findTableNameCandidates</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>candidates</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>TABLE_OR_VIEW_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>TABLE_OR_VIEW_NOT_FOUND_WITH_CANDIDATES_2</name></name></expr></argument>,
                <argument><expr><name>tableName</name></expr></argument>,
                <argument><expr><call><name><name>String</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>findTableNameCandidates</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>candidates</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>ucTableName</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>allTablesAndViews</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Table</name></type> <name>candidate</name> <range>: <expr><name>allTablesAndViews</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>candidateName</name> <init>= <expr><call><name><name>candidate</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>ucTableName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>candidateName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>candidates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>candidateName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>UserDefinedFunction</name></type> <name>findUserDefinedFunctionWithinPath</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>schema</name><operator>.</operator><name>findFunctionOrAggregate</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UserDefinedFunction</name></type> <name>userDefinedFunction</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>findFunctionOrAggregate</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>userDefinedFunction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>userDefinedFunction</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>schemaNames</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getSchemaSearchPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schemaNames</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>schemaName</name> <range>: <expr><name>schemaNames</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Schema</name></type> <name>schemaFromPath</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>schemaFromPath</name> <operator>!=</operator> <name>schema</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>userDefinedFunction</name> <operator>=</operator> <call><name><name>schemaFromPath</name><operator>.</operator><name>findFunctionOrAggregate</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>userDefinedFunction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>userDefinedFunction</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Sequence</name></type> <name>findSequence</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sequenceName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Sequence</name></type> <name>sequence</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>findSequence</name><argument_list>(
                <argument><expr><name>sequenceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>sequence</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>schemaNames</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getSchemaSearchPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schemaNames</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>n</name> <range>: <expr><name>schemaNames</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>sequence</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>findSequence</name><argument_list>(<argument><expr><name>sequenceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>sequence</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Sequence</name></type> <name>readSequence</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// same algorithm as readTableOrView</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>sequenceName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schemaName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSequence</name><argument_list>(<argument><expr><name>sequenceName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Sequence</name></type> <name>sequence</name> <init>= <expr><call><name>findSequence</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>sequenceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>sequence</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SEQUENCE_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>sequenceName</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseAlterTable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifTableExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ADD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Prepared</name></type> <name>command</name> <init>= <expr><call><name>parseTableConstraintIf</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>parseAlterTableAddColumn</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseAlterTableSet</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RENAME"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseAlterTableRename</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseAlterTableDrop</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseAlterTableAlter</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>Mode</name></type> <name>mode</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>alterTableExtensionsMySQL</name></name> <operator>||</operator> <name><name>mode</name><operator>.</operator><name>alterTableModifyColumn</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>parseAlterTableCompatibility</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseAlterTableAlter</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLUMN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name>columnIfTableExists</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RENAME"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterTableRenameColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableRenameColumn</name><argument_list>(
                    <argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfExists</name></name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumnName</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewColumnName</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAlterColumn</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_DEFAULT_ON_NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setBooleanFlag</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>command</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><call><name>getAlterTableAlterColumnDropDefaultExpression</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>column</name></expr></argument>,
                        <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"EXPRESSION"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>getAlterTableAlterColumnDropDefaultExpression</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>column</name></expr></argument>,
                        <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_DROP_EXPRESSION</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>getAlterTableAlterColumnDropDefaultExpression</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>column</name></expr></argument>,
                        <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_DROP_IDENTITY</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAlterColumn</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_ON_UPDATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDefaultExpression</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>NOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAlterColumn</name><argument_list>(
                    <argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_DROP_NOT_NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TYPE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// PostgreSQL compatibility</comment>
            <return>return <expr><call><name>parseAlterTableAlterColumnDataType</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SELECTIVITY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAlterColumn</name><argument_list>(
                    <argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_SELECTIVITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSelectivity</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Prepared</name></type> <name>command</name> <init>= <expr><call><name>parseAlterTableAlterColumnIdentity</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>parseAlterTableAlterColumnSet</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>parseAlterTableAlterColumnType</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>getAlterTableAlterColumnDropDefaultExpression</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>, <parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAlterColumn</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDefaultExpression</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseAlterTableAlterColumnIdentity</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>,
            <parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Boolean</name></type> <name>always</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"GENERATED"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ALWAYS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>always</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>always</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>SequenceOptions</name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name>SequenceOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parseSequenceOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>always</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>column</name><operator>.</operator><name>isIdentity</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAlterColumn</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>parseAlterColumnUsingIf</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_CHANGE_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Column</name></type> <name>newColumn</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>getClone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>newColumn</name><operator>.</operator><name>setIdentityOptions</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>always</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>always</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewColumn</name></name><argument_list>(<argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>AlterSequence</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterSequence</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>always</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>commandIfTableExists</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseAlterTableAlterColumnSet</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>ifExists</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>, <parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DATA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"TYPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>parseAlterTableAlterColumnDataType</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAlterColumn</name><argument_list>(
                <argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>NullConstraintType</name></type> <name>nullConstraint</name> <init>= <expr><call><name>parseNotNullConstraint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>nullConstraint</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NULL_IS_ALLOWED</name></expr>:</case>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_DROP_NOT_NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>NULL_IS_NOT_ALLOWED</name></expr>:</case>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_NOT_NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>NO_NULL_CONSTRAINT_FOUND</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_DEFAULT_ON_NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setBooleanFlag</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>defaultExpression</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDefaultExpression</name></name><argument_list>(<argument><expr><name>defaultExpression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>onUpdateExpression</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_ON_UPDATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDefaultExpression</name></name><argument_list>(<argument><expr><name>onUpdateExpression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INVISIBLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_VISIBILITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setBooleanFlag</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VISIBLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_VISIBILITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setBooleanFlag</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_MODE_1</name></name></expr></argument>,
                    <argument><expr><literal type="string">"Internal Error - unhandled case: "</literal> <operator>+</operator> <call><name><name>nullConstraint</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseAlterTableDrop</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CONSTRAINT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>constraintName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>ifExists</name> <operator>=</operator> <call><name>readIfExists</name><argument_list>(<argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterTableDropConstraint</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableDropConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ConstraintActionType</name></type> <name>dropAction</name> <init>= <expr><call><name>parseCascadeOrRestrict</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>dropAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDropAction</name></name><argument_list>(<argument><expr><name>dropAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>PRIMARY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name>tableIfTableExists</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Index</name></type> <name>idx</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getPrimaryKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DropIndex</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>DropIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIndexName</name></name><argument_list>(<argument><expr><call><name><name>idx</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>alterTableExtensionsMySQL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Prepared</name></type> <name>command</name> <init>= <expr><call><name>parseAlterTableDropCompatibility</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLUMN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columnsToRemove</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name>tableIfTableExists</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// For Oracle compatibility - open bracket required</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>openingBracketDetected</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>column</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>columnsToRemove</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <if_stmt><if>if <condition>(<expr><name>openingBracketDetected</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// For Oracle compatibility - close bracket</comment>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>columnsToRemove</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAlterColumn</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_DROP_COLUMN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setColumnsToRemove</name></name><argument_list>(<argument><expr><name>columnsToRemove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseAlterTableDropCompatibility</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>FOREIGN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// For MariaDB</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>constraintName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterTableDropConstraint</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableDropConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// For MariaDB</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifExists</name> <init>= <expr><call><name>readIfExists</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>indexOrConstraintName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>schema</name><operator>.</operator><name>findIndex</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexOrConstraintName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>DropIndex</name></type> <name>dropIndexCommand</name> <init>= <expr><operator>new</operator> <call><name>DropIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dropIndexCommand</name><operator>.</operator><name>setIndexName</name></name><argument_list>(<argument><expr><name>indexOrConstraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name>commandIfTableExists</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>dropIndexCommand</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>AlterTableDropConstraint</name></type> <name>dropCommand</name> <init>= <expr><operator>new</operator> <call><name>AlterTableDropConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dropCommand</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dropCommand</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dropCommand</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>indexOrConstraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>dropCommand</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseAlterTableRename</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLUMN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// PostgreSQL syntax</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterTableRenameColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableRenameColumn</name><argument_list>(
                    <argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumnName</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewColumnName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CONSTRAINT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>constraintName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterTableRenameConstraint</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableRenameConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewConstraintName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AlterTableRename</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableRename</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                    <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewTableName</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setHidden</name></name><argument_list>(<argument><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"HIDDEN"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseAlterTableSet</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"REFERENTIAL_INTEGRITY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_SET_REFERENTIAL_INTEGRITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>value</name> <init>= <expr><call><name>readBooleanSetting</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AlterTableSet</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableSet</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CHECK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCheckExisting</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOCHECK"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCheckExisting</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>parseAlterTableCompatibility</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>, <parameter><decl><type><name>Mode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>alterTableExtensionsMySQL</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"AUTO_INCREMENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>restart</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name>tableIfTableExists</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Index</name></type> <name>idx</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>findPrimaryKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>IndexColumn</name></type> <name>ic</name> <range>: <expr><call><name><name>idx</name><operator>.</operator><name>getIndexColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><name><name>ic</name><operator>.</operator><name>column</name></name></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isIdentity</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>AlterSequence</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterSequence</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <decl_stmt><decl><type><name>SequenceOptions</name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name>SequenceOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setRestartValue</name></name><argument_list>(<argument><expr><name>restart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOptions</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <return>return <expr><name>command</name></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><literal type="string">"AUTO_INCREMENT PRIMARY KEY"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHANGE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLUMN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>newColumnName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name>columnIfTableExists</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>nullable</name> <init>= <expr><ternary><condition><expr><name>column</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="boolean">true</literal></expr> </then><else>: <expr><call><name><name>column</name><operator>.</operator><name>isNullable</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <comment type="line">// new column type ignored. RENAME and MODIFY are</comment>
                <comment type="line">// a single command in MySQL but two different commands in H2.</comment>
                <expr_stmt><expr><call><name>parseColumnForTable</name><argument_list>(<argument><expr><name>newColumnName</name></expr></argument>, <argument><expr><name>nullable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>AlterTableRenameColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableRenameColumn</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumnName</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewColumnName</name></name><argument_list>(<argument><expr><name>newColumnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>command</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CONVERT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHARACTER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readMySQLCharset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLLATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>readMySQLCharset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <return>return <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>alterTableModifyColumn</name></name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"MODIFY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// MySQL compatibility (optional)</comment>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLUMN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Oracle specifies (but will not require) an opening parenthesis</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hasOpeningBracket</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>NullConstraintType</name></type> <name>nullConstraint</name> <init>= <expr><call><name>parseNotNullConstraint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>nullConstraint</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NULL_IS_ALLOWED</name></expr>:</case>
            <case>case <expr><name>NULL_IS_NOT_ALLOWED</name></expr>:</case>
                <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>AlterTableAlterColumn</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name>columnIfTableExists</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>nullConstraint</name> <operator>==</operator> <name><name>NullConstraintType</name><operator>.</operator><name>NULL_IS_ALLOWED</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_DROP_NOT_NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_NOT_NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            <case>case <expr><name>NO_NULL_CONSTRAINT_FOUND</name></expr>:</case>
                <expr_stmt><expr><name>command</name> <operator>=</operator> <call><name>parseAlterTableAlterColumnType</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
                        <argument><expr><call><name><name>mode</name><operator>.</operator><name>getEnum</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>ModeEnum</name><operator>.</operator><name>MySQL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_MODE_1</name></name></expr></argument>,
                        <argument><expr><literal type="string">"Internal Error - unhandled case: "</literal> <operator>+</operator> <call><name><name>nullConstraint</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></switch>
            <if_stmt><if>if <condition>(<expr><name>hasOpeningBracket</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>command</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Table</name></type> <name>tableIfTableExists</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>resolveTableOrView</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>ifTableExists</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>getTableOrViewNotFoundDbException</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>table</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Column</name></type> <name>columnIfTableExists</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name>tableIfTableExists</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>table</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Prepared</name></type> <name>commandIfTableExists</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>, <parameter><decl><type><name>Prepared</name></type> <name>commandIfTableExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name>tableIfTableExists</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>
            ?</condition><then> <expr><operator>new</operator> <call><name>NoOperation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>
            </then><else>: <expr><name>commandIfTableExists</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>AlterTableAlterColumn</name></type> <name>parseAlterTableAlterColumnType</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifExists</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>preserveNotNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Column</name></type> <name>oldColumn</name> <init>= <expr><call><name>columnIfTableExists</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Column</name></type> <name>newColumn</name> <init>= <expr><call><name>parseColumnForTable</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>,
                <argument><expr><operator>!</operator><name>preserveNotNull</name> <operator>||</operator> <name>oldColumn</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>oldColumn</name><operator>.</operator><name>isNullable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAlterColumn</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>parseAlterColumnUsingIf</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_CHANGE_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumn</name></name><argument_list>(<argument><expr><name>oldColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewColumn</name></name><argument_list>(<argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>AlterTableAlterColumn</name></type> <name>parseAlterTableAlterColumnDataType</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Column</name></type> <name>oldColumn</name> <init>= <expr><call><name>columnIfTableExists</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>ifTableExists</name></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Column</name></type> <name>newColumn</name> <init>= <expr><call><name>parseColumnWithType</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>oldColumn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>oldColumn</name><operator>.</operator><name>isNullable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>newColumn</name><operator>.</operator><name>setNullable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>oldColumn</name><operator>.</operator><name>getVisible</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>newColumn</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name><name>oldColumn</name><operator>.</operator><name>getDefaultExpression</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>oldColumn</name><operator>.</operator><name>isGenerated</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>newColumn</name><operator>.</operator><name>setGeneratedExpression</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>newColumn</name><operator>.</operator><name>setDefaultExpression</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name><name>oldColumn</name><operator>.</operator><name>getOnUpdateExpression</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>newColumn</name><operator>.</operator><name>setOnUpdateExpression</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Sequence</name></type> <name>s</name> <init>= <expr><call><name><name>oldColumn</name><operator>.</operator><name>getSequence</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>newColumn</name><operator>.</operator><name>setIdentityOptions</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SequenceOptions</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>newColumn</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>oldColumn</name><operator>.</operator><name>isGeneratedAlways</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>c</name> <init>= <expr><call><name><name>oldColumn</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>newColumn</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAlterColumn</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>parseAlterColumnUsingIf</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ALTER_COLUMN_CHANGE_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOldColumn</name></name><argument_list>(<argument><expr><name>oldColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setNewColumn</name></name><argument_list>(<argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>AlterTableAlterColumn</name></type> <name>parseAlterTableAddColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>,
            <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLUMN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAlterColumn</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ADD_COLUMN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name>parseTableColumnDefinition</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parseTableColumnDefinition</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parseAlterColumnUsingIf</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"BEFORE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setAddBefore</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"AFTER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setAddAfter</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"FIRST"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setAddFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseAlterColumnUsingIf</name><parameter_list>(<parameter><decl><type><name>AlterTableAlterColumn</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>USING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setUsingExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>ConstraintActionType</name></type> <name>parseAction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ConstraintActionType</name></type> <name>result</name> <init>= <expr><call><name>parseCascadeOrRestrict</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name><name>ConstraintActionType</name><operator>.</operator><name>RESTRICT</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ConstraintActionType</name><operator>.</operator><name>SET_NULL</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>ConstraintActionType</name><operator>.</operator><name>SET_DEFAULT</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>ConstraintActionType</name></type> <name>parseCascadeOrRestrict</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CASCADE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ConstraintActionType</name><operator>.</operator><name>CASCADE</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"RESTRICT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ConstraintActionType</name><operator>.</operator><name>RESTRICT</name></name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DefineCommand</name></type> <name>parseTableConstraintIf</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifTableExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>constraintName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>comment</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CONSTRAINT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ifNotExists</name> <operator>=</operator> <call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>constraintName</name> <operator>=</operator> <call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>comment</name> <operator>=</operator> <call><name>readCommentIf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>AlterTableAddConstraint</name></type> <name>command</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>currentTokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>PRIMARY</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>AlterTableAddConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
                    <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ADD_CONSTRAINT_PRIMARY_KEY</name></name></expr></argument>, <argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"HASH"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPrimaryKeyHash</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIndexColumns</name></name><argument_list>(<argument><expr><call><name>parseIndexColumnList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>indexName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIndex</name></name><argument_list>(<argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>UNIQUE</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// MySQL compatibility</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>compatibility</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>indexDefinitionInCreateTable</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>compatibility</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>KEY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isToken</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>constraintName</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>AlterTableAddConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ADD_CONSTRAINT_UNIQUE</name></name></expr></argument>,
                    <argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIndexColumns</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIndexColumns</name></name><argument_list>(<argument><expr><call><name>parseIndexColumnList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>indexName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIndex</name></name><argument_list>(<argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>compatibility</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>USING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"BTREE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>FOREIGN</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>AlterTableAddConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
                    <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ADD_CONSTRAINT_REFERENTIAL</name></name></expr></argument>, <argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIndexColumns</name></name><argument_list>(<argument><expr><call><name>parseIndexColumnList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>indexName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIndex</name></name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>findIndex</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"REFERENCES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parseReferences</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CHECK</name></expr>:</case>
            <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <operator>new</operator> <call><name>AlterTableAddConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ADD_CONSTRAINT_CHECK</name></name></expr></argument>,
                    <argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCheckExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <if_stmt><if>if <condition>(<expr><name>constraintName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Mode</name></type> <name>mode</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>indexDefinitionInCreateTable</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>tokenIndex</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>KEY</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <comment type="line">// MySQL</comment>
                        <comment type="line">// need to read ahead, as it could be a column name</comment>
                        <if_stmt><if>if <condition>(<expr><call><name><name>DataType</name><operator>.</operator><name>getTypeByName</name></name><argument_list>(<argument><expr><name>currentToken</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>CreateIndex</name></type> <name>createIndex</name> <init>= <expr><operator>new</operator> <call><name>CreateIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>createIndex</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>createIndex</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>createIndex</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>createIndex</name><operator>.</operator><name>setIndexName</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name><name>createIndex</name><operator>.</operator><name>setIndexColumns</name></name><argument_list>(<argument><expr><call><name>parseIndexColumnList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// MySQL compatibility</comment>
                            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>USING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"BTREE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <return>return <expr><name>createIndex</name></expr>;</return>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <comment type="line">// known data type</comment>
                            <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>expectedList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>addMultipleExpected</name><argument_list>(<argument><expr><name>PRIMARY</name></expr></argument>, <argument><expr><name>UNIQUE</name></expr></argument>, <argument><expr><name>FOREIGN</name></expr></argument>, <argument><expr><name>CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></switch>
        <if_stmt><if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ADD_CONSTRAINT_PRIMARY_KEY</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOCHECK"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCheckExisting</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setCheckExisting</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfTableExists</name></name><argument_list>(<argument><expr><name>ifTableExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseReferences</name><parameter_list>(<parameter><decl><type><name>AlterTableAddConstraint</name></type> <name>command</name></decl></parameter>,
            <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setRefTableName</name></name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setRefIndexColumns</name></name><argument_list>(<argument><expr><call><name>parseIndexColumnList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>refTableName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setRefTableName</name></name><argument_list>(<argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refTableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setRefIndexColumns</name></name><argument_list>(<argument><expr><call><name>parseIndexColumnList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>indexName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setRefIndex</name></name><argument_list>(<argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <while>while <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDeleteAction</name></name><argument_list>(<argument><expr><call><name>parseAction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setUpdateAction</name></name><argument_list>(<argument><expr><call><name>parseAction</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>NOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"DEFERRABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DEFERRABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateLinkedTable</name></type> <name>parseCreateLinkedTable</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>temp</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>globalTemp</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CreateLinkedTable</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateLinkedTable</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTemporary</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setGlobalTemporary</name></name><argument_list>(<argument><expr><name>globalTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setForce</name></name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><call><name>readCommentIf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setDriver</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setUrl</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setUser</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>originalTable</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOriginalSchema</name></name><argument_list>(<argument><expr><name>originalTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>originalTable</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOriginalTable</name></name><argument_list>(<argument><expr><name>originalTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"EMIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"UPDATES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setEmitUpdates</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"READONLY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setReadOnly</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"FETCH_SIZE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setFetchSize</name></name><argument_list>(<argument><expr><call><name>readNonNegativeInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"AUTOCOMMIT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setAutoCommit</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"OFF"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setAutoCommit</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateTable</name></type> <name>parseCreateTable</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>temp</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>globalTemp</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>persistIndexes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&amp;&amp;</operator> <name>globalTemp</name> <operator>&amp;&amp;</operator> <call><name>equalsToken</name><argument_list>(<argument><expr><literal type="string">"SESSION"</literal></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// support weird syntax: declare global temporary table session.xy</comment>
            <comment type="line">// (...) not logged</comment>
            <expr_stmt><expr><name>schemaName</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>globalTemp</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CreateTable</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateTable</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPersistIndexes</name></name><argument_list>(<argument><expr><name>persistIndexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTemporary</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setGlobalTemporary</name></name><argument_list>(<argument><expr><name>globalTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><call><name>readCommentIf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name>parseTableColumnDefinition</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnum</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ModeEnum</name><operator>.</operator><name>MySQL</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>parseCreateTableMySQLTableOptions</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ENGINE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableEngine</name></name><argument_list>(<argument><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTableEngineParams</name></name><argument_list>(<argument><expr><call><name>readTableEngineParams</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>temp</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>ON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOnCommitDrop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"ROWS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOnCommitTruncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>NOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"PERSISTENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPersistData</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"LOGGED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"TRANSACTIONAL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setTransactional</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>persistIndexes</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>NOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"PERSISTENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setPersistData</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"HIDDEN"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setHidden</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"SORTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setQuery</name></name><argument_list>(<argument><expr><call><name>parseQuery</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>WITH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setWithNoData</name></name><argument_list>(<argument><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><literal type="string">"DATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseTableColumnDefinition</name><parameter_list>(<parameter><decl><type><name>CommandWithColumns</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>forCreateTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DefineCommand</name></type> <name>c</name> <init>= <expr><call><name>parseTableConstraintIf</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addConstraintCommand</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>forCreateTable</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>currentTokenType</name> <operator>==</operator> <name>COMMA</name> <operator>||</operator> <name>currentTokenType</name> <operator>==</operator> <name>CLOSE_PAREN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_UNKNOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name>parseColumnForTable</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>hasIdentityOptions</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>column</name><operator>.</operator><name>isPrimaryKey</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addConstraintCommand</name></name><argument_list>(<argument><expr><call><name>newPrimaryKeyConstraintCommand</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>readColumnConstraints</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new alter table command.
     *
     * @param session the session
     * @param schema the schema
     * @param tableName the table
     * @param column the column
     * @return the command
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AlterTableAddConstraint</name></type> <name>newPrimaryKeyConstraintCommand</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setPrimaryKey</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AlterTableAddConstraint</name></type> <name>pk</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAddConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
                <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ADD_CONSTRAINT_PRIMARY_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pk</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pk</name><operator>.</operator><name>setIndexColumns</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>IndexColumn</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>IndexColumn</name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>pk</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readColumnConstraints</name><parameter_list>(<parameter><decl><type><name>CommandWithColumns</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>comment</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasPrimaryKey</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>, <decl><type ref="prev"/><name>hasNotNull</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NullConstraintType</name></type> <name>nullType</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Mode</name></type> <name>mode</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>constraintName</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CONSTRAINT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>constraintName</name> <operator>=</operator> <call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>comment</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>comment</name> <operator>=</operator> <call><name>readCommentIf</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// Compatibility: COMMENT may be specified appear after some constraint</comment>
                <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>constraintName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasPrimaryKey</name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>PRIMARY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>hasPrimaryKey</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>hash</name> <init>= <expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"HASH"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>AlterTableAddConstraint</name></type> <name>pk</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAddConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
                        <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ADD_CONSTRAINT_PRIMARY_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>pk</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pk</name><operator>.</operator><name>setPrimaryKeyHash</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pk</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pk</name><operator>.</operator><name>setIndexColumns</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>IndexColumn</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>IndexColumn</name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addConstraintCommand</name></name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>UNIQUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>AlterTableAddConstraint</name></type> <name>unique</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAddConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
                        <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ADD_CONSTRAINT_UNIQUE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>unique</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>unique</name><operator>.</operator><name>setIndexColumns</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>IndexColumn</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>IndexColumn</name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>unique</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addConstraintCommand</name></name><argument_list>(<argument><expr><name>unique</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>hasNotNull</name>
                    <operator>&amp;&amp;</operator> <operator>(</operator><name>nullType</name> <operator>=</operator> <call><name>parseNotNullConstraint</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name><name>NullConstraintType</name><operator>.</operator><name>NO_NULL_CONSTRAINT_FOUND</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>hasNotNull</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>nullType</name> <operator>==</operator> <name><name>NullConstraintType</name><operator>.</operator><name>NULL_IS_NOT_ALLOWED</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setNullable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nullType</name> <operator>==</operator> <name><name>NullConstraintType</name><operator>.</operator><name>NULL_IS_ALLOWED</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isIdentity</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_MUST_NOT_BE_NULLABLE_1</name></name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setNullable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CHECK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>AlterTableAddConstraint</name></type> <name>check</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAddConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
                        <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ADD_CONSTRAINT_CHECK</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>check</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>check</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>check</name><operator>.</operator><name>setCheckExpression</name></name><argument_list>(<argument><expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addConstraintCommand</name></name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"REFERENCES"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>AlterTableAddConstraint</name></type> <name>ref</name> <init>= <expr><operator>new</operator> <call><name>AlterTableAddConstraint</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
                        <argument><expr><name><name>CommandInterface</name><operator>.</operator><name>ALTER_TABLE_ADD_CONSTRAINT_REFERENTIAL</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ref</name><operator>.</operator><name>setConstraintName</name></name><argument_list>(<argument><expr><name>constraintName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ref</name><operator>.</operator><name>setIndexColumns</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>IndexColumn</name><index>[]</index></name> <block>{ <expr><operator>new</operator> <call><name>IndexColumn</name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ref</name><operator>.</operator><name>setTableName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>parseReferences</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>addConstraintCommand</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>constraintName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>getIdentityOptions</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name>parseCompatibilityIdentity</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>parseCompatibilityIdentity</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>Mode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>autoIncrementClause</name></name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"AUTO_INCREMENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>parseCompatibilityIdentityOptions</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>identityClause</name></name> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>parseCompatibilityIdentityOptions</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>parseCreateTableMySQLTableOptions</name><parameter_list>(<parameter><decl><type><name>CreateTable</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>requireNext</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"AUTO_INCREMENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>value</name> <init>= <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <label><name>set</name>:</label> <block>{<block_content>
                    <decl_stmt><decl><type><name>AlterTableAddConstraint</name></type> <name>primaryKey</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>getPrimaryKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>primaryKey</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>IndexColumn</name></type> <name>ic</name> <range>: <expr><call><name><name>primaryKey</name><operator>.</operator><name>getIndexColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                            <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><name><name>ic</name><operator>.</operator><name>columnName</name></name></expr></init></decl>;</decl_stmt>
                            <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name> <range>: <expr><call><name><name>command</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                    <decl_stmt><decl><type><name>SequenceOptions</name></type> <name>options</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>getIdentityOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <if_stmt><if>if <condition>(<expr><name>options</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>setStartValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <break>break <name>set</name>;</break>
                                    </block_content>}</block></if></if_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></for>
                    </block_content>}</block></if></if_stmt>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><literal type="string">"AUTO_INCREMENT PRIMARY KEY"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHARACTER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHARSET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLLATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>readMySQLCharset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHARACTER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readMySQLCharset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COLLATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readMySQLCharset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"CHARSET"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readMySQLCharset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ENGINE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ROW_FORMAT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>requireNext</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>requireNext</name> <operator>=</operator> <call><name>readIf</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readMySQLCharset</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Enumeration describing null constraints
     */</comment>
    <enum><specifier>private</specifier> enum <name>NullConstraintType</name> <block>{
        <decl><name>NULL_IS_ALLOWED</name></decl>, <decl><name>NULL_IS_NOT_ALLOWED</name></decl>, <decl><name>NO_NULL_CONSTRAINT_FOUND</name></decl>
    }</block></enum>

    <function><type><specifier>private</specifier> <name>NullConstraintType</name></type> <name>parseNotNullConstraint</name><parameter_list>(<parameter><decl><type><name>NullConstraintType</name></type> <name>nullConstraint</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nullConstraint</name> <operator>==</operator> <name><name>NullConstraintType</name><operator>.</operator><name>NO_NULL_CONSTRAINT_FOUND</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nullConstraint</name> <operator>=</operator> <call><name>parseNotNullConstraint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>nullConstraint</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>NullConstraintType</name></type> <name>parseNotNullConstraint</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>NullConstraintType</name></type> <name>nullConstraint</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>NOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nullConstraint</name> <operator>=</operator> <name><name>NullConstraintType</name><operator>.</operator><name>NULL_IS_NOT_ALLOWED</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nullConstraint</name> <operator>=</operator> <name><name>NullConstraintType</name><operator>.</operator><name>NULL_IS_ALLOWED</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name><name>NullConstraintType</name><operator>.</operator><name>NO_NULL_CONSTRAINT_FOUND</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnum</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ModeEnum</name><operator>.</operator><name>Oracle</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nullConstraint</name> <operator>=</operator> <call><name>parseNotNullCompatibility</name><argument_list>(<argument><expr><name>nullConstraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>nullConstraint</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>NullConstraintType</name></type> <name>parseNotNullCompatibility</name><parameter_list>(<parameter><decl><type><name>NullConstraintType</name></type> <name>nullConstraint</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"ENABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VALIDATE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOVALIDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// Turn off constraint, allow NULLs</comment>
                <expr_stmt><expr><name>nullConstraint</name> <operator>=</operator> <name><name>NullConstraintType</name><operator>.</operator><name>NULL_IS_ALLOWED</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"DISABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Turn off constraint, allow NULLs</comment>
            <expr_stmt><expr><name>nullConstraint</name> <operator>=</operator> <name><name>NullConstraintType</name><operator>.</operator><name>NULL_IS_ALLOWED</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"VALIDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>readIf</name><argument_list>(<argument><expr><literal type="string">"NOVALIDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>nullConstraint</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateSynonym</name></type> <name>parseCreateSynonym</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>orReplace</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ifNotExists</name> <init>= <expr><call><name>readIfNotExists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>synonymSchema</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>FOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name>readIdentifierWithSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Schema</name></type> <name>targetSchema</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CreateSynonym</name></type> <name>command</name> <init>= <expr><operator>new</operator> <call><name>CreateSynonym</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>synonymSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSynonymFor</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setSynonymForSchema</name></name><argument_list>(<argument><expr><name>targetSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><call><name>readCommentIf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setIfNotExists</name></name><argument_list>(<argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setOrReplace</name></name><argument_list>(<argument><expr><name>orReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCompareType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tokenType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>tokenType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>EQUAL</name></expr>:</case>
            <return>return <expr><name><name>Comparison</name><operator>.</operator><name>EQUAL</name></name></expr>;</return>
        <case>case <expr><name>BIGGER_EQUAL</name></expr>:</case>
            <return>return <expr><name><name>Comparison</name><operator>.</operator><name>BIGGER_EQUAL</name></name></expr>;</return>
        <case>case <expr><name>BIGGER</name></expr>:</case>
            <return>return <expr><name><name>Comparison</name><operator>.</operator><name>BIGGER</name></name></expr>;</return>
        <case>case <expr><name>SMALLER</name></expr>:</case>
            <return>return <expr><name><name>Comparison</name><operator>.</operator><name>SMALLER</name></name></expr>;</return>
        <case>case <expr><name>SMALLER_EQUAL</name></expr>:</case>
            <return>return <expr><name><name>Comparison</name><operator>.</operator><name>SMALLER_EQUAL</name></name></expr>;</return>
        <case>case <expr><name>NOT_EQUAL</name></expr>:</case>
            <return>return <expr><name><name>Comparison</name><operator>.</operator><name>NOT_EQUAL</name></name></expr>;</return>
        <case>case <expr><name>SPATIAL_INTERSECTS</name></expr>:</case>
            <return>return <expr><name><name>Comparison</name><operator>.</operator><name>SPATIAL_INTERSECTS</name></name></expr>;</return>
        <default>default:</default>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add double quotes around an identifier if required.
     *
     * @param s the identifier
     * @param sqlFlags formatting flags
     * @return the quoted identifier
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>quoteIdentifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">"\"\""</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sqlFlags</name> <operator>&amp;</operator> <name><name>HasSQL</name><operator>.</operator><name>QUOTE_ONLY_WHEN_REQUIRED</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>ParserUtil</name><operator>.</operator><name>isSimpleIdentifier</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>s</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLiteralsChecked</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>literalsChecked</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>literalsChecked</name></name> <operator>=</operator> <name>literalsChecked</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRightsChecked</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>rightsChecked</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rightsChecked</name></name> <operator>=</operator> <name>rightsChecked</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSuppliedParameters</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Parameter</name></argument>&gt;</argument_list></name></type> <name>suppliedParameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>suppliedParameters</name></name> <operator>=</operator> <name>suppliedParameters</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse a SQL code snippet that represents an expression.
     *
     * @param sql the code snippet
     * @return the expression object
     */</comment>
    <function><type><specifier>public</specifier> <name>Expression</name></type> <name>parseExpression</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>parameters</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse a SQL code snippet that represents an expression for a domain constraint.
     *
     * @param sql the code snippet
     * @return the expression object
     */</comment>
    <function><type><specifier>public</specifier> <name>Expression</name></type> <name>parseDomainConstraintExpression</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>parameters</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>parseDomainConstraint</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <return>return <expr><call><name>readExpression</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block> <finally>finally <block>{<block_content>
            <expr_stmt><expr><name>parseDomainConstraint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse a SQL code snippet that represents a table name.
     *
     * @param sql the code snippet
     * @return the table object
     */</comment>
    <function><type><specifier>public</specifier> <name>Table</name></type> <name>parseTableName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>parameters</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>readTableOrView</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses a list of column names or numbers in parentheses.
     *
     * @param sql the source SQL
     * @param offset the initial offset
     * @return the array of column names ({@code String[]}) or numbers
     *         ({@code int[]})
     * @throws DbException on syntax error
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>parseColumnList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>setTokenIndex</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>OPEN_PAREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>readIf</name><argument_list>(<argument><expr><name>CLOSE_PAREN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Utils</name><operator>.</operator><name>EMPTY_INT_ARRAY</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isIdentifier</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isIdentifier</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <return>return <expr><call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>currentTokenType</name> <operator>==</operator> <name>LITERAL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>readIfMore</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>array</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>array</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><call><name>getSyntaxError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the last parse index.
     *
     * @return the last parse index
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLastParseIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>StringUtils</name><operator>.</operator><name>addAsterisk</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>, <argument><expr><call><name><name>token</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
