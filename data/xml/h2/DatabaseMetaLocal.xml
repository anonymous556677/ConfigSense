<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/jdbc/meta/DatabaseMetaLocal.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>meta</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>DatabaseMetaData</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>Help</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>Constraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintActionType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintReferential</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintUnique</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Mode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Right</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>CompareLike</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mode</name><operator>.</operator><name>DefaultNullOrdering</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SimpleResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>FunctionAlias</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>FunctionAlias</name><operator>.</operator><name>JavaMethod</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>UserDefinedFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>IndexColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableSynonym</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>MathUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBigint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBoolean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueInteger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueSmallint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueToObjectConverter2</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueVarchar</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Local implementation of database meta information.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>DatabaseMetaLocal</name> <super_list><extends>extends <super><name>DatabaseMetaLocalBase</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Value</name></type> <name>YES</name> <init>= <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Value</name></type> <name>NO</name> <init>= <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>BEST_ROW_SESSION</name> <init>= <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>bestRowSession</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>BEST_ROW_NOT_PSEUDO</name> <init>= <expr><call><name><name>ValueSmallint</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>bestRowNotPseudo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueInteger</name></type> <name>COLUMN_NO_NULLS</name> <init>= <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>DatabaseMetaData</name><operator>.</operator><name>columnNoNulls</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>COLUMN_NO_NULLS_SMALL</name> <init>= <expr><call><name><name>ValueSmallint</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>columnNoNulls</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueInteger</name></type> <name>COLUMN_NULLABLE</name> <init>= <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>DatabaseMetaData</name><operator>.</operator><name>columnNullable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>COLUMN_NULLABLE_UNKNOWN_SMALL</name> <init>= <expr><call><name><name>ValueSmallint</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>columnNullableUnknown</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>IMPORTED_KEY_CASCADE</name> <init>= <expr><call><name><name>ValueSmallint</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>importedKeyCascade</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>IMPORTED_KEY_RESTRICT</name> <init>= <expr><call><name><name>ValueSmallint</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>importedKeyRestrict</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>IMPORTED_KEY_DEFAULT</name> <init>= <expr><call><name><name>ValueSmallint</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>importedKeySetDefault</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>IMPORTED_KEY_SET_NULL</name> <init>= <expr><call><name><name>ValueSmallint</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>importedKeySetNull</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>IMPORTED_KEY_NOT_DEFERRABLE</name> <init>= <expr><call><name><name>ValueSmallint</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>importedKeyNotDeferrable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>PROCEDURE_COLUMN_IN</name> <init>= <expr><call><name><name>ValueSmallint</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>procedureColumnIn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>PROCEDURE_COLUMN_RETURN</name> <init>= <expr><call><name><name>ValueSmallint</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>procedureColumnReturn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>PROCEDURE_NO_RESULT</name> <init>= <expr><call><name><name>ValueSmallint</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>procedureNoResult</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>PROCEDURE_RETURNS_RESULT</name> <init>= <expr><call><name><name>ValueSmallint</name>
            <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>procedureReturnsResult</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>TABLE_INDEX_HASHED</name> <init>= <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>DatabaseMetaData</name><operator>.</operator><name>tableIndexHashed</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>TABLE_INDEX_OTHER</name> <init>= <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>DatabaseMetaData</name><operator>.</operator><name>tableIndexOther</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// This list must be ordered</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>TABLE_TYPES</name> <init>= <expr><block>{ <expr><literal type="string">"BASE TABLE"</literal></expr>, <expr><literal type="string">"GLOBAL TEMPORARY"</literal></expr>, <expr><literal type="string">"LOCAL TEMPORARY"</literal></expr>, <expr><literal type="string">"SYNONYM"</literal></expr>,
            <expr><literal type="string">"VIEW"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>TYPE_NULLABLE</name> <init>= <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>typeNullable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueSmallint</name></type> <name>TYPE_SEARCHABLE</name> <init>= <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>typeSearchable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Value</name></type> <name>NO_USAGE_RESTRICTIONS</name> <init>= <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"NO_USAGE_RESTRICTIONS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SessionLocal</name></type> <name>session</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DatabaseMetaLocal</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>DefaultNullOrdering</name></type> <name>defaultNullOrdering</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultNullOrdering</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getSQLKeywords</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="number">103</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>( <comment type="line">//</comment>
                <argument><expr><literal type="string">"CURRENT_CATALOG,"</literal> <comment type="line">//</comment>
                        <operator>+</operator> <literal type="string">"CURRENT_SCHEMA,"</literal> <comment type="line">//</comment>
                        <operator>+</operator> <literal type="string">"GROUPS,"</literal> <comment type="line">//</comment>
                        <operator>+</operator> <literal type="string">"IF,ILIKE,"</literal> <comment type="line">//</comment>
                        <operator>+</operator> <literal type="string">"KEY,"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Mode</name></type> <name>mode</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"LIMIT,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>minusIsExcept</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"MINUS,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>( <comment type="line">//</comment>
                <argument><expr><literal type="string">"OFFSET,"</literal> <comment type="line">//</comment>
                        <operator>+</operator> <literal type="string">"QUALIFY,"</literal> <comment type="line">//</comment>
                        <operator>+</operator> <literal type="string">"REGEXP,ROWNUM,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>topInSelect</name></name> <operator>||</operator> <name><name>mode</name><operator>.</operator><name>topInDML</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"TOP,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"_ROWID_"</literal></expr></argument>)</argument_list></call> <comment type="line">//</comment>
                <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getNumericFunctions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getFunctions</name><argument_list>(<argument><expr><literal type="string">"Functions (Numeric)"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getStringFunctions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getFunctions</name><argument_list>(<argument><expr><literal type="string">"Functions (String)"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getSystemFunctions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getFunctions</name><argument_list>(<argument><expr><literal type="string">"Functions (System)"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getTimeDateFunctions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getFunctions</name><argument_list>(<argument><expr><literal type="string">"Functions (Time and Date)"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getFunctions</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>section</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>Help</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>builder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>topic</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>spaceIndex</name> <init>= <expr><call><name><name>topic</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>spaceIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <comment type="line">// remove 'Function' from 'INSERT Function'</comment>
                        <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>trimSubstring</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>spaceIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getSearchStringEscape</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSettings</name><argument_list>()</argument_list></call><operator>.</operator><name>defaultEscape</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getProcedures</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaPattern</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>procedureNamePattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PROCEDURE_CAT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PROCEDURE_SCHEM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PROCEDURE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"RESERVED1"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"RESERVED2"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"RESERVED3"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PROCEDURE_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SPECIFIC_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CompareLike</name></type> <name>procedureLike</name> <init>= <expr><call><name>getLike</name><argument_list>(<argument><expr><name>procedureNamePattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>s</name> <range>: <expr><call><name>getSchemasForPattern</name><argument_list>(<argument><expr><name>schemaPattern</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>schemaValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>UserDefinedFunction</name></type> <name>userDefinedFunction</name> <range>: <expr><call><name><name>s</name><operator>.</operator><name>getAllFunctionsAndAggregates</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>procedureName</name> <init>= <expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>procedureLike</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>procedureLike</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>procedureName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>procedureNameValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>procedureName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>userDefinedFunction</name> <operator>instanceof</operator> <name>FunctionAlias</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>JavaMethod</name><index>[]</index></name></type> <name>methods</name></decl>;</decl_stmt>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><name>methods</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>FunctionAlias</name><operator>)</operator> <name>userDefinedFunction</name><operator>)</operator><operator>.</operator><call><name>getJavaMethods</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></catch></try>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>methods</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>JavaMethod</name></type> <name>method</name> <init>= <expr><name><name>methods</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getDataType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>getProceduresAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>procedureNameValue</name></expr></argument>,
                                <argument><expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><ternary><condition><expr><name>typeInfo</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>typeInfo</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name></expr> ?</condition><then> <expr><name>PROCEDURE_RETURNS_RESULT</name></expr>
                                        </then><else>: <expr><name>PROCEDURE_NO_RESULT</name></expr></else></ternary></expr></argument>,
                                <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>procedureName</name> <operator>+</operator> <literal type="char">'_'</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>getProceduresAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>procedureNameValue</name></expr></argument>,
                            <argument><expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PROCEDURE_RETURNS_RESULT</name></expr></argument>, <argument><expr><name>procedureNameValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <comment type="line">// PROCEDURE_CAT, PROCEDURE_SCHEM, PROCEDURE_NAME, SPECIFIC_ NAME</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>getProceduresAdd</name><parameter_list>(<parameter><decl><type><name>SimpleResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>catalogValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>schemaValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>procedureNameValue</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>comment</name></decl></parameter>, <parameter><decl><type><name>ValueSmallint</name></type> <name>procedureType</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>specificNameValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(
                <comment type="line">// PROCEDURE_CAT</comment>
                <argument><expr><name>catalogValue</name></expr></argument>,
                <comment type="line">// PROCEDURE_SCHEM</comment>
                <argument><expr><name>schemaValue</name></expr></argument>,
                <comment type="line">// PROCEDURE_NAME</comment>
                <argument><expr><name>procedureNameValue</name></expr></argument>,
                <comment type="line">// RESERVED1</comment>
                <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                <comment type="line">// RESERVED2</comment>
                <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                <comment type="line">// RESERVED3</comment>
                <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// PROCEDURE_TYPE</comment>
                <argument><expr><name>procedureType</name></expr></argument>,
                <comment type="line">// SPECIFIC_NAME</comment>
                <argument><expr><name>specificNameValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getProcedureColumns</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaPattern</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>procedureNamePattern</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>columnNamePattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PROCEDURE_CAT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PROCEDURE_SCHEM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PROCEDURE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"COLUMN_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"NULLABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"COLUMN_DEF"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SQL_DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SQL_DATETIME_SUB"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"CHAR_OCTET_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"ORDINAL_POSITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"IS_NULLABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SPECIFIC_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CompareLike</name></type> <name>procedureLike</name> <init>= <expr><call><name>getLike</name><argument_list>(<argument><expr><name>procedureNamePattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>s</name> <range>: <expr><call><name>getSchemasForPattern</name><argument_list>(<argument><expr><name>schemaPattern</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>schemaValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>UserDefinedFunction</name></type> <name>userDefinedFunction</name> <range>: <expr><call><name><name>s</name><operator>.</operator><name>getAllFunctionsAndAggregates</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>userDefinedFunction</name> <operator>instanceof</operator> <name>FunctionAlias</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>procedureName</name> <init>= <expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>procedureLike</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>procedureLike</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>procedureName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>procedureNameValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>procedureName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>JavaMethod</name><index>[]</index></name></type> <name>methods</name></decl>;</decl_stmt>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><name>methods</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>FunctionAlias</name><operator>)</operator> <name>userDefinedFunction</name><operator>)</operator><operator>.</operator><call><name>getJavaMethods</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></catch></try>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>methods</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>JavaMethod</name></type> <name>method</name> <init>= <expr><name><name>methods</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Value</name></type> <name>specificNameValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>procedureName</name> <operator>+</operator> <literal type="char">'_'</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getDataType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>typeInfo</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>typeInfo</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>getProcedureColumnAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>procedureNameValue</name></expr></argument>, <argument><expr><name>specificNameValue</name></expr></argument>,
                                <argument><expr><name>typeInfo</name></expr></argument>, <argument><expr><call><name><name>method</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPrimitive</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>columnList</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getColumnClasses</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>o</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><ternary><condition><expr><call><name><name>method</name><operator>.</operator><name>hasConnectionParam</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>columnList</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><name><name>columnList</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>getProcedureColumnAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>procedureNameValue</name></expr></argument>, <argument><expr><name>specificNameValue</name></expr></argument>,
                                <argument><expr><call><name><name>ValueToObjectConverter2</name><operator>.</operator><name>classToType</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>clazz</name><operator>.</operator><name>isPrimitive</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <comment type="line">// PROCEDURE_CAT, PROCEDURE_SCHEM, PROCEDURE_NAME, SPECIFIC_NAME, return</comment>
        <comment type="line">// value first</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>getProcedureColumnAdd</name><parameter_list>(<parameter><decl><type><name>SimpleResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>catalogValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>schemaValue</name></decl></parameter>,
            <parameter><decl><type><name>Value</name></type> <name>procedureNameValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>specificNameValue</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>notNull</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ordinal</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>valueType</name> <init>= <expr><call><name><name>type</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DataType</name></type> <name>dt</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><name>valueType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueInteger</name></type> <name>precisionValue</name> <init>= <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(
                <comment type="line">// PROCEDURE_CAT</comment>
                <argument><expr><name>catalogValue</name></expr></argument>,
                <comment type="line">// PROCEDURE_SCHEM</comment>
                <argument><expr><name>schemaValue</name></expr></argument>,
                <comment type="line">// PROCEDURE_NAME</comment>
                <argument><expr><name>procedureNameValue</name></expr></argument>,
                <comment type="line">// COLUMN_NAME</comment>
                <argument><expr><call><name>getString</name><argument_list>(<argument><expr><ternary><condition><expr><name>ordinal</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"RESULT"</literal></expr> </then><else>: <expr><literal type="string">"P"</literal> <operator>+</operator> <name>ordinal</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// COLUMN_TYPE</comment>
                <argument><expr><ternary><condition><expr><name>ordinal</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>PROCEDURE_COLUMN_RETURN</name></expr> </then><else>: <expr><name>PROCEDURE_COLUMN_IN</name></expr></else></ternary></expr></argument>,
                <comment type="line">// DATA_TYPE</comment>
                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>convertTypeToSQLType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// TYPE_NAME</comment>
                <argument><expr><call><name>getDataTypeName</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// PRECISION</comment>
                <argument><expr><name>precisionValue</name></expr></argument>,
                <comment type="line">// LENGTH</comment>
                <argument><expr><name>precisionValue</name></expr></argument>,
                <comment type="line">// SCALE</comment>
                <argument><expr><ternary><condition><expr><name><name>dt</name><operator>.</operator><name>supportsScale</name></name></expr> <comment type="line">//</comment>
                        ?</condition><then> <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertIntToShort</name></name><argument_list>(<argument><expr><name><name>dt</name><operator>.</operator><name>defaultScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                        </then><else>: <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></else></ternary></expr></argument>,
                <comment type="line">// RADIX</comment>
                <argument><expr><call><name>getRadix</name><argument_list>(<argument><expr><name>valueType</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// NULLABLE</comment>
                <argument><expr><ternary><condition><expr><name>notNull</name></expr> ?</condition><then> <expr><name>COLUMN_NO_NULLS_SMALL</name></expr> </then><else>: <expr><name>COLUMN_NULLABLE_UNKNOWN_SMALL</name></expr></else></ternary></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                <comment type="line">// COLUMN_DEF</comment>
                <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                <comment type="line">// SQL_DATA_TYPE</comment>
                <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                <comment type="line">// SQL_DATETIME_SUB</comment>
                <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                <comment type="line">// CHAR_OCTET_LENGTH</comment>
                <argument><expr><ternary><condition><expr><call><name><name>DataType</name><operator>.</operator><name>isBinaryStringType</name></name><argument_list>(<argument><expr><name>valueType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>DataType</name><operator>.</operator><name>isCharacterStringType</name></name><argument_list>(<argument><expr><name>valueType</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>precisionValue</name></expr>
                        </then><else>: <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></else></ternary></expr></argument>,
                <comment type="line">// ORDINAL_POSITION</comment>
                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ordinal</name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// IS_NULLABLE</comment>
                <argument><expr><name><name>ValueVarchar</name><operator>.</operator><name>EMPTY</name></name></expr></argument>,
                <comment type="line">// SPECIFIC_NAME</comment>
                <argument><expr><name>specificNameValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getTables</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaPattern</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableNamePattern</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>types</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_CAT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TYPE_CAT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TYPE_SCHEM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SELF_REFERENCING_COL_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"REF_GENERATION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>typesSet</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>types</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>typesSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>type</name> <range>: <expr><name>types</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>binarySearch</name></name><argument_list>(<argument><expr><name>TABLE_TYPES</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>typesSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>TABLE_TYPES</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>typesSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"BASE TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><call><name><name>typesSet</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>typesSet</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name>getSchemasForPattern</name><argument_list>(<argument><expr><name>schemaPattern</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>schemaValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>object</name> <range>: <expr><call><name>getTablesForPattern</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableNamePattern</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>tableName</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>object</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>Table</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>Table</name><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>t</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>getTablesAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>typesSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>getTablesAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>TableSynonym</name><operator>)</operator> <name>object</name><operator>)</operator><operator>.</operator><call><name>getSynonymFor</name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>typesSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <comment type="line">// TABLE_TYPE, TABLE_CAT, TABLE_SCHEM, TABLE_NAME</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>getTablesAdd</name><parameter_list>(<parameter><decl><type><name>SimpleResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>catalogValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>schemaValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>t</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>synonym</name></decl></parameter>, <parameter><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>typesSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><name>synonym</name></expr> ?</condition><then> <expr><literal type="string">"SYNONYM"</literal></expr> </then><else>: <expr><call><name><name>t</name><operator>.</operator><name>getSQLTableType</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>typesSet</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>typesSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(
                <comment type="line">// TABLE_CAT</comment>
                <argument><expr><name>catalogValue</name></expr></argument>,
                <comment type="line">// TABLE_SCHEM</comment>
                <argument><expr><name>schemaValue</name></expr></argument>,
                <comment type="line">// TABLE_NAME</comment>
                <argument><expr><name>tableName</name></expr></argument>,
                <comment type="line">// TABLE_TYPE</comment>
                <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// TYPE_CAT</comment>
                <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                <comment type="line">// TYPE_SCHEM</comment>
                <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                <comment type="line">// TYPE_NAME</comment>
                <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                <comment type="line">// SELF_REFERENCING_COL_NAME</comment>
                <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                <comment type="line">// REF_GENERATION</comment>
                <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getSchemas</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getSchemas</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getCatalogs</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_CAT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShortName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getTableTypes</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Order by TABLE_TYPE</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"BASE TABLE"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"GLOBAL TEMPORARY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"LOCAL TEMPORARY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"SYNONYM"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getColumns</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaPattern</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableNamePattern</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>columnNamePattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_CAT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"COLUMN_SIZE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"BUFFER_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"DECIMAL_DIGITS"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"NUM_PREC_RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"NULLABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"COLUMN_DEF"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SQL_DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SQL_DATETIME_SUB"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"CHAR_OCTET_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"ORDINAL_POSITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"IS_NULLABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SCOPE_CATALOG"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SCOPE_SCHEMA"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SCOPE_TABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SOURCE_DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"IS_AUTOINCREMENT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"IS_GENERATEDCOLUMN"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CompareLike</name></type> <name>columnLike</name> <init>= <expr><call><name>getLike</name><argument_list>(<argument><expr><name>columnNamePattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name>getSchemasForPattern</name><argument_list>(<argument><expr><name>schemaPattern</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>schemaValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>object</name> <range>: <expr><call><name>getTablesForPattern</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableNamePattern</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>tableName</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>object</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>Table</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>Table</name><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>t</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>getColumnsAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>columnLike</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>TableSynonym</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>TableSynonym</name><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getSynonymFor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>getColumnsAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>columnLike</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <comment type="line">// TABLE_CAT, TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>getColumnsAdd</name><parameter_list>(<parameter><decl><type><name>SimpleResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>catalogValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>schemaValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>t</name></decl></parameter>,
            <parameter><decl><type><name>CompareLike</name></type> <name>columnLike</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ordinal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Column</name></type> <name>c</name> <range>: <expr><call><name><name>t</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>c</name><operator>.</operator><name>getVisible</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>ordinal</name><operator>++</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>columnLike</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>columnLike</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>TypeInfo</name></type> <name>type</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueInteger</name></type> <name>precision</name> <init>= <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>nullable</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>isNullable</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>isGenerated</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>isGenerated</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(
                    <comment type="line">// TABLE_CAT</comment>
                    <argument><expr><name>catalogValue</name></expr></argument>,
                    <comment type="line">// TABLE_SCHEM</comment>
                    <argument><expr><name>schemaValue</name></expr></argument>,
                    <comment type="line">// TABLE_NAME</comment>
                    <argument><expr><name>tableName</name></expr></argument>,
                    <comment type="line">// COLUMN_NAME</comment>
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// DATA_TYPE</comment>
                    <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>convertTypeToSQLType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// TYPE_NAME</comment>
                    <argument><expr><call><name>getDataTypeName</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// COLUMN_SIZE</comment>
                    <argument><expr><name>precision</name></expr></argument>,
                    <comment type="line">// BUFFER_LENGTH</comment>
                    <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                    <comment type="line">// DECIMAL_DIGITS</comment>
                    <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// NUM_PREC_RADIX</comment>
                    <argument><expr><call><name>getRadix</name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// NULLABLE</comment>
                    <argument><expr><ternary><condition><expr><name>nullable</name></expr> ?</condition><then> <expr><name>COLUMN_NULLABLE</name></expr> </then><else>: <expr><name>COLUMN_NO_NULLS</name></expr></else></ternary></expr></argument>,
                    <comment type="line">// REMARKS</comment>
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// COLUMN_DEF</comment>
                    <argument><expr><ternary><condition><expr><name>isGenerated</name></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getDefaultSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                    <comment type="line">// SQL_DATA_TYPE (unused)</comment>
                    <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                    <comment type="line">// SQL_DATETIME_SUB (unused)</comment>
                    <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                    <comment type="line">// CHAR_OCTET_LENGTH</comment>
                    <argument><expr><name>precision</name></expr></argument>,
                    <comment type="line">// ORDINAL_POSITION</comment>
                    <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ordinal</name></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// IS_NULLABLE</comment>
                    <argument><expr><ternary><condition><expr><name>nullable</name></expr> ?</condition><then> <expr><name>YES</name></expr> </then><else>: <expr><name>NO</name></expr></else></ternary></expr></argument>,
                    <comment type="line">// SCOPE_CATALOG</comment>
                    <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                    <comment type="line">// SCOPE_SCHEMA</comment>
                    <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                    <comment type="line">// SCOPE_TABLE</comment>
                    <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                    <comment type="line">// SOURCE_DATA_TYPE</comment>
                    <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                    <comment type="line">// IS_AUTOINCREMENT</comment>
                    <argument><expr><ternary><condition><expr><call><name><name>c</name><operator>.</operator><name>isIdentity</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>YES</name></expr> </then><else>: <expr><name>NO</name></expr></else></ternary></expr></argument>,
                    <comment type="line">// IS_GENERATEDCOLUMN</comment>
                    <argument><expr><ternary><condition><expr><name>isGenerated</name></expr> ?</condition><then> <expr><name>YES</name></expr> </then><else>: <expr><name>NO</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getColumnPrivileges</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnNamePattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>checkClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_CAT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"GRANTOR"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"GRANTEE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PRIVILEGE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"IS_GRANTABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CompareLike</name></type> <name>columnLike</name> <init>= <expr><call><name>getLike</name><argument_list>(<argument><expr><name>columnNamePattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Right</name></type> <name>r</name> <range>: <expr><call><name><name>db</name><operator>.</operator><name>getAllRights</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>DbObject</name></type> <name>object</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantedObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>object</name> <operator>instanceof</operator> <name>Table</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>Table</name><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>t</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Schema</name></type> <name>s</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>addPrivileges</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getGrantee</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getRightMask</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columnLike</name></expr></argument>,
                    <argument><expr><call><name><name>t</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="line">// COLUMN_NAME, PRIVILEGE</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getTablePrivileges</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaPattern</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableNamePattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_CAT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"GRANTOR"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"GRANTEE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PRIVILEGE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"IS_GRANTABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CompareLike</name></type> <name>schemaLike</name> <init>= <expr><call><name>getLike</name><argument_list>(<argument><expr><name>schemaPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CompareLike</name></type> <name>tableLike</name> <init>= <expr><call><name>getLike</name><argument_list>(<argument><expr><name>tableNamePattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Right</name></type> <name>r</name> <range>: <expr><call><name><name>db</name><operator>.</operator><name>getAllRights</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>DbObject</name></type> <name>object</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantedObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>object</name> <operator>instanceof</operator> <name>Table</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><operator>(</operator><name>Table</name><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tableLike</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>tableLike</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>schemaName</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>schemaPattern</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>schemaPattern</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>!=</operator> <call><name><name>db</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>schemaLike</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>addPrivileges</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getGrantee</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getRightMask</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="line">// TABLE_CAT, TABLE_SCHEM, TABLE_NAME, PRIVILEGE</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addPrivileges</name><parameter_list>(<parameter><decl><type><name>SimpleResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>catalogValue</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>,
            <parameter><decl><type><name>DbObject</name></type> <name>grantee</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightMask</name></decl></parameter>, <parameter><decl><type><name>CompareLike</name></type> <name>columnLike</name></decl></parameter>, <parameter><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Value</name></type> <name>schemaValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>tableValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>granteeValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isAdmin</name> <init>= <expr><call><name><name>grantee</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>DbObject</name><operator>.</operator><name>USER</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>User</name><operator>)</operator> <name>grantee</name><operator>)</operator><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rightMask</name> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>SELECT</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addPrivilege</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>tableValue</name></expr></argument>, <argument><expr><name>granteeValue</name></expr></argument>, <argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><name>isAdmin</name></expr></argument>, <argument><expr><name>columnLike</name></expr></argument>,
                    <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rightMask</name> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>INSERT</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addPrivilege</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>tableValue</name></expr></argument>, <argument><expr><name>granteeValue</name></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><name>isAdmin</name></expr></argument>, <argument><expr><name>columnLike</name></expr></argument>,
                    <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rightMask</name> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>UPDATE</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addPrivilege</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>tableValue</name></expr></argument>, <argument><expr><name>granteeValue</name></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><name>isAdmin</name></expr></argument>, <argument><expr><name>columnLike</name></expr></argument>,
                    <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rightMask</name> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>DELETE</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addPrivilege</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>tableValue</name></expr></argument>, <argument><expr><name>granteeValue</name></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><name>isAdmin</name></expr></argument>, <argument><expr><name>columnLike</name></expr></argument>,
                    <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addPrivilege</name><parameter_list>(<parameter><decl><type><name>SimpleResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>catalogValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>schemaValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>tableValue</name></decl></parameter>,
            <parameter><decl><type><name>Value</name></type> <name>granteeValue</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isAdmin</name></decl></parameter>, <parameter><decl><type><name>CompareLike</name></type> <name>columnLike</name></decl></parameter>, <parameter><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>columns</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(
                    <comment type="line">// TABLE_CAT</comment>
                    <argument><expr><name>catalogValue</name></expr></argument>,
                    <comment type="line">// TABLE_SCHEM</comment>
                    <argument><expr><name>schemaValue</name></expr></argument>,
                    <comment type="line">// TABLE_NAME</comment>
                    <argument><expr><name>tableValue</name></expr></argument>,
                    <comment type="line">// GRANTOR</comment>
                    <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                    <comment type="line">// GRANTEE</comment>
                    <argument><expr><name>granteeValue</name></expr></argument>,
                    <comment type="line">// PRIVILEGE</comment>
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// IS_GRANTABLE</comment>
                    <argument><expr><ternary><condition><expr><name>isAdmin</name></expr> ?</condition><then> <expr><name>YES</name></expr> </then><else>: <expr><name>NO</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>columnLike</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>columnLike</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(
                        <comment type="line">// TABLE_CAT</comment>
                        <argument><expr><name>catalogValue</name></expr></argument>,
                        <comment type="line">// TABLE_SCHEM</comment>
                        <argument><expr><name>schemaValue</name></expr></argument>,
                        <comment type="line">// TABLE_NAME</comment>
                        <argument><expr><name>tableValue</name></expr></argument>,
                        <comment type="line">// COLUMN_NAME</comment>
                        <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// GRANTOR</comment>
                        <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                        <comment type="line">// GRANTEE</comment>
                        <argument><expr><name>granteeValue</name></expr></argument>,
                        <comment type="line">// PRIVILEGE</comment>
                        <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// IS_GRANTABLE</comment>
                        <argument><expr><ternary><condition><expr><name>isAdmin</name></expr> ?</condition><then> <expr><name>YES</name></expr> </then><else>: <expr><name>NO</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getBestRowIdentifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>nullable</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>checkClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SCOPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"COLUMN_SIZE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"BUFFER_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"DECIMAL_DIGITS"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PSEUDO_COLUMN"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>s</name> <range>: <expr><call><name>getSchemas</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>findTableOrView</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>t</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>constraints</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getConstraints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>PRIMARY_KEY</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ConstraintUnique</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getColumns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>IndexColumn</name></type> <name>ic</name> <init>= <expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Column</name></type> <name>c</name> <init>= <expr><name><name>ic</name><operator>.</operator><name>column</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>TypeInfo</name></type> <name>type</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>DataType</name></type> <name>dt</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(
                            <comment type="line">// SCOPE</comment>
                            <argument><expr><name>BEST_ROW_SESSION</name></expr></argument>,
                            <comment type="line">// COLUMN_NAME</comment>
                            <argument><expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// DATA_TYPE</comment>
                            <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>convertTypeToSQLType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// TYPE_NAME</comment>
                            <argument><expr><call><name>getDataTypeName</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// COLUMN_SIZE</comment>
                            <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// BUFFER_LENGTH</comment>
                            <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                            <comment type="line">// DECIMAL_DIGITS</comment>
                            <argument><expr><ternary><condition><expr><name><name>dt</name><operator>.</operator><name>supportsScale</name></name></expr> ?</condition><then> <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertIntToShort</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                                    </then><else>: <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></else></ternary></expr></argument>,
                            <comment type="line">// PSEUDO_COLUMN</comment>
                            <argument><expr><name>BEST_ROW_NOT_PSEUDO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <comment type="line">// Order by SCOPE (always the same)</comment>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Value</name></type> <name>getDataTypeName</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>typeInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getDeclaredTypeName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getPrimaryKeys</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>checkClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_CAT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"KEY_SEQ"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PK_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>s</name> <range>: <expr><call><name>getSchemas</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>findTableOrView</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>t</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>constraints</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getConstraints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>PRIMARY_KEY</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>schemaValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>tableValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>pkValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ConstraintUnique</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getColumns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition><incr/>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(
                            <comment type="line">// TABLE_CAT</comment>
                            <argument><expr><name>catalogValue</name></expr></argument>,
                            <comment type="line">// TABLE_SCHEM</comment>
                            <argument><expr><name>schemaValue</name></expr></argument>,
                            <comment type="line">// TABLE_NAME</comment>
                            <argument><expr><name>tableValue</name></expr></argument>,
                            <comment type="line">// COLUMN_NAME</comment>
                            <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// KEY_SEQ</comment>
                            <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <operator>++</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// PK_NAME</comment>
                            <argument><expr><name>pkValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <comment type="line">// COLUMN_NAME</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">3</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getImportedKeys</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><call><name>initCrossReferenceResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>s</name> <range>: <expr><call><name>getSchemas</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>findTableOrView</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>t</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>constraints</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getConstraints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ConstraintReferential</name></type> <name>fk</name> <init>= <expr><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>fkTable</name> <init>= <expr><call><name><name>fk</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>fkTable</name> <operator>!=</operator> <name>t</name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>pkTable</name> <init>= <expr><call><name><name>fk</name><operator>.</operator><name>getRefTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addCrossReferenceResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><call><name><name>pkTable</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pkTable</name></expr></argument>,
                        <argument><expr><call><name><name>fkTable</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fkTable</name></expr></argument>, <argument><expr><name>fk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <comment type="line">// PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, KEY_SEQ</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getExportedKeys</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><call><name>initCrossReferenceResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>s</name> <range>: <expr><call><name>getSchemas</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>findTableOrView</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>t</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>constraints</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getConstraints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ConstraintReferential</name></type> <name>fk</name> <init>= <expr><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>pkTable</name> <init>= <expr><call><name><name>fk</name><operator>.</operator><name>getRefTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>pkTable</name> <operator>!=</operator> <name>t</name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>fkTable</name> <init>= <expr><call><name><name>fk</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addCrossReferenceResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><call><name><name>pkTable</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pkTable</name></expr></argument>,
                        <argument><expr><call><name><name>fkTable</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fkTable</name></expr></argument>, <argument><expr><name>fk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <comment type="line">// FKTABLE_CAT FKTABLE_SCHEM, FKTABLE_NAME, KEY_SEQ</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getCrossReference</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>primaryCatalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>primarySchema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>primaryTable</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>foreignCatalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>foreignSchema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>foreignTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>primaryTable</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"primaryTable"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>foreignTable</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"foreignTable"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><call><name>initCrossReferenceResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>primaryCatalog</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>foreignCatalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>s</name> <range>: <expr><call><name>getSchemas</name><argument_list>(<argument><expr><name>foreignSchema</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>findTableOrView</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>foreignTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>t</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>constraints</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getConstraints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ConstraintReferential</name></type> <name>fk</name> <init>= <expr><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>fkTable</name> <init>= <expr><call><name><name>fk</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>fkTable</name> <operator>!=</operator> <name>t</name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>pkTable</name> <init>= <expr><call><name><name>fk</name><operator>.</operator><name>getRefTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><call><name><name>pkTable</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>primaryTable</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Schema</name></type> <name>pkSchema</name> <init>= <expr><call><name><name>pkTable</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkSchema</name><argument_list>(<argument><expr><name>primarySchema</name></expr></argument>, <argument><expr><name>pkSchema</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>addCrossReferenceResult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><call><name><name>pkSchema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pkTable</name></expr></argument>,
                        <argument><expr><call><name><name>fkTable</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fkTable</name></expr></argument>, <argument><expr><name>fk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <comment type="line">// FKTABLE_CAT FKTABLE_SCHEM, FKTABLE_NAME, KEY_SEQ</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>SimpleResult</name></type> <name>initCrossReferenceResult</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PKTABLE_CAT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PKTABLE_SCHEM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PKTABLE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PKCOLUMN_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"FKTABLE_CAT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"FKTABLE_SCHEM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"FKTABLE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"FKCOLUMN_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"KEY_SEQ"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE_RULE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"DELETE_RULE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"FK_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PK_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"DEFERRABILITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addCrossReferenceResult</name><parameter_list>(<parameter><decl><type><name>SimpleResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pkSchema</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>pkTable</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>fkSchema</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>fkTable</name></decl></parameter>, <parameter><decl><type><name>ConstraintReferential</name></type> <name>fk</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Value</name></type> <name>pkSchemaValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>pkSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>pkTableValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>pkTable</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>fkSchemaValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>fkSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>fkTableValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>fkTable</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>pkCols</name> <init>= <expr><call><name><name>fk</name><operator>.</operator><name>getRefColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>fkCols</name> <init>= <expr><call><name><name>fk</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>update</name> <init>= <expr><call><name>getRefAction</name><argument_list>(<argument><expr><call><name><name>fk</name><operator>.</operator><name>getUpdateAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>delete</name> <init>= <expr><call><name>getRefAction</name><argument_list>(<argument><expr><call><name><name>fk</name><operator>.</operator><name>getDeleteAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>fkNameValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>fk</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>pkNameValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>fk</name><operator>.</operator><name>getReferencedConstraint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>fkCols</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(
                    <comment type="line">// PKTABLE_CAT</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// PKTABLE_SCHEM</comment>
                    <argument><expr><name>pkSchemaValue</name></expr></argument>,
                    <comment type="line">// PKTABLE_NAME</comment>
                    <argument><expr><name>pkTableValue</name></expr></argument>,
                    <comment type="line">// PKCOLUMN_NAME</comment>
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>pkCols</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// FKTABLE_CAT</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// FKTABLE_SCHEM</comment>
                    <argument><expr><name>fkSchemaValue</name></expr></argument>,
                    <comment type="line">// FKTABLE_NAME</comment>
                    <argument><expr><name>fkTableValue</name></expr></argument>,
                    <comment type="line">// FKCOLUMN_NAME</comment>
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>fkCols</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// KEY_SEQ</comment>
                    <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// UPDATE_RULE</comment>
                    <argument><expr><name>update</name></expr></argument>,
                    <comment type="line">// DELETE_RULE</comment>
                    <argument><expr><name>delete</name></expr></argument>,
                    <comment type="line">// FK_NAME</comment>
                    <argument><expr><name>fkNameValue</name></expr></argument>,
                    <comment type="line">// PK_NAME</comment>
                    <argument><expr><name>pkNameValue</name></expr></argument>,
                    <comment type="line">// DEFERRABILITY</comment>
                    <argument><expr><name>IMPORTED_KEY_NOT_DEFERRABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ValueSmallint</name></type> <name>getRefAction</name><parameter_list>(<parameter><decl><type><name>ConstraintActionType</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>action</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>CASCADE</name></expr>:</case>
            <return>return <expr><name>IMPORTED_KEY_CASCADE</name></expr>;</return>
        <case>case <expr><name>RESTRICT</name></expr>:</case>
            <return>return <expr><name>IMPORTED_KEY_RESTRICT</name></expr>;</return>
        <case>case <expr><name>SET_DEFAULT</name></expr>:</case>
            <return>return <expr><name>IMPORTED_KEY_DEFAULT</name></expr>;</return>
        <case>case <expr><name>SET_NULL</name></expr>:</case>
            <return>return <expr><name>IMPORTED_KEY_SET_NULL</name></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"action="</literal> <operator>+</operator> <name>action</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getTypeInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"LITERAL_PREFIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"LITERAL_SUFFIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"CREATE_PARAMS"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"NULLABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"CASE_SENSITIVE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SEARCHABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"UNSIGNED_ATTRIBUTE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"FIXED_PREC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"AUTO_INCREMENT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"LOCAL_TYPE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"MINIMUM_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"MAXIMUM_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SQL_DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"SQL_DATETIME_SUB"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"NUM_PREC_RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>Value</name><operator>.</operator><name>TYPE_COUNT</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>DataType</name></type> <name>t</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Value</name></type> <name>name</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getTypeName</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(
                    <comment type="line">// TYPE_NAME</comment>
                    <argument><expr><name>name</name></expr></argument>,
                    <comment type="line">// DATA_TYPE</comment>
                    <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>sqlType</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// PRECISION</comment>
                    <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>maxPrecision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// LITERAL_PREFIX</comment>
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// LITERAL_SUFFIX</comment>
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>suffix</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// CREATE_PARAMS</comment>
                    <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>params</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// NULLABLE</comment>
                    <argument><expr><name>TYPE_NULLABLE</name></expr></argument>,
                    <comment type="line">// CASE_SENSITIVE</comment>
                    <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>caseSensitive</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// SEARCHABLE</comment>
                    <argument><expr><name>TYPE_SEARCHABLE</name></expr></argument>,
                    <comment type="line">// UNSIGNED_ATTRIBUTE</comment>
                    <argument><expr><name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>,
                    <comment type="line">// FIXED_PREC_SCALE</comment>
                    <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// AUTO_INCREMENT</comment>
                    <argument><expr><name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>,
                    <comment type="line">// LOCAL_TYPE_NAME</comment>
                    <argument><expr><name>name</name></expr></argument>,
                    <comment type="line">// MINIMUM_SCALE</comment>
                    <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertIntToShort</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>minScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// MAXIMUM_SCALE</comment>
                    <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertIntToShort</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>maxScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// SQL_DATA_TYPE (unused)</comment>
                    <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                    <comment type="line">// SQL_DATETIME_SUB (unused)</comment>
                    <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                    <comment type="line">// NUM_PREC_RADIX</comment>
                    <argument><expr><call><name>getRadix</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="line">// DATA_TYPE, better types first</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Value</name></type> <name>getRadix</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>valueType</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>small</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>DataType</name><operator>.</operator><name>isNumericType</name></name><argument_list>(<argument><expr><name>valueType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>radix</name> <init>= <expr><ternary><condition><expr><name>valueType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>NUMERIC</name></name> <operator>||</operator> <name>valueType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>small</name></expr> ?</condition><then> <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name>radix</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>radix</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getIndexInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>unique</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>approximate</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>checkClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_CAT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"NON_UNIQUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"INDEX_QUALIFIER"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"INDEX_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"ORDINAL_POSITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"ASC_OR_DESC"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"CARDINALITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"PAGES"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"FILTER_CONDITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>s</name> <range>: <expr><call><name>getSchemas</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>findTableOrView</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>t</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>getIndexInfo</name><argument_list>(<argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>unique</name></expr></argument>, <argument><expr><name>approximate</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="line">// NON_UNIQUE, TYPE, INDEX_NAME, ORDINAL_POSITION</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>getIndexInfo</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>catalogValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>schemaValue</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>unique</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>approximate</name></decl></parameter>,
            <parameter><decl><type><name>SimpleResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getIndexes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>indexes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Index</name></type> <name>index</name> <range>: <expr><name>indexes</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>uniqueColumnCount</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>getUniqueColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>unique</name> <operator>&amp;&amp;</operator> <name>uniqueColumnCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>tableValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>indexValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>cols</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>getIndexColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ValueSmallint</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><call><name><name>index</name><operator>.</operator><name>getIndexType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isHash</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>TABLE_INDEX_HASHED</name></expr> </then><else>: <expr><name>TABLE_INDEX_OTHER</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>cols</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>IndexColumn</name></type> <name>c</name> <init>= <expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>nonUnique</name> <init>= <expr><name>i</name> <operator>&gt;=</operator> <name>uniqueColumnCount</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>unique</name> <operator>&amp;&amp;</operator> <name>nonUnique</name></expr>)</condition> <block>{<block_content>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(
                            <comment type="line">// TABLE_CAT</comment>
                            <argument><expr><name>catalogValue</name></expr></argument>,
                            <comment type="line">// TABLE_SCHEM</comment>
                            <argument><expr><name>schemaValue</name></expr></argument>,
                            <comment type="line">// TABLE_NAME</comment>
                            <argument><expr><name>tableValue</name></expr></argument>,
                            <comment type="line">// NON_UNIQUE</comment>
                            <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>nonUnique</name></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// INDEX_QUALIFIER</comment>
                            <argument><expr><name>catalogValue</name></expr></argument>,
                            <comment type="line">// INDEX_NAME</comment>
                            <argument><expr><name>indexValue</name></expr></argument>,
                            <comment type="line">// TYPE</comment>
                            <argument><expr><name>type</name></expr></argument>,
                            <comment type="line">// ORDINAL_POSITION</comment>
                            <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// COLUMN_NAME</comment>
                            <argument><expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// ASC_OR_DESC</comment>
                            <argument><expr><call><name>getString</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>c</name><operator>.</operator><name>sortType</name></name> <operator>&amp;</operator> <name><name>SortOrder</name><operator>.</operator><name>DESCENDING</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"D"</literal></expr> </then><else>: <expr><literal type="string">"A"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// CARDINALITY</comment>
                            <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>approximate</name></expr> <comment type="line">//</comment>
                                    ?</condition><then> <expr><call><name><name>index</name><operator>.</operator><name>getRowCountApproximation</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>
                                    </then><else>: <expr><call><name><name>index</name><operator>.</operator><name>getRowCount</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// PAGES</comment>
                            <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getDiskSpaceUsed</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>db</name><operator>.</operator><name>getPageSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// FILTER_CONDITION</comment>
                            <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getSchemas</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaPattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEM"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addColumn</name></name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>CompareLike</name></type> <name>schemaLike</name> <init>= <expr><call><name>getLike</name><argument_list>(<argument><expr><name>schemaPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Schema</name></argument>&gt;</argument_list></name></type> <name>allSchemas</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllSchemas</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShortName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schemaLike</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>s</name> <range>: <expr><name>allSchemas</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>s</name> <range>: <expr><name>allSchemas</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>schemaLike</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <comment type="line">// TABLE_CATALOG, TABLE_SCHEM</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getPseudoColumns</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaPattern</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableNamePattern</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>columnNamePattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SimpleResult</name></type> <name>result</name> <init>= <expr><call><name>getPseudoColumnsResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkCatalogName</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>catalogValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CompareLike</name></type> <name>columnLike</name> <init>= <expr><call><name>getLike</name><argument_list>(<argument><expr><name>columnNamePattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name>getSchemasForPattern</name><argument_list>(<argument><expr><name>schemaPattern</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>schemaValue</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>object</name> <range>: <expr><call><name>getTablesForPattern</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>tableNamePattern</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>tableName</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>object</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>Table</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>Table</name><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>t</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>getPseudoColumnsAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>columnLike</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>TableSynonym</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>TableSynonym</name><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getSynonymFor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>getPseudoColumnsAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>columnLike</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <comment type="line">// TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>sortRows</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>getPseudoColumnsAdd</name><parameter_list>(<parameter><decl><type><name>SimpleResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>catalogValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>schemaValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>tableName</name></decl></parameter>,
            <parameter><decl><type><name>Table</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>CompareLike</name></type> <name>columnLike</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Column</name></type> <name>rowId</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getRowIdColumn</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>rowId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>getPseudoColumnsAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnLike</name></expr></argument>, <argument><expr><name>rowId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>Column</name></type> <name>c</name> <range>: <expr><call><name><name>t</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>c</name><operator>.</operator><name>getVisible</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>getPseudoColumnsAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>catalogValue</name></expr></argument>, <argument><expr><name>schemaValue</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>columnLike</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>getPseudoColumnsAdd</name><parameter_list>(<parameter><decl><type><name>SimpleResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>catalogValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>schemaValue</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>tableName</name></decl></parameter>,
            <parameter><decl><type><name>CompareLike</name></type> <name>columnLike</name></decl></parameter>, <parameter><decl><type><name>Column</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>columnLike</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>columnLike</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>type</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueInteger</name></type> <name>precision</name> <init>= <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(
                <comment type="line">// TABLE_CAT</comment>
                <argument><expr><name>catalogValue</name></expr></argument>,
                <comment type="line">// TABLE_SCHEM</comment>
                <argument><expr><name>schemaValue</name></expr></argument>,
                <comment type="line">// TABLE_NAME</comment>
                <argument><expr><name>tableName</name></expr></argument>,
                <comment type="line">// COLUMN_NAME</comment>
                <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// DATA_TYPE</comment>
                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>convertTypeToSQLType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// COLUMN_SIZE</comment>
                <argument><expr><name>precision</name></expr></argument>,
                <comment type="line">// DECIMAL_DIGITS</comment>
                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// NUM_PREC_RADIX</comment>
                <argument><expr><call><name>getRadix</name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// COLUMN_USAGE</comment>
                <argument><expr><name>NO_USAGE_RESTRICTIONS</name></expr></argument>,
                <comment type="line">// REMARKS</comment>
                <argument><expr><call><name>getString</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <comment type="line">// CHAR_OCTET_LENGTH</comment>
                <argument><expr><name>precision</name></expr></argument>,
                <comment type="line">// IS_NULLABLE</comment>
                <argument><expr><ternary><condition><expr><call><name><name>c</name><operator>.</operator><name>isNullable</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>YES</name></expr> </then><else>: <expr><name>NO</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><name>void</name></type> <name>checkClosed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATABASE_CALLED_AT_SHUTDOWN</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>Value</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>string</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>checkCatalogName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>catalog</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>catalog</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>db</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><call><name><name>db</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Schema</name></argument>&gt;</argument_list></name></type> <name>getSchemas</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>db</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>schema</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>Schema</name></type> <name>s</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>findSchema</name></name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Schema</name></argument>&gt;</argument_list></name></type> <name>getSchemasForPattern</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schemaPattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schemaPattern</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>db</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>schemaPattern</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Schema</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CompareLike</name></type> <name>like</name> <init>= <expr><call><name>getLike</name><argument_list>(<argument><expr><name>schemaPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>s</name> <range>: <expr><call><name><name>db</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>like</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>list</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaObject</name></extends></argument>&gt;</argument_list></name></type> <name>getTablesForPattern</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tablePattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>tables</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>TableSynonym</name></argument>&gt;</argument_list></name></type> <name>synonyms</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getAllSynonyms</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tablePattern</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>tables</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>synonyms</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>synonyms</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>tables</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SchemaObject</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>synonyms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>synonyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>list</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>tables</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>synonyms</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SchemaObject</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CompareLike</name></type> <name>like</name> <init>= <expr><call><name>getLike</name><argument_list>(<argument><expr><name>tablePattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>t</name> <range>: <expr><name>tables</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>like</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>TableSynonym</name></type> <name>t</name> <range>: <expr><name>synonyms</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>like</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>list</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>checkSchema</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>, <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schemaName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>schemaName</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>schema</name> <operator>==</operator> <call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMainSchema</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equalsIdentifiers</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>, <argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CompareLike</name></type> <name>getLike</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pattern</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>CompareLike</name></type> <name>like</name> <init>= <expr><operator>new</operator> <call><name>CompareLike</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompareMode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <comment type="line">//</comment>
                <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>CompareLike</name><operator>.</operator><name>LikeType</name><operator>.</operator><name>LIKE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>like</name><operator>.</operator><name>initPattern</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>like</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
