<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/expression/condition/ConditionAndOr.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionVisitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>TypedValueExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ValueExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>ColumnResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBoolean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An 'and' or 'or' condition as in WHERE ID=1 AND NAME=?
 */</comment>
<class><specifier>public</specifier> class <name>ConditionAndOr</name> <super_list><extends>extends <super><name>Condition</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The AND condition type as in ID=1 AND NAME='Hello'.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>AND</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The OR condition type as in ID=1 OR NAME='Hello'.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>OR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>andOrType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Expression</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Additional condition for index only.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Expression</name></type> <name>added</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ConditionAndOr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>andOrType</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>right</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><name>left</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>right</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>andOrType</name></name> <operator>=</operator> <name>andOrType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>int</name></type> <name>getAndOrType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>andOrType</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>needParentheses</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getUnenclosedSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>, <argument><expr><name>AUTO_PARENTHESES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>andOrType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>AND</name></expr>:</case>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n    AND "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>OR</name></expr>:</case>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n    OR "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"andOrType="</literal> <operator>+</operator> <name>andOrType</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <return>return <expr><call><name><name>right</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>, <argument><expr><name>AUTO_PARENTHESES</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>createIndexConditions</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>andOrType</name> <operator>==</operator> <name>AND</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>createIndexConditions</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>createIndexConditions</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>added</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>added</name><operator>.</operator><name>createIndexConditions</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>getNotIfPossible</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// (NOT (A OR B)): (NOT(A) AND NOT(B))</comment>
        <comment type="line">// (NOT (A AND B)): (NOT(A) OR NOT(B))</comment>
        <decl_stmt><decl><type><name>Expression</name></type> <name>l</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getNotIfPossible</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionNot</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>r</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>getNotIfPossible</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionNot</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>reversed</name> <init>= <expr><ternary><condition><expr><name>andOrType</name> <operator>==</operator> <name>AND</name></expr> ?</condition><then> <expr><name>OR</name></expr> </then><else>: <expr><name>AND</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name>reversed</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Value</name></type> <name>l</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>r</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>andOrType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>AND</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>l</name><operator>.</operator><name>isFalse</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><name>r</name> <operator>=</operator> <call><name><name>right</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isFalse</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name> <operator>||</operator> <name>r</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name><name>ValueBoolean</name><operator>.</operator><name>TRUE</name></name></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>OR</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>l</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><name>r</name> <operator>=</operator> <call><name><name>right</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isTrue</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>ValueBoolean</name><operator>.</operator><name>TRUE</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name> <operator>||</operator> <name>r</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr>;</return>
        </block_content>}</block>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>andOrType</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>optimize</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// NULL handling: see wikipedia,</comment>
        <comment type="line">// http://www-cs-students.stanford.edu/~wlam/compsci/sqlnulls</comment>
        <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name><name>left</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name><name>right</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lc</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getCost</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>rc</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>getCost</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <name>lc</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>t</name> <init>= <expr><name>left</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>right</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name>andOrType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>AND</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSettings</name><argument_list>()</argument_list></call><operator>.</operator><name>optimizeTwoEquals</name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// this optimization does not work in the following case,</comment>
            <comment type="line">// but NOT is optimized before:</comment>
            <comment type="line">// CREATE TABLE TEST(A INT, B INT);</comment>
            <comment type="line">// INSERT INTO TEST VALUES(1, NULL);</comment>
            <comment type="line">// SELECT * FROM TEST WHERE NOT (B=A AND B=0); // no rows</comment>
            <comment type="line">// SELECT * FROM TEST WHERE NOT (B=A AND B=0 AND A=0); // 1, NULL</comment>
            <comment type="line">// try to add conditions (A=B AND B=1: add A=1)</comment>
            <if_stmt><if>if <condition>(<expr><name>left</name> <operator>instanceof</operator> <name>Comparison</name> <operator>&amp;&amp;</operator> <name>right</name> <operator>instanceof</operator> <name>Comparison</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// try to add conditions (A=B AND B=1: add A=1)</comment>
                <decl_stmt><decl><type><name>Expression</name></type> <name>added</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Comparison</name><operator>)</operator> <name>left</name><operator>)</operator><operator>.</operator><call><name>getAdditionalAnd</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>Comparison</name><operator>)</operator> <name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>added</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>added</name></name> <operator>=</operator> <call><name><name>added</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>OR</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSettings</name><argument_list>()</argument_list></call><operator>.</operator><name>optimizeOr</name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>reduced</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>left</name> <operator>instanceof</operator> <name>Comparison</name> <operator>&amp;&amp;</operator> <name>right</name> <operator>instanceof</operator> <name>Comparison</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>reduced</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Comparison</name><operator>)</operator> <name>left</name><operator>)</operator><operator>.</operator><call><name>optimizeOr</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>Comparison</name><operator>)</operator> <name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>instanceof</operator> <name>ConditionIn</name> <operator>&amp;&amp;</operator> <name>right</name> <operator>instanceof</operator> <name>Comparison</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>reduced</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConditionIn</name><operator>)</operator> <name>left</name><operator>)</operator><operator>.</operator><call><name>getAdditional</name><argument_list>(<argument><expr><operator>(</operator><name>Comparison</name><operator>)</operator> <name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>right</name> <operator>instanceof</operator> <name>ConditionIn</name> <operator>&amp;&amp;</operator> <name>left</name> <operator>instanceof</operator> <name>Comparison</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>reduced</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConditionIn</name><operator>)</operator> <name>right</name><operator>)</operator><operator>.</operator><call><name>getAdditional</name><argument_list>(<argument><expr><operator>(</operator><name>Comparison</name><operator>)</operator> <name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>instanceof</operator> <name>ConditionInConstantSet</name> <operator>&amp;&amp;</operator> <name>right</name> <operator>instanceof</operator> <name>Comparison</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>reduced</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConditionInConstantSet</name><operator>)</operator> <name>left</name><operator>)</operator><operator>.</operator><call><name>getAdditional</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>Comparison</name><operator>)</operator> <name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>right</name> <operator>instanceof</operator> <name>ConditionInConstantSet</name> <operator>&amp;&amp;</operator> <name>left</name> <operator>instanceof</operator> <name>Comparison</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>reduced</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConditionInConstantSet</name><operator>)</operator> <name>right</name><operator>)</operator><operator>.</operator><call><name>getAdditional</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>Comparison</name><operator>)</operator> <name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>instanceof</operator> <name>ConditionAndOr</name> <operator>&amp;&amp;</operator> <name>right</name> <operator>instanceof</operator> <name>ConditionAndOr</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>reduced</name> <operator>=</operator> <call><name>optimizeConditionAndOr</name><argument_list>(<argument><expr><operator>(</operator><name>ConditionAndOr</name><operator>)</operator><name>left</name></expr></argument>, <argument><expr><operator>(</operator><name>ConditionAndOr</name><operator>)</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// TODO optimization: convert .. OR .. to UNION if the cost is lower</comment>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>reduced</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>reduced</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></switch>
        <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name>optimizeIfConstant</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>andOrType</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>optimizeN</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>ConditionAndOr</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>optimizeN</name><argument_list>(<argument><expr><operator>(</operator><name>ConditionAndOr</name><operator>)</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>e</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Expression</name></type> <name>optimizeN</name><parameter_list>(<parameter><decl><type><name>ConditionAndOr</name></type> <name>condition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>condition</name><operator>.</operator><name>right</name></name> <operator>instanceof</operator> <name>ConditionAndOr</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>ConditionAndOr</name></type> <name>rightCondition</name> <init>= <expr><operator>(</operator><name>ConditionAndOr</name><operator>)</operator> <name><name>condition</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>rightCondition</name><operator>.</operator><name>andOrType</name></name> <operator>==</operator> <name><name>condition</name><operator>.</operator><name>andOrType</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>ConditionAndOrN</name><argument_list>(<argument><expr><name><name>condition</name><operator>.</operator><name>andOrType</name></name></expr></argument>, <argument><expr><name><name>condition</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rightCondition</name><operator>.</operator><name>left</name></name></expr></argument>,
                        <argument><expr><name><name>rightCondition</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>condition</name><operator>.</operator><name>right</name></name> <operator>instanceof</operator> <name>ConditionAndOrN</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>ConditionAndOrN</name></type> <name>rightCondition</name> <init>= <expr><operator>(</operator><name>ConditionAndOrN</name><operator>)</operator> <name><name>condition</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>rightCondition</name><operator>.</operator><name>getAndOrType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>condition</name><operator>.</operator><name>andOrType</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>rightCondition</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><name><name>condition</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>rightCondition</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>condition</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Optimize the condition if at least one part is constant.
     *
     * @param session the session
     * @param andOrType the type
     * @param left the left part of the condition
     * @param right the right part of the condition
     * @return the optimized condition, or {@code null} if condition cannot be optimized
     */</comment>
    <function><type><specifier>static</specifier> <name>Expression</name></type> <name>optimizeIfConstant</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>andOrType</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>left</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>right</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><call><name>optimizeConstant</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>andOrType</name></expr></argument>, <argument><expr><call><name><name>right</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>l</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>right</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>optimizeConstant</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>andOrType</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>r</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>andOrType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>AND</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>l</name><operator>.</operator><name>isFalse</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>r</name><operator>.</operator><name>isFalse</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>ValueExpression</name><operator>.</operator><name>FALSE</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name> <operator>||</operator> <name>r</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>TypedValueExpression</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name><name>ValueExpression</name><operator>.</operator><name>TRUE</name></name></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>OR</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>l</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>r</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>ValueExpression</name><operator>.</operator><name>TRUE</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name> <operator>||</operator> <name>r</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>TypedValueExpression</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name><name>ValueExpression</name><operator>.</operator><name>FALSE</name></name></expr>;</return>
        </block_content>}</block>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>andOrType</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Expression</name></type> <name>optimizeConstant</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>andOrType</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><name>andOrType</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>AND</name></expr>:</case>
                <return>return <expr><ternary><condition><expr><call><name><name>l</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>castToBoolean</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>ValueExpression</name><operator>.</operator><name>FALSE</name></name></expr></else></ternary></expr>;</return>
            <case>case <expr><name>OR</name></expr>:</case>
                <return>return <expr><ternary><condition><expr><call><name><name>l</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>ValueExpression</name><operator>.</operator><name>TRUE</name></name></expr> </then><else>: <expr><call><name>castToBoolean</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
            <default>default:</default>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>andOrType</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addFilterConditions</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>andOrType</name> <operator>==</operator> <name>AND</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>addFilterConditions</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>addFilterConditions</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addFilterConditions</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>mapColumns</name><parameter_list>(<parameter><decl><type><name>ColumnResolver</name></type> <name>resolver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setEvaluatable</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>tableFilter</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>tableFilter</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>tableFilter</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>updateAggregate</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>updateAggregate</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>updateAggregate</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isEverything</name><parameter_list>(<parameter><decl><type><name>ExpressionVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>left</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>right</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getCost</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>left</name><operator>.</operator><name>getCost</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>right</name><operator>.</operator><name>getCost</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getSubexpressionCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>getSubexpression</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>index</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
            <return>return <expr><name>left</name></expr>;</return>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <return>return <expr><name>right</name></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Optimize query according to the given condition. Example:
     * (A AND B) OR (C AND B), the new condition B AND (A OR C) is returned
     *
     * @param left the session
     * @param right the second condition
     * @return null or the third condition
     */</comment>
    <function><type><specifier>static</specifier> <name>Expression</name></type> <name>optimizeConditionAndOr</name><parameter_list>(<parameter><decl><type><name>ConditionAndOr</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>ConditionAndOr</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>left</name><operator>.</operator><name>andOrType</name></name> <operator>!=</operator> <name>AND</name> <operator>||</operator> <name><name>right</name><operator>.</operator><name>andOrType</name></name> <operator>!=</operator> <name>AND</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>leftLeft</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getSubexpression</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>leftRight</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getSubexpression</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>rightLeft</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>getSubexpression</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>rightRight</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>getSubexpression</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>rightLeftSQL</name> <init>= <expr><call><name><name>rightLeft</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>rightRightSQL</name> <init>= <expr><call><name><name>rightRight</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>leftLeft</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name><name>ExpressionVisitor</name><operator>.</operator><name>DETERMINISTIC_VISITOR</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>leftLeftSQL</name> <init>= <expr><call><name><name>leftLeft</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>leftLeftSQL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>rightLeftSQL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name>AND</name></expr></argument>, <argument><expr><name>leftLeft</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name>OR</name></expr></argument>, <argument><expr><name>leftRight</name></expr></argument>, <argument><expr><name>rightRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>leftLeftSQL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>rightRightSQL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name>AND</name></expr></argument>, <argument><expr><name>leftLeft</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name>OR</name></expr></argument>, <argument><expr><name>leftRight</name></expr></argument>, <argument><expr><name>rightLeft</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>leftRight</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name><name>ExpressionVisitor</name><operator>.</operator><name>DETERMINISTIC_VISITOR</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>leftRightSQL</name> <init>= <expr><call><name><name>leftRight</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>leftRightSQL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>rightLeftSQL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name>AND</name></expr></argument>, <argument><expr><name>leftRight</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name>OR</name></expr></argument>, <argument><expr><name>leftLeft</name></expr></argument>, <argument><expr><name>rightRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>leftRightSQL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>rightRightSQL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name>AND</name></expr></argument>, <argument><expr><name>leftRight</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name>OR</name></expr></argument>, <argument><expr><name>leftLeft</name></expr></argument>, <argument><expr><name>rightLeft</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
