<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/command/CommandContainer.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>DatabaseEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>DefineCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>DataChangeStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbSettings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Parameter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ParameterInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>LocalResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultTarget</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultWithGeneratedKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>DataChangeDeltaTable</name><operator>.</operator><name>ResultOption</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a single SQL statements.
 * It wraps a prepared statement.
 */</comment>
<class><specifier>public</specifier> class <name>CommandContainer</name> <super_list><extends>extends <super><name>Command</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Collector of generated keys.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>GeneratedKeysCollector</name> <super_list><implements>implements <super><name>ResultTarget</name></super></implements></super_list> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>indexes</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>LocalResult</name></type> <name>result</name></decl>;</decl_stmt>

        <constructor><name>GeneratedKeysCollector</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexes</name></decl></parameter>, <parameter><decl><type><name>LocalResult</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexes</name></name> <operator>=</operator> <name>indexes</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>result</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>limitsWereApplied</name><parameter_list>()</parameter_list> <block>{<block_content>
            <comment type="line">// Nothing to do</comment>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>long</name></type> <name>getRowCount</name><parameter_list>()</parameter_list> <block>{<block_content>
            <comment type="line">// Not required</comment>
            <return>return <expr><literal type="number">0L</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>addRow</name><parameter_list>(<parameter><decl><type><name>Value</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>indexes</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>row</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>values</name><index>[<expr><name><name>indexes</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Prepared</name></type> <name>prepared</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>readOnlyKnown</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>readOnly</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Clears CTE views for a specified statement.
     *
     * @param session the session
     * @param prepared prepared statement
     */</comment>
    <function><type><specifier>static</specifier> <name>void</name></type> <name>clearCTE</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Prepared</name></type> <name>prepared</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TableView</name></argument>&gt;</argument_list></name></type> <name>cteCleanups</name> <init>= <expr><call><name><name>prepared</name><operator>.</operator><name>getCteCleanups</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cteCleanups</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>clearCTE</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>cteCleanups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clears CTE views.
     *
     * @param session the session
     * @param views list of view
     */</comment>
    <function><type><specifier>static</specifier> <name>void</name></type> <name>clearCTE</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TableView</name></argument>&gt;</argument_list></name></type> <name>views</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>TableView</name></type> <name>view</name> <range>: <expr><name>views</name></expr></range></decl></init>)</control> <block>{<block_content>
            <comment type="line">// check if view was previously deleted as their name is set to</comment>
            <comment type="line">// null</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>view</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>removeLocalTempTable</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>CommandContainer</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>Prepared</name></type> <name>prepared</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prepared</name><operator>.</operator><name>setCommand</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prepared</name></name> <operator>=</operator> <name>prepared</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>ParameterInterface</name></extends></argument>&gt;</argument_list></name></type> <name>getParameters</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>prepared</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isTransactional</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>prepared</name><operator>.</operator><name>isTransactional</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isQuery</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>prepared</name><operator>.</operator><name>isQuery</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>recompileIfRequired</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>prepared</name><operator>.</operator><name>needRecompile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// TODO test with 'always recompile'</comment>
            <expr_stmt><expr><call><name><name>prepared</name><operator>.</operator><name>setModificationMetaId</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><call><name><name>prepared</name><operator>.</operator><name>getSQL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>prepared</name><operator>.</operator><name>getSQLTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Parameter</name></argument>&gt;</argument_list></name></type> <name>oldParams</name> <init>= <expr><call><name><name>prepared</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Parser</name></type> <name>parser</name> <init>= <expr><operator>new</operator> <call><name>Parser</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>prepared</name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>mod</name> <init>= <expr><call><name><name>prepared</name><operator>.</operator><name>getModificationMetaId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>prepared</name><operator>.</operator><name>setModificationMetaId</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Parameter</name></argument>&gt;</argument_list></name></type> <name>newParams</name> <init>= <expr><call><name><name>prepared</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>newParams</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>oldParams</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Parameter</name></type> <name>old</name> <init>= <expr><call><name><name>oldParams</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>old</name><operator>.</operator><name>isValueSet</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>old</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>newParams</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>prepared</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>prepared</name><operator>.</operator><name>setModificationMetaId</name></name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultWithGeneratedKeys</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>generatedKeysRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>recompileIfRequired</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setProgress</name><argument_list>(<argument><expr><name><name>DatabaseEventListener</name><operator>.</operator><name>STATE_STATEMENT_START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prepared</name><operator>.</operator><name>checkParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ResultWithGeneratedKeys</name></type> <name>result</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>generatedKeysRequest</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Boolean</name><operator>.</operator><name>FALSE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>generatedKeysRequest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>prepared</name> <operator>instanceof</operator> <name>DataChangeStatement</name> <operator>&amp;&amp;</operator> <call><name><name>prepared</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>CommandInterface</name><operator>.</operator><name>DELETE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>executeUpdateWithGeneratedKeys</name><argument_list>(<argument><expr><operator>(</operator><name>DataChangeStatement</name><operator>)</operator> <name>prepared</name></expr></argument>,
                        <argument><expr><name>generatedKeysRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name><name>ResultWithGeneratedKeys</name><operator>.</operator><name>WithKeys</name></name><argument_list>(<argument><expr><call><name><name>prepared</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>LocalResult</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ResultWithGeneratedKeys</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>prepared</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>prepared</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>startTimeNanos</name></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>getUpdateCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setProgress</name><argument_list>(<argument><expr><name><name>DatabaseEventListener</name><operator>.</operator><name>STATE_STATEMENT_END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>ResultWithGeneratedKeys</name></type> <name>executeUpdateWithGeneratedKeys</name><parameter_list>(<parameter><decl><type><name>DataChangeStatement</name></type> <name>statement</name></decl></parameter>,
            <parameter><decl><type><name>Object</name></type> <name>generatedKeysRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ExpressionColumn</name></argument>&gt;</argument_list></name></type> <name>expressionColumns</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Boolean</name><operator>.</operator><name>TRUE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>generatedKeysRequest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>expressionColumns</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Index</name></type> <name>primaryKey</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>findPrimaryKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Expression</name></type> <name>e</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isIdentity</name></name><argument_list>()</argument_list></call>
                        <operator>||</operator> <operator>(</operator><operator>(</operator><name>e</name> <operator>=</operator> <call><name><name>column</name><operator>.</operator><name>getEffectiveDefaultExpression</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>e</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call><operator>)</operator>
                        <operator>||</operator> <operator>(</operator><name>primaryKey</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>primaryKey</name><operator>.</operator><name>getColumnIndex</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>expressionColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>generatedKeysRequest</name> <operator>instanceof</operator> <name><name>int</name><index>[]</index></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexes</name> <init>= <expr><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator> <name>generatedKeysRequest</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>expressionColumns</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>indexes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <range>: <expr><name>indexes</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>idx</name> <operator>&gt;</operator> <name>cnt</name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><literal type="string">"Index: "</literal> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>expressionColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>columns</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>generatedKeysRequest</name> <operator>instanceof</operator> <name><name>String</name><index>[]</index></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><operator>(</operator><name><name>String</name><index>[]</index></name><operator>)</operator> <name>generatedKeysRequest</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>expressionColumns</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>names</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>findColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>DbSettings</name></type> <name>settings</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>settings</name><operator>.</operator><name>databaseToUpper</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>column</name> <operator>=</operator> <call><name><name>table</name><operator>.</operator><name>findColumn</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>settings</name><operator>.</operator><name>databaseToLower</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>column</name> <operator>=</operator> <call><name><name>table</name><operator>.</operator><name>findColumn</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>toLowerEnglish</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <label><name>search</name>:</label> <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>Column</name></type> <name>c</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>column</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
                                <break>break <name>search</name>;</break>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>expressionColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>expressionColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>columnCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>ResultWithGeneratedKeys</name><operator>.</operator><name>WithKeys</name></name><argument_list>(<argument><expr><call><name><name>statement</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>LocalResult</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexes</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>columnCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ExpressionColumn</name><index>[]</index></name></type> <name>expressions</name> <init>= <expr><call><name><name>expressionColumns</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>ExpressionColumn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>indexes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>expressions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getColumn</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColumnId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>LocalResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>LocalResult</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>expressions</name></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name><name>ResultWithGeneratedKeys</name><operator>.</operator><name>WithKeys</name></name><argument_list>(
                <argument><expr><call><name><name>statement</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GeneratedKeysCollector</name><argument_list>(<argument><expr><name>indexes</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ResultOption</name><operator>.</operator><name>FINAL</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>maxrows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>recompileIfRequired</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setProgress</name><argument_list>(<argument><expr><name><name>DatabaseEventListener</name><operator>.</operator><name>STATE_STATEMENT_START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prepared</name><operator>.</operator><name>checkParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ResultInterface</name></type> <name>result</name> <init>= <expr><call><name><name>prepared</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>maxrows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>prepared</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>startTimeNanos</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>result</name><operator>.</operator><name>isLazy</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>result</name><operator>.</operator><name>getRowCount</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setProgress</name><argument_list>(<argument><expr><name><name>DatabaseEventListener</name><operator>.</operator><name>STATE_STATEMENT_END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Clean up after the command was run in the session.</comment>
        <comment type="line">// Must restart query (and dependency construction) to reuse.</comment>
        <expr_stmt><expr><call><name>clearCTE</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>prepared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>canReuse</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>canReuse</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>prepared</name><operator>.</operator><name>getCteCleanups</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isReadOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>readOnlyKnown</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>readOnly</name> <operator>=</operator> <call><name><name>prepared</name><operator>.</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>readOnlyKnown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>readOnly</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>queryMeta</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>prepared</name><operator>.</operator><name>queryMeta</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isCacheable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>prepared</name><operator>.</operator><name>isCacheable</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getCommandType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>prepared</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clean up any associated CTE.
     */</comment>
    <function><type><name>void</name></type> <name>clearCTE</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>clearCTE</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>prepared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>getDependencies</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>dependencies</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>prepared</name><operator>.</operator><name>collectDependencies</name></name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>dependencies</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>boolean</name></type> <name>isCurrentCommandADefineCommand</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>prepared</name> <operator>instanceof</operator> <name>DefineCommand</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
