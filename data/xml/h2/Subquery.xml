<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/expression/Subquery.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>Query</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>ColumnResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ExtTypeInfoRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueRow</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A query returning a single value.
 * Subqueries are used inside other statements.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Subquery</name> <super_list><extends>extends <super><name>Expression</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Query</name></type> <name>query</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Expression</name></type> <name>expression</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Value</name></type> <name>nullValue</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ColumnResolver</name></argument>&gt;</argument_list></name></type> <name>outerResolvers</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Subquery</name><parameter_list>(<parameter><decl><type><name>Query</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>query</name></name> <operator>=</operator> <name>query</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setSession</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <init>(<decl><type><name>ResultInterface</name></type> <name>result</name> <init>= <expr><call><name><name>query</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>nullValue</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>readRow</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SCALAR_SUBQUERY_CONTAINS_MORE_THAN_ONE_ROW</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>v</name></expr>;</return>
        </block_content>}</block></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Evaluates and returns all rows of the subquery.
     *
     * @param session
     *            the session
     * @return values in all rows
     */</comment>
    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>getAllRows</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setSession</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <init>(<decl><type><name>ResultInterface</name></type> <name>result</name> <init>= <expr><call><name><name>query</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
            <while>while <condition>(<expr><call><name><name>result</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readRow</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></try>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Value</name></type> <name>readRow</name><parameter_list>(<parameter><decl><type><name>ResultInterface</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>currentRow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>visible</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>getVisibleColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>visible</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>
                </then><else>: <expr><call><name><name>ValueRow</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>visible</name> <operator>==</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr> ?</condition><then> <expr><name>values</name></expr> </then><else>: <expr><call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TypeInfo</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>expression</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>mapColumns</name><parameter_list>(<parameter><decl><type><name>ColumnResolver</name></type> <name>resolver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>outerResolvers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>optimize</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>query</name><operator>.</operator><name>isConstantQuery</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>outerResolvers</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSettings</name><argument_list>()</argument_list></call><operator>.</operator><name>optimizeSimpleSingleRowSubqueries</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name><name>query</name><operator>.</operator><name>getIfSingleRow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>e</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><call><name><name>ExpressionVisitor</name><operator>.</operator><name>getDecrementQueryLevelVisitor</name></name><argument_list>(<argument><expr><name>outerResolvers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><call><name><name>ExpressionVisitor</name><operator>.</operator><name>getDecrementQueryLevelVisitor</name></name><argument_list>(<argument><expr><name>outerResolvers</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>e</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>outerResolvers</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>expressions</name> <init>= <expr><call><name><name>query</name><operator>.</operator><name>getExpressions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>query</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>columnCount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>expression</name> <operator>=</operator> <call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nullValue</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>list</name> <init>= <expr><operator>new</operator> <name><name>Expression</name><index>[<expr><name>columnCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>nulls</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>columnCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>ExpressionList</name></type> <name>expressionList</name> <init>= <expr><operator>new</operator> <call><name>ExpressionList</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>expressionList</name><operator>.</operator><name>initializeType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>expression</name> <operator>=</operator> <name>expressionList</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nullValue</name> <operator>=</operator> <call><name><name>ValueRow</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ExtTypeInfoRow</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setEvaluatable</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>tableFilter</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>tableFilter</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getUnenclosedSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>getPlanSQL</name></name><argument_list>(<argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>updateAggregate</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>query</name><operator>.</operator><name>updateAggregate</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isEverything</name><parameter_list>(<parameter><decl><type><name>ExpressionVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>query</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Query</name></type> <name>getQuery</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>query</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getCost</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>query</name><operator>.</operator><name>getCostAsExpression</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isConstant</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>query</name><operator>.</operator><name>isConstantQuery</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
