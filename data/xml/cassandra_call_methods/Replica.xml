<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/locator/Replica.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A Replica represents an owning node for a copy of a portion of the token ring.
 *
 * It consists of:
 *  - the logical token range that is being replicated (i.e. for the first logical replica only, this will be equal
 *      to one of its owned portions of the token ring; all other replicas will have this token range also)
 *  - an endpoint (IP and port)
 *  - whether the range is replicated in full, or transiently (CASSANDRA-14404)
 *
 * In general, it is preferred to use a Replica to a Range&amp;lt;Token&amp;gt;, particularly when users of the concept depend on
 * knowledge of the full/transient status of the copy.
 *
 * That means you should avoid unwrapping and rewrapping these things and think hard about subtraction
 * and such and what the result is WRT to transientness. Definitely avoid creating fake Replicas with misinformation
 * about endpoints, ranges, or transientness.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Replica</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>endpoint</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>full</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Replica</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>full</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>endpoint</name></name> <operator>=</operator> <name>endpoint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>range</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>full</name></name> <operator>=</operator> <name>full</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Replica</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>Token</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Token</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>full</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>Replica</name></type> <name>replica</name> <init>= <expr><operator>(</operator><name>Replica</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>full</name> <operator>==</operator> <name><name>replica</name><operator>.</operator><name>full</name></name> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name><name>replica</name><operator>.</operator><name>endpoint</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name><name>replica</name><operator>.</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>range</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>range</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>endpoint</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>endpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator>  <call><name><name>Boolean</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>full</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>c</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><ternary><condition><expr><name>full</name></expr> ?</condition><then> <expr><literal type="string">"Full"</literal></expr> </then><else>: <expr><literal type="string">"Transient"</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="char">'('</literal> <operator>+</operator> <call><name>endpoint</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">','</literal> <operator>+</operator> <name>range</name> <operator>+</operator> <literal type="char">')'</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>endpoint</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>endpoint</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSelf</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>endpoint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>range</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isFull</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>full</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isTransient</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name>isFull</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This is used exclusively in TokenMetadata to check if a portion of a range is already replicated
     * by an endpoint so that we only mark as pending the portion that is either not replicated sufficiently (transient
     * when we need full) or at all.
     *
     * If it's not replicated at all it needs to be pending because there is no data.
     * If it's replicated but only transiently and we need to replicate it fully it must be marked as pending until it
     * is available fully otherwise a read might treat this replica as full and not read from a full replica that has
     * the data.
     */</comment>
    <function><type><specifier>public</specifier> <name>RangesAtEndpoint</name></type> <name>subtractSameReplication</name><parameter_list>(<parameter><decl><type><name>RangesAtEndpoint</name></type> <name>toSubtract</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>subtractedRanges</name> <init>= <expr><call><name>range</name><argument_list>()</argument_list></call><operator>.</operator><call><name>subtractAll</name><argument_list>(<argument><expr><call><name><name>toSubtract</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>r</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>isFull</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>ranges</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>RangesAtEndpoint</name><operator>.</operator><name>Builder</name></name></type> <name>result</name> <init>= <expr><call><name><name>RangesAtEndpoint</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>subtractedRanges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <range>: <expr><name>subtractedRanges</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>decorateSubrange</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>result</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Don't use this method and ignore transient status unless you are explicitly handling it outside this method.
     *
     * This helper method is used by StorageService.calculateStreamAndFetchRanges to perform subtraction.
     * It ignores transient status because it's already being handled in calculateStreamAndFetchRanges.
     */</comment>
    <function><type><specifier>public</specifier> <name>RangesAtEndpoint</name></type> <name>subtractIgnoreTransientStatus</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>subtract</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>range</name><operator>.</operator><name>subtract</name></name><argument_list>(<argument><expr><name>subtract</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>RangesAtEndpoint</name><operator>.</operator><name>Builder</name></name></type> <name>result</name> <init>= <expr><call><name><name>RangesAtEndpoint</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>subrange</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>decorateSubrange</name><argument_list>(<argument><expr><name>subrange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><call><name><name>result</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>that</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>range</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>that</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>intersectsOnRange</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>range</name><argument_list>()</argument_list></call><operator>.</operator><call><name>intersects</name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Replica</name></type> <name>decorateSubrange</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>subrange</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><call><name><name>range</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>subrange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>Replica</name><argument_list>(<argument><expr><call><name>endpoint</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>subrange</name></expr></argument>, <argument><expr><call><name>isFull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Replica</name></type> <name>fullReplica</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Replica</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Replica</name></type> <name>fullReplica</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>Token</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Token</name></type> <name>end</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>fullReplica</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Replica</name></type> <name>transientReplica</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Replica</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Replica</name></type> <name>transientReplica</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>Token</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Token</name></type> <name>end</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>transientReplica</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>

</unit>
