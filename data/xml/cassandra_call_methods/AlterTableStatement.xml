<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/statements/schema/AlterTableStatement.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Splitter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogEntryType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>Permission</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>CQL3Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>CQLStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>ColumnIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QualifiedName</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Keyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>ApplicationState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>Gossiper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ColumnMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>KeyspaceMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Keyspaces</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Keyspaces</name><operator>.</operator><name>KeyspacesDiff</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ViewMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Views</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ClientState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>repair</name><operator>.</operator><name>ReadRepairStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>Event</name><operator>.</operator><name>SchemaChange</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NoSpamLogger</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>join</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>isEmpty</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>transform</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name><operator>.</operator><name>Flag</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AlterTableStatement</name> <super_list><extends>extends <super><name>AlterSchemaStatement</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>tableName</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AlterTableStatement</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tableName</name></name> <operator>=</operator> <name>tableName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>Keyspaces</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>Keyspaces</name></type> <name>schema</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>table</name> <init>= <expr><ternary><condition><expr><literal type="null">null</literal> <operator>==</operator> <name>keyspace</name></expr>
                            ?</condition><then> <expr><literal type="null">null</literal></expr>
                            </then><else>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getTableOrViewNullable</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>table</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Table '%s.%s' doesn't exist"</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isView</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot use ALTER TABLE on a materialized view; use ALTER MATERIALIZED VIEW instead"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>schema</name><operator>.</operator><name>withAddedOrUpdated</name></name><argument_list>(<argument><expr><call><name>apply</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>SchemaChange</name></type> <name>schemaChangeEvent</name><parameter_list>(<parameter><decl><type><name>KeyspacesDiff</name></type> <name>diff</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SchemaChange</name><argument_list>(<argument><expr><name><name>Change</name><operator>.</operator><name>UPDATED</name></name></expr></argument>, <argument><expr><name><name>Target</name><operator>.</operator><name>TABLE</name></name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>authorize</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>client</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>ensureTablePermission</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Permission</name><operator>.</operator><name>ALTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>AuditLogContext</name></type> <name>getAuditLogContext</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>AuditLogContext</name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>ALTER_TABLE</name></name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"%s (%s, %s)"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>abstract</specifier> <name>KeyspaceMetadata</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * ALTER TABLE &lt;table&gt; ALTER &lt;column&gt; TYPE &lt;newtype&gt;;
     *
     * No longer supported.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>AlterColumn</name> <super_list><extends>extends <super><name>AlterTableStatement</name></super></extends></super_list>
    <block>{
        <constructor><name>AlterColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Altering column types is no longer supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * ALTER TABLE &lt;table&gt; ADD &lt;column&gt; &lt;newtype&gt;
     * ALTER TABLE &lt;table&gt; ADD (&lt;column&gt; &lt;newtype&gt;, &lt;column1&gt; &lt;newtype1&gt;, ... &lt;columnn&gt; &lt;newtypen&gt;)
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>AddColumns</name> <super_list><extends>extends <super><name>AlterTableStatement</name></super></extends></super_list>
    <block>{
        <class><specifier>private</specifier> <specifier>static</specifier> class <name>Column</name>
        <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ColumnIdentifier</name></type> <name>name</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>CQL3Type</name><operator>.</operator><name>Raw</name></name></type> <name>type</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isStatic</name></decl>;</decl_stmt>

            <constructor><name>Column</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>CQL3Type</name><operator>.</operator><name>Raw</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isStatic</name></name> <operator>=</operator> <name>isStatic</name></expr>;</expr_stmt>
            </block_content>}</block></constructor>
        }</block></class>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>newColumns</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>AddColumns</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>newColumns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>newColumns</name></name> <operator>=</operator> <name>newColumns</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>TableMetadata</name><operator>.</operator><name>Builder</name></name></type> <name>tableBuilder</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>unbuild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Views</name><operator>.</operator><name>Builder</name></name></type> <name>viewsBuilder</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>views</name><operator>.</operator><name>unbuild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>newColumns</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addColumn</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>tableBuilder</name></expr></argument>, <argument><expr><name>viewsBuilder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>TableMetadata</name></type> <name>tableMetadata</name> <init>= <expr><call><name><name>tableBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tableMetadata</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><call><name><name>keyspace</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>tables</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><name>tableMetadata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>withSwapped</name><argument_list>(<argument><expr><call><name><name>viewsBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>addColumn</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>,
                               <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>,
                               <parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>,
                               <parameter><decl><type><name><name>TableMetadata</name><operator>.</operator><name>Builder</name></name></type> <name>tableBuilder</name></decl></parameter>,
                               <parameter><decl><type><name><name>Views</name><operator>.</operator><name>Builder</name></name></type> <name>viewsBuilder</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnIdentifier</name></type> <name>name</name> <init>= <expr><name><name>column</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name><name>keyspace</name><operator>.</operator><name>types</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isStatic</name> <init>= <expr><name><name>column</name><operator>.</operator><name>isStatic</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>tableBuilder</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Column with name '%s' already exists"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isCompactTable</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot add new column to a COMPACT STORAGE table"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>isStatic</name> <operator>&amp;&amp;</operator> <call><name><name>table</name><operator>.</operator><name>clusteringColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Static columns are only useful (and thus allowed) if the table has at least one clustering column"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>droppedColumn</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getDroppedColumn</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>droppedColumn</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// After #8099, not safe to re-add columns of incompatible types - until *maybe* deser logic with dropped</comment>
                <comment type="line">// columns is pushed deeper down the line. The latter would still be problematic in cases of schema races.</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>type</name><operator>.</operator><name>isValueCompatibleWith</name></name><argument_list>(<argument><expr><name><name>droppedColumn</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot re-add previously dropped column '%s' of type %s, incompatible with previous type %s"</literal></expr></argument>,
                              <argument><expr><name>name</name></expr></argument>,
                              <argument><expr><call><name><name>type</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call></expr></argument>,
                              <argument><expr><call><name><name>droppedColumn</name><operator>.</operator><name>type</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>droppedColumn</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>isStatic</name></expr>)</condition>
                <block>{<block_content>
                    <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot re-add previously dropped column '%s' of kind %s, incompatible with previous kind %s"</literal></expr></argument>,
                              <argument><expr><name>name</name></expr></argument>,
                              <argument><expr><ternary><condition><expr><name>isStatic</name></expr> ?</condition><then> <expr><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>STATIC</name></name></expr> </then><else>: <expr><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>REGULAR</name></name></expr></else></ternary></expr></argument>,
                              <argument><expr><name><name>droppedColumn</name><operator>.</operator><name>kind</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Cannot re-add a dropped counter column. See #7831.</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isCounter</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot re-add previously dropped counter column %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>isStatic</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>tableBuilder</name><operator>.</operator><name>addStaticColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>tableBuilder</name><operator>.</operator><name>addRegularColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isStatic</name></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>ViewMetadata</name></type> <name>view</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>views</name><operator>.</operator><name>forTable</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>view</name><operator>.</operator><name>includeAllColumns</name></name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>viewColumn</name> <init>= <expr><call><name><name>ColumnMetadata</name><operator>.</operator><name>regularColumn</name></name><argument_list>(<argument><expr><name><name>view</name><operator>.</operator><name>metadata</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>viewsBuilder</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>viewsBuilder</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>withAddedRegularColumn</name><argument_list>(<argument><expr><name>viewColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * ALTER TABLE &lt;table&gt; DROP &lt;column&gt;
     * ALTER TABLE &lt;table&gt; DROP ( &lt;column&gt;, &lt;column1&gt;, ... &lt;columnn&gt;)
     */</comment>
    <comment type="line">// TODO: swap UDT refs with expanded tuples on drop</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>DropColumns</name> <super_list><extends>extends <super><name>AlterTableStatement</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>removedColumns</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Long</name></type> <name>timestamp</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>DropColumns</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>removedColumns</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>removedColumns</name></name> <operator>=</operator> <name>removedColumns</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>TableMetadata</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>unbuild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>removedColumns</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>dropColumn</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>keyspace</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>tables</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>dropColumn</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>ColumnIdentifier</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>TableMetadata</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>currentColumn</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>currentColumn</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Column %s was not found in table '%s'"</literal></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>currentColumn</name><operator>.</operator><name>isPrimaryKeyColumn</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot drop PRIMARY KEY column %s"</literal></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <comment type="block">/*
             * Cannot allow dropping top-level columns of user defined types that aren't frozen because we cannot convert
             * the type into an equivalent tuple: we only support frozen tuples currently. And as such we cannot persist
             * the correct type in system_schema.dropped_columns.
             */</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>currentColumn</name><operator>.</operator><name>type</name><operator>.</operator><name>isUDT</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>currentColumn</name><operator>.</operator><name>type</name><operator>.</operator><name>isMultiCell</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot drop non-frozen column %s of user type %s"</literal></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><call><name><name>currentColumn</name><operator>.</operator><name>type</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <comment type="line">// TODO: some day try and find a way to not rely on Keyspace/IndexManager/Index to find dependent indexes</comment>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IndexMetadata</name></argument>&gt;</argument_list></name></type> <name>dependentIndexes</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>openAndGetStore</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>indexManager</name><operator>.</operator><name>getDependentIndexes</name></name><argument_list>(<argument><expr><name>currentColumn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dependentIndexes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot drop column %s because it has dependent secondary indexes (%s)"</literal></expr></argument>,
                          <argument><expr><name>currentColumn</name></expr></argument>,
                          <argument><expr><call><name>join</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>dependentIndexes</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>i</name><operator>.</operator><name>name</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEmpty</name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>views</name><operator>.</operator><name>forTable</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot drop column %s on base table %s with materialized views"</literal></expr></argument>, <argument><expr><name>currentColumn</name></expr></argument>, <argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>removeRegularOrStaticColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>recordColumnDrop</name></name><argument_list>(<argument><expr><name>currentColumn</name></expr></argument>, <argument><expr><call><name>getTimestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * @return timestamp from query, otherwise return current time in micros
         */</comment>
        <function><type><specifier>private</specifier> <name>long</name></type> <name>getTimestamp</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>timestamp</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>ClientState</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>timestamp</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * ALTER TABLE &lt;table&gt; RENAME &lt;column&gt; TO &lt;column&gt;;
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>RenameColumns</name> <super_list><extends>extends <super><name>AlterTableStatement</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>renamedColumns</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>RenameColumns</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>renamedColumns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>renamedColumns</name></name> <operator>=</operator> <name>renamedColumns</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>TableMetadata</name><operator>.</operator><name>Builder</name></name></type> <name>tableBuilder</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>unbuild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Views</name><operator>.</operator><name>Builder</name></name></type> <name>viewsBuilder</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>views</name><operator>.</operator><name>unbuild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>renamedColumns</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>o</name></decl></parameter>, <parameter><decl><name>n</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>renameColumn</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tableBuilder</name></expr></argument>, <argument><expr><name>viewsBuilder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><call><name><name>keyspace</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>tables</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><call><name><name>tableBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>withSwapped</name><argument_list>(<argument><expr><call><name><name>viewsBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>renameColumn</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>,
                                  <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>,
                                  <parameter><decl><type><name>ColumnIdentifier</name></type> <name>oldName</name></decl></parameter>,
                                  <parameter><decl><type><name>ColumnIdentifier</name></type> <name>newName</name></decl></parameter>,
                                  <parameter><decl><type><name><name>TableMetadata</name><operator>.</operator><name>Builder</name></name></type> <name>tableBuilder</name></decl></parameter>,
                                  <parameter><decl><type><name><name>Views</name><operator>.</operator><name>Builder</name></name></type> <name>viewsBuilder</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getExistingColumn</name></name><argument_list>(<argument><expr><name>oldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>column</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Column %s was not found in table %s"</literal></expr></argument>, <argument><expr><name>oldName</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>column</name><operator>.</operator><name>isPrimaryKeyColumn</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot rename non PRIMARY KEY column %s"</literal></expr></argument>, <argument><expr><name>oldName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>table</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot rename column %s to %s in table '%s'; another column with that name already exists"</literal></expr></argument>,
                          <argument><expr><name>oldName</name></expr></argument>,
                          <argument><expr><name>newName</name></expr></argument>,
                          <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// TODO: some day try and find a way to not rely on Keyspace/IndexManager/Index to find dependent indexes</comment>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>IndexMetadata</name></argument>&gt;</argument_list></name></type> <name>dependentIndexes</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>openAndGetStore</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>indexManager</name><operator>.</operator><name>getDependentIndexes</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dependentIndexes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Can't rename column %s because it has dependent secondary indexes (%s)"</literal></expr></argument>,
                          <argument><expr><name>oldName</name></expr></argument>,
                          <argument><expr><call><name>join</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>dependentIndexes</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>i</name><operator>.</operator><name>name</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>ViewMetadata</name></type> <name>view</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>views</name><operator>.</operator><name>forTable</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>view</name><operator>.</operator><name>includes</name></name><argument_list>(<argument><expr><name>oldName</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>viewsBuilder</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>viewsBuilder</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>withRenamedPrimaryKeyColumn</name><argument_list>(<argument><expr><name>oldName</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name><name>tableBuilder</name><operator>.</operator><name>renamePrimaryKeyColumn</name></name><argument_list>(<argument><expr><name>oldName</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * ALTER TABLE &lt;table&gt; WITH &lt;property&gt; = &lt;value&gt;
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>AlterOptions</name> <super_list><extends>extends <super><name>AlterTableStatement</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TableAttributes</name></type> <name>attrs</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>AlterOptions</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>TableAttributes</name></type> <name>attrs</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attrs</name></name> <operator>=</operator> <name>attrs</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>attrs</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TableParams</name></type> <name>params</name> <init>= <expr><call><name><name>attrs</name><operator>.</operator><name>asAlteredTableParams</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>params</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isCounter</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>params</name><operator>.</operator><name>defaultTimeToLive</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot set default_time_to_live on a table with counters"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEmpty</name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>views</name><operator>.</operator><name>forTable</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>params</name><operator>.</operator><name>gcGraceSeconds</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot alter gc_grace_seconds of the base table of a "</literal> <operator>+</operator>
                          <literal type="string">"materialized view to 0, since this value is used to TTL "</literal> <operator>+</operator>
                          <literal type="string">"undelivered updates. Setting gc_grace_seconds too low might "</literal> <operator>+</operator>
                          <literal type="string">"cause undelivered updates to expire "</literal> <operator>+</operator>
                          <literal type="string">"before being replayed."</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>keyspace</name><operator>.</operator><name>createReplicationStrategy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasTransientReplicas</name><argument_list>()</argument_list></call>
                <operator>&amp;&amp;</operator> <name><name>params</name><operator>.</operator><name>readRepair</name></name> <operator>!=</operator> <name><name>ReadRepairStrategy</name><operator>.</operator><name>NONE</name></name></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"read_repair must be set to 'NONE' for transiently replicated keyspaces"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name><name>keyspace</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>tables</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>


    <comment type="block" format="javadoc">/**
     * ALTER TABLE &lt;table&gt; DROP COMPACT STORAGE
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>DropCompactStorage</name> <super_list><extends>extends <super><name>AlterTableStatement</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AlterTableStatement</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NoSpamLogger</name></type> <name>noSpamLogger</name> <init>= <expr><call><name><name>NoSpamLogger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><literal type="number">5L</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <constructor><specifier>private</specifier> <name>DropCompactStorage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>enableDropCompactStorage</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"DROP COMPACT STORAGE is disabled. Enable in cassandra.yaml to use."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>table</name><operator>.</operator><name>isCompactTable</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name><name>AlterTableStatement</name><operator>.</operator><name>ire</name></name><argument_list>(<argument><expr><literal type="string">"Cannot DROP COMPACT STORAGE on table without COMPACT STORAGE"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>validateCanDropCompactStorage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><call><name><name>table</name><operator>.</operator><name>isCounter</name></name><argument_list>()</argument_list></call></expr>
                            ?</condition><then> <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>COMPOUND</name></name></expr></argument>, <argument><expr><name><name>Flag</name><operator>.</operator><name>COUNTER</name></name></expr></argument>)</argument_list></call></expr>
                            </then><else>: <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>COMPOUND</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>keyspace</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>tables</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Throws if DROP COMPACT STORAGE cannot be used (yet) because the cluster is not sufficiently upgraded. To be able
         * to use DROP COMPACT STORAGE, we need to ensure that no pre-3.0 sstables exists in the cluster, as we won't be
         * able to read them anymore once COMPACT STORAGE is dropped (see CASSANDRA-15897). In practice, this method checks
         * 3 things:
         *   1) that all nodes are on 3.0+. We need this because 2.x nodes don't advertise their sstable versions.
         *   2) for 3.0+, we use the new (CASSANDRA-15897) sstables versions set gossiped by all nodes to ensure all
         *      sstables have been upgraded cluster-wise.
         *   3) if the cluster still has some 3.0 nodes that predate CASSANDRA-15897, we will not have the sstable versions
         *      for them. In that case, we also refuse DROP COMPACT (even though it may well be safe at this point) and ask
         *      the user to upgrade all nodes.
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>validateCanDropCompactStorage</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>before4</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>preC15897nodes</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>with2xSStables</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Splitter</name></type> <name>onComma</name> <init>= <expr><call><name><name>Splitter</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>omitEmptyStrings</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trimResults</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>node</name> <range>: <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllEndpoints</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>versions</name><operator>.</operator><name>knows</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                    <call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>versions</name><operator>.</operator><name>getRaw</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>MessagingService</name><operator>.</operator><name>VERSION_40</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>before4</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>sstableVersionsString</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>ApplicationState</name><operator>.</operator><name>SSTABLE_VERSIONS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>sstableVersionsString</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>preC15897nodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <try>try
                <block>{<block_content>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>has2xSStables</name> <init>= <expr><call><name><name>onComma</name><operator>.</operator><name>splitToList</name></name><argument_list>(<argument><expr><name>sstableVersionsString</name></expr></argument>)</argument_list></call>
                                                   <operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                                   <operator>.</operator><call><name>anyMatch</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>v</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><literal type="string">"big-ma"</literal></expr></argument>)</argument_list></call><operator>&lt;=</operator><literal type="number">0</literal></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>has2xSStables</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>with2xSStables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <comment type="line">// Means VersionType::fromString didn't parse a version correctly. Which shouldn't happen, we shouldn't</comment>
                    <comment type="line">// have garbage in Gossip. But crashing the request is not ideal, so we log the error but ignore the</comment>
                    <comment type="line">// node otherwise.</comment>
                    <expr_stmt><expr><call><name><name>noSpamLogger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Unexpected error parsing sstable versions from gossip for {} (gossiped value "</literal> <operator>+</operator>
                                       <literal type="string">"is '{}'). This is a bug and should be reported. Cannot ensure that {} has no "</literal> <operator>+</operator>
                                       <literal type="string">"non-upgraded 2.x sstables anymore. If after this DROP COMPACT STORAGE some old "</literal> <operator>+</operator>
                                       <literal type="string">"sstables cannot be read anymore, please use `upgradesstables` with the "</literal> <operator>+</operator>
                                       <literal type="string">"`--force-compact-storage-on` option."</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>sstableVersionsString</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>before4</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Cannot DROP COMPACT STORAGE as some nodes in the cluster (%s) "</literal> <operator>+</operator>
                                                         <literal type="string">"are not on 4.0+ yet. Please upgrade those nodes and run "</literal> <operator>+</operator>
                                                         <literal type="string">"`upgradesstables` before retrying."</literal></expr></argument>, <argument><expr><name>before4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>preC15897nodes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Cannot guarantee that DROP COMPACT STORAGE is safe as some nodes "</literal> <operator>+</operator>
                                                         <literal type="string">"in the cluster (%s) do not have https://issues.apache.org/jira/browse/CASSANDRA-15897. "</literal> <operator>+</operator>
                                                         <literal type="string">"Please upgrade those nodes and retry."</literal></expr></argument>, <argument><expr><name>preC15897nodes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>with2xSStables</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Cannot DROP COMPACT STORAGE as some nodes in the cluster (%s) "</literal> <operator>+</operator>
                                                         <literal type="string">"has some non-upgraded 2.x sstables. Please run `upgradesstables` "</literal> <operator>+</operator>
                                                         <literal type="string">"on those nodes before retrying"</literal></expr></argument>, <argument><expr><name>with2xSStables</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Raw</name> <super_list><extends>extends <super><name><name>CQLStatement</name><operator>.</operator><name>Raw</name></name></super></extends></super_list>
    <block>{
        <enum><specifier>private</specifier> enum <name>Kind</name>
        <block>{
            <decl><name>ALTER_COLUMN</name></decl>, <decl><name>ADD_COLUMNS</name></decl>, <decl><name>DROP_COLUMNS</name></decl>, <decl><name>RENAME_COLUMNS</name></decl>, <decl><name>ALTER_OPTIONS</name></decl>, <decl><name>DROP_COMPACT_STORAGE</name></decl>
        }</block></enum>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>QualifiedName</name></type> <name>name</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>

        <comment type="line">// ADD</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AddColumns</name><operator>.</operator><name>Column</name></name></argument>&gt;</argument_list></name></type> <name>addedColumns</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// DROP</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>droppedColumns</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Long</name></type> <name>timestamp</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt> <comment type="line">// will use execution timestamp if not provided by query</comment>

        <comment type="line">// RENAME</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>renamedColumns</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// OPTIONS</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableAttributes</name></type> <name>attrs</name> <init>= <expr><operator>new</operator> <call><name>TableAttributes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Raw</name><parameter_list>(<parameter><decl><type><name>QualifiedName</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>AlterTableStatement</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><ternary><condition><expr><call><name><name>name</name><operator>.</operator><name>hasKeyspace</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>name</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>state</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <switch>switch <condition>(<expr><name>kind</name></expr>)</condition>
            <block>{<block_content>
                <case>case          <expr><name>ALTER_COLUMN</name></expr>:</case> <return>return <expr><operator>new</operator> <call><name>AlterColumn</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case           <expr><name>ADD_COLUMNS</name></expr>:</case> <return>return <expr><operator>new</operator> <call><name>AddColumns</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>addedColumns</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case          <expr><name>DROP_COLUMNS</name></expr>:</case> <return>return <expr><operator>new</operator> <call><name>DropColumns</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>droppedColumns</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case        <expr><name>RENAME_COLUMNS</name></expr>:</case> <return>return <expr><operator>new</operator> <call><name>RenameColumns</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>renamedColumns</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case         <expr><name>ALTER_OPTIONS</name></expr>:</case> <return>return <expr><operator>new</operator> <call><name>AlterOptions</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case  <expr><name>DROP_COMPACT_STORAGE</name></expr>:</case> <return>return <expr><operator>new</operator> <call><name>DropCompactStorage</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></switch>

            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>alter</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>CQL3Type</name><operator>.</operator><name>Raw</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>kind</name> <operator>=</operator> <name><name>Kind</name><operator>.</operator><name>ALTER_COLUMN</name></name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>CQL3Type</name><operator>.</operator><name>Raw</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>kind</name> <operator>=</operator> <name><name>Kind</name><operator>.</operator><name>ADD_COLUMNS</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>addedColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>AddColumns</name><operator>.</operator><name>Column</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>isStatic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>drop</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>kind</name> <operator>=</operator> <name><name>Kind</name><operator>.</operator><name>DROP_COLUMNS</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>droppedColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>dropCompactStorage</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>kind</name> <operator>=</operator> <name><name>Kind</name><operator>.</operator><name>DROP_COMPACT_STORAGE</name></name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>timestamp</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>rename</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ColumnIdentifier</name></type> <name>to</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>kind</name> <operator>=</operator> <name><name>Kind</name><operator>.</operator><name>RENAME_COLUMNS</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>renamedColumns</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>attrs</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name><name>Kind</name><operator>.</operator><name>ALTER_OPTIONS</name></name></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
