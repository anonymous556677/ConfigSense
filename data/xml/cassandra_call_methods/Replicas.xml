<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/locator/Replicas.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Predicate</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>carrotsearch</name><operator>.</operator><name>hppc</name><operator>.</operator><name>ObjectIntHashMap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>carrotsearch</name><operator>.</operator><name>hppc</name><operator>.</operator><name>ObjectObjectHashMap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>all</name></name>;</import>

<class><specifier>public</specifier> class <name>Replicas</name>
<block>{

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>countFull</name><parameter_list>(<parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><name>replicas</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
        <return>return <expr><name>count</name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ReplicaCount</name>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>fullReplicas</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>transientReplicas</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>allReplicas</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>fullReplicas</name> <operator>+</operator> <name>transientReplicas</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>fullReplicas</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>fullReplicas</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>transientReplicas</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>transientReplicas</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>increment</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>fullReplicas</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>transientReplicas</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasAtleast</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>allReplicas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fullReplicas</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><name><name>this</name><operator>.</operator><name>fullReplicas</name></name> <operator>&gt;=</operator> <name>fullReplicas</name>
                    <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>allReplicas</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>allReplicas</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ReplicaCount</name></type> <name>countInOurDc</name><parameter_list>(<parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ReplicaCount</name></type> <name>count</name> <init>= <expr><operator>new</operator> <call><name>ReplicaCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>inOurDc</name> <init>= <expr><call><name><name>InOurDcTester</name><operator>.</operator><name>replicas</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><name>replicas</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>inOurDc</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>count</name><operator>.</operator><name>increment</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
        <return>return <expr><name>count</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * count the number of full and transient replicas, separately, for each DC
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ObjectObjectHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ReplicaCount</name></argument>&gt;</argument_list></name></type> <name>countPerDc</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dataCenters</name></decl></parameter>, <parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>ObjectObjectHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ReplicaCount</name></argument>&gt;</argument_list></name></type> <name>perDc</name> <init>= <expr><operator>new</operator> <call><name><name>ObjectObjectHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>dataCenters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>dc</name><range>: <expr><name>dataCenters</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>perDc</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ReplicaCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><name>replicas</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>dc</name> <init>= <expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>perDc</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>increment</name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>perDc</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * increment each of the map's DC entries for each matching replica provided
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>addToCountPerDc</name><parameter_list>(<parameter><decl><type><name><name>ObjectIntHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>perDc</name></decl></parameter>, <parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><name>replicas</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>dc</name> <init>= <expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>perDc</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A placeholder for areas of the code that cannot yet handle transient replicas, but should do so in future
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>temporaryAssertFull</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>replica</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"transient replicas are currently unsupported: "</literal> <operator>+</operator> <name>replica</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A placeholder for areas of the code that cannot yet handle transient replicas, but should do so in future
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>temporaryAssertFull</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>all</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>, <argument><expr><name>Replica</name><operator>::</operator><name>isFull</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"transient replicas are currently unsupported: "</literal> <operator>+</operator> <call><name><name>Iterables</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>replicas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * For areas of the code that should never see a transient replica
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertFull</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>all</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>, <argument><expr><name>Replica</name><operator>::</operator><name>isFull</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"transient replicas are currently unsupported: "</literal> <operator>+</operator> <call><name><name>Iterables</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>replicas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stringify</name><parameter_list>(<parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stringEndpoints</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>replicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name><range>: <expr><name>replicas</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>stringEndpoints</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>(<argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>stringEndpoints</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
