<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/concurrent/LocalAwareExecutorService.java"><comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>

<interface><specifier>public</specifier> interface <name>LocalAwareExecutorService</name> <super_list><extends>extends <super><name>ExecutorService</name></super>, <super><name>ResizableThreadPool</name></super></extends></super_list>
<block>{
    <comment type="line">// we need a way to inject a TraceState directly into the Executor context without going through</comment>
    <comment type="line">// the global Tracing sessions; see CASSANDRA-5668</comment>
    <function_decl><type><name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>ExecutorLocals</name></type> <name>locals</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// permits executing in the context of the submitting thread</comment>
    <function_decl><type><name>void</name></type> <name>maybeExecuteImmediately</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>command</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the approximate number of threads that are actively
     * executing tasks.
     *
     * @return the number of threads
     */</comment>
    <function_decl><type><name>int</name></type> <name>getActiveTaskCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the approximate total number of tasks that have
     * completed execution. Because the states of tasks and threads
     * may change dynamically during computation, the returned value
     * is only an approximation, but one that does not ever decrease
     * across successive calls.
     *
     * @return the number of tasks
     */</comment>
    <function_decl><type><name>long</name></type> <name>getCompletedTaskCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the approximate total of tasks waiting to be executed.
     * Because the states of tasks and threads
     * may change dynamically during computation, the returned value
     * is only an approximation, but one that does not ever decrease
     * across successive calls.
     *
     * @return the number of tasks
     */</comment>
    <function_decl><type><name>int</name></type> <name>getPendingTaskCount</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>default</specifier> <name>int</name></type> <name>getMaxTasksQueued</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <interface>interface <name>MaximumPoolSizeListener</name>
    <block>{
        <comment type="block" format="javadoc">/**
         * Listener to follow changes to the maximum pool size
         */</comment>
        <function_decl><type><name>void</name></type> <name>onUpdateMaximumPoolSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maximumPoolSize</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>
}</block></interface>
</unit>
