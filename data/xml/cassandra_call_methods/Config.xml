<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/config/Config.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Modifier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Supplier</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Joiner</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>fql</name><operator>.</operator><name>FullQueryLoggerOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ConsistencyLevel</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A class that contains configuration properties for the cassandra node it runs within.
 *
 * Properties declared as volatile can be mutated via JMX.
 */</comment>
<class><specifier>public</specifier> class <name>Config</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Prefix for Java properties for internal Cassandra configuration options
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PROPERTY_PREFIX</name> <init>= <expr><literal type="string">"cassandra."</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>cluster_name</name> <init>= <expr><literal type="string">"Test Cluster"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>authenticator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>authorizer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>role_manager</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>network_authorizer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>permissions_validity_in_ms</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>permissions_cache_max_entries</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>permissions_update_interval_in_ms</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>roles_validity_in_ms</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>roles_cache_max_entries</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>roles_update_interval_in_ms</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>credentials_validity_in_ms</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>credentials_cache_max_entries</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>credentials_update_interval_in_ms</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Hashing strategy Random or OPHF */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>partitioner</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>auto_bootstrap</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>hinted_handoff_enabled</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hinted_handoff_disabled_datacenters</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>newConcurrentHashSet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>max_hint_window_in_ms</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3600</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt> <comment type="line">// three hours</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>hints_directory</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>force_new_prepared_statement_behaviour</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>ParameterizedClass</name></type> <name>seed_provider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>DiskAccessMode</name></type> <name>disk_access_mode</name> <init>= <expr><name><name>DiskAccessMode</name><operator>.</operator><name>auto</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>DiskFailurePolicy</name></type> <name>disk_failure_policy</name> <init>= <expr><name><name>DiskFailurePolicy</name><operator>.</operator><name>ignore</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CommitFailurePolicy</name></type> <name>commit_failure_policy</name> <init>= <expr><name><name>CommitFailurePolicy</name><operator>.</operator><name>stop</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* initial token in the ring */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>initial_token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>num_tokens</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Triggers automatic allocation of tokens if set, using the replication strategy of the referenced keyspace */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>allocate_tokens_for_keyspace</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Triggers automatic allocation of tokens if set, based on the provided replica count for a datacenter */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>allocate_tokens_for_local_replication_factor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>native_transport_idle_timeout_in_ms</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>request_timeout_in_ms</name> <init>= <expr><literal type="number">10000L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>read_request_timeout_in_ms</name> <init>= <expr><literal type="number">5000L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>range_request_timeout_in_ms</name> <init>= <expr><literal type="number">10000L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>write_request_timeout_in_ms</name> <init>= <expr><literal type="number">2000L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>counter_write_request_timeout_in_ms</name> <init>= <expr><literal type="number">5000L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>cas_contention_timeout_in_ms</name> <init>= <expr><literal type="number">1000L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>truncate_request_timeout_in_ms</name> <init>= <expr><literal type="number">60000L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>streaming_connections_per_host</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>streaming_keep_alive_period_in_secs</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt> <comment type="line">//5 minutes</comment>

    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>cross_node_timeout</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>slow_query_log_timeout_in_ms</name> <init>= <expr><literal type="number">500L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>double</name></type> <name>phi_convict_threshold</name> <init>= <expr><literal type="number">8.0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>concurrent_reads</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>concurrent_writes</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>concurrent_counter_writes</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>concurrent_materialized_view_writes</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>Integer</name></type> <name>concurrent_replicates</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>memtable_flush_writers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>memtable_heap_space_in_mb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>memtable_offheap_space_in_mb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Float</name></type> <name>memtable_cleanup_threshold</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Limit the maximum depth of repair session merkle trees</comment>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>volatile</specifier> <name>Integer</name></type> <name>repair_session_max_tree_depth</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>Integer</name></type> <name>repair_session_space_in_mb</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>use_offheap_merkle_trees</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>storage_port</name> <init>= <expr><literal type="number">7000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>ssl_storage_port</name> <init>= <expr><literal type="number">7001</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>listen_address</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>listen_interface</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>listen_interface_prefer_ipv6</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>broadcast_address</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>listen_on_broadcast_address</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>internode_authenticator</name></decl>;</decl_stmt>

    <comment type="block">/*
     * RPC address and interface refer to the address/interface used for the native protocol used to communicate with
     * clients. It's still called RPC in some places even though Thrift RPC is gone. If you see references to native
     * address or native port it's derived from the RPC address configuration.
     *
     * native_transport_port is the port that is paired with RPC address to bind on.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>rpc_address</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>rpc_interface</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>rpc_interface_prefer_ipv6</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>broadcast_rpc_address</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>rpc_keepalive</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>internode_max_message_size_in_bytes</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Replaces</name><argument_list>(<argument><expr><name>oldName</name> <operator>=</operator> <literal type="string">"internode_send_buff_size_in_bytes"</literal></expr></argument>, <argument><expr><name>deprecated</name> <operator>=</operator> <literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>internode_socket_send_buffer_size_in_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Replaces</name><argument_list>(<argument><expr><name>oldName</name> <operator>=</operator> <literal type="string">"internode_recv_buff_size_in_bytes"</literal></expr></argument>, <argument><expr><name>deprecated</name> <operator>=</operator> <literal type="boolean">true</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>internode_socket_receive_buffer_size_in_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// TODO: derive defaults from system memory settings?</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>internode_application_send_queue_capacity_in_bytes</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 4MiB</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>internode_application_send_queue_reserve_endpoint_capacity_in_bytes</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 128MiB</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>internode_application_send_queue_reserve_global_capacity_in_bytes</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 512MiB</comment>

    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>internode_application_receive_queue_capacity_in_bytes</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 4MiB</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>internode_application_receive_queue_reserve_endpoint_capacity_in_bytes</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 128MiB</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>internode_application_receive_queue_reserve_global_capacity_in_bytes</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 512MiB</comment>

    <comment type="line">// Defensive settings for protecting Cassandra from true network partitions. See (CASSANDRA-14358) for details.</comment>
    <comment type="line">// The amount of time to wait for internode tcp connections to establish.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>internode_tcp_connect_timeout_in_ms</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// The amount of time unacknowledged data is allowed on a connection before we throw out the connection</comment>
    <comment type="line">// Note this is only supported on Linux + epoll, and it appears to behave oddly above a setting of 30000</comment>
    <comment type="line">// (it takes much longer than 30s) as of Linux 4.12. If you want something that high set this to 0</comment>
    <comment type="line">// (which picks up the OS default) and configure the net.ipv4.tcp_retries2 sysctl to be ~8.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>internode_tcp_user_timeout_in_ms</name> <init>= <expr><literal type="number">30000</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// Similar to internode_tcp_user_timeout_in_ms but used specifically for streaming connection.</comment>
    <comment type="line">// The default is 5 minutes. Increase it or set it to 0 in order to increase the timeout.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>internode_streaming_tcp_user_timeout_in_ms</name> <init>= <expr><literal type="number">300_000</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 5 minutes</comment>

    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>start_native_transport</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>native_transport_port</name> <init>= <expr><literal type="number">9042</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>native_transport_port_ssl</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>native_transport_max_threads</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>native_transport_max_frame_size_in_mb</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>native_transport_max_concurrent_connections</name> <init>= <expr><operator>-</operator><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>native_transport_max_concurrent_connections_per_ip</name> <init>= <expr><operator>-</operator><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>native_transport_flush_in_batches_legacy</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>native_transport_allow_older_protocols</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>native_transport_max_concurrent_requests_in_bytes_per_ip</name> <init>= <expr><operator>-</operator><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>native_transport_max_concurrent_requests_in_bytes</name> <init>= <expr><operator>-</operator><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>native_transport_receive_queue_capacity_in_bytes</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 1MiB</comment>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>Integer</name></type> <name>native_transport_max_negotiable_protocol_version</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Max size of values in SSTables, in MegaBytes.
     * Default is the same as the native protocol frame limit: 256Mb.
     * See AbstractType for how it is used.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>max_value_size_in_mb</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>snapshot_before_compaction</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>auto_snapshot</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>snapshot_links_per_second</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* if the size of columns or super-columns are more than this, indexing will kick in */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>column_index_size_in_kb</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>column_index_cache_size_in_kb</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>batch_size_warn_threshold_in_kb</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>batch_size_fail_threshold_in_kb</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>unlogged_batch_across_partitions_warn_threshold</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>Integer</name></type> <name>concurrent_compactors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>compaction_throughput_mb_per_sec</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>compaction_large_partition_warning_threshold_mb</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>min_free_space_per_drive_in_mb</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>concurrent_materialized_view_builders</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>reject_repair_compaction_threshold</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @deprecated retry support removed on CASSANDRA-10992
     */</comment>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>max_streaming_retries</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>stream_throughput_outbound_megabits_per_sec</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>inter_dc_stream_throughput_outbound_megabits_per_sec</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>data_file_directories</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The directory to use for storing the system keyspaces data.
     * If unspecified the data will be stored in the first of the data_file_directories.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>local_system_data_file_directory</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>saved_caches_directory</name></decl>;</decl_stmt>

    <comment type="line">// Commit Log</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>commitlog_directory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>commitlog_total_space_in_mb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CommitLogSync</name></type> <name>commitlog_sync</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @deprecated since 4.0 This value was near useless, and we're not using it anymore
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>commitlog_sync_batch_window_in_ms</name> <init>= <expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>commitlog_sync_group_window_in_ms</name> <init>= <expr><name><name>Double</name><operator>.</operator><name>NaN</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>commitlog_sync_period_in_ms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>commitlog_segment_size_in_mb</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ParameterizedClass</name></type> <name>commitlog_compression</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>FlushCompression</name></type> <name>flush_compression</name> <init>= <expr><name><name>FlushCompression</name><operator>.</operator><name>fast</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>commitlog_max_compression_buffers_in_pool</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>periodic_commitlog_sync_lag_block_in_ms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>TransparentDataEncryptionOptions</name></type> <name>transparent_data_encryption_options</name> <init>= <expr><operator>new</operator> <call><name>TransparentDataEncryptionOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>max_mutation_size_in_kb</name></decl>;</decl_stmt>

    <comment type="line">// Change-data-capture logs</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>cdc_enabled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>cdc_raw_directory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>cdc_total_space_in_mb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>cdc_free_space_check_interval_ms</name> <init>= <expr><literal type="number">250</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>commitlog_periodic_queue_size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>endpoint_snitch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>dynamic_snitch</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>dynamic_snitch_update_interval_in_ms</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>dynamic_snitch_reset_interval_in_ms</name> <init>= <expr><literal type="number">600000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>dynamic_snitch_badness_threshold</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name><name>EncryptionOptions</name><operator>.</operator><name>ServerEncryptionOptions</name></name></type> <name>server_encryption_options</name> <init>= <expr><operator>new</operator> <call><name><name>EncryptionOptions</name><operator>.</operator><name>ServerEncryptionOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>client_encryption_options</name> <init>= <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>InternodeCompression</name></type> <name>internode_compression</name> <init>= <expr><name><name>InternodeCompression</name><operator>.</operator><name>none</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>hinted_handoff_throttle_in_kb</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>batchlog_replay_throttle_in_kb</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>max_hints_delivery_threads</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>hints_flush_period_in_ms</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>max_hints_file_size_in_mb</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ParameterizedClass</name></type> <name>hints_compression</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>incremental_backups</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>trickle_fsync</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>trickle_fsync_interval_in_kb</name> <init>= <expr><literal type="number">10240</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>sstable_preemptive_open_interval_in_mb</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>key_cache_migrate_during_compaction</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Long</name></type> <name>key_cache_size_in_mb</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>key_cache_save_period</name> <init>= <expr><literal type="number">14400</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>key_cache_keys_to_save</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>row_cache_class_name</name> <init>= <expr><literal type="string">"org.apache.cassandra.cache.OHCProvider"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>row_cache_size_in_mb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>row_cache_save_period</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>row_cache_keys_to_save</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>Long</name></type> <name>counter_cache_size_in_mb</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>counter_cache_save_period</name> <init>= <expr><literal type="number">7200</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>counter_cache_keys_to_save</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>cache_load_timeout_seconds</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isClientMode</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>Config</name></argument>&gt;</argument_list></name></type> <name>overrideLoadConfig</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>networking_cache_size_in_mb</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>Integer</name></type> <name>file_cache_size_in_mb</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>file_cache_enabled</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.file_cache_enabled"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Because of the current {@link org.apache.cassandra.utils.memory.BufferPool} slab sizes of 64 kb, we
     * store in the file cache buffers that divide 64 kb, so we need to round the buffer sizes to powers of two.
     * This boolean controls weather they are rounded up or down. Set it to true to round up to the
     * next power of two, set it to false to round down to the previous power of two. Note that buffer sizes are
     * already rounded to 4 kb and capped between 4 kb minimum and 64 kb maximum by the {@link DiskOptimizationStrategy}.
     * By default, this boolean is set to round down when {@link #disk_optimization_strategy} is {@code ssd},
     * and to round up when it is {@code spinning}.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Boolean</name></type> <name>file_cache_round_up</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>buffer_pool_use_heap_if_exhausted</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>DiskOptimizationStrategy</name></type> <name>disk_optimization_strategy</name> <init>= <expr><name><name>DiskOptimizationStrategy</name><operator>.</operator><name>ssd</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>disk_optimization_estimate_percentile</name> <init>= <expr><literal type="number">0.95</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>disk_optimization_page_cross_chance</name> <init>= <expr><literal type="number">0.1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>inter_dc_tcp_nodelay</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>MemtableAllocationType</name></type> <name>memtable_allocation_type</name> <init>= <expr><name><name>MemtableAllocationType</name><operator>.</operator><name>heap_buffers</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>tombstone_warn_threshold</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>tombstone_failure_threshold</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ReplicaFilteringProtectionOptions</name></type> <name>replica_filtering_protection</name> <init>= <expr><operator>new</operator> <call><name>ReplicaFilteringProtectionOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>Long</name></type> <name>index_summary_capacity_in_mb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>index_summary_resize_interval_in_minutes</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>gc_log_threshold_in_ms</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>gc_warn_threshold_in_ms</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// TTL for different types of trace events.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>tracetype_query_ttl</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>tracetype_repair_ttl</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Maintain statistics on whether writes achieve the ideal consistency level
     * before expiring and becoming hints
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>ConsistencyLevel</name></type> <name>ideal_consistency_level</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>otc_coalescing_strategy</name> <init>= <expr><literal type="string">"DISABLED"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>otc_coalescing_window_us_default</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>otc_coalescing_window_us</name> <init>= <expr><name>otc_coalescing_window_us_default</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>otc_coalescing_enough_coalesced_messages</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>otc_backlog_expiration_interval_ms_default</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>otc_backlog_expiration_interval_ms</name> <init>= <expr><name>otc_backlog_expiration_interval_ms_default</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>windows_timer_interval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Size of the CQL prepared statements cache in MB.
     * Defaults to 1/256th of the heap size or 10MB, whichever is greater.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Long</name></type> <name>prepared_statements_cache_size_mb</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>enable_user_defined_functions</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>enable_scripted_user_defined_functions</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>enable_materialized_views</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>enable_transient_replication</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>enable_sasi_indexes</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>enable_drop_compact_storage</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Optionally disable asynchronous UDF execution.
     * Disabling asynchronous UDF execution also implicitly disables the security-manager!
     * By default, async UDF execution is enabled to be able to detect UDFs that run too long / forever and be
     * able to fail fast - i.e. stop the Cassandra daemon, which is currently the only appropriate approach to
     * "tell" a user that there's something really wrong with the UDF.
     * When you disable async UDF execution, users MUST pay attention to read-timeouts since these may indicate
     * UDFs that run too long or forever - and this can destabilize the cluster.
     *
     * This requires allow_insecure_udfs to be true
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>enable_user_defined_functions_threads</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Set this to true to allow running insecure UDFs.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>allow_insecure_udfs</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Set this to allow UDFs accessing java.lang.System.* methods, which basically allows UDFs to execute any arbitrary code on the system.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>allow_extra_insecure_udfs</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Time in milliseconds after a warning will be emitted to the log and to the client that a UDF runs too long.
     * (Only valid, if enable_user_defined_functions_threads==true)
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>user_defined_function_warn_timeout</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Time in milliseconds after a fatal UDF run-time situation is detected and action according to
     * user_function_timeout_policy will take place.
     * (Only valid, if enable_user_defined_functions_threads==true)
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>user_defined_function_fail_timeout</name> <init>= <expr><literal type="number">1500</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Defines what to do when a UDF ran longer than user_defined_function_fail_timeout.
     * Possible options are:
     * - 'die' - i.e. it is able to emit a warning to the client before the Cassandra Daemon will shut down.
     * - 'die_immediate' - shut down C* daemon immediately (effectively prevent the chance that the client will receive a warning).
     * - 'ignore' - just log - the most dangerous option.
     * (Only valid, if enable_user_defined_functions_threads==true)
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>UserFunctionTimeoutPolicy</name></type> <name>user_function_timeout_policy</name> <init>= <expr><name><name>UserFunctionTimeoutPolicy</name><operator>.</operator><name>die</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>back_pressure_enabled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>volatile</specifier> <name>ParameterizedClass</name></type> <name>back_pressure_strategy</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>concurrent_validations</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>RepairCommandPoolFullStrategy</name></type> <name>repair_command_pool_full_strategy</name> <init>= <expr><name><name>RepairCommandPoolFullStrategy</name><operator>.</operator><name>queue</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>repair_command_pool_size</name> <init>= <expr><name>concurrent_validations</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * When a node first starts up it intially considers all other peers as DOWN and is disconnected from all of them.
     * To be useful as a coordinator (and not introduce latency penalties on restart) this node must have successfully
     * opened all three internode TCP connections (gossip, small, and large messages) before advertising to clients.
     * Due to this, by default, Casssandra will prime these internode TCP connections and wait for all but a single
     * node to be DOWN/disconnected in the local datacenter before offering itself as a coordinator, subject to a
     * timeout. See CASSANDRA-13993 and CASSANDRA-14297 for more details.
     *
     * We provide two tunables to control this behavior as some users may want to block until all datacenters are
     * available (global QUORUM/EACH_QUORUM), some users may not want to block at all (clients that already work
     * around the problem), and some users may want to prime the connections but not delay startup.
     *
     * block_for_peers_timeout_in_secs: controls how long this node will wait to connect to peers. To completely disable
     * any startup connectivity checks set this to -1. To trigger the internode connections but immediately continue
     * startup, set this to to 0. The default is 10 seconds.
     *
     * block_for_peers_in_remote_dcs: controls if this node will consider remote datacenters to wait for. The default
     * is to _not_ wait on remote datacenters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>block_for_peers_timeout_in_secs</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>block_for_peers_in_remote_dcs</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>automatic_sstable_upgrade</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>max_concurrent_automatic_sstable_upgrades</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>stream_entire_sstables</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>AuditLogOptions</name></type> <name>audit_logging_options</name> <init>= <expr><operator>new</operator> <call><name>AuditLogOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>FullQueryLoggerOptions</name></type> <name>full_query_logging_options</name> <init>= <expr><operator>new</operator> <call><name>FullQueryLoggerOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>CorruptedTombstoneStrategy</name></type> <name>corrupted_tombstone_strategy</name> <init>= <expr><name><name>CorruptedTombstoneStrategy</name><operator>.</operator><name>disabled</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>diagnostic_events_enabled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * flags for enabling tracking repaired state of data during reads
     * separate flags for range &amp; single partition reads as single partition reads are only tracked
     * when CL &gt; 1 and a digest mismatch occurs. Currently, range queries don't use digests so if
     * enabled for range reads, all such reads will include repaired data tracking. As this adds
     * some overhead, operators may wish to disable it whilst still enabling it for partition reads
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>repaired_data_tracking_for_range_reads_enabled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>repaired_data_tracking_for_partition_reads_enabled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/* If true, unconfirmed mismatches (those which cannot be considered conclusive proof of out of
     * sync repaired data due to the presence of pending repair sessions, or unrepaired partition
     * deletes) will increment a metric, distinct from confirmed mismatches. If false, unconfirmed
     * mismatches are simply ignored by the coordinator.
     * This is purely to allow operators to avoid potential signal:noise issues as these types of
     * mismatches are considerably less actionable than their confirmed counterparts. Setting this
     * to true only disables the incrementing of the counters when an unconfirmed mismatch is found
     * and has no other effect on the collection or processing of the repaired data.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>report_unconfirmed_repaired_data_mismatches</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/*
     * If true, when a repaired data mismatch is detected at read time or during a preview repair,
     * a snapshot request will be issued to each particpating replica. These are limited at the replica level
     * so that only a single snapshot per-table per-day can be taken via this method.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>snapshot_on_repaired_data_mismatch</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * number of seconds to set nowInSec into the future when performing validation previews against repaired data
     * this (attempts) to prevent a race where validations on different machines are started on different sides of
     * a tombstone being compacted away
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>validation_preview_purge_head_start_in_sec</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The intial capacity for creating RangeTombstoneList.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>initial_range_tombstone_list_allocation_size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * The growth factor to enlarge a RangeTombstoneList.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>double</name></type> <name>range_tombstone_list_growth_factor</name> <init>= <expr><literal type="number">1.5</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @deprecated migrate to {@link DatabaseDescriptor#isClientInitialized()}
     */</comment>
    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isClientMode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>isClientMode</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * If true, when rows with duplicate clustering keys are detected during a read or compaction
     * a snapshot will be taken. In the read case, each a snapshot request will be issued to each
     * replica involved in the query, for compaction the snapshot will be created locally.
     * These are limited at the replica level so that only a single snapshot per-day can be taken
     * via this method.
     *
     * This requires check_for_duplicate_rows_during_reads and/or check_for_duplicate_rows_during_compaction
     * below to be enabled
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>snapshot_on_duplicate_row_detection</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * If these are enabled duplicate keys will get logged, and if snapshot_on_duplicate_row_detection
     * is enabled, the table will get snapshotted for offline investigation
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>check_for_duplicate_rows_during_reads</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>check_for_duplicate_rows_during_compaction</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>autocompaction_on_startup_enabled</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.autocompaction_on_startup_enabled"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// see CASSANDRA-3200 / CASSANDRA-16274</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>auto_optimise_inc_repair_streams</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>auto_optimise_full_repair_streams</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>auto_optimise_preview_repair_streams</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Client mode means that the process is a pure client, that uses C* code base but does
     * not read or write local C* database files.
     *
     * @deprecated migrate to {@link DatabaseDescriptor#clientInitialization(boolean)}
     */</comment>
    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setClientMode</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>clientMode</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>isClientMode</name> <operator>=</operator> <name>clientMode</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>table_count_warn_threshold</name> <init>= <expr><literal type="number">150</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>keyspace_count_warn_threshold</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>consecutive_message_errors_threshold</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>Config</name></argument>&gt;</argument_list></name></type> <name>getOverrideLoadConfig</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>overrideLoadConfig</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setOverrideLoadConfig</name><parameter_list>(<parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>Config</name></argument>&gt;</argument_list></name></type> <name>loadConfig</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>overrideLoadConfig</name> <operator>=</operator> <name>loadConfig</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <enum><specifier>public</specifier> enum <name>CommitLogSync</name>
    <block>{
        <decl><name>periodic</name></decl>,
        <decl><name>batch</name></decl>,
        <decl><name>group</name></decl>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>FlushCompression</name>
    <block>{
        <decl><name>none</name></decl>,
        <decl><name>fast</name></decl>,
        <decl><name>table</name></decl>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>InternodeCompression</name>
    <block>{
        <decl><name>all</name></decl>, <decl><name>none</name></decl>, <decl><name>dc</name></decl>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>DiskAccessMode</name>
    <block>{
        <decl><name>auto</name></decl>,
        <decl><name>mmap</name></decl>,
        <decl><name>mmap_index_only</name></decl>,
        <decl><name>standard</name></decl>,
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>MemtableAllocationType</name>
    <block>{
        <decl><name>unslabbed_heap_buffers</name></decl>,
        <decl><name>heap_buffers</name></decl>,
        <decl><name>offheap_buffers</name></decl>,
        <decl><name>offheap_objects</name></decl>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>DiskFailurePolicy</name>
    <block>{
        <decl><name>best_effort</name></decl>,
        <decl><name>stop</name></decl>,
        <decl><name>ignore</name></decl>,
        <decl><name>stop_paranoid</name></decl>,
        <decl><name>die</name></decl>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>CommitFailurePolicy</name>
    <block>{
        <decl><name>stop</name></decl>,
        <decl><name>stop_commit</name></decl>,
        <decl><name>ignore</name></decl>,
        <decl><name>die</name></decl>,
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>UserFunctionTimeoutPolicy</name>
    <block>{
        <decl><name>ignore</name></decl>,
        <decl><name>die</name></decl>,
        <decl><name>die_immediate</name></decl>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>DiskOptimizationStrategy</name>
    <block>{
        <decl><name>ssd</name></decl>,
        <decl><name>spinning</name></decl>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>RepairCommandPoolFullStrategy</name>
    <block>{
        <decl><name>queue</name></decl>,
        <decl><name>reject</name></decl>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>CorruptedTombstoneStrategy</name>
    <block>{
        <decl><name>disabled</name></decl>,
        <decl><name>warn</name></decl>,
        <decl><name>exception</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>SENSITIVE_KEYS</name> <init>= <expr><operator>new</operator> <class><super><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{<block_content>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"client_encryption_options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"server_encryption_options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>}</block></class></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>Config</name></type> <name>config</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>configMap</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Field</name></type> <name>field</name> <range>: <expr><call><name><name>Config</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getFields</name></name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <comment type="line">// ignore the constants</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>Modifier</name><operator>.</operator><name>isFinal</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>field</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>SENSITIVE_KEYS</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"&lt;REDACTED&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>value</name></decl>;</decl_stmt>
            <try>try
            <block>{<block_content>
                <comment type="line">// Field.get() can throw NPE if the value of the field is null</comment>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>field</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> | <type><name>IllegalAccessException</name></type> <name>npe</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">"null"</literal></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><call><name><name>configMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Node configuration:[{}]"</literal></expr></argument>, <argument><expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><call><name><name>configMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
