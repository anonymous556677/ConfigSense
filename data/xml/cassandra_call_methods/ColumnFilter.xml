<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/filter/ColumnFilter.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>filter</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>SortedSetMultimap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>TreeMultimap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>ColumnIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>CellPath</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>Gossiper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ColumnMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>CassandraVersion</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents which (non-PK) columns (and optionally which sub-part of a column for complex columns) are selected
 * by a query.
 *
 * We distinguish 2 sets of columns in practice: the _fetched_ columns, which are the columns that we (may, see
 * below) need to fetch internally, and the _queried_ columns, which are the columns that the user has selected
 * in its request.
 *
 * The reason for distinguishing those 2 sets is that due to the CQL semantic (see #6588 for more details), we
 * often need to internally fetch all regular columns or all columns for the queried table, but can still do some
 * optimizations for those columns that are not directly queried by the user (see #10657 for more details).
 *
 * Note that in practice:
 *   - the _queried_ columns set is always included in the _fetched_ one.
 *   - whenever those sets are different, the _fetched_ columns can contain either all the regular columns and
 *     the static columns queried by the user or all the regular and static columns. If the query is a partition level
 *     query (no restrictions on clustering or regular columns) all the static columns will need to be fetched as
 *     some data will need to be returned to the user if the partition has no row but some static data. For all the
 *     other scenarios only the regular columns are required.
 *   - in the special case of a {@code SELECT *} query, we want to query all columns, and _fetched_ == _queried.
 *     As this is a common case, we special case it by using a specific subclass for it.
 *
 * For complex columns, this class optionally allows to specify a subset of the cells to query for each column.
 * We can either select individual cells by path name, or a slice of them. Note that this is a sub-selection of
 * _queried_ cells, so if _fetched_ != _queried_, then the cell selected by this sub-selection are considered
 * queried and the other ones are considered fetched (and if a column has some sub-selection, it must be a queried
 * column, which is actually enforced by the Builder below).
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ColumnFilter</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ColumnFilter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ColumnFilter</name></type> <name>NONE</name> <init>= <expr><call><name>selection</name><argument_list>(<argument><expr><name><name>RegularAndStaticColumns</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Serializer</name></type> <name>serializer</name> <init>= <expr><operator>new</operator> <call><name>Serializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The fetching strategy for the different queries.
     */</comment>
    <enum><specifier>private</specifier> enum <name>FetchingStrategy</name>
    <block>{
        <comment type="block" format="javadoc">/**
         * This strategy will fetch all the regular and static columns.
         *
         * &lt;p&gt;According to the CQL semantic a partition exists if it has at least one row or one of its static columns is not null.
         * For queries that have no restrictions on the clustering or regular columns, C* will return some data for
         * the partition even if it does not contains any row as long as one of the static columns contains data.
         * To be able to ensure those queries all columns need to be fetched.&lt;/p&gt;
         *
         * &lt;p&gt;This strategy is also used, instead of the ALL_REGULARS_AND_QUERIED_STATICS_COLUMNS one, in mixed version clusters
         * where some nodes have a version lower than 4.0. To ensure backward compatibility with those version that interpret the
         * _fetchAll_ serialization flag as a true fetch all request.&lt;/p&gt;
         */</comment>
        <decl><name>ALL_COLUMNS</name>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><name>boolean</name></type> <name>fetchesAllColumns</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><name>RegularAndStaticColumns</name></type> <name>getFetchedColumns</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>queried</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>metadata</name><operator>.</operator><name>regularAndStaticColumns</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></decl>,

        <comment type="block" format="javadoc">/**
         * This strategy will fetch all the regular and selected static columns.
         *
         * &lt;p&gt;According to the CQL semantic a row exists if at least one of its columns is not null.
         * To ensure that we need to fetch all regular columns.&lt;/p&gt;
         */</comment>
        <decl><name>ALL_REGULARS_AND_QUERIED_STATICS_COLUMNS</name>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><name>boolean</name></type> <name>fetchesAllColumns</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><operator>!</operator><name>isStatic</name></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><name>RegularAndStaticColumns</name></type> <name>getFetchedColumns</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>queried</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>RegularAndStaticColumns</name><argument_list>(<argument><expr><name><name>queried</name><operator>.</operator><name>statics</name></name></expr></argument>, <argument><expr><call><name><name>metadata</name><operator>.</operator><name>regularColumns</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></decl>,

        <comment type="block" format="javadoc">/**
         * Fetch only the columns that have been selected.
         *
         * &lt;p&gt;With this strategy _queried_ == _fetched_. This strategy is only used for internal queries.&lt;/p&gt;
         */</comment>
        <decl><name>ONLY_QUERIED_COLUMNS</name>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><name>boolean</name></type> <name>fetchesAllColumns</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><name>boolean</name></type> <name>areAllFetchedColumnsQueried</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><name>RegularAndStaticColumns</name></type> <name>getFetchedColumns</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>queried</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><name>queried</name></expr>;</return>
            </block_content>}</block></function>
        }</block></decl>;

        <comment type="block" format="javadoc">/**
         * Checks if the strategy fetch all the specified columns
         *
         * @param isStatic {@code true} is the check is for static columns, {@code false} otherwise
         * @return {@code true} if the strategy fetch all the static columns, {@code false} otherwise.
         */</comment>
        <decl_stmt><decl><type><specifier>abstract</specifier> <name>boolean</name></type> <name>fetchesAllColumns</name><argument_list>(<argument><expr><name>boolean</name> <name>isStatic</name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Checks if all the fetched columns are guaranteed to be queried
         *
         * @return {@code true} if all the fetched columns are guaranteed to be queried, {@code false} otherwise.
         */</comment>
        <function><type><name>boolean</name></type> <name>areAllFetchedColumnsQueried</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the columns that must be fetched to answer the query.
         *
         * @param metadata the table metadata
         * @param queried the queried columns
         * @return the columns that must be fetched
         */</comment>
        <decl_stmt><decl><type><specifier>abstract</specifier> <name>RegularAndStaticColumns</name></type> <name>getFetchedColumns</name><argument_list>(<argument><expr><name>TableMetadata</name> <name>metadata</name></expr></argument>, <argument><expr><name>RegularAndStaticColumns</name> <name>queried</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    }</block></enum>

    <comment type="block" format="javadoc">/**
     * Returns {@code true} if there are pre-4.0-rc2 nodes in the cluster, {@code false} otherwise.
     *
     * &lt;p&gt;ColumnFilters from 4.0 releases before RC2 wrongly assumed that fetching all regular columns and not
     * the static columns was enough. That was not the case for queries that needed to return rows for empty partitions.
     * See CASSANDRA-16686 for more details.&lt;/p&gt;
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isUpgradingFromVersionLowerThan40RC2</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>isUpgradingFromVersionLowerThan</name></name><argument_list>(<argument><expr><name><name>CassandraVersion</name><operator>.</operator><name>CASSANDRA_4_0_RC2</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"ColumnFilter conversion has been applied so that static columns will not be fetched because there are pre 4.0-rc2 nodes in the cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns {@code true} if there are pre-4.0 nodes in the cluster, {@code false} otherwise.
     *
     * &lt;p&gt;If there pre-4.0 nodes in the cluster all static columns should be fetched along with all regular columns.
     * This is due to the fact that this nodes have a different understanding of the fetchAll serialization flag.
     * Pre-4.0 the fetchAll flag meant that all the columns regular AND STATIC should be fetched whereas for 4.0
     * nodes it meant that only the regular columns and the queried static columns should be fetched.&lt;/p&gt;
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isUpgradingFromVersionLowerThan40</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>isUpgradingFromVersionLowerThan</name></name><argument_list>(<argument><expr><name><name>CassandraVersion</name><operator>.</operator><name>CASSANDRA_4_0</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"ColumnFilter conversion has been applied so that all static columns will be fetched because there are pre 4.0 nodes in the cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns {@code true} if there are pre-3.4 nodes in the cluster, {@code false} otherwise.
     *
     * When fetchAll is enabled on pre CASSANDRA-10657 (3.4-), queried columns are not considered at all, and it
     * is assumed that all columns are queried. CASSANDRA-10657 (3.4+) brings back skipping values of columns
     * which are not in queried set when fetchAll is enabled. That makes exactly the same filter being
     * interpreted in a different way on 3.4- and 3.4+.
     *
     * Moreover, there is no way to convert the filter with fetchAll and queried != null so that it is
     * interpreted the same way on 3.4- because that Cassandra version does not support such filtering.
     *
     * In order to avoid inconsistencies in data read by 3.4- and 3.4+ we need to avoid creation of incompatible
     * filters when the cluster contains 3.4- nodes. We need to do that by using a wildcard query.
     *
     * see CASSANDRA-10657, CASSANDRA-15833, CASSANDRA-16415
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isUpgradingFromVersionLowerThan34</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>isUpgradingFromVersionLowerThan</name></name><argument_list>(<argument><expr><name><name>CassandraVersion</name><operator>.</operator><name>CASSANDRA_3_4</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"ColumnFilter conversion has been applied so that all columns will be queried because there are pre 3.4 nodes in the cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A filter that includes all columns for the provided table.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFilter</name></type> <name>all</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>WildCardColumnFilter</name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>regularAndStaticColumns</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A filter that only fetches/queries the provided columns.
     * &lt;p&gt;
     * Note that this shouldn't be used for CQL queries in general as all columns should be queried to
     * preserve CQL semantic (see class javadoc). This is ok for some internal queries however (and
     * for #6588 if/when we implement it).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFilter</name></type> <name>selection</name><parameter_list>(<parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>columns</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>SelectionColumnFilter</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>FetchingStrategy</name><operator>.</operator><name>ONLY_QUERIED_COLUMNS</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A filter that fetches all columns for the provided table, but returns
     * only the queried ones.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFilter</name></type> <name>selection</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>,
                                         <parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>queried</name></decl></parameter>,
                                         <parameter><decl><type><name>boolean</name></type> <name>returnStaticContentOnPartitionWithNoRows</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// pre CASSANDRA-10657 (3.4-), when fetchAll is enabled, queried columns are not considered at all, and it</comment>
        <comment type="line">// is assumed that all columns are queried.</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isUpgradingFromVersionLowerThan34</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>WildCardColumnFilter</name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>regularAndStaticColumns</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// pre CASSANDRA-12768 (4.0-) all static columns should be fetched along with all regular columns.</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isUpgradingFromVersionLowerThan40</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name><name>SelectionColumnFilter</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>FetchingStrategy</name><operator>.</operator><name>ALL_COLUMNS</name></name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// pre CASSANDRA-16686 (4.0-RC2-) static columns were not fetched unless queried which led to some wrong</comment>
        <comment type="line">// results for some queries</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>returnStaticContentOnPartitionWithNoRows</name> <operator>||</operator> <call><name>isUpgradingFromVersionLowerThan40RC2</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name><name>SelectionColumnFilter</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>FetchingStrategy</name><operator>.</operator><name>ALL_REGULARS_AND_QUERIED_STATICS_COLUMNS</name></name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>SelectionColumnFilter</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>FetchingStrategy</name><operator>.</operator><name>ALL_COLUMNS</name></name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The columns that needs to be fetched internally for this filter.
     *
     * @return the columns to fetch for this filter.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>RegularAndStaticColumns</name></type> <name>fetchedColumns</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * The columns actually queried by the user.
     * &lt;p&gt;
     * Note that this is in general not all the columns that are fetched internally (see {@link #fetchedColumns}).
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>RegularAndStaticColumns</name></type> <name>queriedColumns</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Whether all the (regular or static) columns are fetched by this filter.
     * &lt;p&gt;
     * Note that this method is meant as an optimization but a negative return
     * shouldn't be relied upon strongly: this can return {@code false} but
     * still have all the columns fetches if those were manually selected by the
     * user. The goal here is to cheaply avoid filtering things on wildcard
     * queries, as those are common.
     *
     * @param isStatic whether to check for static columns or not. If {@code true},
     * the method returns if all static columns are fetched, otherwise it checks
     * regular columns.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>fetchesAllColumns</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Whether _fetched_ == _queried_ for this filter, and so if the {@code isQueried()} methods
     * can return {@code false} for some column/cell.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>allFetchedColumnsAreQueried</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Whether the provided column is fetched by this filter.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>fetches</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Whether the provided column, which is assumed to be _fetched_ by this filter (so the caller must guarantee
     * that {@code fetches(column) == true}, is also _queried_ by the user.
     *
     * !WARNING! please be sure to understand the difference between _fetched_ and _queried_
     * columns that this class made before using this method. If unsure, you probably want
     * to use the {@link #fetches} method.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>fetchedColumnIsQueried</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Whether the provided complex cell (identified by its column and path), which is assumed to be _fetched_ by
     * this filter, is also _queried_ by the user.
     *
     * !WARNING! please be sure to understand the difference between _fetched_ and _queried_
     * columns that this class made before using this method. If unsure, you probably want
     * to use the {@link #fetches} method.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>fetchedCellIsQueried</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>CellPath</name></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Creates a new {@code Tester} to efficiently test the inclusion of cells of complex column
     * {@code column}.
     *
     * @param column for complex column for which to create a tester.
     * @return the created tester or {@code null} if all the cells from the provided column
     * are queried.
     */</comment>
    <function_decl><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <specifier>abstract</specifier> <name>Tester</name></type> <name>newTester</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Checks if this {@code ColumnFilter} is for a wildcard query.
     *
     * @return {@code true} if this {@code ColumnFilter} is for a wildcard query, {@code false} otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isWildcard</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the CQL string corresponding to this {@code ColumnFilter}.
     *
     * @return the CQL string corresponding to this {@code ColumnFilter}.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>toCQLString</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the sub-selections or {@code null} if there are none.
     *
     * @return the sub-selections or {@code null} if there are none
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>subSelections</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a {@code ColumnFilter} builder that fetches all regular columns or all columns (and queries the columns
     * added to the builder, or everything if no column is added).
     *
     * @param metadata the table metadata
     * @param returnStaticContentOnPartitionWithNoRows {@code true} if the query must return static contents if the partition has no row,
     * {@code false} otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>allRegularColumnsBuilder</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>returnStaticContentOnPartitionWithNoRows</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>returnStaticContentOnPartitionWithNoRows</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a {@code ColumnFilter} builder that only fetches the columns/cells added to the builder.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>selectionBuilder</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Tester</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isFetched</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>ColumnSubselection</name></type> <name>current</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>iterator</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Tester</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isFetched</name></decl></parameter>, <parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>iterator</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isFetched</name></name> <operator>=</operator> <name>isFetched</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iterator</name></name> <operator>=</operator> <name>iterator</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>fetches</name><parameter_list>(<parameter><decl><type><name>CellPath</name></type> <name>path</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>isFetched</name> <operator>||</operator> <call><name>hasSubselection</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Must only be called if {@code fetches(path) == true}.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>fetchedCellIsQueried</name><parameter_list>(<parameter><decl><type><name>CellPath</name></type> <name>path</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>!</operator><name>isFetched</name> <operator>||</operator> <call><name>hasSubselection</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasSubselection</name><parameter_list>(<parameter><decl><type><name>CellPath</name></type> <name>path</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <while>while <condition>(<expr><name>current</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>current</name><operator>.</operator><name>compareInclusionOf</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// The path is included</comment>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// The path is before this sub-selection, it's not included by any</comment>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

                <comment type="line">// the path is after this sub-selection, we need to check the next one.</comment>
                <expr_stmt><expr><name>current</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * A builder for a {@code ColumnFilter} object.
     *
     * Note that the columns added to this build are the _queried_ column. Whether or not all columns
     * are _fetched_ depends on which constructor you've used to obtained this builder, allRegularColumnsBuilder (all
     * columns are fetched) or selectionBuilder (only the queried columns are fetched).
     *
     * Note that for a allRegularColumnsBuilder, if no queried columns are added, this is interpreted as querying
     * all columns, not querying none (but if you know you want to query all columns, prefer
     * {@link ColumnFilter#all(TableMetadata)}. For selectionBuilder, adding no queried columns means no column will be
     * fetched (so the builder will return {@code PartitionColumns.NONE}).
     *
     * Also, if only a sub-selection of a complex column should be queried, then only the corresponding
     * sub-selection method of the builder ({@link #slice} or {@link #select}) should be called for the
     * column, but {@link #add} shouldn't. if {@link #add} is also called, the whole column will be
     * queried and the sub-selection(s) will be ignored. This is done for correctness of CQL where
     * if you do "SELECT m, m[2..5]", you are really querying the whole collection.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Builder</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>metadata</name></decl>;</decl_stmt> <comment type="line">// null if we don't fetch all columns</comment>

        <comment type="block" format="javadoc">/**
         * {@code true} if the query must return static contents if the partition has no row, {@code false} otherwise.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>returnStaticContentOnPartitionWithNoRows</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>RegularAndStaticColumns</name><operator>.</operator><name>Builder</name></name></type> <name>queriedBuilder</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>subSelections</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>fullySelectedComplexColumns</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>returnStaticContentOnPartitionWithNoRows</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadata</name></name> <operator>=</operator> <name>metadata</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>returnStaticContentOnPartitionWithNoRows</name></name> <operator>=</operator> <name>returnStaticContentOnPartitionWithNoRows</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>c</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>isComplex</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>c</name><operator>.</operator><name>type</name><operator>.</operator><name>isMultiCell</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>fullySelectedComplexColumns</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>fullySelectedComplexColumns</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>fullySelectedComplexColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>addInternal</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addAll</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Builder</name></type> <name>addInternal</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>c</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>isPrimaryKeyColumn</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>this</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>queriedBuilder</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>queriedBuilder</name> <operator>=</operator> <call><name><name>RegularAndStaticColumns</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>queriedBuilder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Builder</name></type> <name>addSubSelection</name><parameter_list>(<parameter><decl><type><name>ColumnSubselection</name></type> <name>subSelection</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name><name>subSelection</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><call><name><name>column</name><operator>.</operator><name>isComplex</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isMultiCell</name></name><argument_list>()</argument_list></call></expr>;</assert>
            <expr_stmt><expr><call><name>addInternal</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>subSelections</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>subSelections</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>subSelections</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>subSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>slice</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>CellPath</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>CellPath</name></type> <name>to</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>addSubSelection</name><argument_list>(<argument><expr><call><name><name>ColumnSubselection</name><operator>.</operator><name>slice</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>select</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>CellPath</name></type> <name>elt</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>addSubSelection</name><argument_list>(<argument><expr><call><name><name>ColumnSubselection</name><operator>.</operator><name>element</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ColumnFilter</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isFetchAll</name> <init>= <expr><name>metadata</name> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>RegularAndStaticColumns</name></type> <name>queried</name> <init>= <expr><ternary><condition><expr><name>queriedBuilder</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>queriedBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <comment type="line">// It's only ok to have queried == null in ColumnFilter if isFetchAll. So deal with the case of a selectionBuilder</comment>
            <comment type="line">// with nothing selected (we can at least happen on some backward compatible queries - CASSANDRA-10471).</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isFetchAll</name> <operator>&amp;&amp;</operator> <name>queried</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>queried</name> <operator>=</operator> <name><name>RegularAndStaticColumns</name><operator>.</operator><name>NONE</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>s</name> <init>= <expr><call><name>buildSubSelections</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>isFetchAll</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// When fetchAll is enabled on pre CASSANDRA-10657 (3.4-), queried columns are not considered at all, and it</comment>
                <comment type="line">// is assumed that all columns are queried. CASSANDRA-10657 (3.4+) brings back skipping values of columns</comment>
                <comment type="line">// which are not in queried set when fetchAll is enabled. That makes exactly the same filter being</comment>
                <comment type="line">// interpreted in a different way on 3.4- and 3.4+.</comment>
                <comment type="line">//</comment>
                <comment type="line">// Moreover, there is no way to convert the filter with fetchAll and queried != null so that it is</comment>
                <comment type="line">// interpreted the same way on 3.4- because that Cassandra version does not support such filtering.</comment>
                <comment type="line">//</comment>
                <comment type="line">// In order to avoid inconsitencies in data read by 3.4- and 3.4+ we need to avoid creation of incompatible</comment>
                <comment type="line">// filters when the cluster contains 3.4- nodes. We do that by forcibly setting queried to null.</comment>
                <comment type="line">//</comment>
                <comment type="line">// see CASSANDRA-10657, CASSANDRA-15833, CASSANDRA-16415</comment>
                <if_stmt><if>if <condition>(<expr><name>queried</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>isUpgradingFromVersionLowerThan34</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <return>return <expr><operator>new</operator> <call><name>WildCardColumnFilter</name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>regularAndStaticColumns</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// pre CASSANDRA-12768 (4.0-) all static columns should be fetched along with all regular columns.</comment>
                <if_stmt><if>if <condition>(<expr><call><name>isUpgradingFromVersionLowerThan40</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <return>return <expr><call><name><name>SelectionColumnFilter</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>FetchingStrategy</name><operator>.</operator><name>ALL_COLUMNS</name></name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// pre CASSANDRA-16686 (4.0-RC2-) static columns where not fetched unless queried witch lead to some wrong results</comment>
                <comment type="line">// for some queries</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>returnStaticContentOnPartitionWithNoRows</name> <operator>||</operator> <call><name>isUpgradingFromVersionLowerThan40RC2</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <return>return <expr><call><name><name>SelectionColumnFilter</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>FetchingStrategy</name><operator>.</operator><name>ALL_REGULARS_AND_QUERIED_STATICS_COLUMNS</name></name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <return>return <expr><call><name><name>SelectionColumnFilter</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>FetchingStrategy</name><operator>.</operator><name>ALL_COLUMNS</name></name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name><name>SelectionColumnFilter</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>FetchingStrategy</name><operator>.</operator><name>ONLY_QUERIED_COLUMNS</name></name></expr></argument>, <argument><expr><operator>(</operator><name>TableMetadata</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>buildSubSelections</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>subSelections</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>s</name> <init>= <expr><call><name><name>TreeMultimap</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>Comparator</name><operator>.</operator><name>naturalOrder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Comparator</name><operator>.</operator><name>naturalOrder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>ColumnSubselection</name></type> <name>subSelection</name> <range>: <expr><name>subSelections</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>fullySelectedComplexColumns</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>fullySelectedComplexColumns</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>subSelection</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>subSelection</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>subSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <return>return <expr><name>s</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * {@code ColumnFilter} sub-class for wildcard queries.
     *
     * &lt;p&gt;The class does not rely on TableMetadata and expects a fix set of columns to prevent issues
     * with Schema race propagation. See CASSANDRA-15899.&lt;/p&gt;
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WildCardColumnFilter</name> <super_list><extends>extends <super><name>ColumnFilter</name></super></extends></super_list>
    <block>{
        <comment type="block" format="javadoc">/**
         * The queried and fetched columns.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RegularAndStaticColumns</name></type> <name>fetchedAndQueried</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a {@code ColumnFilter} for wildcard queries.
         *
         * &lt;p&gt;The class does not rely on TableMetadata and expects a fix set of columns to prevent issues
         * with Schema race propagation. See CASSANDRA-15899.&lt;/p&gt;
         *
         * @param fetchedAndQueried the fetched and queried columns
         */</comment>
        <constructor><specifier>private</specifier> <name>WildCardColumnFilter</name><parameter_list>(<parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>fetchedAndQueried</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fetchedAndQueried</name></name> <operator>=</operator> <name>fetchedAndQueried</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>RegularAndStaticColumns</name></type> <name>fetchedColumns</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>fetchedAndQueried</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>RegularAndStaticColumns</name></type> <name>queriedColumns</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>fetchedAndQueried</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>fetchesAllColumns</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>allFetchedColumnsAreQueried</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>fetches</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>fetchedColumnIsQueried</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>fetchedCellIsQueried</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>CellPath</name></type> <name>path</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>Tester</name></type> <name>newTester</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>other</name> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>other</name> <operator>instanceof</operator> <name>WildCardColumnFilter</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>WildCardColumnFilter</name></type> <name>w</name> <init>= <expr><operator>(</operator><name>WildCardColumnFilter</name><operator>)</operator> <name>other</name></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>fetchedAndQueried</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>fetchedAndQueried</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>fetchedAndQueried</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"*/*"</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toCQLString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"*"</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>isWildcard</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>subSelections</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * {@code ColumnFilter} sub-class for queries with selected columns.
     *
     * &lt;p&gt;The class  does not rely on TableMetadata and expect a fix set of fetched columns to prevent issues
     * with Schema race propagation. See CASSANDRA-15899.&lt;/p&gt;
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SelectionColumnFilter</name> <super_list><extends>extends <super><name>ColumnFilter</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>FetchingStrategy</name></type> <name>fetchingStrategy</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The selected columns
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RegularAndStaticColumns</name></type> <name>queried</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The columns that need to be fetched to be able
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RegularAndStaticColumns</name></type> <name>fetched</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>subSelections</name></decl>;</decl_stmt> <comment type="line">// can be null</comment>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SelectionColumnFilter</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><name>FetchingStrategy</name></type> <name>fetchingStrategy</name></decl></parameter>,
                                                        <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>,
                                                        <parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>queried</name></decl></parameter>,
                                                        <parameter><decl><type><name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>subSelections</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <assert>assert <expr><name>fetchingStrategy</name> <operator>!=</operator> <name><name>FetchingStrategy</name><operator>.</operator><name>ONLY_QUERIED_COLUMNS</name></name> <operator>||</operator> <name>metadata</name> <operator>==</operator> <literal type="null">null</literal></expr>;</assert>
            <assert>assert <expr><name>queried</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

            <return>return <expr><operator>new</operator> <call><name>SelectionColumnFilter</name><argument_list>(<argument><expr><name>fetchingStrategy</name></expr></argument>,
                                             <argument><expr><name>queried</name></expr></argument>,
                                             <argument><expr><call><name><name>fetchingStrategy</name><operator>.</operator><name>getFetchedColumns</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>queried</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>subSelections</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a {@code ColumnFilter} for queries with selected columns.
         *
         * &lt;p&gt;The class  does not rely on TableMetadata and expect a fix set of columns to prevent issues
         * with Schema race propagation. See CASSANDRA-15899.&lt;/p&gt;
         *
         * @param fetchingStrategy the strategy used to select the fetched columns
         * @param fetched the columns that must be fetched
         * @param queried the queried columns
         * @param subSelections the columns sub-selections
         */</comment>
        <constructor><specifier>public</specifier> <name>SelectionColumnFilter</name><parameter_list>(<parameter><decl><type><name>FetchingStrategy</name></type> <name>fetchingStrategy</name></decl></parameter>,
                                     <parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>queried</name></decl></parameter>,
                                     <parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>fetched</name></decl></parameter>,
                                     <parameter><decl><type><name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>subSelections</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <assert>assert <expr><name>queried</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
            <assert>assert <expr><call><name><name>fetched</name><operator>.</operator><name>includes</name></name><argument_list>(<argument><expr><name>queried</name></expr></argument>)</argument_list></call></expr>;</assert>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fetchingStrategy</name></name> <operator>=</operator> <name>fetchingStrategy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>queried</name></name> <operator>=</operator> <name>queried</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fetched</name></name> <operator>=</operator> <name>fetched</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subSelections</name></name> <operator>=</operator> <name>subSelections</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>RegularAndStaticColumns</name></type> <name>fetchedColumns</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>fetched</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>RegularAndStaticColumns</name></type> <name>queriedColumns</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>queried</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>fetchesAllColumns</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>fetchingStrategy</name><operator>.</operator><name>fetchesAllColumns</name></name><argument_list>(<argument><expr><name>isStatic</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>allFetchedColumnsAreQueried</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>fetchingStrategy</name><operator>.</operator><name>areAllFetchedColumnsQueried</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>fetches</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>fetchingStrategy</name><operator>.</operator><name>fetchesAllColumns</name></name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>fetched</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Whether the provided complex cell (identified by its column and path), which is assumed to be _fetched_ by
         * this filter, is also _queried_ by the user.
         *
         * !WARNING! please be sure to understand the difference between _fetched_ and _queried_
         * columns that this class made before using this method. If unsure, you probably want
         * to use the {@link #fetches} method.
         */</comment>
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>fetchedColumnIsQueried</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>fetchingStrategy</name><operator>.</operator><name>areAllFetchedColumnsQueried</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>queried</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>fetchedCellIsQueried</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>CellPath</name></type> <name>path</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <assert>assert <expr><name>path</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

            <comment type="line">// first verify that the column to which the cell belongs is queried</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fetchedColumnIsQueried</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>subSelections</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name><name>SortedSet</name><argument_list type="generic">&lt;<argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>s</name> <init>= <expr><call><name><name>subSelections</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// No subsection for this column means everything is queried</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>ColumnSubselection</name></type> <name>subSel</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>subSel</name><operator>.</operator><name>compareInclusionOf</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>Tester</name></type> <name>newTester</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>subSelections</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>column</name><operator>.</operator><name>isComplex</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name><name>SortedSet</name><argument_list type="generic">&lt;<argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>s</name> <init>= <expr><call><name><name>subSelections</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><operator>new</operator> <call><name>Tester</name><argument_list>(<argument><expr><call><name><name>fetchingStrategy</name><operator>.</operator><name>fetchesAllColumns</name></name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>subSelections</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>subSelections</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>other</name> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>other</name> <operator>instanceof</operator> <name>SelectionColumnFilter</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>SelectionColumnFilter</name></type> <name>otherCf</name> <init>= <expr><operator>(</operator><name>SelectionColumnFilter</name><operator>)</operator> <name>other</name></expr></init></decl>;</decl_stmt>

            <return>return <expr><name><name>otherCf</name><operator>.</operator><name>fetchingStrategy</name></name> <operator>==</operator> <name><name>this</name><operator>.</operator><name>fetchingStrategy</name></name> <operator>&amp;&amp;</operator>
                   <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>otherCf</name><operator>.</operator><name>queried</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>queried</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>otherCf</name><operator>.</operator><name>fetched</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>fetched</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>otherCf</name><operator>.</operator><name>subSelections</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>subSelections</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>fetchingStrategy</name></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><name>fetched</name></expr></argument>, <argument><expr><name>subSelections</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>fetchingStrategy</name><operator>.</operator><name>fetchesAllColumns</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"*/"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>fetchingStrategy</name> <operator>==</operator> <name><name>FetchingStrategy</name><operator>.</operator><name>ALL_REGULARS_AND_QUERIED_STATICS_COLUMNS</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>prefix</name> <operator>=</operator> <ternary><condition><expr><call><name><name>queried</name><operator>.</operator><name>statics</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>
                       ?</condition><then> <expr><literal type="string">"&lt;all regulars&gt;/"</literal></expr>
                       </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"&lt;all regulars&gt;+%s/"</literal></expr></argument>, <argument><expr><call><name>toString</name><argument_list>(<argument><expr><call><name><name>queried</name><operator>.</operator><name>statics</name><operator>.</operator><name>selectOrderIterator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><name>prefix</name> <operator>+</operator> <call><name>toString</name><argument_list>(<argument><expr><call><name><name>queried</name><operator>.</operator><name>selectOrderIterator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toCQLString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><call><name><name>queried</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"*"</literal></expr> </then><else>: <expr><call><name>toString</name><argument_list>(<argument><expr><call><name><name>queried</name><operator>.</operator><name>selectOrderIterator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>cql</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>StringJoiner</name></type> <name>joiner</name> <init>= <expr><ternary><condition><expr><name>cql</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name>StringJoiner</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name>StringJoiner</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr><call><name><name>columns</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name><name>columns</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><ternary><condition><expr><name>cql</name></expr> ?</condition><then> <expr><call><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>toCQLString</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>SortedSet</name><argument_list type="generic">&lt;<argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name>subSelections</name> <operator>!=</operator> <literal type="null">null</literal></expr>
                                                ?</condition><then> <expr><call><name><name>subSelections</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>
                                                </then><else>: <expr><call><name><name>Collections</name><operator>.</operator><name>emptySortedSet</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>joiner</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>subSel</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>joiner</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>subSel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></while>
            <return>return <expr><call><name><name>joiner</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Serializer</name>
    <block>{
        <comment type="line">// Prior to 4.0 the FETCH_ALL flag meant fetch all regular and static columns. From 4.0 onward it meant</comment>
        <comment type="line">// fetch all regular columns and queried static columns</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FETCH_ALL_MASK</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HAS_QUERIED_MASK</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HAS_SUB_SELECTIONS_MASK</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// The FETCH_ALL_STATICS flag was added in CASSANDRA-16686 to allow 4.0 to handle queries that required</comment>
        <comment type="line">// to return static data for empty partitions</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FETCH_ALL_STATICS_MASK</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>makeHeaderByte</name><parameter_list>(<parameter><decl><type><name>ColumnFilter</name></type> <name>selection</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><ternary><condition><expr><call><name><name>selection</name><operator>.</operator><name>fetchesAllColumns</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>FETCH_ALL_MASK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
                   <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>!</operator><call><name><name>selection</name><operator>.</operator><name>isWildcard</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>HAS_QUERIED_MASK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
                   <operator>|</operator> <operator>(</operator><ternary><condition><expr><call><name><name>selection</name><operator>.</operator><name>subSelections</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>HAS_SUB_SELECTIONS_MASK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
                   <operator>|</operator> <operator>(</operator><ternary><condition><expr><call><name><name>selection</name><operator>.</operator><name>fetchesAllColumns</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>FETCH_ALL_STATICS_MASK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>ColumnFilter</name></type> <name>selection</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><call><name>makeHeaderByte</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name><name>MessagingService</name><operator>.</operator><name>VERSION_3014</name></name> <operator>&amp;&amp;</operator> <call><name><name>selection</name><operator>.</operator><name>fetchesAllColumns</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>serializeRegularAndStaticColumns</name><argument_list>(<argument><expr><call><name><name>selection</name><operator>.</operator><name>fetchedColumns</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>selection</name><operator>.</operator><name>isWildcard</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>serializeRegularAndStaticColumns</name><argument_list>(<argument><expr><call><name><name>selection</name><operator>.</operator><name>queriedColumns</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>serializeSubSelections</name><argument_list>(<argument><expr><call><name><name>selection</name><operator>.</operator><name>subSelections</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>serializeSubSelections</name><parameter_list>(<parameter><decl><type><name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>subSelections</name></decl></parameter>,
                                            <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>,
                                            <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>subSelections</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><call><name><name>subSelections</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>ColumnSubselection</name></type> <name>subSel</name> <range>: <expr><call><name><name>subSelections</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>ColumnSubselection</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>subSel</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>serializeRegularAndStaticColumns</name><parameter_list>(<parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>regularAndStaticColumns</name></decl></parameter>,
                                                      <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>regularAndStaticColumns</name><operator>.</operator><name>statics</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>regularAndStaticColumns</name><operator>.</operator><name>regulars</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ColumnFilter</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>header</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readUnsignedByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// The meaning of isFetchAll is actually different for pre-4.0 versions and for 4.0+ versions</comment>
            <comment type="line">// In 4.0+ it meant is fetch all regulars</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isFetchAll</name> <init>= <expr><operator>(</operator><name>header</name> <operator>&amp;</operator> <name>FETCH_ALL_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hasQueried</name> <init>= <expr><operator>(</operator><name>header</name> <operator>&amp;</operator> <name>HAS_QUERIED_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hasSubSelections</name> <init>= <expr><operator>(</operator><name>header</name> <operator>&amp;</operator> <name>HAS_SUB_SELECTIONS_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isFetchAllStatics</name> <init>= <expr><operator>(</operator><name>header</name> <operator>&amp;</operator> <name>FETCH_ALL_STATICS_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>RegularAndStaticColumns</name></type> <name>fetched</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RegularAndStaticColumns</name></type> <name>queried</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>isFetchAll</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name><name>MessagingService</name><operator>.</operator><name>VERSION_3014</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>fetched</name> <operator>=</operator> <call><name>deserializeRegularAndStaticColumns</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>fetched</name> <operator>=</operator> <call><name><name>metadata</name><operator>.</operator><name>regularAndStaticColumns</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>hasQueried</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>queried</name> <operator>=</operator> <call><name>deserializeRegularAndStaticColumns</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>subSelections</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>hasSubSelections</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>subSelections</name> <operator>=</operator> <call><name>deserializeSubSelection</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>isFetchAll</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// pre CASSANDRA-10657 (3.4-), when fetchAll is enabled, queried columns are not considered at all, and it</comment>
                <comment type="line">// is assumed that all columns are queried.</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasQueried</name> <operator>||</operator> <call><name>isUpgradingFromVersionLowerThan34</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <return>return <expr><operator>new</operator> <call><name>WildCardColumnFilter</name><argument_list>(<argument><expr><name>fetched</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// pre CASSANDRA-12768 (4.0-) all static columns should be fetched along with all regular columns.</comment>
                <if_stmt><if>if <condition>(<expr><call><name>isUpgradingFromVersionLowerThan40</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <return>return <expr><operator>new</operator> <call><name>SelectionColumnFilter</name><argument_list>(<argument><expr><name><name>FetchingStrategy</name><operator>.</operator><name>ALL_COLUMNS</name></name></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><name>fetched</name></expr></argument>, <argument><expr><name>subSelections</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// pre CASSANDRA-16686 (4.0-RC2-) static columns where not fetched unless queried witch lead to some wrong results</comment>
                <comment type="line">// for some queries</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isFetchAllStatics</name> <operator>||</operator> <call><name>isUpgradingFromVersionLowerThan40RC2</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <return>return <expr><operator>new</operator> <call><name>SelectionColumnFilter</name><argument_list>(<argument><expr><name><name>FetchingStrategy</name><operator>.</operator><name>ALL_REGULARS_AND_QUERIED_STATICS_COLUMNS</name></name></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><name>fetched</name></expr></argument>, <argument><expr><name>subSelections</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <return>return <expr><operator>new</operator> <call><name>SelectionColumnFilter</name><argument_list>(<argument><expr><name><name>FetchingStrategy</name><operator>.</operator><name>ALL_COLUMNS</name></name></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><name>fetched</name></expr></argument>, <argument><expr><name>subSelections</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><operator>new</operator> <call><name>SelectionColumnFilter</name><argument_list>(<argument><expr><name><name>FetchingStrategy</name><operator>.</operator><name>ONLY_QUERIED_COLUMNS</name></name></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><name>queried</name></expr></argument>, <argument><expr><name>subSelections</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>RegularAndStaticColumns</name></type> <name>deserializeRegularAndStaticColumns</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>,
                                                                           <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Columns</name></type> <name>statics</name> <init>= <expr><call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Columns</name></type> <name>regulars</name> <init>= <expr><call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>RegularAndStaticColumns</name><argument_list>(<argument><expr><name>statics</name></expr></argument>, <argument><expr><name>regulars</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>deserializeSubSelection</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>,
                                                                                                <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>,
                                                                                                <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>subSelections</name> <init>= <expr><call><name><name>TreeMultimap</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>Comparator</name><operator>.</operator><name>naturalOrder</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Comparator</name><operator>.</operator><name>naturalOrder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ColumnSubselection</name></type> <name>subSel</name> <init>= <expr><call><name><name>ColumnSubselection</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>subSelections</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>subSel</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>subSel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>subSelections</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>ColumnFilter</name></type> <name>selection</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// header byte</comment>

            <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name><name>MessagingService</name><operator>.</operator><name>VERSION_3014</name></name> <operator>&amp;&amp;</operator> <call><name><name>selection</name><operator>.</operator><name>fetchesAllColumns</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>regularAndStaticColumnsSerializedSize</name><argument_list>(<argument><expr><call><name><name>selection</name><operator>.</operator><name>fetchedColumns</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>selection</name><operator>.</operator><name>isWildcard</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>regularAndStaticColumnsSerializedSize</name><argument_list>(<argument><expr><call><name><name>selection</name><operator>.</operator><name>queriedColumns</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>subSelectionsSerializedSize</name><argument_list>(<argument><expr><call><name><name>selection</name><operator>.</operator><name>subSelections</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>long</name></type> <name>regularAndStaticColumnsSerializedSize</name><parameter_list>(<parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>columns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name><name>columns</name><operator>.</operator><name>statics</name></name></expr></argument>)</argument_list></call>
                    <operator>+</operator> <call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name><name>columns</name><operator>.</operator><name>regulars</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>long</name></type> <name>subSelectionsSerializedSize</name><parameter_list>(<parameter><decl><type><name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>ColumnSubselection</name></argument>&gt;</argument_list></name></type> <name>subSelections</name></decl></parameter>,
                                                 <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>subSelections</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeofUnsignedVInt</name></name><argument_list>(<argument><expr><call><name><name>subSelections</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>ColumnSubselection</name></type> <name>subSel</name> <range>: <expr><call><name><name>subSelections</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>ColumnSubselection</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>subSel</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
