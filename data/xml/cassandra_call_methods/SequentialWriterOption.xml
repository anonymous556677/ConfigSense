<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/io/util/SequentialWriterOption.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>compress</name><operator>.</operator><name>BufferType</name></name>;</import>

<comment type="block" format="javadoc">/**
 * SequentialWriter option
 */</comment>
<class><specifier>public</specifier> class <name>SequentialWriterOption</name>
<block>{
    <comment type="block" format="javadoc">/**
     * Default write option.
     *
     * &lt;ul&gt;
     *   &lt;li&gt;buffer size: 64 KB
     *   &lt;li&gt;buffer type: on heap
     *   &lt;li&gt;trickle fsync: false
     *   &lt;li&gt;trickle fsync byte interval: 10 MB
     *   &lt;li&gt;finish on close: false
     * &lt;/ul&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SequentialWriterOption</name></type> <name>DEFAULT</name> <init>= <expr><call><name><name>SequentialWriterOption</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>bufferSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BufferType</name></type> <name>bufferType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>trickleFsync</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>trickleFsyncByteInterval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>finishOnClose</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>SequentialWriterOption</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>,
                                   <parameter><decl><type><name>BufferType</name></type> <name>bufferType</name></decl></parameter>,
                                   <parameter><decl><type><name>boolean</name></type> <name>trickleFsync</name></decl></parameter>,
                                   <parameter><decl><type><name>int</name></type> <name>trickleFsyncByteInterval</name></decl></parameter>,
                                   <parameter><decl><type><name>boolean</name></type> <name>finishOnClose</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bufferSize</name></name> <operator>=</operator> <name>bufferSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bufferType</name></name> <operator>=</operator> <name>bufferType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trickleFsync</name></name> <operator>=</operator> <name>trickleFsync</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trickleFsyncByteInterval</name></name> <operator>=</operator> <name>trickleFsyncByteInterval</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>finishOnClose</name></name> <operator>=</operator> <name>finishOnClose</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>bufferSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>bufferSize</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BufferType</name></type> <name>bufferType</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>bufferType</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>trickleFsync</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>trickleFsync</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>trickleFsyncByteInterval</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>trickleFsyncByteInterval</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>finishOnClose</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>finishOnClose</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Allocate buffer using set buffer type and buffer size.
     *
     * @return allocated ByteBuffer
     */</comment>
    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>allocateBuffer</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>bufferType</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Builder</name>
    <block>{
        <comment type="block">/* default buffer size: 64k */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>bufferSize</name> <init>= <expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
        <comment type="block">/* default buffer type: on heap */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>BufferType</name></type> <name>bufferType</name> <init>= <expr><name><name>BufferType</name><operator>.</operator><name>ON_HEAP</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/* default: no trickle fsync */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>trickleFsync</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <comment type="block">/* default tricle fsync byte interval: 10MB */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>trickleFsyncByteInterval</name> <init>= <expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>finishOnClose</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/* construct throguh SequentialWriteOption.newBuilder */</comment>
        <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

        <function><type><specifier>public</specifier> <name>SequentialWriterOption</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>SequentialWriterOption</name><argument_list>(<argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>bufferType</name></expr></argument>, <argument><expr><name>trickleFsync</name></expr></argument>,
                                   <argument><expr><name>trickleFsyncByteInterval</name></expr></argument>, <argument><expr><name>finishOnClose</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>bufferSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bufferSize</name></name> <operator>=</operator> <name>bufferSize</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>bufferType</name><parameter_list>(<parameter><decl><type><name>BufferType</name></type> <name>bufferType</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bufferType</name></name> <operator>=</operator> <call><name><name>Objects</name><operator>.</operator><name>requireNonNull</name></name><argument_list>(<argument><expr><name>bufferType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>trickleFsync</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>trickleFsync</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trickleFsync</name></name> <operator>=</operator> <name>trickleFsync</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>trickleFsyncByteInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>trickleFsyncByteInterval</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trickleFsyncByteInterval</name></name> <operator>=</operator> <name>trickleFsyncByteInterval</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>finishOnClose</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>finishOnClose</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>finishOnClose</name></name> <operator>=</operator> <name>finishOnClose</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
