<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/repair/messages/RepairOption.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Joiner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>PreviewKind</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>RepairParallelism</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Repair options.
 */</comment>
<class><specifier>public</specifier> class <name>RepairOption</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PARALLELISM_KEY</name> <init>= <expr><literal type="string">"parallelism"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PRIMARY_RANGE_KEY</name> <init>= <expr><literal type="string">"primaryRange"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INCREMENTAL_KEY</name> <init>= <expr><literal type="string">"incremental"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JOB_THREADS_KEY</name> <init>= <expr><literal type="string">"jobThreads"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>RANGES_KEY</name> <init>= <expr><literal type="string">"ranges"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMNFAMILIES_KEY</name> <init>= <expr><literal type="string">"columnFamilies"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DATACENTERS_KEY</name> <init>= <expr><literal type="string">"dataCenters"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HOSTS_KEY</name> <init>= <expr><literal type="string">"hosts"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRACE_KEY</name> <init>= <expr><literal type="string">"trace"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SUB_RANGE_REPAIR_KEY</name> <init>= <expr><literal type="string">"sub_range_repair"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PULL_REPAIR_KEY</name> <init>= <expr><literal type="string">"pullRepair"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FORCE_REPAIR_KEY</name> <init>= <expr><literal type="string">"forceRepair"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREVIEW</name> <init>= <expr><literal type="string">"previewKind"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OPTIMISE_STREAMS_KEY</name> <init>= <expr><literal type="string">"optimiseStreams"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>IGNORE_UNREPLICATED_KS</name> <init>= <expr><literal type="string">"ignoreUnreplicatedKeyspaces"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// we don't want to push nodes too much for repair</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_JOB_THREADS</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>RepairOption</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>parseRanges</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>rangesStr</name></decl></parameter>, <parameter><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rangesStr</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>rangesStr</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>rangesStr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tokenizer</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>rangeStr</name> <init>= <expr><call><name><name>tokenizer</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>rangeStr</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
            <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Token</name></type> <name>parsedBeginToken</name> <init>= <expr><call><name><name>partitioner</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fromString</name><argument_list>(<argument><expr><name><name>rangeStr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Token</name></type> <name>parsedEndToken</name> <init>= <expr><call><name><name>partitioner</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fromString</name><argument_list>(<argument><expr><name><name>rangeStr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>parsedBeginToken</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>parsedEndToken</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Start and end tokens must be different."</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>parsedBeginToken</name></expr></argument>, <argument><expr><name>parsedEndToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>ranges</name></expr>;</return>
    </block_content>}</block></function>
    <comment type="block" format="javadoc">/**
     * Construct RepairOptions object from given map of Strings.
     * &lt;p&gt;
     * Available options are:
     *
     * &lt;table&gt;
     *     &lt;caption&gt;Repair Options&lt;/caption&gt;
     *     &lt;thead&gt;
     *         &lt;tr&gt;
     *             &lt;th&gt;key&lt;/th&gt;
     *             &lt;th&gt;value&lt;/th&gt;
     *             &lt;th&gt;default (when key not given)&lt;/th&gt;
     *         &lt;/tr&gt;
     *     &lt;/thead&gt;
     *     &lt;tbody&gt;
     *         &lt;tr&gt;
     *             &lt;td&gt;parallelism&lt;/td&gt;
     *             &lt;td&gt;"sequential", "parallel" or "dc_parallel"&lt;/td&gt;
     *             &lt;td&gt;"sequential"&lt;/td&gt;
     *         &lt;/tr&gt;
     *         &lt;tr&gt;
     *             &lt;td&gt;primaryRange&lt;/td&gt;
     *             &lt;td&gt;"true" if perform repair only on primary range.&lt;/td&gt;
     *             &lt;td&gt;false&lt;/td&gt;
     *         &lt;/tr&gt;
     *         &lt;tr&gt;
     *             &lt;td&gt;incremental&lt;/td&gt;
     *             &lt;td&gt;"true" if perform incremental repair.&lt;/td&gt;
     *             &lt;td&gt;false&lt;/td&gt;
     *         &lt;/tr&gt;
     *         &lt;tr&gt;
     *             &lt;td&gt;trace&lt;/td&gt;
     *             &lt;td&gt;"true" if repair is traced.&lt;/td&gt;
     *             &lt;td&gt;false&lt;/td&gt;
     *         &lt;/tr&gt;
     *         &lt;tr&gt;
     *             &lt;td&gt;jobThreads&lt;/td&gt;
     *             &lt;td&gt;Number of threads to use to run repair job.&lt;/td&gt;
     *             &lt;td&gt;1&lt;/td&gt;
     *         &lt;/tr&gt;
     *         &lt;tr&gt;
     *             &lt;td&gt;ranges&lt;/td&gt;
     *             &lt;td&gt;Ranges to repair. A range is expressed as &amp;lt;start token&amp;gt;:&amp;lt;end token&amp;gt;
     *             and multiple ranges can be given as comma separated ranges(e.g. aaa:bbb,ccc:ddd).&lt;/td&gt;
     *             &lt;td&gt;&lt;/td&gt;
     *         &lt;/tr&gt;
     *         &lt;tr&gt;
     *             &lt;td&gt;columnFamilies&lt;/td&gt;
     *             &lt;td&gt;Specify names of ColumnFamilies to repair.
     *             Multiple ColumnFamilies can be given as comma separated values(e.g. cf1,cf2,cf3).&lt;/td&gt;
     *             &lt;td&gt;&lt;/td&gt;
     *         &lt;/tr&gt;
     *         &lt;tr&gt;
     *             &lt;td&gt;dataCenters&lt;/td&gt;
     *             &lt;td&gt;Specify names of data centers who participate in this repair.
     *             Multiple data centers can be given as comma separated values(e.g. dc1,dc2,dc3).&lt;/td&gt;
     *             &lt;td&gt;&lt;/td&gt;
     *         &lt;/tr&gt;
     *         &lt;tr&gt;
     *             &lt;td&gt;hosts&lt;/td&gt;
     *             &lt;td&gt;Specify names of hosts who participate in this repair.
     *             Multiple hosts can be given as comma separated values(e.g. cass1,cass2).&lt;/td&gt;
     *             &lt;td&gt;&lt;/td&gt;
     *         &lt;/tr&gt;
     *         &lt;tr&gt;
     *             &lt;td&gt;pullRepair&lt;/td&gt;
     *             &lt;td&gt;"true" if the repair should only stream data one way from a remote host to this host.
     *             This is only allowed if exactly 2 hosts are specified along with a token range that they share.&lt;/td&gt;
     *             &lt;td&gt;false&lt;/td&gt;
     *         &lt;/tr&gt;
     *         &lt;tr&gt;
     *             &lt;td&gt;forceRepair&lt;/td&gt;
     *             &lt;td&gt;"true" if the repair should continue, even if one of the replicas involved is down.
     *             &lt;td&gt;false&lt;/td&gt;
     *         &lt;/tr&gt;
     *         &lt;tr&gt;
     *             &lt;td&gt;optimiseStreams&lt;/td&gt;
     *             &lt;td&gt;"true" if we should try to optimise the syncing to avoid transfering identical
     *             ranges to the same host multiple times&lt;/td&gt;
     *             &lt;td&gt;false&lt;/td&gt;
     *         &lt;/tr&gt;
     *     &lt;/tbody&gt;
     * &lt;/table&gt;
     *
     * @param options options to parse
     * @param partitioner partitioner is used to construct token ranges
     * @return RepairOptions object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RepairOption</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// if no parallel option is given, then this will be "sequential" by default.</comment>
        <decl_stmt><decl><type><name>RepairParallelism</name></type> <name>parallelism</name> <init>= <expr><call><name><name>RepairParallelism</name><operator>.</operator><name>fromName</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PARALLELISM_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>primaryRange</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PRIMARY_RANGE_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>incremental</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>INCREMENTAL_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PreviewKind</name></type> <name>previewKind</name> <init>= <expr><call><name><name>PreviewKind</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>PREVIEW</name></expr></argument>, <argument><expr><call><name><name>PreviewKind</name><operator>.</operator><name>NONE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>trace</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TRACE_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>force</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>FORCE_REPAIR_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>pullRepair</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PULL_REPAIR_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ignoreUnreplicatedKeyspaces</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>IGNORE_UNREPLICATED_KS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>jobThreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>JOB_THREADS_KEY</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>jobThreads</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>JOB_THREADS_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// ranges</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><call><name>parseRanges</name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>RANGES_KEY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>asymmetricSyncing</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>OPTIMISE_STREAMS_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RepairOption</name></type> <name>option</name> <init>= <expr><operator>new</operator> <call><name>RepairOption</name><argument_list>(<argument><expr><name>parallelism</name></expr></argument>, <argument><expr><name>primaryRange</name></expr></argument>, <argument><expr><name>incremental</name></expr></argument>, <argument><expr><name>trace</name></expr></argument>, <argument><expr><name>jobThreads</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>, <argument><expr><operator>!</operator><call><name><name>ranges</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pullRepair</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>previewKind</name></expr></argument>, <argument><expr><name>asymmetricSyncing</name></expr></argument>, <argument><expr><name>ignoreUnreplicatedKeyspaces</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// data centers</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>dataCentersStr</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>DATACENTERS_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dataCenters</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dataCentersStr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>dataCentersStr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>tokenizer</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>dataCenters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tokenizer</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>option</name><operator>.</operator><name>getDataCenters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>dataCenters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// hosts</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>hostsStr</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>HOSTS_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hosts</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>hostsStr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>hostsStr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>tokenizer</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>hosts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tokenizer</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>option</name><operator>.</operator><name>getHosts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>hosts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// columnfamilies</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>cfStr</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>COLUMNFAMILIES_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cfStr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>columnFamilies</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>cfStr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>tokenizer</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>columnFamilies</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tokenizer</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>option</name><operator>.</operator><name>getColumnFamilies</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>columnFamilies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// validate options</comment>
        <if_stmt><if>if <condition>(<expr><name>jobThreads</name> <operator>&gt;</operator> <name>MAX_JOB_THREADS</name></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Too many job threads. Max is "</literal> <operator>+</operator> <name>MAX_JOB_THREADS</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dataCenters</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>hosts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Cannot combine -dc and -hosts options."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>primaryRange</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>!</operator><call><name><name>dataCenters</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>option</name><operator>.</operator><name>isInLocalDCOnly</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name><name>hosts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"You need to run primary range repair on all nodes in the cluster."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>pullRepair</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>hosts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Pull repair can only be performed between two hosts. Please specify two hosts, one of which must be this host."</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>ranges</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Token ranges must be specified when performing pull repair. Please specify at least one token range which both hosts have in common."</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>option</name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RepairParallelism</name></type> <name>parallelism</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>primaryRange</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>incremental</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>trace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>jobThreads</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isSubrangeRepair</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>pullRepair</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>forceRepair</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PreviewKind</name></type> <name>previewKind</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>optimiseStreams</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>ignoreUnreplicatedKeyspaces</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>columnFamilies</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dataCenters</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hosts</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RepairOption</name><parameter_list>(<parameter><decl><type><name>RepairParallelism</name></type> <name>parallelism</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>primaryRange</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>incremental</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trace</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobThreads</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isSubrangeRepair</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>pullRepair</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>forceRepair</name></decl></parameter>, <parameter><decl><type><name>PreviewKind</name></type> <name>previewKind</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>optimiseStreams</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ignoreUnreplicatedKeyspaces</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>FBUtilities</name><operator>.</operator><name>isWindows</name></name> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskAccessMode</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>standard</name></name> <operator>||</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getIndexAccessMode</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>standard</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
            <name>parallelism</name> <operator>==</operator> <name><name>RepairParallelism</name><operator>.</operator><name>SEQUENTIAL</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Sequential repair disabled when memory-mapped I/O is configured on Windows. Reverting to parallel."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parallelism</name></name> <operator>=</operator> <name><name>RepairParallelism</name><operator>.</operator><name>PARALLEL</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parallelism</name></name> <operator>=</operator> <name>parallelism</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>primaryRange</name></name> <operator>=</operator> <name>primaryRange</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>incremental</name></name> <operator>=</operator> <name>incremental</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trace</name></name> <operator>=</operator> <name>trace</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>jobThreads</name></name> <operator>=</operator> <name>jobThreads</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>ranges</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isSubrangeRepair</name></name> <operator>=</operator> <name>isSubrangeRepair</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pullRepair</name></name> <operator>=</operator> <name>pullRepair</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>forceRepair</name></name> <operator>=</operator> <name>forceRepair</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>previewKind</name></name> <operator>=</operator> <name>previewKind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>optimiseStreams</name></name> <operator>=</operator> <name>optimiseStreams</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ignoreUnreplicatedKeyspaces</name></name> <operator>=</operator> <name>ignoreUnreplicatedKeyspaces</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>RepairParallelism</name></type> <name>getParallelism</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>parallelism</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPrimaryRange</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>primaryRange</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isIncremental</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>incremental</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTraced</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>trace</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPullRepair</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>pullRepair</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isForcedRepair</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>forceRepair</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getJobThreads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>jobThreads</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getColumnFamilies</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>columnFamilies</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRanges</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>ranges</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getDataCenters</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>dataCenters</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getHosts</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>hosts</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGlobal</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>dataCenters</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>hosts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSubrangeRepair</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>isSubrangeRepair</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>PreviewKind</name></type> <name>getPreviewKind</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>previewKind</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPreview</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>previewKind</name><operator>.</operator><name>isPreview</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInLocalDCOnly</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>dataCenters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>dataCenters</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalDataCenter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>optimiseStreams</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>optimiseStreams</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isPullRepair</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isForcedRepair</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isIncremental</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>autoOptimiseIncRepairStreams</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isPreview</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>autoOptimisePreviewRepairStreams</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isIncremental</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>autoOptimiseFullRepairStreams</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>ignoreUnreplicatedKeyspaces</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>ignoreUnreplicatedKeyspaces</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="string">"repair options ("</literal> <operator>+</operator>
               <literal type="string">"parallelism: "</literal> <operator>+</operator> <name>parallelism</name> <operator>+</operator>
               <literal type="string">", primary range: "</literal> <operator>+</operator> <name>primaryRange</name> <operator>+</operator>
               <literal type="string">", incremental: "</literal> <operator>+</operator> <name>incremental</name> <operator>+</operator>
               <literal type="string">", job threads: "</literal> <operator>+</operator> <name>jobThreads</name> <operator>+</operator>
               <literal type="string">", ColumnFamilies: "</literal> <operator>+</operator> <name>columnFamilies</name> <operator>+</operator>
               <literal type="string">", dataCenters: "</literal> <operator>+</operator> <name>dataCenters</name> <operator>+</operator>
               <literal type="string">", hosts: "</literal> <operator>+</operator> <name>hosts</name> <operator>+</operator>
               <literal type="string">", previewKind: "</literal> <operator>+</operator> <name>previewKind</name> <operator>+</operator>
               <literal type="string">", # of ranges: "</literal> <operator>+</operator> <call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator>
               <literal type="string">", pull repair: "</literal> <operator>+</operator> <name>pullRepair</name> <operator>+</operator>
               <literal type="string">", force repair: "</literal> <operator>+</operator> <name>forceRepair</name> <operator>+</operator>
               <literal type="string">", optimise streams: "</literal><operator>+</operator> <call><name>optimiseStreams</name><argument_list>()</argument_list></call> <operator>+</operator>
               <literal type="string">", ignore unreplicated keyspaces: "</literal><operator>+</operator> <name>ignoreUnreplicatedKeyspaces</name> <operator>+</operator>
               <literal type="char">')'</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>asMap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>PARALLELISM_KEY</name></expr></argument>, <argument><expr><call><name><name>parallelism</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>PRIMARY_RANGE_KEY</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>primaryRange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>INCREMENTAL_KEY</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>incremental</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>JOB_THREADS_KEY</name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>jobThreads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>COLUMNFAMILIES_KEY</name></expr></argument>, <argument><expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><name>columnFamilies</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATACENTERS_KEY</name></expr></argument>, <argument><expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><name>dataCenters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>HOSTS_KEY</name></expr></argument>, <argument><expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><name>hosts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SUB_RANGE_REPAIR_KEY</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>isSubrangeRepair</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>TRACE_KEY</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>RANGES_KEY</name></expr></argument>, <argument><expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>PULL_REPAIR_KEY</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>pullRepair</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>FORCE_REPAIR_KEY</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>forceRepair</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>PREVIEW</name></expr></argument>, <argument><expr><call><name><name>previewKind</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>OPTIMISE_STREAMS_KEY</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>optimiseStreams</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>options</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
