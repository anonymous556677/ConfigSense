<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/Directories.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadLocalRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>BiPredicate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Maps</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>RateLimiter</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LifecycleTransaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSDiskFullWriteError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSNoDiskAvailableForWriteError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSWriteError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>DirectorySizeCalculator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JVMStabilityInspector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Encapsulate handling of paths to the data files.
 *
 * &lt;pre&gt; {@code
 *   /&lt;path_to_data_dir&gt;/ks/&lt;cf dir&gt;/ks-cf1-jb-1-Data.db
 *                         /&lt;cf dir&gt;/la-2-Data.db
 *                         /&lt;cf dir&gt;/.&lt;index name&gt;/ks-cf1.idx-jb-1-Data.db
 *                         /&lt;cf dir&gt;/.&lt;index name&gt;/la-1-Data.db
 *                         ...
 * } &lt;/pre&gt;
 *
 * Until v2.0, {@code &lt;cf dir&gt;} is just column family name.
 * Since v2.1, {@code &lt;cf dir&gt;} has column family ID(tableId) added to its end.
 *
 * SSTables from secondary indexes were put in the same directory as their parent.
 * Since v2.2, they have their own directory under the parent directory whose name is index name.
 * Upon startup, those secondary index files are moved to new directory when upgrading.
 *
 * For backward compatibility, Directories can use directory without tableId if exists.
 *
 * In addition, more that one 'root' data directory can be specified so that
 * {@code &lt;path_to_data_dir&gt;} potentially represents multiple locations.
 * Note that in the case of multiple locations, the manifest for the leveled
 * compaction is only in one of the location.
 *
 * Snapshots (resp. backups) are always created along the sstables there are
 * snapshotted (resp. backuped) but inside a subdirectory named 'snapshots'
 * (resp. backups) (and snapshots are further inside a subdirectory of the name
 * of the snapshot). For secondary indexes, snapshots (backups) are not created in
 * their own directory, but are in their parent's snapshot (backup) directory.
 *
 * This class abstracts all those details from the rest of the code.
 */</comment>
<class><specifier>public</specifier> class <name>Directories</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Directories</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BACKUPS_SUBDIR</name> <init>= <expr><literal type="string">"backups"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SNAPSHOT_SUBDIR</name> <init>= <expr><literal type="string">"snapshots"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TMP_SUBDIR</name> <init>= <expr><literal type="string">"tmp"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SECONDARY_INDEX_NAME_SEPARATOR</name> <init>= <expr><literal type="string">"."</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The directories used to store keyspaces data.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DataDirectories</name></type> <name>dataDirectories</name> <init>= <expr><operator>new</operator> <call><name>DataDirectories</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNonLocalSystemKeyspacesDataFileLocations</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                              <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalSystemKeyspacesDataFileLocations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Checks whether Cassandra has RWX permissions to the specified directory.  Logs an error with
     * the details if it does not.
     *
     * @param dir File object of the directory.
     * @param dataDir String representation of the directory's location
     * @return status representing Cassandra's RWX permissions to the supplied folder location.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>verifyFullPermissions</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dataDir</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Not a directory {}"</literal></expr></argument>, <argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>FileAction</name><operator>.</operator><name>hasPrivilege</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>FileAction</name><operator>.</operator><name>X</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Doesn't have execute permissions for {} directory"</literal></expr></argument>, <argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>FileAction</name><operator>.</operator><name>hasPrivilege</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>FileAction</name><operator>.</operator><name>R</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Doesn't have read permissions for {} directory"</literal></expr></argument>, <argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>dir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>FileAction</name><operator>.</operator><name>hasPrivilege</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>FileAction</name><operator>.</operator><name>W</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Doesn't have write permissions for {} directory"</literal></expr></argument>, <argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <enum><specifier>public</specifier> enum <name>FileAction</name>
    <block>{
        <decl><name>X</name></decl>, <decl><name>W</name></decl>, <decl><name>XW</name></decl>, <decl><name>R</name></decl>, <decl><name>XR</name></decl>, <decl><name>RW</name></decl>, <decl><name>XRW</name></decl>;

        <constructor><name>FileAction</name><parameter_list>()</parameter_list>
        <block>{<block_content>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasPrivilege</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>FileAction</name></type> <name>action</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>privilege</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

            <switch>switch <condition>(<expr><name>action</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>X</name></expr>:</case>
                    <expr_stmt><expr><name>privilege</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>canExecute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>W</name></expr>:</case>
                    <expr_stmt><expr><name>privilege</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>canWrite</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>XW</name></expr>:</case>
                    <expr_stmt><expr><name>privilege</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>canExecute</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>file</name><operator>.</operator><name>canWrite</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>R</name></expr>:</case>
                    <expr_stmt><expr><name>privilege</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>canRead</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>XR</name></expr>:</case>
                    <expr_stmt><expr><name>privilege</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>canExecute</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>file</name><operator>.</operator><name>canRead</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>RW</name></expr>:</case>
                    <expr_stmt><expr><name>privilege</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>canRead</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>file</name><operator>.</operator><name>canWrite</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>XRW</name></expr>:</case>
                    <expr_stmt><expr><name>privilege</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>canExecute</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>file</name><operator>.</operator><name>canRead</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>file</name><operator>.</operator><name>canWrite</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>
            <return>return <expr><name>privilege</name></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>metadata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>DataDirectory</name><index>[]</index></name></type> <name>paths</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>File</name><index>[]</index></name></type> <name>dataPaths</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>, <argument><name>DataDirectory</name></argument>&gt;</argument_list></name></type> <name>canonicalPathToDD</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Directories</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><call><name><name>dataDirectories</name><operator>.</operator><name>getDataDirectoriesFor</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Directories</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>DataDirectory</name></argument>&gt;</argument_list></name></type> <name>paths</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><call><name><name>paths</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>DataDirectory</name><index>[<expr><call><name><name>paths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Create Directories of given ColumnFamily.
     * SSTable directories are created under data_directories defined in cassandra.yaml if not exist at this time.
     *
     * @param metadata metadata of ColumnFamily
     */</comment>
    <constructor><specifier>public</specifier> <name>Directories</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name><name>DataDirectory</name><index>[]</index></name></type> <name>paths</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadata</name></name> <operator>=</operator> <name>metadata</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paths</name></name> <operator>=</operator> <name>paths</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ImmutableMap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>, <argument><name>DataDirectory</name></argument>&gt;</argument_list></name></name></type> <name>canonicalPathsBuilder</name> <init>= <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tableId</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>id</name><operator>.</operator><name>toHexString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>name</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>SECONDARY_INDEX_NAME_SEPARATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cfName</name> <init>= <expr><ternary><condition><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>metadata</name><operator>.</operator><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>indexNameWithDot</name> <init>= <expr><ternary><condition><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>metadata</name><operator>.</operator><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataPaths</name></name> <operator>=</operator> <operator>new</operator> <name><name>File</name><index>[<expr><name><name>paths</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
        <comment type="line">// If upgraded from version less than 2.1, use existing directories</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>oldSSTableRelativePath</name> <init>= <expr><call><name>join</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>paths</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// check if old SSTable directory exists</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>dataPath</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>location</name></expr></argument>, <argument><expr><name>oldSSTableRelativePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>dataPaths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>dataPath</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>canonicalPathsBuilder</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>FileUtils</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>(<argument><expr><name>dataPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>boolean</name></type> <name>olderDirectoryExists</name> <init>= <expr><call><name><name>Iterables</name><operator>.</operator><name>any</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>dataPaths</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>File</name><operator>::</operator><name>exists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>olderDirectoryExists</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>canonicalPathsBuilder</name> <operator>=</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// use 2.1+ style</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>newSSTableRelativePath</name> <init>= <expr><call><name>join</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><name>cfName</name> <operator>+</operator> <literal type="char">'-'</literal> <operator>+</operator> <name>tableId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>paths</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>File</name></type> <name>dataPath</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>location</name></expr></argument>, <argument><expr><name>newSSTableRelativePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>dataPaths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>dataPath</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>canonicalPathsBuilder</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>FileUtils</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>(<argument><expr><name>dataPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// if index, then move to its own directory</comment>
        <if_stmt><if>if <condition>(<expr><name>indexNameWithDot</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>canonicalPathsBuilder</name> <operator>=</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>paths</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>File</name></type> <name>dataPath</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name><name>dataPaths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>indexNameWithDot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>dataPaths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>dataPath</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>canonicalPathsBuilder</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>FileUtils</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>(<argument><expr><name>dataPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>File</name></type> <name>dir</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createDirectory</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>FSError</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <comment type="line">// don't just let the default exception handler do this, we need the create loop to continue</comment>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to create {} directory"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>

        <comment type="line">// if index, move existing older versioned SSTable files to new directory</comment>
        <if_stmt><if>if <condition>(<expr><name>indexNameWithDot</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>File</name></type> <name>dataPath</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>indexFiles</name> <init>= <expr><call><name><name>dataPath</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>listFiles</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FileFilter</name></super><argument_list>()</argument_list>
                <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

                        <decl_stmt><decl><type><name>Descriptor</name></type> <name>desc</name> <init>= <expr><call><name><name>SSTable</name><operator>.</operator><name>tryDescriptorFromFilename</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <return>return <expr><name>desc</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>desc</name><operator>.</operator><name>ksname</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>desc</name><operator>.</operator><name>cfname</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

                    </block_content>}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>File</name></type> <name>indexFile</name> <range>: <expr><name>indexFiles</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>File</name></type> <name>destFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dataPath</name></expr></argument>, <argument><expr><call><name><name>indexFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Moving index file {} to {}"</literal></expr></argument>, <argument><expr><name>indexFile</name></expr></argument>, <argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>renameWithConfirm</name></name><argument_list>(<argument><expr><name>indexFile</name></expr></argument>, <argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>canonicalPathToDD</name> <operator>=</operator> <call><name><name>canonicalPathsBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns SSTable location which is inside given data directory.
     *
     * @param dataDirectory
     * @return SSTable location
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getLocationForDisk</name><parameter_list>(<parameter><decl><type><name>DataDirectory</name></type> <name>dataDirectory</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>dataDirectory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>File</name></type> <name>dir</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <comment type="line">// Note that we must compare absolute paths (not canonical) here since keyspace directories might be symlinks</comment>
                <decl_stmt><decl><type><name>Path</name></type> <name>dirPath</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Path</name></type> <name>locationPath</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>dataDirectory</name><operator>.</operator><name>location</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>dirPath</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>locationPath</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>dir</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></for></block_content></block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>DataDirectory</name></type> <name>getDataDirectoryForFile</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>descriptor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>canonicalPathToDD</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>directory</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Descriptor</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>dir</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>Descriptor</name><operator>.</operator><name>fromFilename</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Basically the same as calling {@link #getWriteableLocationAsFile(long)} with an unknown size ({@code -1L}),
     * which may return any allowed directory - even a data directory that has no usable space.
     * Do not use this method in production code.
     *
     * @throws FSWriteError if all directories are disallowed.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getDirectoryForNewSSTables</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getWriteableLocationAsFile</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns an allowed directory that _currently_ has {@code writeSize} bytes as usable space.
     *
     * @throws FSWriteError if all directories are disallowed.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getWriteableLocationAsFile</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>writeSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>location</name> <init>= <expr><call><name>getLocationForDisk</name><argument_list>(<argument><expr><call><name>getWriteableLocation</name><argument_list>(<argument><expr><name>writeSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>location</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>FSWriteError</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"No configured data directory contains enough space to write "</literal> <operator>+</operator> <name>writeSize</name> <operator>+</operator> <literal type="string">" bytes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>location</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a data directory to load the file {@code sourceFile}. If the sourceFile is on same disk partition as any
     * data directory then use that one as data directory otherwise use {@link #getWriteableLocationAsFile(long)} to
     * find suitable data directory.
     *
     * Also makes sure returned directory is not disallowed.
     *
     * @throws FSWriteError if all directories are disallowed.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getWriteableLocationToLoadFile</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>sourceFile</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>FileStore</name></type> <name>srcFileStore</name> <init>= <expr><call><name><name>Files</name><operator>.</operator><name>getFileStore</name></name><argument_list>(<argument><expr><call><name><name>sourceFile</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name>File</name></type> <name>dataPath</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>DisallowedDirectories</name><operator>.</operator><name>isUnwritable</name></name><argument_list>(<argument><expr><name>dataPath</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>Files</name><operator>.</operator><name>getFileStore</name></name><argument_list>(<argument><expr><call><name><name>dataPath</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>srcFileStore</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <return>return <expr><name>dataPath</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// pass exceptions in finding filestore. This is best effort anyway. Fall back on getWriteableLocationAsFile()</comment>
        </block_content>}</block></catch></try>

        <return>return <expr><call><name>getWriteableLocationAsFile</name><argument_list>(<argument><expr><call><name><name>sourceFile</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a temporary subdirectory on allowed data directory
     * that _currently_ has {@code writeSize} bytes as usable space.
     * This method does not create the temporary directory.
     *
     * @throws IOError if all directories are disallowed.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getTemporaryWriteableDirectoryAsFile</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>writeSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>location</name> <init>= <expr><call><name>getLocationForDisk</name><argument_list>(<argument><expr><call><name>getWriteableLocation</name><argument_list>(<argument><expr><name>writeSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>location</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>TMP_SUBDIR</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeTemporaryDirectories</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>dataDir</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>tmpDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>, <argument><expr><name>TMP_SUBDIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>tmpDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Removing temporary directory {}"</literal></expr></argument>, <argument><expr><name>tmpDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteRecursive</name></name><argument_list>(<argument><expr><name>tmpDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns an allowed data directory that _currently_ has {@code writeSize} bytes as usable space.
     *
     * @throws FSWriteError if all directories are disallowed.
     */</comment>
    <function><type><specifier>public</specifier> <name>DataDirectory</name></type> <name>getWriteableLocation</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>writeSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DataDirectoryCandidate</name></argument>&gt;</argument_list></name></type> <name>candidates</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>totalAvailable</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// pick directories with enough space and so that resulting sstable dirs aren't disallowed for writes.</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>tooBig</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>DataDirectory</name></type> <name>dataDir</name> <range>: <expr><name>paths</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>DisallowedDirectories</name><operator>.</operator><name>isUnwritable</name></name><argument_list>(<argument><expr><call><name>getLocationForDisk</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"removing disallowed candidate {}"</literal></expr></argument>, <argument><expr><name><name>dataDir</name><operator>.</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>DataDirectoryCandidate</name></type> <name>candidate</name> <init>= <expr><operator>new</operator> <call><name>DataDirectoryCandidate</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// exclude directory if its total writeSize does not fit to data directory</comment>
            <if_stmt><if>if <condition>(<expr><name><name>candidate</name><operator>.</operator><name>availableSpace</name></name> <operator>&lt;</operator> <name>writeSize</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"removing candidate {}, usable={}, requested={}"</literal></expr></argument>, <argument><expr><name><name>candidate</name><operator>.</operator><name>dataDirectory</name><operator>.</operator><name>location</name></name></expr></argument>, <argument><expr><name><name>candidate</name><operator>.</operator><name>availableSpace</name></name></expr></argument>, <argument><expr><name>writeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tooBig</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>candidates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>totalAvailable</name> <operator>+=</operator> <name><name>candidate</name><operator>.</operator><name>availableSpace</name></name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>candidates</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>tooBig</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>FSDiskFullWriteError</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><name>writeSize</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <throw>throw <expr><operator>new</operator> <call><name>FSNoDiskAvailableForWriteError</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// shortcut for single data directory systems</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>candidates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>candidates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>dataDirectory</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>sortWriteableCandidates</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>, <argument><expr><name>totalAvailable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name>pickWriteableDirectory</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// separated for unit testing</comment>
    <function><type><specifier>static</specifier> <name>DataDirectory</name></type> <name>pickWriteableDirectory</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DataDirectoryCandidate</name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// weighted random</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>rnd</name> <init>= <expr><call><name><name>ThreadLocalRandom</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextDouble</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>DataDirectoryCandidate</name></type> <name>candidate</name> <range>: <expr><name>candidates</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>rnd</name> <operator>-=</operator> <name><name>candidate</name><operator>.</operator><name>perc</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rnd</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name><name>candidate</name><operator>.</operator><name>dataDirectory</name></name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// last resort</comment>
        <return>return <expr><call><name><name>candidates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>dataDirectory</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// separated for unit testing</comment>
    <function><type><specifier>static</specifier> <name>void</name></type> <name>sortWriteableCandidates</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DataDirectoryCandidate</name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>totalAvailable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// calculate free-space-percentage</comment>
        <for>for <control>(<init><decl><type><name>DataDirectoryCandidate</name></type> <name>candidate</name> <range>: <expr><name>candidates</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>candidate</name><operator>.</operator><name>calcFreePerc</name></name><argument_list>(<argument><expr><name>totalAvailable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// sort directories by perc</comment>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasAvailableDiskSpace</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>estimatedSSTables</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expectedTotalWriteSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>writeSize</name> <init>= <expr><name>expectedTotalWriteSize</name> <operator>/</operator> <name>estimatedSSTables</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>totalAvailable</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>DataDirectory</name></type> <name>dataDir</name> <range>: <expr><name>paths</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>DisallowedDirectories</name><operator>.</operator><name>isUnwritable</name></name><argument_list>(<argument><expr><call><name>getLocationForDisk</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                  <continue>continue;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>DataDirectoryCandidate</name></type> <name>candidate</name> <init>= <expr><operator>new</operator> <call><name>DataDirectoryCandidate</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// exclude directory if its total writeSize does not fit to data directory</comment>
            <if_stmt><if>if <condition>(<expr><name><name>candidate</name><operator>.</operator><name>availableSpace</name></name> <operator>&lt;</operator> <name>writeSize</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>totalAvailable</name> <operator>+=</operator> <name><name>candidate</name><operator>.</operator><name>availableSpace</name></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>totalAvailable</name> <operator>&gt;</operator> <name>expectedTotalWriteSize</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>DataDirectory</name><index>[]</index></name></type> <name>getWriteableLocations</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DataDirectory</name></argument>&gt;</argument_list></name></type> <name>allowedDirs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>DataDirectory</name></type> <name>dir</name> <range>: <expr><name>paths</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DisallowedDirectories</name><operator>.</operator><name>isUnwritable</name></name><argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>allowedDirs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>allowedDirs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>FSNoDiskAvailableForWriteError</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>allowedDirs</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>Comparator</name><operator>.</operator><name>comparing</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>o</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>o</name><operator>.</operator><name>location</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>allowedDirs</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>DataDirectory</name><index>[<expr><call><name><name>allowedDirs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>getSnapshotDirectory</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getSnapshotDirectory</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>directory</name></name></expr></argument>, <argument><expr><name>snapshotName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns directory to write snapshot. If directory does not exist, then one is created.
     *
     * If given {@code location} indicates secondary index, this will return
     * {@code &lt;cf dir&gt;/snapshots/&lt;snapshot name&gt;/.&lt;index name&gt;}.
     * Otherwise, this will return {@code &lt;cf dir&gt;/snapshots/&lt;snapshot name&gt;}.
     *
     * @param location base directory
     * @param snapshotName snapshot name
     * @return directory to write snapshot
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>getSnapshotDirectory</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isSecondaryIndexFolder</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name>getOrCreate</name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SNAPSHOT_SUBDIR</name></expr></argument>, <argument><expr><name>snapshotName</name></expr></argument>, <argument><expr><call><name><name>location</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <return>return <expr><call><name>getOrCreate</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>SNAPSHOT_SUBDIR</name></expr></argument>, <argument><expr><name>snapshotName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>File</name></type> <name>getSnapshotManifestFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>snapshotDir</name> <init>= <expr><call><name>getSnapshotDirectory</name><argument_list>(<argument><expr><call><name>getDirectoryForNewSSTables</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>snapshotName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>snapshotDir</name></expr></argument>, <argument><expr><literal type="string">"manifest.json"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>File</name></type> <name>getSnapshotSchemaFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>snapshotDir</name> <init>= <expr><call><name>getSnapshotDirectory</name><argument_list>(<argument><expr><call><name>getDirectoryForNewSSTables</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>snapshotName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>snapshotDir</name></expr></argument>, <argument><expr><literal type="string">"schema.cql"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>File</name></type> <name>getNewEphemeralSnapshotMarkerFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>snapshotDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getWriteableLocationAsFile</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>join</name><argument_list>(<argument><expr><name>SNAPSHOT_SUBDIR</name></expr></argument>, <argument><expr><name>snapshotName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getEphemeralSnapshotMarkerFile</name><argument_list>(<argument><expr><name>snapshotDir</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>getEphemeralSnapshotMarkerFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>snapshotDirectory</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>snapshotDirectory</name></expr></argument>, <argument><expr><literal type="string">"ephemeral.snapshot"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>getBackupsDirectory</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>desc</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getBackupsDirectory</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>directory</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>getBackupsDirectory</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>location</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isSecondaryIndexFolder</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name>getOrCreate</name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BACKUPS_SUBDIR</name></expr></argument>, <argument><expr><call><name><name>location</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <return>return <expr><call><name>getOrCreate</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>BACKUPS_SUBDIR</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the specified table should be stored with local system data.
     *
     * &lt;p&gt; To minimize the risk of failures, SSTables for local system keyspaces must be stored in a single data
     * directory. The only exception to this are some of the system table as the server can continue operating even
     *  if those tables loose some data.&lt;/p&gt;
     *
     * @param keyspace the keyspace name
     * @param table the table name
     * @return {@code true} if the specified table should be stored with local system data, {@code false} otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isStoredInLocalSystemKeyspacesDataLocation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>SchemaConstants</name><operator>.</operator><name>LOCAL_SYSTEM_KEYSPACE_NAMES</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call>
                        <operator>&amp;&amp;</operator> <call><name><name>SystemKeyspace</name><operator>.</operator><name>TABLES_SPLIT_ACROSS_MULTIPLE_DISKS</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>DataDirectory</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>File</name></type> <name>location</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>DataDirectory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>location</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>public</specifier> <name>DataDirectory</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>location</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>getAvailableSpace</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>availableSpace</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>getUsableSpace</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getMinFreeSpacePerDriveInBytes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>availableSpace</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>availableSpace</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>DataDirectory</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>DataDirectory</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>location</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>location</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"DataDirectory{"</literal> <operator>+</operator>
                   <literal type="string">"location="</literal> <operator>+</operator> <name>location</name> <operator>+</operator>
                   <literal type="char">'}'</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Data directories used to store keyspace data.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>DataDirectories</name> <super_list><implements>implements <super><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>DataDirectory</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <comment type="block" format="javadoc">/**
         * The directories for storing the local system keyspaces.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>DataDirectory</name><index>[]</index></name></type> <name>localSystemKeyspaceDataDirectories</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The directories where the data of the non local system keyspaces should be stored.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>DataDirectory</name><index>[]</index></name></type> <name>nonLocalSystemKeyspacesDirectories</name></decl>;</decl_stmt>


        <constructor><specifier>public</specifier> <name>DataDirectories</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>locationsForNonSystemKeyspaces</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>locationsForSystemKeyspace</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>nonLocalSystemKeyspacesDirectories</name> <operator>=</operator> <call><name>toDataDirectories</name><argument_list>(<argument><expr><name>locationsForNonSystemKeyspaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>localSystemKeyspaceDataDirectories</name> <operator>=</operator> <call><name>toDataDirectories</name><argument_list>(<argument><expr><name>locationsForSystemKeyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>DataDirectory</name><index>[]</index></name></type> <name>toDataDirectories</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>locations</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>DataDirectory</name><index>[]</index></name></type> <name>directories</name> <init>= <expr><operator>new</operator> <name><name>DataDirectory</name><index>[<expr><name><name>locations</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>locations</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>directories</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>DataDirectory</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name><name>locations</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <return>return <expr><name>directories</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the data directories for the specified table.
         *
         * @param table the table metadata
         * @return the data directories for the specified table
         */</comment>
        <function><type><specifier>public</specifier> <name><name>DataDirectory</name><index>[]</index></name></type> <name>getDataDirectoriesFor</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><call><name>isStoredInLocalSystemKeyspacesDataLocation</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>localSystemKeyspaceDataDirectories</name></expr>
                                                                                          </then><else>: <expr><name>nonLocalSystemKeyspacesDirectories</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>DataDirectory</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>getAllDirectories</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>DataDirectory</name></argument>&gt;</argument_list></name></type> <name>getAllDirectories</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>DataDirectory</name></argument>&gt;</argument_list></name></type> <name>directories</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>nonLocalSystemKeyspacesDirectories</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name><name>localSystemKeyspaceDataDirectories</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>directories</name></expr></argument>, <argument><expr><name>nonLocalSystemKeyspacesDirectories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>directories</name></expr></argument>, <argument><expr><name>localSystemKeyspaceDataDirectories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>directories</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>DataDirectories</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>DataDirectories</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>localSystemKeyspaceDataDirectories</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>localSystemKeyspaceDataDirectories</name></name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>nonLocalSystemKeyspacesDirectories</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>nonLocalSystemKeyspacesDirectories</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>localSystemKeyspaceDataDirectories</name></expr></argument>, <argument><expr><name>nonLocalSystemKeyspacesDirectories</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"DataDirectories {"</literal> <operator>+</operator>
                   <literal type="string">"systemKeyspaceDataDirectories="</literal> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>localSystemKeyspaceDataDirectories</name></expr></argument>)</argument_list></call> <operator>+</operator>
                   <literal type="string">", nonSystemKeyspacesDirectories="</literal> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>nonLocalSystemKeyspacesDirectories</name></expr></argument>)</argument_list></call> <operator>+</operator>
                   <literal type="char">'}'</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>static</specifier> <specifier>final</specifier> class <name>DataDirectoryCandidate</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>DataDirectoryCandidate</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DataDirectory</name></type> <name>dataDirectory</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>availableSpace</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>perc</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>DataDirectoryCandidate</name><parameter_list>(<parameter><decl><type><name>DataDirectory</name></type> <name>dataDirectory</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataDirectory</name></name> <operator>=</operator> <name>dataDirectory</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>availableSpace</name></name> <operator>=</operator> <call><name><name>dataDirectory</name><operator>.</operator><name>getAvailableSpace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>void</name></type> <name>calcFreePerc</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>totalAvailableSpace</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>w</name> <init>= <expr><name>availableSpace</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>w</name> <operator>/=</operator> <name>totalAvailableSpace</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>perc</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>DataDirectoryCandidate</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>Double</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>perc</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>perc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><name>r</name></expr>;</return></block_content></block></if></if_stmt>
            <comment type="line">// last resort</comment>
            <return>return <expr><call><name><name>System</name><operator>.</operator><name>identityHashCode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>System</name><operator>.</operator><name>identityHashCode</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/** The type of files that can be listed by SSTableLister, we never return txn logs,
     * use LifecycleTransaction.getFiles() if you need txn logs. */</comment>
    <enum><specifier>public</specifier> enum <name>FileType</name>
    <block>{
        <comment type="block" format="javadoc">/** A permanent sstable file that is safe to use. */</comment>
        <decl><name>FINAL</name></decl>,

        <comment type="block" format="javadoc">/** A temporary sstable file that will soon be deleted. */</comment>
        <decl><name>TEMPORARY</name></decl>,

        <comment type="block" format="javadoc">/** A transaction log file (contains information on final and temporary files). */</comment>
        <decl><name>TXN_LOG</name></decl>;
    }</block></enum>

    <comment type="block" format="javadoc">/**
     * How to handle a failure to read a txn log file. Note that we will try a few
     * times before giving up.
     **/</comment>
    <enum><specifier>public</specifier> enum <name>OnTxnErr</name>
    <block>{
        <comment type="block" format="javadoc">/** Throw the exception */</comment>
        <decl><name>THROW</name></decl>,

        <comment type="block" format="javadoc">/** Ignore the problematic parts of the txn log file */</comment>
        <decl><name>IGNORE</name></decl>
    }</block></enum>

    <function><type><specifier>public</specifier> <name>SSTableLister</name></type> <name>sstableLister</name><parameter_list>(<parameter><decl><type><name>OnTxnErr</name></type> <name>onTxnErr</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SSTableLister</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>dataPaths</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>onTxnErr</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SSTableLister</name></type> <name>sstableLister</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>, <parameter><decl><type><name>OnTxnErr</name></type> <name>onTxnErr</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SSTableLister</name><argument_list>(<argument><expr><operator>new</operator> <name><name>File</name><index>[]</index></name><block>{<expr><name>directory</name></expr>}</block></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>onTxnErr</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SSTableLister</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>OnTxnErr</name></type> <name>onTxnErr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>skipTemporary</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>includeBackups</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>onlyBackups</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>nbFiles</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Descriptor</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>components</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>filtered</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>snapshotName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>File</name><index>[]</index></name></type> <name>dataPaths</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>metadata</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>SSTableLister</name><parameter_list>(<parameter><decl><type><name><name>File</name><index>[]</index></name></type> <name>dataPaths</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>OnTxnErr</name></type> <name>onTxnErr</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataPaths</name></name> <operator>=</operator> <name>dataPaths</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadata</name></name> <operator>=</operator> <name>metadata</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>onTxnErr</name></name> <operator>=</operator> <name>onTxnErr</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>SSTableLister</name></type> <name>skipTemporary</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>filtered</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"list() has already been called"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>skipTemporary</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>SSTableLister</name></type> <name>includeBackups</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>filtered</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"list() has already been called"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>includeBackups</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>SSTableLister</name></type> <name>onlyBackups</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>filtered</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"list() has already been called"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>onlyBackups</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>includeBackups</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>SSTableLister</name></type> <name>snapshots</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sn</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>filtered</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"list() has already been called"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>snapshotName</name> <operator>=</operator> <name>sn</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Descriptor</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>list</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>filter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>listFiles</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>filter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>l</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>nbFiles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Descriptor</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>components</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Component</name></type> <name>c</name> <range>: <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filenameFor</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <return>return <expr><name>l</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>filter</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>filtered</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>File</name></type> <name>location</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>DisallowedDirectories</name><operator>.</operator><name>isUnreadable</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>snapshotName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>LifecycleTransaction</name><operator>.</operator><name>getFiles</name></name><argument_list>(<argument><expr><call><name>getSnapshotDirectory</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>snapshotName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toPath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getFilter</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>onTxnErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>onlyBackups</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>LifecycleTransaction</name><operator>.</operator><name>getFiles</name></name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getFilter</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>onTxnErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>includeBackups</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>LifecycleTransaction</name><operator>.</operator><name>getFiles</name></name><argument_list>(<argument><expr><call><name>getBackupsDirectory</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toPath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getFilter</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>onTxnErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><name>filtered</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name><name>BiPredicate</name><argument_list type="generic">&lt;<argument><name>File</name></argument>, <argument><name>FileType</name></argument>&gt;</argument_list></name></type> <name>getFilter</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <comment type="line">// This function always return false since it adds to the components map</comment>
            <return>return <expr><lambda><parameter_list>(<parameter><decl><name>file</name></decl></parameter>, <parameter><decl><name>type</name></decl></parameter>)</parameter_list> -&gt;
            <block>{<block_content>
                <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>TXN_LOG</name></expr>:</case>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    <case>case <expr><name>TEMPORARY</name></expr>:</case>
                        <if_stmt><if>if <condition>(<expr><name>skipTemporary</name></expr>)</condition><block type="pseudo"><block_content>
                            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

                    <case>case <expr><name>FINAL</name></expr>:</case>
                        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Descriptor</name></argument>, <argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><call><name><name>SSTable</name><operator>.</operator><name>tryComponentFromFilename</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>pair</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

                        <comment type="line">// we are only interested in the SSTable files that belong to the specific ColumnFamily</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pair</name><operator>.</operator><name>left</name><operator>.</operator><name>ksname</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>pair</name><operator>.</operator><name>left</name><operator>.</operator><name>cfname</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

                        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>previous</name> <init>= <expr><call><name><name>components</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>previous</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>previous</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>components</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>previous</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>nbFiles</name><operator>++</operator></expr>;</expr_stmt>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>

                    <default>default:</default>
                        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></switch>
            </block_content>}</block></lambda></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     *
     * @return  Return a map of all snapshots to space being used
     * The pair for a snapshot has size on disk and true size.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SnapshotSizeDetails</name></argument>&gt;</argument_list></name></type> <name>getSnapshotDetails</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>snapshots</name> <init>= <expr><call><name>listSnapshots</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>SnapshotSizeDetails</name></argument>&gt;</argument_list></name></type> <name>snapshotSpaceMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMapWithExpectedSize</name></name><argument_list>(<argument><expr><call><name><name>snapshots</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>snapshot</name> <range>: <expr><name>snapshots</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>sizeOnDisk</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>folderSize</name></name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>trueSize</name> <init>= <expr><call><name>getTrueAllocatedSizeIn</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SnapshotSizeDetails</name></type> <name>spaceUsed</name> <init>= <expr><call><name><name>snapshotSpaceMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>snapshot</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>spaceUsed</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>spaceUsed</name> <operator>=</operator>  <operator>new</operator> <call><name>SnapshotSizeDetails</name><argument_list>(<argument><expr><name>sizeOnDisk</name></expr></argument>,<argument><expr><name>trueSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>spaceUsed</name> <operator>=</operator> <operator>new</operator> <call><name>SnapshotSizeDetails</name><argument_list>(<argument><expr><name><name>spaceUsed</name><operator>.</operator><name>sizeOnDiskBytes</name></name> <operator>+</operator> <name>sizeOnDisk</name></expr></argument>, <argument><expr><name><name>spaceUsed</name><operator>.</operator><name>dataSizeBytes</name></name> <operator>+</operator> <name>trueSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><call><name><name>snapshotSpaceMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>snapshot</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>spaceUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>snapshotSpaceMap</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>listEphemeralSnapshots</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ephemeralSnapshots</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>snapshot</name> <range>: <expr><call><name>listSnapshots</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>getEphemeralSnapshotMarkerFile</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>ephemeralSnapshots</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>snapshot</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>ephemeralSnapshots</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>listSnapshots</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>snapshots</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>File</name></type> <name>dir</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>snapshotDir</name> <init>= <expr><ternary><condition><expr><call><name>isSecondaryIndexFolder</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>
                               ?</condition><then> <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SNAPSHOT_SUBDIR</name></expr></argument>)</argument_list></call></expr>
                               </then><else>: <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>SNAPSHOT_SUBDIR</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>snapshotDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>snapshotDir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>File</name><index>[]</index></name></type> <name>snapshotDirs</name>  <init>= <expr><call><name><name>snapshotDir</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>snapshotDirs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>File</name></type> <name>snapshot</name> <range>: <expr><name>snapshotDirs</name></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>snapshot</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>snapshots</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>snapshots</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>snapshotExists</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>dir</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>snapshotDir</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isSecondaryIndexFolder</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>snapshotDir</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>join</name><argument_list>(<argument><expr><name>SNAPSHOT_SUBDIR</name></expr></argument>, <argument><expr><name>snapshotName</name></expr></argument>, <argument><expr><call><name><name>dir</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>snapshotDir</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>join</name><argument_list>(<argument><expr><name>SNAPSHOT_SUBDIR</name></expr></argument>, <argument><expr><name>snapshotName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>snapshotDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>clearSnapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>snapshotDirectories</name></decl></parameter>, <parameter><decl><type><name>RateLimiter</name></type> <name>snapshotRateLimiter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// If snapshotName is empty or null, we will delete the entire snapshot directory</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>tag</name> <init>= <expr><ternary><condition><expr><name>snapshotName</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>snapshotName</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>dir</name> <range>: <expr><name>snapshotDirectories</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>snapshotDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>join</name><argument_list>(<argument><expr><name>SNAPSHOT_SUBDIR</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>snapshotDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Removing snapshot directory {}"</literal></expr></argument>, <argument><expr><name>snapshotDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteRecursiveWithThrottle</name></name><argument_list>(<argument><expr><name>snapshotDir</name></expr></argument>, <argument><expr><name>snapshotRateLimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>FSWriteError</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>FBUtilities</name><operator>.</operator><name>isWindows</name></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>SnapshotDeletingTask</name><operator>.</operator><name>addFailedSnapshot</name></name><argument_list>(<argument><expr><name>snapshotDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <throw>throw <expr><name>e</name></expr>;</throw></block_content></block></else></if_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="line">// The snapshot must exist</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>snapshotCreationTime</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>dir</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>snapshotDir</name> <init>= <expr><call><name>getSnapshotDirectory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>snapshotName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>snapshotDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>snapshotDir</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Snapshot "</literal> <operator>+</operator> <name>snapshotName</name> <operator>+</operator> <literal type="string">" doesn't exist"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return total snapshot size in byte for all snapshots.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>trueSnapshotsSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>result</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>dir</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>snapshotDir</name> <init>= <expr><ternary><condition><expr><call><name>isSecondaryIndexFolder</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>
                               ?</condition><then> <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SNAPSHOT_SUBDIR</name></expr></argument>)</argument_list></call></expr>
                               </then><else>: <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>SNAPSHOT_SUBDIR</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>getTrueAllocatedSizeIn</name><argument_list>(<argument><expr><name>snapshotDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return Raw size on disk for all directories
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getRawDiretoriesSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>totalAllocatedSize</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>File</name></type> <name>path</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>totalAllocatedSize</name> <operator>+=</operator> <call><name><name>FileUtils</name><operator>.</operator><name>folderSize</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><name>totalAllocatedSize</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTrueAllocatedSizeIn</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>input</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>input</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>SSTableSizeSummer</name></type> <name>visitor</name> <init>= <expr><operator>new</operator> <call><name>SSTableSizeSummer</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>sstableLister</name><argument_list>(<argument><expr><name><name>Directories</name><operator>.</operator><name>OnTxnErr</name><operator>.</operator><name>THROW</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>listFiles</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>walkFileTree</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Could not calculate the size of {}. {}"</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <return>return <expr><call><name><name>visitor</name><operator>.</operator><name>getAllocatedSize</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Recursively finds all the sub directories in the KS directory.</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>getKSChildDirectories</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>DataDirectory</name></type> <name>dataDirectory</name> <range>: <expr><call><name><name>dataDirectories</name><operator>.</operator><name>getAllDirectories</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>ksDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name><name>dataDirectory</name><operator>.</operator><name>location</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>cfDirs</name> <init>= <expr><call><name><name>ksDir</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cfDirs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>File</name></type> <name>cfDir</name> <range>: <expr><name>cfDirs</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>cfDir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>cfDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSecondaryIndexFolder</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dir</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>dir</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><name>SECONDARY_INDEX_NAME_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>getCFDirectories</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>dataDirectory</name> <range>: <expr><name>dataPaths</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>dataDirectory</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>dataDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>getOrCreate</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>subdirs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><ternary><condition><expr><name>subdirs</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>subdirs</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>base</name></expr> </then><else>: <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><call><name>join</name><argument_list>(<argument><expr><name>subdirs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>dir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Invalid directory path %s: path exists but is not a directory"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>dir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name><name>dir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>dir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>FSWriteError</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unable to create directory "</literal> <operator>+</operator> <name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>dir</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>File</name><operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> class <name>SSTableSizeSummer</name> <super_list><extends>extends <super><name>DirectorySizeCalculator</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toSkip</name></decl>;</decl_stmt>
        <constructor><name>SSTableSizeSummer</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>toSkip</name> <operator>=</operator> <call><name><name>files</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>f</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>f</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>isAcceptable</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Descriptor</name></type> <name>desc</name> <init>= <expr><call><name><name>SSTable</name><operator>.</operator><name>tryDescriptorFromFilename</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>desc</name> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <call><name><name>desc</name><operator>.</operator><name>ksname</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>desc</name><operator>.</operator><name>cfname</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>toSkip</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SnapshotSizeDetails</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>sizeOnDiskBytes</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>dataSizeBytes</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>SnapshotSizeDetails</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>sizeOnDiskBytes</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dataSizeBytes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sizeOnDiskBytes</name></name> <operator>=</operator> <name>sizeOnDiskBytes</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataSizeBytes</name></name> <operator>=</operator> <name>dataSizeBytes</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>hashCode</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>sizeOnDiskBytes</name> <operator>^</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>sizeOnDiskBytes</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <return>return <expr><literal type="number">31</literal> <operator>*</operator> <operator>(</operator><name>hashCode</name> <operator>^</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>dataSizeBytes</name> <operator>^</operator> <operator>(</operator><name>dataSizeBytes</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>SnapshotSizeDetails</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>SnapshotSizeDetails</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>SnapshotSizeDetails</name><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>sizeOnDiskBytes</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>sizeOnDiskBytes</name></name> <operator>&amp;&amp;</operator> <name>dataSizeBytes</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>dataSizeBytes</name></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
