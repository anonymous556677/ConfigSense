<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicIntegerFieldUpdater</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ConsistencyLevel</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>EndpointsForToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>IMutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>WriteType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestFailureReason</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>WriteFailureException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>WriteTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>RequestCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SimpleCondition</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replicas</name><operator>.</operator><name>countInOurDc</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>AbstractWriteResponseHandler</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name><name>RequestCallback</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AbstractWriteResponseHandler</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">//Count down until all responses and expirations have occured before deciding whether the ideal CL was reached.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AtomicInteger</name></type> <name>responsesAndExpirations</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SimpleCondition</name></type> <name>condition</name> <init>= <expr><operator>new</operator> <call><name>SimpleCondition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Runnable</name></type> <name>callback</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>WriteType</name></type> <name>writeType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>AtomicIntegerFieldUpdater</name><argument_list type="generic">&lt;<argument><name>AbstractWriteResponseHandler</name></argument>&gt;</argument_list></name></type> <name>failuresUpdater</name>
    <init>= <expr><call><name><name>AtomicIntegerFieldUpdater</name><operator>.</operator><name>newUpdater</name></name><argument_list>(<argument><expr><name><name>AbstractWriteResponseHandler</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"failures"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>failures</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>RequestFailureReason</name></argument>&gt;</argument_list></name></type> <name>failureReasonByEndpoint</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>queryStartNanoTime</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
      * Delegate to another WriteResponseHandler or possibly this one to track if the ideal consistency level was reached.
      * Will be set to null if ideal CL was not configured
      * Will be set to an AWRH delegate if ideal CL was configured
      * Will be same as "this" if this AWRH is the ideal consistency level
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AbstractWriteResponseHandler</name></type> <name>idealCLDelegate</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * We don't want to increment the writeFailedIdealCL if we didn't achieve the original requested CL
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>requestedCLAchieved</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @param callback           A callback to be called when the write is successful.
     * @param queryStartNanoTime
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractWriteResponseHandler</name><parameter_list>(<parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name></decl></parameter>,
                                           <parameter><decl><type><name>Runnable</name></type> <name>callback</name></decl></parameter>,
                                           <parameter><decl><type><name>WriteType</name></type> <name>writeType</name></decl></parameter>,
                                           <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>replicaPlan</name></name> <operator>=</operator> <name>replicaPlan</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>writeType</name></name> <operator>=</operator> <name>writeType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>failureReasonByEndpoint</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>queryStartNanoTime</name></name> <operator>=</operator> <name>queryStartNanoTime</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>get</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>WriteTimeoutException</name></expr></argument>, <argument><expr><name>WriteFailureException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>timeoutNanos</name> <init>= <expr><call><name>currentTimeoutNanos</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>success</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>condition</name><operator>.</operator><name>await</name></name><argument_list>(<argument><expr><name>timeoutNanos</name></expr></argument>, <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ex</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>blockedFor</name> <init>= <expr><call><name>blockFor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>acks</name> <init>= <expr><call><name>ackCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// It's pretty unlikely, but we can race between exiting await above and here, so</comment>
            <comment type="line">// that we could now have enough acks. In that case, we "lie" on the acks count to</comment>
            <comment type="line">// avoid sending confusing info to the user (see CASSANDRA-6491).</comment>
            <if_stmt><if>if <condition>(<expr><name>acks</name> <operator>&gt;=</operator> <name>blockedFor</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>acks</name> <operator>=</operator> <name>blockedFor</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>WriteTimeoutException</name><argument_list>(<argument><expr><name>writeType</name></expr></argument>, <argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>acks</name></expr></argument>, <argument><expr><name>blockedFor</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>blockFor</name><argument_list>()</argument_list></call> <operator>+</operator> <name>failures</name> <operator>&gt;</operator> <call><name>candidateReplicaCount</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>WriteFailureException</name><argument_list>(<argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ackCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>blockFor</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>writeType</name></expr></argument>, <argument><expr><name>failureReasonByEndpoint</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>currentTimeoutNanos</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>requestTimeout</name> <init>= <expr><ternary><condition><expr><name>writeType</name> <operator>==</operator> <name><name>WriteType</name><operator>.</operator><name>COUNTER</name></name></expr>
                              ?</condition><then> <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCounterWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>
                              </then><else>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>requestTimeout</name> <operator>-</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>queryStartNanoTime</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set a delegate ideal CL write response handler. Note that this could be the same as this
     * if the ideal CL and requested CL are the same.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIdealCLResponseHandler</name><parameter_list>(<parameter><decl><type><name>AbstractWriteResponseHandler</name></type> <name>handler</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>idealCLDelegate</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>idealCLDelegate</name><operator>.</operator><name>responsesAndExpirations</name></name> <operator>=</operator> <operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This logs the response but doesn't do any further processing related to this write response handler
     * on whether the CL was achieved. Only call this after the subclass has completed all it's processing
     * since the subclass instance may be queried to find out if the CL was achieved.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>logResponseToIdealCLDelegate</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>m</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">//Tracking ideal CL was not configured</comment>
        <if_stmt><if>if <condition>(<expr><name>idealCLDelegate</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>idealCLDelegate</name> <operator>==</operator> <name>this</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">//Processing of the message was already done since this is the handler for the</comment>
            <comment type="line">//ideal consistency level. Just decrement the counter.</comment>
            <expr_stmt><expr><call><name>decrementResponseOrExpired</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">//Let the delegate do full processing, this will loop back into the branch above</comment>
            <comment type="line">//with idealCLDelegate == this, because the ideal write handler idealCLDelegate will always</comment>
            <comment type="line">//be set to this in the delegate.</comment>
            <expr_stmt><expr><call><name><name>idealCLDelegate</name><operator>.</operator><name>onResponse</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>expired</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">//Tracking ideal CL was not configured</comment>
        <if_stmt><if>if <condition>(<expr><name>idealCLDelegate</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//The requested CL matched ideal CL so reuse this object</comment>
        <if_stmt><if>if <condition>(<expr><name>idealCLDelegate</name> <operator>==</operator> <name>this</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>decrementResponseOrExpired</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">//Have the delegate track the expired response</comment>
            <expr_stmt><expr><call><name><name>idealCLDelegate</name><operator>.</operator><name>decrementResponseOrExpired</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the minimum number of endpoints that must respond.
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>blockFor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// During bootstrap, we have to include the pending endpoints or we may fail the consistency level</comment>
        <comment type="line">// guarantees (see #833)</comment>
        <return>return <expr><call><name><name>replicaPlan</name><operator>.</operator><name>blockFor</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * TODO: this method is brittle for its purpose of deciding when we should fail a query;
     *       this needs to be aware of which nodes are live/down
     * @return the total number of endpoints the request can send to.
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>candidateReplicaCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isDatacenterLocal</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>countInOurDc</name><argument_list>(<argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>liveAndDown</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>allReplicas</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>replicaPlan</name><operator>.</operator><name>liveAndDown</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ConsistencyLevel</name></type> <name>consistencyLevel</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if the message counts towards the blockFor() threshold
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>waitingFor</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return number of responses received
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>ackCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * null message means "response from local write"
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>onResponse</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>signal</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">//The ideal CL should only count as a strike if the requested CL was achieved.</comment>
        <comment type="line">//If the requested CL is not achieved it's fine for the ideal CL to also not be achieved.</comment>
        <if_stmt><if>if <condition>(<expr><name>idealCLDelegate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>idealCLDelegate</name><operator>.</operator><name>requestedCLAchieved</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>condition</name><operator>.</operator><name>signalAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>callback</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>RequestFailureReason</name></type> <name>failureReason</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Got failure from {}"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><call><name>waitingFor</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>
                ?</condition><then> <expr><call><name><name>failuresUpdater</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>
                </then><else>: <expr><name>failures</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>failureReasonByEndpoint</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>failureReason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>blockFor</name><argument_list>()</argument_list></call> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <call><name>candidateReplicaCount</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>signal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>invokeOnFailure</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Decrement the counter for all responses/expirations and if the counter
     * hits 0 check to see if the ideal consistency level (this write response handler)
     * was reached using the signal.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>final</specifier> <name>void</name></type> <name>decrementResponseOrExpired</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>decrementedValue</name> <init>= <expr><call><name><name>responsesAndExpirations</name><operator>.</operator><name>decrementAndGet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>decrementedValue</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// The condition being signaled is a valid proxy for the CL being achieved</comment>
            <comment type="line">// Only mark it as failed if the requested CL was achieved.</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>condition</name><operator>.</operator><name>isSignaled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>requestedCLAchieved</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>replicaPlan</name><operator>.</operator><name>keyspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>metric</name><operator>.</operator><name>writeFailedIdealCL</name><operator>.</operator><name>inc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>replicaPlan</name><operator>.</operator><name>keyspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>metric</name><operator>.</operator><name>idealCLWriteLatency</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Cheap Quorum backup.  If we failed to reach quorum with our initial (full) nodes, reach out to other nodes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>maybeTryAdditionalReplicas</name><parameter_list>(<parameter><decl><type><name>IMutation</name></type> <name>mutation</name></decl></parameter>, <parameter><decl><type><name><name>StorageProxy</name><operator>.</operator><name>WritePerformer</name></name></type> <name>writePerformer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localDC</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointsForToken</name></type> <name>uncontacted</name> <init>= <expr><call><name><name>replicaPlan</name><operator>.</operator><name>liveUncontacted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>uncontacted</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnFamilyStore</name></argument>&gt;</argument_list></name></type> <name>cfs</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>getTableIds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                              <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name><name>Schema</name><operator>.</operator><name>instance</name></name><operator>::</operator><name>getColumnFamilyStoreInstance</name></expr></argument>)</argument_list></call>
                                              <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cf</name> <range>: <expr><name>cfs</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name><name>cf</name><operator>.</operator><name>additionalWriteLatencyNanos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// no latency information, or we're overloaded</comment>
        <if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <call><name><name>mutation</name><operator>.</operator><name>getTimeout</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>condition</name><operator>.</operator><name>await</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cf</name> <range>: <expr><name>cfs</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>cf</name><operator>.</operator><name>metric</name><operator>.</operator><name>additionalWrites</name><operator>.</operator><name>inc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt><expr><call><name><name>writePerformer</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>withContact</name></name><argument_list>(<argument><expr><name>uncontacted</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><operator>(</operator><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name><operator>)</operator> <name>this</name></expr></argument>,
                                     <argument><expr><name>localDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ex</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
}</block></class>
</unit>
