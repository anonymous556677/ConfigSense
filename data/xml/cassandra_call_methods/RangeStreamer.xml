<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/dht/RangeStreamer.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>BiFunction</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>HashMultimap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMultimap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Multimap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Keyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SystemKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>FailureDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>Gossiper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>IFailureDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>AbstractReplicationStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Endpoints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>EndpointsByRange</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>EndpointsByReplica</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>EndpointsForRange</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>IEndpointSnitch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>LocalStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>NetworkTopologyStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>RangesAtEndpoint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replica</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaCollection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaCollection</name><operator>.</operator><name>Builder</name><operator>.</operator><name>Conflict</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replicas</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>TokenMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>PreviewKind</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>StreamOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>StreamPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>StreamResultFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Predicates</name><operator>.</operator><name>and</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Predicates</name><operator>.</operator><name>not</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>all</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>any</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replica</name><operator>.</operator><name>fullReplica</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Assists in streaming ranges to this node.
 */</comment>
<class><specifier>public</specifier> class <name>RangeStreamer</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>RangeStreamer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>ALIVE_PREDICATE</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>replica</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content>
                                                             <expr><operator>(</operator><operator>!</operator><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call> <operator>||</operator>
                                                              <operator>(</operator><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator>
                                                               <call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAlive</name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
                                                             <call><name><name>FailureDetector</name><operator>.</operator><name>instance</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>

    <comment type="block">/* bootstrap tokens. can be null if replacing the node. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl>;</decl_stmt>
    <comment type="block">/* current token ring */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TokenMetadata</name></type> <name>metadata</name></decl>;</decl_stmt>
    <comment type="block">/* address of this node */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>address</name></decl>;</decl_stmt>
    <comment type="block">/* streaming description */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>description</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>FetchReplica</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>toFetch</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>SourceFilter</name></argument>&gt;</argument_list></name></type> <name>sourceFilters</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>StreamPlan</name></type> <name>streamPlan</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>useStrictConsistency</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IEndpointSnitch</name></type> <name>snitch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>StreamStateStore</name></type> <name>stateStore</name></decl>;</decl_stmt>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FetchReplica</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Replica</name></type> <name>local</name></decl>;</decl_stmt>
        <comment type="line">// Source replica</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Replica</name></type> <name>remote</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>FetchReplica</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>local</name></decl></parameter>, <parameter><decl><type><name>Replica</name></type> <name>remote</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <assert>assert <expr><call><name><name>local</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>remote</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>;</assert>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>local</name></name> <operator>=</operator> <name>local</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>remote</name></name> <operator>=</operator> <name>remote</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"FetchReplica{"</literal> <operator>+</operator>
                   <literal type="string">"local="</literal> <operator>+</operator> <name>local</name> <operator>+</operator>
                   <literal type="string">", remote="</literal> <operator>+</operator> <name>remote</name> <operator>+</operator>
                   <literal type="char">'}'</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>FetchReplica</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>FetchReplica</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>local</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>local</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><call><name><name>remote</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>remote</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>local</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <call><name><name>remote</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <interface><specifier>public</specifier> interface <name>SourceFilter</name> <super_list><extends>extends <super><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>message</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <comment type="block" format="javadoc">/**
     * Source filter which excludes any endpoints that are not alive according to a
     * failure detector.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FailureDetectorSourceFilter</name> <super_list><implements>implements <super><name>SourceFilter</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IFailureDetector</name></type> <name>fd</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>FailureDetectorSourceFilter</name><parameter_list>(<parameter><decl><type><name>IFailureDetector</name></type> <name>fd</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>fd</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>message</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"Filtered "</literal> <operator>+</operator> <name>replica</name> <operator>+</operator> <literal type="string">" out because it was down"</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Source filter which excludes any endpoints that are not in a specific data center.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SingleDatacenterFilter</name> <super_list><implements>implements <super><name>SourceFilter</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>sourceDc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IEndpointSnitch</name></type> <name>snitch</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SingleDatacenterFilter</name><parameter_list>(<parameter><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sourceDc</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sourceDc</name></name> <operator>=</operator> <name>sourceDc</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>snitch</name></name> <operator>=</operator> <name>snitch</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>sourceDc</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>message</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"Filtered "</literal> <operator>+</operator> <name>replica</name> <operator>+</operator> <literal type="string">" out because it does not belong to "</literal> <operator>+</operator> <name>sourceDc</name> <operator>+</operator> <literal type="string">" datacenter"</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Source filter which excludes the current node from source calculations
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ExcludeLocalNodeFilter</name> <super_list><implements>implements <super><name>SourceFilter</name></super></implements></super_list>
    <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>!</operator><call><name><name>replica</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>message</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"Filtered "</literal> <operator>+</operator> <name>replica</name> <operator>+</operator> <literal type="string">" out because it is local"</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Source filter which only includes endpoints contained within a provided set.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>AllowedSourcesFilter</name> <super_list><implements>implements <super><name>SourceFilter</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>allowedSources</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>AllowedSourcesFilter</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>allowedSources</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowedSources</name></name> <operator>=</operator> <name>allowedSources</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>allowedSources</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>message</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"Filtered "</literal> <operator>+</operator> <name>replica</name> <operator>+</operator> <literal type="string">" out because it was not in the allowed set: "</literal> <operator>+</operator> <name>allowedSources</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <constructor><specifier>public</specifier> <name>RangeStreamer</name><parameter_list>(<parameter><decl><type><name>TokenMetadata</name></type> <name>metadata</name></decl></parameter>,
                         <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>,
                         <parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>,
                         <parameter><decl><type><name>StreamOperation</name></type> <name>streamOperation</name></decl></parameter>,
                         <parameter><decl><type><name>boolean</name></type> <name>useStrictConsistency</name></decl></parameter>,
                         <parameter><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name></decl></parameter>,
                         <parameter><decl><type><name>StreamStateStore</name></type> <name>stateStore</name></decl></parameter>,
                         <parameter><decl><type><name>boolean</name></type> <name>connectSequentially</name></decl></parameter>,
                         <parameter><decl><type><name>int</name></type> <name>connectionsPerHost</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>streamOperation</name></expr></argument>, <argument><expr><name>useStrictConsistency</name></expr></argument>, <argument><expr><name>snitch</name></expr></argument>, <argument><expr><name>stateStore</name></expr></argument>,
             <argument><expr><name><name>FailureDetector</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name>connectSequentially</name></expr></argument>, <argument><expr><name>connectionsPerHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><name>RangeStreamer</name><parameter_list>(<parameter><decl><type><name>TokenMetadata</name></type> <name>metadata</name></decl></parameter>,
                  <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>,
                  <parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>,
                  <parameter><decl><type><name>StreamOperation</name></type> <name>streamOperation</name></decl></parameter>,
                  <parameter><decl><type><name>boolean</name></type> <name>useStrictConsistency</name></decl></parameter>,
                  <parameter><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name></decl></parameter>,
                  <parameter><decl><type><name>StreamStateStore</name></type> <name>stateStore</name></decl></parameter>,
                  <parameter><decl><type><name>IFailureDetector</name></type> <name>failureDetector</name></decl></parameter>,
                  <parameter><decl><type><name>boolean</name></type> <name>connectSequentially</name></decl></parameter>,
                  <parameter><decl><type><name>int</name></type> <name>connectionsPerHost</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>streamOperation</name> <operator>==</operator> <name><name>StreamOperation</name><operator>.</operator><name>BOOTSTRAP</name></name> <operator>||</operator> <name>streamOperation</name> <operator>==</operator> <name><name>StreamOperation</name><operator>.</operator><name>REBUILD</name></name></expr></argument>, <argument><expr><name>streamOperation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadata</name></name> <operator>=</operator> <name>metadata</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tokens</name></name> <operator>=</operator> <name>tokens</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <call><name><name>streamOperation</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>streamPlan</name></name> <operator>=</operator> <operator>new</operator> <call><name>StreamPlan</name><argument_list>(<argument><expr><name>streamOperation</name></expr></argument>, <argument><expr><name>connectionsPerHost</name></expr></argument>, <argument><expr><name>connectSequentially</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>PreviewKind</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>useStrictConsistency</name></name> <operator>=</operator> <name>useStrictConsistency</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>snitch</name></name> <operator>=</operator> <name>snitch</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>stateStore</name></name> <operator>=</operator> <name>stateStore</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>streamPlan</name><operator>.</operator><name>listeners</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>stateStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// We're _always_ filtering out a local node and down sources</comment>
        <expr_stmt><expr><call><name>addSourceFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>RangeStreamer</name><operator>.</operator><name>FailureDetectorSourceFilter</name></name><argument_list>(<argument><expr><name>failureDetector</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addSourceFilter</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>RangeStreamer</name><operator>.</operator><name>ExcludeLocalNodeFilter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSourceFilter</name><parameter_list>(<parameter><decl><type><name>SourceFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>sourceFilters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// Creates error message from source filters</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>buildErrorMessage</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SourceFilter</name></argument>&gt;</argument_list></name></type> <name>sourceFilters</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>failureMessage</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>r</name> <range>: <expr><name>replicas</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SourceFilter</name></type> <name>filter</name> <range>: <expr><name>sourceFilters</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>failureMessage</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>message</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>failureMessage</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <comment type="block" format="javadoc">/**
     * Add ranges to be streamed for given keyspace.
     *
     * @param keyspaceName keyspace name
     * @param replicas ranges to be streamed
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRanges</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>strat</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>strat</name> <operator>instanceof</operator> <name>LocalStrategy</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Not adding ranges for Local Strategy keyspace={}"</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>useStrictSource</name> <init>= <expr><call><name>useStrictSourcesForRanges</name><argument_list>(<argument><expr><name>strat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EndpointsByReplica</name></type> <name>fetchMap</name> <init>= <expr><call><name>calculateRangesToFetchWithPreferredEndpoints</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>useStrictSource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>, <argument><name>Replica</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>fetchMap</name><operator>.</operator><name>flattenEntries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"{}: range {} exists on {} for keyspace {}"</literal></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <decl_stmt><decl><type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>FetchReplica</name></argument>&gt;</argument_list></name></type> <name>workMap</name></decl>;</decl_stmt>
        <comment type="line">//Only use the optimized strategy if we don't care about strict sources, have a replication factor &gt; 1, and no</comment>
        <comment type="line">//transient replicas.</comment>
        <if_stmt><if>if <condition>(<expr><name>useStrictSource</name> <operator>||</operator> <name>strat</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>strat</name><operator>.</operator><name>getReplicationFactor</name></name><argument_list>()</argument_list></call><operator>.</operator><name>allReplicas</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name><name>strat</name><operator>.</operator><name>getReplicationFactor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasTransientReplicas</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>workMap</name> <operator>=</operator> <call><name>convertPreferredEndpointsToWorkMap</name><argument_list>(<argument><expr><name>fetchMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>workMap</name> <operator>=</operator> <call><name>getOptimizedWorkMap</name><argument_list>(<argument><expr><name>fetchMap</name></expr></argument>, <argument><expr><name>sourceFilters</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>toFetch</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>workMap</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Keyspace is already added to fetch map"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>FetchReplica</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>workMap</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>FetchReplica</name></type> <name>r</name> <range>: <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"{}: range source {} local range {} for keyspace {}"</literal></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>remote</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>local</name></name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param strat AbstractReplicationStrategy of keyspace to check
     * @return true when the node is bootstrapping, useStrictConsistency is true and # of nodes in the cluster is more than # of replica
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>useStrictSourcesForRanges</name><parameter_list>(<parameter><decl><type><name>AbstractReplicationStrategy</name></type> <name>strat</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>res</name> <init>= <expr><name>useStrictConsistency</name> <operator>&amp;&amp;</operator> <name>tokens</name> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>nodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>strat</name> <operator>instanceof</operator> <name>NetworkTopologyStrategy</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>ImmutableMultimap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>dc2Nodes</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>getDC2AllEndpoints</name></name><argument_list>(<argument><expr><name>snitch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>NetworkTopologyStrategy</name></type> <name>ntps</name> <init>= <expr><operator>(</operator><name>NetworkTopologyStrategy</name><operator>)</operator> <name>strat</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>dc</name> <range>: <expr><call><name><name>dc2Nodes</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>nodes</name> <operator>+=</operator> <ternary><condition><expr><call><name><name>ntps</name><operator>.</operator><name>getReplicationFactor</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>.</operator><name>allReplicas</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>dc2Nodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>nodes</name> <operator>=</operator> <call><name><name>metadata</name><operator>.</operator><name>getSizeOfAllEndpoints</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    
            <expr_stmt><expr><name>res</name> <operator>=</operator> <name>nodes</name> <operator>&gt;</operator> <call><name><name>strat</name><operator>.</operator><name>getReplicationFactor</name></name><argument_list>()</argument_list></call><operator>.</operator><name>allReplicas</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wrapper method to assemble the arguments for invoking the implementation with RangeStreamer's parameters
     */</comment>
    <function><type><specifier>private</specifier> <name>EndpointsByReplica</name></type> <name>calculateRangesToFetchWithPreferredEndpoints</name><parameter_list>(<parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>fetchRanges</name></decl></parameter>, <parameter><decl><type><name>Keyspace</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>useStrictConsistency</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>strat</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>tmd</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>cloneOnlyTokenMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>tmdAfter</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Pending ranges</comment>
            <expr_stmt><expr><name>tmdAfter</name> <operator>=</operator> <call><name><name>tmd</name><operator>.</operator><name>cloneOnlyTokenMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tmdAfter</name><operator>.</operator><name>updateNormalTokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>useStrictConsistency</name></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Can't ask for strict consistency and not supply tokens"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name>calculateRangesToFetchWithPreferredEndpoints</name><argument_list>(<argument><expr><name>snitch</name><operator>::</operator><name>sortedByProximity</name></expr></argument>,
                                                            <argument><expr><name>strat</name></expr></argument>,
                                                            <argument><expr><name>fetchRanges</name></expr></argument>,
                                                            <argument><expr><name>useStrictConsistency</name></expr></argument>,
                                                            <argument><expr><name>tmd</name></expr></argument>,
                                                            <argument><expr><name>tmdAfter</name></expr></argument>,
                                                            <argument><expr><call><name><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                            <argument><expr><name>sourceFilters</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get a map of all ranges and the source that will be cleaned up once this bootstrapped node is added for the given ranges.
     * For each range, the list should only contain a single source. This allows us to consistently migrate data without violating
     * consistency.
     **/</comment>
     <function><type><specifier>public</specifier> <specifier>static</specifier> <name>EndpointsByReplica</name></type>
     <name>calculateRangesToFetchWithPreferredEndpoints</name><parameter_list>(<parameter><decl><type><name><name>BiFunction</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointsForRange</name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></type> <name>snitchGetSortedListByProximity</name></decl></parameter>,
                                                  <parameter><decl><type><name>AbstractReplicationStrategy</name></type> <name>strat</name></decl></parameter>,
                                                  <parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>fetchRanges</name></decl></parameter>,
                                                  <parameter><decl><type><name>boolean</name></type> <name>useStrictConsistency</name></decl></parameter>,
                                                  <parameter><decl><type><name>TokenMetadata</name></type> <name>tmdBefore</name></decl></parameter>,
                                                  <parameter><decl><type><name>TokenMetadata</name></type> <name>tmdAfter</name></decl></parameter>,
                                                  <parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>,
                                                  <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SourceFilter</name></argument>&gt;</argument_list></name></type> <name>sourceFilters</name></decl></parameter>)</parameter_list>
     <block>{<block_content>
         <decl_stmt><decl><type><name>EndpointsByRange</name></type> <name>rangeAddresses</name> <init>= <expr><call><name><name>strat</name><operator>.</operator><name>getRangeAddresses</name></name><argument_list>(<argument><expr><name>tmdBefore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

         <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>localAddress</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name> <argument_list>(<argument><expr><literal type="string">"Keyspace: {}"</literal></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"To fetch RN: {}"</literal></expr></argument>, <argument><expr><name>fetchRanges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Fetch ranges: {}"</literal></expr></argument>, <argument><expr><name>rangeAddresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <decl_stmt><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>testSourceFilters</name> <init>= <expr><call><name>and</name><argument_list>(<argument><expr><name>sourceFilters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <decl_stmt><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></type> <name>sorted</name> <init>=
         <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>endpoints</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>snitchGetSortedListByProximity</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>localAddress</name></expr></argument>, <argument><expr><name>endpoints</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>

         <comment type="line">//This list of replicas is just candidates. With strict consistency it's going to be a narrow list.</comment>
         <decl_stmt><decl><type><name><name>EndpointsByReplica</name><operator>.</operator><name>Builder</name></name></type> <name>rangesToFetchWithPreferredEndpoints</name> <init>= <expr><operator>new</operator> <call><name><name>EndpointsByReplica</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <for>for <control>(<init><decl><type><name>Replica</name></type> <name>toFetch</name> <range>: <expr><name>fetchRanges</name></expr></range></decl></init>)</control>
         <block>{<block_content>
             <comment type="line">//Replica that is sufficient to provide the data we need</comment>
             <comment type="line">//With strict consistency and transient replication we may end up with multiple types</comment>
             <comment type="line">//so this isn't used with strict consistency</comment>
             <decl_stmt><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>isSufficient</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>toFetch</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>r</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>

             <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"To fetch {}"</literal></expr></argument>, <argument><expr><name>toFetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <range>: <expr><call><name><name>rangeAddresses</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
             <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>range</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>toFetch</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                     <continue>continue;</continue></block_content></block></if></if_stmt>

                 <decl_stmt><decl><type><specifier>final</specifier> <name>EndpointsForRange</name></type> <name>oldEndpoints</name> <init>= <expr><call><name><name>sorted</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><call><name><name>rangeAddresses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                 <comment type="line">//Ultimately we populate this with whatever is going to be fetched from to satisfy toFetch</comment>
                 <comment type="line">//It could be multiple endpoints and we must fetch from all of them if they are there</comment>
                 <comment type="line">//With transient replication and strict consistency this is to get the full data from a full replica and</comment>
                 <comment type="line">//transient data from the transient replica losing data</comment>
                 <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>sources</name></decl>;</decl_stmt>
                 <comment type="line">//Due to CASSANDRA-5953 we can have a higher RF than we have endpoints.</comment>
                 <comment type="line">//So we need to be careful to only be strict when endpoints == RF</comment>
                 <decl_stmt><decl><type><name>boolean</name></type> <name>isStrictConsistencyApplicable</name> <init>= <expr><name>useStrictConsistency</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>oldEndpoints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>strat</name><operator>.</operator><name>getReplicationFactor</name></name><argument_list>()</argument_list></call><operator>.</operator><name>allReplicas</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                 <if_stmt><if>if <condition>(<expr><name>isStrictConsistencyApplicable</name></expr>)</condition>
                 <block>{<block_content>
                     <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>strictEndpoints</name></decl>;</decl_stmt>

                     <comment type="line">//Start with two sets of who replicates the range before and who replicates it after</comment>
                     <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>newEndpoints</name> <init>= <expr><call><name><name>strat</name><operator>.</operator><name>calculateNaturalReplicas</name></name><argument_list>(<argument><expr><call><name><name>toFetch</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>tmdAfter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                     <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Old endpoints {}"</literal></expr></argument>, <argument><expr><name>oldEndpoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"New endpoints {}"</literal></expr></argument>, <argument><expr><name>newEndpoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                     <comment type="line">// Remove new endpoints from old endpoints based on address</comment>
                     <expr_stmt><expr><name>strictEndpoints</name> <operator>=</operator> <call><name><name>oldEndpoints</name><operator>.</operator><name>without</name></name><argument_list>(<argument><expr><call><name><name>newEndpoints</name><operator>.</operator><name>endpoints</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                     <if_stmt><if>if <condition>(<expr><call><name><name>strictEndpoints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                         <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Expected &lt;= 1 endpoint but found "</literal> <operator>+</operator> <name>strictEndpoints</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

                     <comment type="line">//We have to check the source filters here to see if they will remove any replicas</comment>
                     <comment type="line">//required for strict consistency</comment>
                     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>all</name><argument_list>(<argument><expr><name>strictEndpoints</name></expr></argument>, <argument><expr><name>testSourceFilters</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                         <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Necessary replicas for strict consistency were removed by source filters: "</literal> <operator>+</operator> <call><name>buildErrorMessage</name><argument_list>(<argument><expr><name>sourceFilters</name></expr></argument>, <argument><expr><name>strictEndpoints</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

                     <comment type="line">//If we are transitioning from transient to full and and the set of replicas for the range is not changing</comment>
                     <comment type="line">//we might end up with no endpoints to fetch from by address. In that case we can pick any full replica safely</comment>
                     <comment type="line">//since we are already a transient replica and the existing replica remains.</comment>
                     <comment type="line">//The old behavior where we might be asked to fetch ranges we don't need shouldn't occur anymore.</comment>
                     <comment type="line">//So it's an error if we don't find what we need.</comment>
                     <if_stmt><if>if <condition>(<expr><call><name><name>strictEndpoints</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>toFetch</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                         <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"If there are no endpoints to fetch from then we must be transitioning from transient to full for range "</literal> <operator>+</operator> <name>toFetch</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

                     <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>any</name><argument_list>(<argument><expr><name>strictEndpoints</name></expr></argument>, <argument><expr><name>isSufficient</name></expr></argument>)</argument_list></call></expr>)</condition>
                     <block>{<block_content>
                         <comment type="line">// need an additional replica; include all our filters, to ensure we include a matching node</comment>
                         <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>fullReplica</name> <init>= <expr><name><name>Iterables</name><operator>.</operator></name>&lt;<name>Replica</name><operator>&gt;</operator><call><name>tryFind</name><argument_list>(<argument><expr><name>oldEndpoints</name></expr></argument>, <argument><expr><call><name>and</name><argument_list>(<argument><expr><name>isSufficient</name></expr></argument>, <argument><expr><name>testSourceFilters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toJavaUtil</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                         <if_stmt><if>if <condition>(<expr><call><name><name>fullReplica</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                             <expr_stmt><expr><name>strictEndpoints</name> <operator>=</operator> <call><name><name>Endpoints</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>strictEndpoints</name></expr></argument>, <argument><expr><call><name><name>EndpointsForRange</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>fullReplica</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                         <else>else<block type="pseudo"><block_content>
                             <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Couldn't find any matching sufficient replica out of "</literal> <operator>+</operator> <call><name>buildErrorMessage</name><argument_list>(<argument><expr><name>sourceFilters</name></expr></argument>, <argument><expr><name>oldEndpoints</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
                     </block_content>}</block></if></if_stmt>

                     <expr_stmt><expr><name>sources</name> <operator>=</operator> <name>strictEndpoints</name></expr>;</expr_stmt>
                 </block_content>}</block></if>
                 <else>else
                 <block>{<block_content>
                     <comment type="line">//Without strict consistency we have given up on correctness so no point in fetching from</comment>
                     <comment type="line">//a random full + transient replica since it's also likely to lose data</comment>
                     <comment type="line">//Also apply testSourceFilters that were given to us so we can safely select a single source</comment>
                     <expr_stmt><expr><name>sources</name> <operator>=</operator> <call><name><name>sorted</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><call><name><name>oldEndpoints</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><call><name>and</name><argument_list>(<argument><expr><name>isSufficient</name></expr></argument>, <argument><expr><name>testSourceFilters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <comment type="line">//Limit it to just the first possible source, we don't need more than one and downstream</comment>
                     <comment type="line">//will fetch from every source we supply</comment>
                     <expr_stmt><expr><name>sources</name> <operator>=</operator> <ternary><condition><expr><call><name><name>sources</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>sources</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>sources</name></expr></else></ternary></expr>;</expr_stmt>
                 </block_content>}</block></else></if_stmt>

                 <comment type="line">// storing range and preferred endpoint set</comment>
                 <expr_stmt><expr><call><name><name>rangesToFetchWithPreferredEndpoints</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>toFetch</name></expr></argument>, <argument><expr><name>sources</name></expr></argument>, <argument><expr><name><name>Conflict</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Endpoints to fetch for {} are {}"</literal></expr></argument>, <argument><expr><name>toFetch</name></expr></argument>, <argument><expr><name>sources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>

             <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>addressList</name> <init>= <expr><call><name><name>rangesToFetchWithPreferredEndpoints</name><operator>.</operator><name>getIfPresent</name></name><argument_list>(<argument><expr><name>toFetch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if <condition>(<expr><name>addressList</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                 <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Failed to find endpoints to fetch "</literal> <operator>+</operator> <name>toFetch</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

             <comment type="block">/*
              * When we move forwards (shrink our bucket) we are the one losing a range and no one else loses
              * from that action (we also don't gain). When we move backwards there are two people losing a range. One is a full replica
              * and the other is a transient replica. So we must need fetch from two places in that case for the full range we gain.
              * For a transient range we only need to fetch from one.
              */</comment>
             <if_stmt><if>if <condition>(<expr><name>useStrictConsistency</name> <operator>&amp;&amp;</operator> <call><name><name>addressList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>addressList</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>Replica</name><operator>::</operator><name>isFull</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name><name>addressList</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>Replica</name><operator>::</operator><name>isTransient</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                 <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Multiple strict sources found for %s, sources: %s"</literal></expr></argument>, <argument><expr><name>toFetch</name></expr></argument>, <argument><expr><name>addressList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

             <comment type="line">//We must have enough stuff to fetch from</comment>
             <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>any</name><argument_list>(<argument><expr><name>addressList</name></expr></argument>, <argument><expr><name>isSufficient</name></expr></argument>)</argument_list></call></expr>)</condition>
             <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><call><name><name>strat</name><operator>.</operator><name>getReplicationFactor</name></name><argument_list>()</argument_list></call><operator>.</operator><name>allReplicas</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
                 <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>useStrictConsistency</name></expr>)</condition>
                     <block>{<block_content>
                         <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"A node required to move the data consistently is down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Unable to find sufficient sources for streaming range "</literal> <operator>+</operator> <name>toFetch</name> <operator>+</operator> <literal type="string">" in keyspace "</literal> <operator>+</operator> <name>keyspace</name> <operator>+</operator> <literal type="string">" with RF=1. "</literal> <operator>+</operator>
                                                         <literal type="string">"Ensure this keyspace contains replicas in the source datacenter."</literal></expr></argument>)</argument_list></call></expr>;</throw>
                     </block_content>}</block></if>
                     <else>else<block type="pseudo"><block_content>
                         <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to find sufficient sources for streaming range {} in keyspace {} with RF=1. "</literal> <operator>+</operator>
                                     <literal type="string">"Keyspace might be missing data."</literal></expr></argument>, <argument><expr><name>toFetch</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                 </block_content>}</block></if>
                 <else>else
                 <block>{<block_content>
                     <if_stmt><if>if <condition>(<expr><name>useStrictConsistency</name></expr>)</condition><block type="pseudo"><block_content>
                         <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"A node required to move the data consistently is down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                     <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Unable to find sufficient sources for streaming range "</literal> <operator>+</operator> <name>toFetch</name> <operator>+</operator> <literal type="string">" in keyspace "</literal> <operator>+</operator> <name>keyspace</name></expr></argument>)</argument_list></call></expr>;</throw>
                 </block_content>}</block></else></if_stmt>
             </block_content>}</block></if></if_stmt>
         </block_content>}</block></for>
         <return>return <expr><call><name><name>rangesToFetchWithPreferredEndpoints</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
     </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The preferred endpoint list is the wrong format because it is keyed by Replica (this node) rather than the source
     * endpoint we will fetch from which streaming wants.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>FetchReplica</name></argument>&gt;</argument_list></name></type> <name>convertPreferredEndpointsToWorkMap</name><parameter_list>(<parameter><decl><type><name>EndpointsByReplica</name></type> <name>preferredEndpoints</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>FetchReplica</name></argument>&gt;</argument_list></name></type> <name>workMap</name> <init>= <expr><call><name><name>HashMultimap</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><call><name><name>preferredEndpoints</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>source</name> <range>: <expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <assert>assert <expr><operator>(</operator><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>isSelf</name><argument_list>()</argument_list></call></expr>;</assert>
                <assert>assert <expr><operator>!</operator><call><name><name>source</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>;</assert>
                <expr_stmt><expr><call><name><name>workMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>source</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>FetchReplica</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Work map {}"</literal></expr></argument>, <argument><expr><name>workMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>workMap</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Optimized version that also outputs the final work map
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>FetchReplica</name></argument>&gt;</argument_list></name></type> <name>getOptimizedWorkMap</name><parameter_list>(<parameter><decl><type><name>EndpointsByReplica</name></type> <name>rangesWithSources</name></decl></parameter>,
                                                                                  <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SourceFilter</name></argument>&gt;</argument_list></name></type> <name>sourceFilters</name></decl></parameter>,
                                                                                  <parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">//For now we just aren't going to use the optimized range fetch map with transient replication to shrink</comment>
        <comment type="line">//the surface area to test and introduce bugs.</comment>
        <comment type="line">//In the future it's possible we could run it twice once for full ranges with only full replicas</comment>
        <comment type="line">//and once with transient ranges and all replicas. Then merge the result.</comment>
        <decl_stmt><decl><type><name><name>EndpointsByRange</name><operator>.</operator><name>Builder</name></name></type> <name>unwrapped</name> <init>= <expr><operator>new</operator> <call><name><name>EndpointsByRange</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>, <argument><name>Replica</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>rangesWithSources</name><operator>.</operator><name>flattenEntries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Replicas</name><operator>.</operator><name>temporaryAssertFull</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>unwrapped</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>range</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>EndpointsByRange</name></type> <name>unwrappedView</name> <init>= <expr><call><name><name>unwrapped</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RangeFetchMapCalculator</name></type> <name>calculator</name> <init>= <expr><operator>new</operator> <call><name>RangeFetchMapCalculator</name><argument_list>(<argument><expr><name>unwrappedView</name></expr></argument>, <argument><expr><name>sourceFilters</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rangeFetchMapMap</name> <init>= <expr><call><name><name>calculator</name><operator>.</operator><name>getRangeFetchMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Output from RangeFetchMapCalculator for keyspace {}"</literal></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validateRangeFetchMap</name><argument_list>(<argument><expr><name>unwrappedView</name></expr></argument>, <argument><expr><name>rangeFetchMapMap</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Need to rewrap as Replicas</comment>
        <decl_stmt><decl><type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>FetchReplica</name></argument>&gt;</argument_list></name></type> <name>wrapped</name> <init>= <expr><call><name><name>HashMultimap</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>rangeFetchMapMap</name><operator>.</operator><name>entries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Replica</name></type> <name>toFetch</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>r</name> <range>: <expr><call><name><name>rangesWithSources</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>r</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>toFetch</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"There shouldn't be multiple replicas for range %s, replica %s and %s here"</literal></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>toFetch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>toFetch</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>toFetch</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Shouldn't be possible for the Replica we fetch to be null here"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <comment type="line">//Committing the cardinal sin of synthesizing a Replica, but it's ok because we assert earlier all of them</comment>
            <comment type="line">//are full and optimized range fetch map doesn't support transient replication yet.</comment>
            <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>FetchReplica</name><argument_list>(<argument><expr><name>toFetch</name></expr></argument>, <argument><expr><call><name>fullReplica</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>wrapped</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Verify that source returned for each range is correct
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>static</specifier> <name>void</name></type> <name>validateRangeFetchMap</name><parameter_list>(<parameter><decl><type><name>EndpointsByRange</name></type> <name>rangesWithSources</name></decl></parameter>, <parameter><decl><type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rangeFetchMapMap</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>rangeFetchMapMap</name><operator>.</operator><name>entries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Trying to stream locally. Range: "</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call>
                                        <operator>+</operator> <literal type="string">" in keyspace "</literal> <operator>+</operator> <name>keyspace</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>rangesWithSources</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>endpoints</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Trying to stream from wrong endpoint. Range: "</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call>
                                                <operator>+</operator> <literal type="string">" in keyspace "</literal> <operator>+</operator> <name>keyspace</name> <operator>+</operator> <literal type="string">" from endpoint: "</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Streaming range {} from endpoint {} for keyspace {}"</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="line">// For testing purposes</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>FetchReplica</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>toFetch</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>toFetch</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>StreamResultFuture</name></type> <name>fetchAsync</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>toFetch</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>keyspace</name></decl></parameter>, <parameter><decl><name>sources</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Keyspace {} Sources {}"</literal></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>sources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sources</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>source</name></decl></parameter>, <parameter><decl><name>fetchReplicas</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>

                <comment type="line">// filter out already streamed ranges</comment>
                <decl_stmt><decl><type><name><name>SystemKeyspace</name><operator>.</operator><name>AvailableRanges</name></name></type> <name>available</name> <init>= <expr><call><name><name>stateStore</name><operator>.</operator><name>getAvailableRanges</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>metadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>FetchReplica</name></argument>&gt;</argument_list></name></type> <name>isAvailable</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>fetch</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>isInFull</name> <init>= <expr><call><name><name>available</name><operator>.</operator><name>full</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>fetch</name><operator>.</operator><name>local</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>isInTrans</name> <init>= <expr><call><name><name>available</name><operator>.</operator><name>trans</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>fetch</name><operator>.</operator><name>local</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isInFull</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isInTrans</name></expr>)</condition><block type="pseudo"><block_content>
                        <comment type="line">//Range is unavailable</comment>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name><name>fetch</name><operator>.</operator><name>local</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <comment type="line">//For full, pick only replicas with matching transientness</comment>
                        <return>return <expr><name>isInFull</name> <operator>==</operator> <call><name><name>fetch</name><operator>.</operator><name>remote</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                    <comment type="line">// Any transient or full will do</comment>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FetchReplica</name></argument>&gt;</argument_list></name></type> <name>remaining</name> <init>= <expr><call><name><name>fetchReplicas</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><call><name>not</name><argument_list>(<argument><expr><name>isAvailable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>remaining</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>available</name><operator>.</operator><name>full</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>available</name><operator>.</operator><name>trans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FetchReplica</name></argument>&gt;</argument_list></name></type> <name>skipped</name> <init>= <expr><call><name><name>fetchReplicas</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>isAvailable</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Some ranges of {} are already available. Skipping streaming those ranges. Skipping {}. Fully available {} Transiently available {}"</literal></expr></argument>,
                                <argument><expr><name>fetchReplicas</name></expr></argument>, <argument><expr><name>skipped</name></expr></argument>, <argument><expr><name><name>available</name><operator>.</operator><name>full</name></name></expr></argument>, <argument><expr><name><name>available</name><operator>.</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"{}ing from {} ranges {}"</literal></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>remaining</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>self</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>RangesAtEndpoint</name></type> <name>full</name> <init>= <expr><call><name><name>remaining</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pair</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>pair</name><operator>.</operator><name>remote</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pair</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>pair</name><operator>.</operator><name>local</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>RangesAtEndpoint</name><operator>.</operator><name>collector</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>RangesAtEndpoint</name></type> <name>transientReplicas</name> <init>= <expr><call><name><name>remaining</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pair</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>pair</name><operator>.</operator><name>remote</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pair</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>pair</name><operator>.</operator><name>local</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>RangesAtEndpoint</name><operator>.</operator><name>collector</name></name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Source and our replicas {}"</literal></expr></argument>, <argument><expr><name>fetchReplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Source {} Keyspace {}  streaming full {} transient {}"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><name>transientReplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* Send messages to respective folks to stream data over to me */</comment>
                <expr_stmt><expr><call><name><name>streamPlan</name><operator>.</operator><name>requestRanges</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><name>transientReplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>streamPlan</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
