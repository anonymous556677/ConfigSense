<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/io/util/SimpleCachedBufferPool.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Queue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>compress</name><operator>.</operator><name>BufferType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>jctools</name><operator>.</operator><name>queues</name><operator>.</operator><name>MpmcArrayQueue</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A very simple Bytebuffer pool with a fixed allocation size and a cached max allocation count. Will allow
 * you to go past the "max", freeing all buffers allocated beyond the max buffer count on release.
 *
 * Has a reusable thread local ByteBuffer that users can make use of.
 */</comment>
<class><specifier>public</specifier> class <name>SimpleCachedBufferPool</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ThreadLocalByteBufferHolder</name></type> <name>bufferHolder</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Queue</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>bufferPool</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The number of buffers currently used.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AtomicInteger</name></type> <name>usedBuffers</name> <init>= <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Maximum number of buffers in the compression pool. Any buffers above this count that are allocated will be cleaned
     * upon release rather than held and re-used.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxBufferPoolSize</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Size of individual buffer segments on allocation.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>bufferSize</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BufferType</name></type> <name>preferredReusableBufferType</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SimpleCachedBufferPool</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxBufferPoolSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>, <parameter><decl><type><name>BufferType</name></type> <name>preferredReusableBufferType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// We want to use a bounded queue to ensure that we do not pool more buffers than maxBufferPoolSize</comment>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bufferPool</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>MpmcArrayQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>maxBufferPoolSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxBufferPoolSize</name></name> <operator>=</operator> <name>maxBufferPoolSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bufferSize</name></name> <operator>=</operator> <name>bufferSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>preferredReusableBufferType</name></name> <operator>=</operator> <name>preferredReusableBufferType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bufferHolder</name></name> <operator>=</operator> <operator>new</operator> <call><name>ThreadLocalByteBufferHolder</name><argument_list>(<argument><expr><name>preferredReusableBufferType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>createBuffer</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>usedBuffers</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buf</name> <init>= <expr><call><name><name>bufferPool</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>buf</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>preferredReusableBufferType</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>getThreadLocalReusableBuffer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>bufferHolder</name><operator>.</operator><name>getBuffer</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>releaseBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>buffer</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <assert>assert <expr><name>preferredReusableBufferType</name> <operator>==</operator> <call><name><name>BufferType</name><operator>.</operator><name>typeOf</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</assert>

        <expr_stmt><expr><call><name><name>usedBuffers</name><operator>.</operator><name>decrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// We use a bounded queue. By consequence if we have reached the maximum size for the buffer pool</comment>
        <comment type="line">// offer will return false and we know that we can simply get rid of the buffer.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bufferPool</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>clean</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Empties the buffer pool.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>emptyBufferPool</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buffer</name> <init>= <expr><call><name><name>bufferPool</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>buffer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>clean</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name><name>bufferPool</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the number of used buffers has exceeded the maximum number of cached buffers.
     *
     * @return {@code true} if the number of used buffers has exceeded the maximum number of cached buffers,
     * {@code false} otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>atLimit</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>usedBuffers</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>maxBufferPoolSize</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"SimpleBufferPool:"</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" usedBuffers:"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>usedBuffers</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">", maxBufferPoolSize:"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>maxBufferPoolSize</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">", bufferSize:"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
