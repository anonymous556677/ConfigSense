<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/SSTableImporter.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>Verifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>SSTableSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Component</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Descriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>KeyIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ActiveRepairService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Refs</name></name>;</import>

<class><specifier>public</specifier> class <name>SSTableImporter</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ColumnFamilyStore</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SSTableImporter</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfs</name></name> <operator>=</operator> <name>cfs</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Imports sstables from the directories given in options.srcPaths
     *
     * If import fails in any of the directories, that directory is skipped and the failed directories
     * are returned so that the user can re-upload files or remove corrupt files.
     *
     * If one of the directories in srcPaths is not readable/does not exist, we exit immediately to let
     * the user change permissions or similar on the directory.
     *
     * @param options
     * @return list of failed directories
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>synchronized</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>importNewSSTables</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Loading new SSTables for {}/{}: {}"</literal></expr></argument>,
                    <argument><expr><call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>Directories</name><operator>.</operator><name>SSTableLister</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>listers</name> <init>= <expr><call><name>getSSTableListers</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>srcPaths</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Descriptor</name></argument>&gt;</argument_list></name></type> <name>currentDescriptors</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>currentDescriptors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>sstable</name><operator>.</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>failedDirectories</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// verify first to avoid starting to copy sstables to the data directories and then have to abort.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>verifySSTables</name></name> <operator>||</operator> <name><name>options</name><operator>.</operator><name>verifyTokens</name></name></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>Directories</name><operator>.</operator><name>SSTableLister</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>listerPair</name> <range>: <expr><name>listers</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>Directories</name><operator>.</operator><name>SSTableLister</name></name></type> <name>lister</name> <init>= <expr><name><name>listerPair</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>dir</name> <init>= <expr><name><name>listerPair</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Descriptor</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>lister</name><operator>.</operator><name>list</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Descriptor</name></type> <name>descriptor</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>currentDescriptors</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <try>try
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>verifySSTableForImport</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>verifyTokens</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>verifySSTables</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>extendedVerify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed verifying sstable {} in directory {}"</literal></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>failedDirectories</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed verifying sstable {}"</literal></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Failed verifying sstable "</literal><operator>+</operator><name>descriptor</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
                            </block_content>}</block></else></if_stmt>
                            <break>break;</break>
                        </block_content>}</block></catch></try>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>newSSTables</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>Directories</name><operator>.</operator><name>SSTableLister</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>listerPair</name> <range>: <expr><name>listers</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Directories</name><operator>.</operator><name>SSTableLister</name></name></type> <name>lister</name> <init>= <expr><name><name>listerPair</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>dir</name> <init>= <expr><name><name>listerPair</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>failedDirectories</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>MovedSSTable</name></argument>&gt;</argument_list></name></type> <name>movedSSTables</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>newSSTablesPerDirectory</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Descriptor</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>lister</name><operator>.</operator><name>list</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Descriptor</name></type> <name>oldDescriptor</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>currentDescriptors</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>oldDescriptor</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue;</continue></block_content></block></if></if_stmt>

                    <decl_stmt><decl><type><name>File</name></type> <name>targetDir</name> <init>= <expr><call><name>getTargetDirectory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>oldDescriptor</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Descriptor</name></type> <name>newDescriptor</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>getUniqueDescriptorFor</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>targetDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>maybeMutateMetadata</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>movedSSTables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MovedSSTable</name><argument_list>(<argument><expr><name>newDescriptor</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>SSTableReader</name></type> <name>sstable</name> <init>= <expr><call><name><name>SSTableReader</name><operator>.</operator><name>moveAndOpenSSTable</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newDescriptor</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>copyData</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>newSSTablesPerDirectory</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>newSSTablesPerDirectory</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>s</name><operator>.</operator><name>selfRef</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>release</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed importing sstables in directory {}"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>failedDirectories</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>copyData</name></name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>removeCopiedSSTables</name><argument_list>(<argument><expr><name>movedSSTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>moveSSTablesBack</name><argument_list>(<argument><expr><name>movedSSTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><call><name><name>movedSSTables</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>newSSTablesPerDirectory</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed importing sstables from data directory - renamed sstables are: {}"</literal></expr></argument>, <argument><expr><name>movedSSTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Failed importing sstables"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>newSSTables</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>newSSTablesPerDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>newSSTables</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"No new SSTables were found for {}/{}"</literal></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>failedDirectories</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Loading new SSTables and building secondary indexes for {}/{}: {}"</literal></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newSSTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <init>(<decl><type><name><name>Refs</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>refs</name> <init>= <expr><call><name><name>Refs</name><operator>.</operator><name>ref</name></name><argument_list>(<argument><expr><name>newSSTables</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addSSTables</name><argument_list>(<argument><expr><name>newSSTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>reader</name> <range>: <expr><name>newSSTables</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>invalidateCaches</name></name> <operator>&amp;&amp;</operator> <call><name><name>cfs</name><operator>.</operator><name>isRowCacheEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>invalidateCachesForSSTable</name><argument_list>(<argument><expr><name><name>reader</name><operator>.</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>

        </block_content>}</block></try>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Done loading load new SSTables for {}/{}"</literal></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>failedDirectories</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Opens the sstablereader described by descriptor and figures out the correct directory for it based
     * on the first token
     *
     * srcPath == null means that the sstable is in a data directory and we can use that directly.
     *
     * If we fail figuring out the directory we will pick the one with the most available disk space.
     */</comment>
    <function><type><specifier>private</specifier> <name>File</name></type> <name>getTargetDirectory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>srcPath</name></decl></parameter>, <parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>srcPath</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>descriptor</name><operator>.</operator><name>directory</name></name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>targetDirectory</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSTableReader</name></type> <name>sstable</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>sstable</name> <operator>=</operator> <call><name><name>SSTableReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>targetDirectory</name> <operator>=</operator> <call><name><name>cfs</name><operator>.</operator><name>getDirectories</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocationForDisk</name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>diskBoundaryManager</name><operator>.</operator><name>getDiskBoundaries</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCorrectDiskForSSTable</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>sstable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>sstable</name><operator>.</operator><name>selfRef</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></finally></try>
        <return>return <expr><ternary><condition><expr><name>targetDirectory</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>cfs</name><operator>.</operator><name>getDirectories</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWriteableLocationToLoadFile</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>baseFilename</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>targetDirectory</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create SSTableListers based on srcPaths
     *
     * If srcPaths is empty, we create a lister that lists sstables in the data directories (deprecated use)
     */</comment>
    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>Directories</name><operator>.</operator><name>SSTableLister</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getSSTableListers</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>srcPaths</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>Directories</name><operator>.</operator><name>SSTableLister</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>listers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>srcPaths</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>path</name> <range>: <expr><name>srcPaths</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Directory %s does not exist"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Directories</name><operator>.</operator><name>verifyFullPermissions</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Insufficient permissions on directory "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>listers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getDirectories</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sstableLister</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>Directories</name><operator>.</operator><name>OnTxnErr</name><operator>.</operator><name>IGNORE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>skipTemporary</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>listers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getDirectories</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sstableLister</name><argument_list>(<argument><expr><name><name>Directories</name><operator>.</operator><name>OnTxnErr</name><operator>.</operator><name>IGNORE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>skipTemporary</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>listers</name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>MovedSSTable</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Descriptor</name></type> <name>newDescriptor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Descriptor</name></type> <name>oldDescriptor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>MovedSSTable</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>newDescriptor</name></decl></parameter>, <parameter><decl><type><name>Descriptor</name></type> <name>oldDescriptor</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>newDescriptor</name></name> <operator>=</operator> <name>newDescriptor</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldDescriptor</name></name> <operator>=</operator> <name>oldDescriptor</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>components</name></name> <operator>=</operator> <name>components</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s moved to %s with components %s"</literal></expr></argument>, <argument><expr><name>oldDescriptor</name></expr></argument>, <argument><expr><name>newDescriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * If we fail when opening the sstable (if for example the user passes in --no-verify and there are corrupt sstables)
     * we might have started copying sstables to the data directory, these need to be moved back to the original name/directory
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>moveSSTablesBack</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>MovedSSTable</name></argument>&gt;</argument_list></name></type> <name>movedSSTables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>MovedSSTable</name></type> <name>movedSSTable</name> <range>: <expr><name>movedSSTables</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>movedSSTable</name><operator>.</operator><name>newDescriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Moving sstable {} back to {}"</literal></expr></argument>, <argument><expr><call><name><name>movedSSTable</name><operator>.</operator><name>newDescriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>
                                                          , <argument><expr><call><name><name>movedSSTable</name><operator>.</operator><name>oldDescriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>SSTableWriter</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><name><name>movedSSTable</name><operator>.</operator><name>newDescriptor</name></name></expr></argument>, <argument><expr><name><name>movedSSTable</name><operator>.</operator><name>oldDescriptor</name></name></expr></argument>, <argument><expr><name><name>movedSSTable</name><operator>.</operator><name>components</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Similarly for moving case, we need to delete all SSTables which were copied already but the
     * copying as a whole has failed so we do not leave any traces behind such failed import.
     *
     * @param movedSSTables tables we have moved already (by copying) which need to be removed
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>removeCopiedSSTables</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>MovedSSTable</name></argument>&gt;</argument_list></name></type> <name>movedSSTables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Removing copied SSTables which were left in data directories after failed SSTable import."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>MovedSSTable</name></type> <name>movedSSTable</name> <range>: <expr><name>movedSSTables</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>movedSSTable</name><operator>.</operator><name>newDescriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// no logging here as for moveSSTablesBack case above as logging is done in delete method</comment>
                <expr_stmt><expr><call><name><name>SSTableWriter</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name><name>movedSSTable</name><operator>.</operator><name>newDescriptor</name></name></expr></argument>, <argument><expr><name><name>movedSSTable</name><operator>.</operator><name>components</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Iterates over all keys in the sstable index and invalidates the row cache
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>void</name></type> <name>invalidateCachesForSSTable</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>desc</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try <init>(<decl><type><name>KeyIterator</name></type> <name>iter</name> <init>= <expr><operator>new</operator> <call><name>KeyIterator</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>decoratedKey</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>invalidateCachedPartition</name></name><argument_list>(<argument><expr><name>decoratedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Verify an sstable for import, throws exception if there is a failure verifying.
     *
     * @param verifyTokens to verify that the tokens are owned by the current node
     * @param verifySSTables to verify the sstables given. If this is false a "quick" verification will be run, just deserializing metadata
     * @param extendedVerify to validate the values in the sstables
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>verifySSTableForImport</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>verifyTokens</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>verifySSTables</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>extendedVerify</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SSTableReader</name></type> <name>reader</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name><name>SSTableReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Verifier</name><operator>.</operator><name>Options</name></name></type> <name>verifierOptions</name> <init>= <expr><call><name><name>Verifier</name><operator>.</operator><name>options</name></name><argument_list>()</argument_list></call>
                                                       <operator>.</operator><call><name>extendedVerification</name><argument_list>(<argument><expr><name>extendedVerify</name></expr></argument>)</argument_list></call>
                                                       <operator>.</operator><call><name>checkOwnsTokens</name><argument_list>(<argument><expr><name>verifyTokens</name></expr></argument>)</argument_list></call>
                                                       <operator>.</operator><call><name>quick</name><argument_list>(<argument><expr><operator>!</operator><name>verifySSTables</name></expr></argument>)</argument_list></call>
                                                       <operator>.</operator><call><name>invokeDiskFailurePolicy</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                                                       <operator>.</operator><call><name>mutateRepairStatus</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <init>(<decl><type><name>Verifier</name></type> <name>verifier</name> <init>= <expr><operator>new</operator> <call><name>Verifier</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>verifierOptions</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>verifier</name><operator>.</operator><name>verify</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></try>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Can't import sstable "</literal> <operator>+</operator> <name>descriptor</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>selfRef</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Depending on the options passed in, this might reset level on the sstable to 0 and/or remove the repair information
     * from the sstable
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>maybeMutateMetadata</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name>Options</name></type> <name>options</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>STATS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>resetLevel</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>descriptor</name><operator>.</operator><name>getMetadataSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mutateLevel</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>clearRepaired</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>descriptor</name><operator>.</operator><name>getMetadataSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mutateRepairMetadata</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name><name>ActiveRepairService</name><operator>.</operator><name>UNREPAIRED_SSTABLE</name></name></expr></argument>,
                                                                        <argument><expr><literal type="null">null</literal></expr></argument>,
                                                                        <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Options</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>srcPaths</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>resetLevel</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>clearRepaired</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>verifySSTables</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>verifyTokens</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>invalidateCaches</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>extendedVerify</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>copyData</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Options</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>srcPaths</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>resetLevel</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>clearRepaired</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>verifySSTables</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>verifyTokens</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>invalidateCaches</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>extendedVerify</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>copyData</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>srcPaths</name></name> <operator>=</operator> <name>srcPaths</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resetLevel</name></name> <operator>=</operator> <name>resetLevel</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clearRepaired</name></name> <operator>=</operator> <name>clearRepaired</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verifySSTables</name></name> <operator>=</operator> <name>verifySSTables</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verifyTokens</name></name> <operator>=</operator> <name>verifyTokens</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>invalidateCaches</name></name> <operator>=</operator> <name>invalidateCaches</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extendedVerify</name></name> <operator>=</operator> <name>extendedVerify</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>copyData</name></name> <operator>=</operator> <name>copyData</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>options</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>srcDir</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>srcDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>options</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>srcDirs</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>srcDirs</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>options</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>options</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"Options{"</literal> <operator>+</operator>
                   <literal type="string">"srcPaths='"</literal> <operator>+</operator> <name>srcPaths</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
                   <literal type="string">", resetLevel="</literal> <operator>+</operator> <name>resetLevel</name> <operator>+</operator>
                   <literal type="string">", clearRepaired="</literal> <operator>+</operator> <name>clearRepaired</name> <operator>+</operator>
                   <literal type="string">", verifySSTables="</literal> <operator>+</operator> <name>verifySSTables</name> <operator>+</operator>
                   <literal type="string">", verifyTokens="</literal> <operator>+</operator> <name>verifyTokens</name> <operator>+</operator>
                   <literal type="string">", invalidateCaches="</literal> <operator>+</operator> <name>invalidateCaches</name> <operator>+</operator>
                   <literal type="string">", extendedVerify="</literal> <operator>+</operator> <name>extendedVerify</name> <operator>+</operator>
                   <literal type="string">", copyData= "</literal> <operator>+</operator> <name>copyData</name> <operator>+</operator>
                   <literal type="char">'}'</literal></expr>;</return>
        </block_content>}</block></function>

        <class><specifier>static</specifier> class <name>Builder</name>
        <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>srcPaths</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>resetLevel</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>clearRepaired</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verifySSTables</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verifyTokens</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>invalidateCaches</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>extendedVerify</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>copyData</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

            <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>srcPath</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <assert>assert <expr><name>srcPath</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>srcPaths</name></name> <operator>=</operator> <name>srcPath</name></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>Builder</name></type> <name>resetLevel</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>resetLevel</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>Builder</name></type> <name>clearRepaired</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>clearRepaired</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>Builder</name></type> <name>verifySSTables</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>verifySSTables</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>Builder</name></type> <name>verifyTokens</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>verifyTokens</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>Builder</name></type> <name>invalidateCaches</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>invalidateCaches</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>Builder</name></type> <name>extendedVerify</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>extendedVerify</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>Builder</name></type> <name>copyData</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>copyData</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>Options</name></type> <name>build</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>Options</name><argument_list>(<argument><expr><name>srcPaths</name></expr></argument>, <argument><expr><name>resetLevel</name></expr></argument>, <argument><expr><name>clearRepaired</name></expr></argument>, <argument><expr><name>verifySSTables</name></expr></argument>, <argument><expr><name>verifyTokens</name></expr></argument>, <argument><expr><name>invalidateCaches</name></expr></argument>, <argument><expr><name>extendedVerify</name></expr></argument>, <argument><expr><name>copyData</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>

}</block></class>
</unit>
