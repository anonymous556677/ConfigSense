<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/locator/ReplicaCollection.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A collection like class for Replica objects. Represents both a well defined order on the contained Replica objects,
 * and efficient methods for accessing the contained Replicas, directly and as a projection onto their endpoints and ranges.
 */</comment>
<interface><specifier>public</specifier> interface <name><name>ReplicaCollection</name><parameter_list>&lt;<parameter><name>C</name> <extends>extends <name><name>ReplicaCollection</name><parameter_list>&lt;<parameter><name>C</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></super></extends></super_list>
<block>{
    <comment type="block" format="javadoc">/**
     * @return a Set of the endpoints of the contained Replicas.
     * Iteration order is maintained where there is a 1:1 relationship between endpoint and Replica
     * Typically this collection offers O(1) access methods, and this is true for all but ReplicaList.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpoints</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @param i a value in the range [0..size())
     * @return the i'th Replica, in our iteration order
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Replica</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return the number of Replica contained
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return true iff size() == 0
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return true iff a Replica in this collection is equal to the provided Replica.
     * Typically this method is expected to take O(1) time, and this is true for all but ReplicaList.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return the number of replicas that match the predicate
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>count</name><parameter_list>(<parameter><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>predicate</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return a *eagerly constructed* copy of this collection containing the Replica that match the provided predicate.
     * An effort will be made to either return ourself, or a subList, where possible.
     * It is guaranteed that no changes to any upstream Builder will affect the state of the result.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>C</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>predicate</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return a *eagerly constructed* copy of this collection containing the Replica that match the provided predicate.
     * An effort will be made to either return ourself, or a subList, where possible.
     * It is guaranteed that no changes to any upstream Builder will affect the state of the result.
     * Only the first maxSize items will be returned.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>C</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>predicate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxSize</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return a *lazily constructed* Iterable over this collection, containing the Replica that match the provided predicate.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>filterLazily</name><parameter_list>(<parameter><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>predicate</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return a *lazily constructed* Iterable over this collection, containing the Replica that match the provided predicate.
     * Only the first maxSize matching items will be returned.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>filterLazily</name><parameter_list>(<parameter><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>predicate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxSize</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return an *eagerly constructed* copy of this collection containing the Replica at positions [start..end);
     * An effort will be made to either return ourself, or a subList, where possible.
     * It is guaranteed that no changes to any upstream Builder will affect the state of the result.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>C</name></type> <name>subList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return an *eagerly constructed* copy of this collection containing the Replica re-ordered according to this comparator
     * It is guaranteed that no changes to any upstream Builder will affect the state of the result.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>C</name></type> <name>sorted</name><parameter_list>(<parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>stream</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * A mutable (append-only) extension of a ReplicaCollection.
     * All methods besides add() will return an immutable snapshot of the collection, or the matching items.
     */</comment>
    <interface><specifier>public</specifier> interface <name><name>Builder</name><parameter_list>&lt;<parameter><name>C</name> <extends>extends <name><name>ReplicaCollection</name><parameter_list>&lt;<parameter><name>C</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>C</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <comment type="block" format="javadoc">/**
         * @return an Immutable clone that assumes this Builder will never be modified again,
         * so its contents can be reused.
         *
         * This Builder should enforce that it is no longer modified.
         */</comment>
        <function_decl><type><specifier>public</specifier> <name>C</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/**
         * @return an Immutable clone that assumes this Builder will be modified again
         */</comment>
        <function_decl><type><specifier>public</specifier> <name>C</name></type> <name>snapshot</name><parameter_list>()</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/**
         * Passed to add() and addAll() as ignoreConflicts parameter. The meaning of conflict varies by collection type
         * (for Endpoints, it is a duplicate InetAddressAndPort; for RangesAtEndpoint it is a duplicate Range).
         */</comment>
        <enum>enum <name>Conflict</name>
        <block>{
            <comment type="block" format="javadoc">/** fail on addition of any such conflict */</comment>
            <decl><name>NONE</name></decl>,
            <comment type="block" format="javadoc">/** fail on addition of any such conflict where the contents differ (first occurrence and position wins) */</comment>
            <decl><name>DUPLICATE</name></decl>,
            <comment type="block" format="javadoc">/** ignore all conflicts (the first occurrence and position wins) */</comment>
            <decl><name>ALL</name></decl>
        }</block></enum>

        <comment type="block" format="javadoc">/**
         * @param replica add this replica to the end of the collection
         * @param ignoreConflict conflicts to ignore, see {@link Conflict}
         */</comment>
        <function_decl><type><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>, <parameter><decl><type><name>Conflict</name></type> <name>ignoreConflict</name></decl></parameter>)</parameter_list>;</function_decl>

        <function><type><specifier>default</specifier> <specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>add</name><argument_list>(<argument><expr><name>replica</name></expr></argument>, <argument><expr><name><name>Conflict</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>default</specifier> <specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>addAll</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>, <parameter><decl><type><name>Conflict</name></type> <name>ignoreConflicts</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><name>replicas</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>replica</name></expr></argument>, <argument><expr><name>ignoreConflicts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>default</specifier> <specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>C</name></argument>&gt;</argument_list></name></type> <name>addAll</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>addAll</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>, <argument><expr><name><name>Conflict</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></interface>

}</block></interface>
</unit>
