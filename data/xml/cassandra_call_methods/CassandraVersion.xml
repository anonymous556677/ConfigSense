<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/CassandraVersion.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Supplier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Suppliers</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>ArrayUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Implements versioning used in Cassandra and CQL.
 * &lt;p&gt;
 * Note: The following code uses a slight variation from the semver document (http://semver.org).
 * &lt;/p&gt;
 */</comment>
<class><specifier>public</specifier> class <name>CassandraVersion</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>CassandraVersion</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <comment type="block" format="javadoc">/**
     * note: 3rd/4th groups matches to words but only allows number and checked after regexp test.
     * this is because 3rd and the last can be identical.
     **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VERSION_REGEXP</name> <init>= <expr><literal type="string">"(\\d+)\\.(\\d+)(?:\\.(\\w+))?(?:\\.(\\w+))?(\\-[-.\\w]+)?([.+][.\\w]+)?"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>PATTERN_WORDS</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"\\w+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NO_HOTFIX</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><name>VERSION_REGEXP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CassandraVersion</name></type> <name>CASSANDRA_4_0</name> <init>= <expr><operator>new</operator> <call><name>CassandraVersion</name><argument_list>(<argument><expr><literal type="string">"4.0"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>familyLowerBound</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CassandraVersion</name></type> <name>CASSANDRA_4_0_RC2</name> <init>= <expr><operator>new</operator> <call><name>CassandraVersion</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NO_HOTFIX</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"rc2"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CassandraVersion</name></type> <name>CASSANDRA_3_4</name> <init>= <expr><operator>new</operator> <call><name>CassandraVersion</name><argument_list>(<argument><expr><literal type="string">"3.4"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>familyLowerBound</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>major</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>minor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>patch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hotfix</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>CassandraVersion</name></argument>&gt;</argument_list></name></type> <name>familyLowerBound</name> <init>= <expr><call><name><name>Suppliers</name><operator>.</operator><name>memoize</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>getFamilyLowerBound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>preRelease</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>build</name></decl>;</decl_stmt>

    <constructor><annotation>@<name>VisibleForTesting</name></annotation>
    <name>CassandraVersion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>patch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hotfix</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>preRelease</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>build</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>major</name></name> <operator>=</operator> <name>major</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>minor</name></name> <operator>=</operator> <name>minor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>patch</name></name> <operator>=</operator> <name>patch</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hotfix</name></name> <operator>=</operator> <name>hotfix</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>preRelease</name></name> <operator>=</operator> <name>preRelease</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>build</name></name> <operator>=</operator> <name>build</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Parse a version from a string.
     *
     * @param version the string to parse
     * @throws IllegalArgumentException if the provided string does not
     *                                  represent a version
     */</comment>
    <constructor><specifier>public</specifier> <name>CassandraVersion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Matcher</name></type> <name>matcher</name> <init>= <expr><call><name><name>PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>matcher</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Invalid version value: "</literal> <operator>+</operator> <name>version</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>major</name></name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>minor</name></name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>patch</name></name> <operator>=</operator> <ternary><condition><expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hotfix</name></name> <operator>=</operator> <ternary><condition><expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NO_HOTFIX</name></expr></else></ternary></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>pr</name> <init>= <expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>bld</name> <init>= <expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>preRelease</name></name> <operator>=</operator> <ternary><condition><expr><name>pr</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>pr</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name>parseIdentifiers</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>build</name></name> <operator>=</operator> <ternary><condition><expr><name>bld</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>bld</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name>parseIdentifiers</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>bld</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Invalid version value: "</literal> <operator>+</operator> <name>version</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <name>CassandraVersion</name></type> <name>getFamilyLowerBound</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>patch</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>hotfix</name> <operator>==</operator> <name>NO_HOTFIX</name> <operator>&amp;&amp;</operator> <name>preRelease</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>preRelease</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>build</name> <operator>==</operator> <literal type="null">null</literal></expr>
               ?</condition><then> <expr><name>this</name></expr>
               </then><else>: <expr><operator>new</operator> <call><name>CassandraVersion</name><argument_list>(<argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NO_HOTFIX</name></expr></argument>, <argument><expr><name><name>ArrayUtils</name><operator>.</operator><name>EMPTY_STRING_ARRAY</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>parseIdentifiers</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Drop initial - or +</comment>
        <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name><name>str</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>parts</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">".-"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>part</name> <range>: <expr><name>parts</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>PATTERN_WORDS</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Invalid version value: "</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="string">"; "</literal> <operator>+</operator> <name>part</name> <operator>+</operator> <literal type="string">" not a valid identifier"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>parts</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getPreRelease</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>preRelease</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>preRelease</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getBuild</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>build</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>build</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>CassandraVersion</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>compareTo</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>CassandraVersion</name></type> <name>other</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>compareToPatchOnly</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>major</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>major</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>major</name> <operator>&gt;</operator> <name><name>other</name><operator>.</operator><name>major</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>minor</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>minor</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>minor</name> <operator>&gt;</operator> <name><name>other</name><operator>.</operator><name>minor</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>patch</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>patch</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>patch</name> <operator>&gt;</operator> <name><name>other</name><operator>.</operator><name>patch</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>compareToPatchOnly</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>hotfix</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>hotfix</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>compareIdentifiers</name><argument_list>(<argument><expr><name>preRelease</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>preRelease</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name>compareIdentifiers</name><argument_list>(<argument><expr><name>build</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>build</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>compareIdentifiers</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>ids1</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>ids2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultPred</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ids1</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><ternary><condition><expr><name>ids2</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>defaultPred</name></expr></else></ternary></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>ids2</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><name>defaultPred</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>ids1</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>ids2</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>min</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Integer</name></type> <name>i1</name> <init>= <expr><call><name>tryParseInt</name><argument_list>(<argument><expr><name><name>ids1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Integer</name></type> <name>i2</name> <init>= <expr><call><name>tryParseInt</name><argument_list>(<argument><expr><name><name>ids2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>i1</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// integer have precedence</comment>
                <if_stmt><if>if <condition>(<expr><name>i2</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>i1</name> <operator>&lt;</operator> <name>i2</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name>i1</name> <operator>&gt;</operator> <name>i2</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// integer have precedence</comment>
                <if_stmt><if>if <condition>(<expr><name>i2</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>ids1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>compareToIgnoreCase</name><argument_list>(<argument><expr><name><name>ids2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name><name>ids1</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name><name>ids2</name><operator>.</operator><name>length</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// If the preRelease is empty it means that it is a family lower bound and that the first identifier is smaller than the second one</comment>
            <comment type="line">// (e.g. 4.0.0- &lt; 4.0.0-beta1)</comment>
            <if_stmt><if>if <condition>(<expr><name><name>ids1</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <comment type="line">// If the difference in length is only due to SNAPSHOT we know that the second identifier is smaller than the first one.</comment>
            <comment type="line">// (e.g. 4.0.0-rc1 &gt; 4.0.0-rc1-SNAPSHOT)</comment>
            <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ids2</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>ids1</name><operator>.</operator><name>length</name></name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ids2</name><index>[<expr><name><name>ids2</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">"SNAPSHOT"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ids1</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name><name>ids2</name><operator>.</operator><name>length</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// If the preRelease is empty it means that it is a family lower bound and that the second identifier is smaller than the first one</comment>
            <comment type="line">// (e.g. 4.0.0-beta1 &gt; 4.0.0-)</comment>
            <if_stmt><if>if <condition>(<expr><name><name>ids2</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <comment type="line">// If the difference in length is only due to SNAPSHOT we know that the first identifier is smaller than the second one.</comment>
            <comment type="line">// (e.g. 4.0.0-rc1-SNAPSHOT &lt; 4.0.0-rc1)</comment>
            <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ids1</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>ids2</name><operator>.</operator><name>length</name></name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ids1</name><index>[<expr><name><name>ids1</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">"SNAPSHOT"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>tryParseInt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>CassandraVersion</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>CassandraVersion</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>major</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>major</name></name> <operator>&amp;&amp;</operator>
               <name>minor</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>minor</name></name> <operator>&amp;&amp;</operator>
               <name>patch</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>patch</name></name> <operator>&amp;&amp;</operator>
               <name>hotfix</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>hotfix</name></name> <operator>&amp;&amp;</operator>
               <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>preRelease</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>preRelease</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>build</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>build</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>hotfix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>preRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>major</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>minor</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>hotfix</name> <operator>!=</operator> <name>NO_HOTFIX</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>hotfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>preRelease</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>preRelease</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>build</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>build</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
