<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/schema/TableParams.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>MoreObjects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>Attributes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>CqlBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>PercentileSpeculativeRetryPolicy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>SpeculativeRetryPolicy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>repair</name><operator>.</operator><name>ReadRepairStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>BloomCalculations</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name><operator>.</operator><name>toMap</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>TableParams</name>
<block>{
    <enum><specifier>public</specifier> enum <name>Option</name>
    <block>{
        <decl><name>BLOOM_FILTER_FP_CHANCE</name></decl>,
        <decl><name>CACHING</name></decl>,
        <decl><name>COMMENT</name></decl>,
        <decl><name>COMPACTION</name></decl>,
        <decl><name>COMPRESSION</name></decl>,
        <decl><name>DEFAULT_TIME_TO_LIVE</name></decl>,
        <decl><name>EXTENSIONS</name></decl>,
        <decl><name>GC_GRACE_SECONDS</name></decl>,
        <decl><name>MAX_INDEX_INTERVAL</name></decl>,
        <decl><name>MEMTABLE_FLUSH_PERIOD_IN_MS</name></decl>,
        <decl><name>MIN_INDEX_INTERVAL</name></decl>,
        <decl><name>SPECULATIVE_RETRY</name></decl>,
        <decl><name>ADDITIONAL_WRITE_POLICY</name></decl>,
        <decl><name>CRC_CHECK_CHANCE</name></decl>,
        <decl><name>CDC</name></decl>,
        <decl><name>READ_REPAIR</name></decl>;

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>name</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>comment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>double</name></type> <name>bloomFilterFpChance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>double</name></type> <name>crcCheckChance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>gcGraceSeconds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>defaultTimeToLive</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>memtableFlushPeriodInMs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>minIndexInterval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxIndexInterval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>SpeculativeRetryPolicy</name></type> <name>speculativeRetry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>SpeculativeRetryPolicy</name></type> <name>additionalWritePolicy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>CachingParams</name></type> <name>caching</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>CompactionParams</name></type> <name>compaction</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>CompressionParams</name></type> <name>compression</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>extensions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>cdc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ReadRepairStrategy</name></type> <name>readRepair</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>TableParams</name><parameter_list>(<parameter><decl><type><name>Builder</name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>comment</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>comment</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bloomFilterFpChance</name> <operator>=</operator> <ternary><condition><expr><name><name>builder</name><operator>.</operator><name>bloomFilterFpChance</name></name> <operator>==</operator> <literal type="null">null</literal></expr>
                            ?</condition><then> <expr><call><name><name>builder</name><operator>.</operator><name>compaction</name><operator>.</operator><name>defaultBloomFilterFbChance</name></name><argument_list>()</argument_list></call></expr>
                            </then><else>: <expr><name><name>builder</name><operator>.</operator><name>bloomFilterFpChance</name></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>crcCheckChance</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>crcCheckChance</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>gcGraceSeconds</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>gcGraceSeconds</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>defaultTimeToLive</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>defaultTimeToLive</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>memtableFlushPeriodInMs</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>memtableFlushPeriodInMs</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>minIndexInterval</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>minIndexInterval</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxIndexInterval</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>maxIndexInterval</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>speculativeRetry</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>speculativeRetry</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>additionalWritePolicy</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>additionalWritePolicy</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>caching</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>caching</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>compaction</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>compaction</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>compression</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>compression</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>extensions</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>extensions</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cdc</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>cdc</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>readRepair</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>readRepair</name></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>builder</name><parameter_list>(<parameter><decl><type><name>TableParams</name></type> <name>params</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>bloomFilterFpChance</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>bloomFilterFpChance</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>caching</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>caching</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>comment</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>compaction</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>compaction</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>compression</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>compression</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>crcCheckChance</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>crcCheckChance</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>defaultTimeToLive</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>defaultTimeToLive</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>gcGraceSeconds</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>gcGraceSeconds</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>maxIndexInterval</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>maxIndexInterval</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>memtableFlushPeriodInMs</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>memtableFlushPeriodInMs</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>minIndexInterval</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>minIndexInterval</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>speculativeRetry</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>speculativeRetry</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>additionalWritePolicy</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>additionalWritePolicy</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>extensions</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>extensions</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>cdc</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>cdc</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>readRepair</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>readRepair</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Builder</name></type> <name>unbuild</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>builder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>compaction</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>compression</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>minBloomFilterFpChanceValue</name> <init>= <expr><call><name><name>BloomCalculations</name><operator>.</operator><name>minSupportedBloomFilterFpChance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>bloomFilterFpChance</name> <operator>&lt;=</operator>  <name>minBloomFilterFpChanceValue</name> <operator>||</operator> <name>bloomFilterFpChance</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"%s must be larger than %s and less than or equal to 1.0 (got %s)"</literal></expr></argument>,
                 <argument><expr><name><name>Option</name><operator>.</operator><name>BLOOM_FILTER_FP_CHANCE</name></name></expr></argument>,
                 <argument><expr><name>minBloomFilterFpChanceValue</name></expr></argument>,
                 <argument><expr><name>bloomFilterFpChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>crcCheckChance</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>crcCheckChance</name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"%s must be larger than or equal to 0 and smaller than or equal to 1.0 (got %s)"</literal></expr></argument>,
                 <argument><expr><name><name>Option</name><operator>.</operator><name>CRC_CHECK_CHANCE</name></name></expr></argument>,
                 <argument><expr><name>crcCheckChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>defaultTimeToLive</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"%s must be greater than or equal to 0 (got %s)"</literal></expr></argument>, <argument><expr><name><name>Option</name><operator>.</operator><name>DEFAULT_TIME_TO_LIVE</name></name></expr></argument>, <argument><expr><name>defaultTimeToLive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>defaultTimeToLive</name> <operator>&gt;</operator> <name><name>Attributes</name><operator>.</operator><name>MAX_TTL</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"%s must be less than or equal to %d (got %s)"</literal></expr></argument>, <argument><expr><name><name>Option</name><operator>.</operator><name>DEFAULT_TIME_TO_LIVE</name></name></expr></argument>, <argument><expr><name><name>Attributes</name><operator>.</operator><name>MAX_TTL</name></name></expr></argument>, <argument><expr><name>defaultTimeToLive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>gcGraceSeconds</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"%s must be greater than or equal to 0 (got %s)"</literal></expr></argument>, <argument><expr><name><name>Option</name><operator>.</operator><name>GC_GRACE_SECONDS</name></name></expr></argument>, <argument><expr><name>gcGraceSeconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>minIndexInterval</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"%s must be greater than or equal to 1 (got %s)"</literal></expr></argument>, <argument><expr><name><name>Option</name><operator>.</operator><name>MIN_INDEX_INTERVAL</name></name></expr></argument>, <argument><expr><name>minIndexInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>maxIndexInterval</name> <operator>&lt;</operator> <name>minIndexInterval</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"%s must be greater than or equal to %s (%s) (got %s)"</literal></expr></argument>,
                 <argument><expr><name><name>Option</name><operator>.</operator><name>MAX_INDEX_INTERVAL</name></name></expr></argument>,
                 <argument><expr><name><name>Option</name><operator>.</operator><name>MIN_INDEX_INTERVAL</name></name></expr></argument>,
                 <argument><expr><name>minIndexInterval</name></expr></argument>,
                 <argument><expr><name>maxIndexInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>memtableFlushPeriodInMs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"%s must be greater than or equal to 0 (got %s)"</literal></expr></argument>, <argument><expr><name><name>Option</name><operator>.</operator><name>MEMTABLE_FLUSH_PERIOD_IN_MS</name></name></expr></argument>, <argument><expr><name>memtableFlushPeriodInMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>fail</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>TableParams</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>TableParams</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>TableParams</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>comment</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <name>bloomFilterFpChance</name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>bloomFilterFpChance</name></name>
            <operator>&amp;&amp;</operator> <name>crcCheckChance</name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>crcCheckChance</name></name>
            <operator>&amp;&amp;</operator> <name>gcGraceSeconds</name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>gcGraceSeconds</name></name>
            <operator>&amp;&amp;</operator> <name>defaultTimeToLive</name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>defaultTimeToLive</name></name>
            <operator>&amp;&amp;</operator> <name>memtableFlushPeriodInMs</name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>memtableFlushPeriodInMs</name></name>
            <operator>&amp;&amp;</operator> <name>minIndexInterval</name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>minIndexInterval</name></name>
            <operator>&amp;&amp;</operator> <name>maxIndexInterval</name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>maxIndexInterval</name></name>
            <operator>&amp;&amp;</operator> <call><name><name>speculativeRetry</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>speculativeRetry</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>caching</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>caching</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>compaction</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>compaction</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>compression</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>compression</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>extensions</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>extensions</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <name>cdc</name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>cdc</name></name>
            <operator>&amp;&amp;</operator> <name>readRepair</name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>readRepair</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>,
                                <argument><expr><name>bloomFilterFpChance</name></expr></argument>,
                                <argument><expr><name>crcCheckChance</name></expr></argument>,
                                <argument><expr><name>gcGraceSeconds</name></expr></argument>,
                                <argument><expr><name>defaultTimeToLive</name></expr></argument>,
                                <argument><expr><name>memtableFlushPeriodInMs</name></expr></argument>,
                                <argument><expr><name>minIndexInterval</name></expr></argument>,
                                <argument><expr><name>maxIndexInterval</name></expr></argument>,
                                <argument><expr><name>speculativeRetry</name></expr></argument>,
                                <argument><expr><name>caching</name></expr></argument>,
                                <argument><expr><name>compaction</name></expr></argument>,
                                <argument><expr><name>compression</name></expr></argument>,
                                <argument><expr><name>extensions</name></expr></argument>,
                                <argument><expr><name>cdc</name></expr></argument>,
                                <argument><expr><name>readRepair</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>MoreObjects</name><operator>.</operator><name>toStringHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>COMMENT</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>BLOOM_FILTER_FP_CHANCE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bloomFilterFpChance</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>CRC_CHECK_CHANCE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>crcCheckChance</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>GC_GRACE_SECONDS</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>gcGraceSeconds</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>DEFAULT_TIME_TO_LIVE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>defaultTimeToLive</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>MEMTABLE_FLUSH_PERIOD_IN_MS</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>memtableFlushPeriodInMs</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>MIN_INDEX_INTERVAL</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>minIndexInterval</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>MAX_INDEX_INTERVAL</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>maxIndexInterval</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>SPECULATIVE_RETRY</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>speculativeRetry</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>CACHING</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>caching</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>COMPACTION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>compaction</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>COMPRESSION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>compression</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>EXTENSIONS</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>extensions</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>CDC</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cdc</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>READ_REPAIR</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>readRepair</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>appendCqlTo</name><parameter_list>(<parameter><decl><type><name>CqlBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isView</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// option names should be in alphabetical order</comment>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"additional_write_policy = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>appendWithSingleQuotes</name><argument_list>(<argument><expr><call><name><name>additionalWritePolicy</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND bloom_filter_fp_chance = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>bloomFilterFpChance</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND caching = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>caching</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND cdc = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>cdc</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND comment = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>appendWithSingleQuotes</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND compaction = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>compaction</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND compression = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>compression</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND crc_check_chance = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>crcCheckChance</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isView</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"AND default_time_to_live = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>defaultTimeToLive</name></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"AND extensions = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>extensions</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call>
                                                             <operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                                             <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name>toMap</name><argument_list>(<argument><expr><name>Entry</name><operator>::</operator><name>getKey</name></expr></argument>,
                                                                            <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="string">"0x"</literal> <operator>+</operator> <call><name><name>ByteBufferUtil</name><operator>.</operator><name>bytesToHex</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                   <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND gc_grace_seconds = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>gcGraceSeconds</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND max_index_interval = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>maxIndexInterval</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND memtable_flush_period_in_ms = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>memtableFlushPeriodInMs</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND min_index_interval = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>minIndexInterval</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND read_repair = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>appendWithSingleQuotes</name><argument_list>(<argument><expr><call><name><name>readRepair</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND speculative_retry = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>appendWithSingleQuotes</name><argument_list>(<argument><expr><call><name><name>speculativeRetry</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>comment</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Double</name></type> <name>bloomFilterFpChance</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>crcCheckChance</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>gcGraceSeconds</name> <init>= <expr><literal type="number">864000</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 10 days</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>defaultTimeToLive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>memtableFlushPeriodInMs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minIndexInterval</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxIndexInterval</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>SpeculativeRetryPolicy</name></type> <name>speculativeRetry</name> <init>= <expr><name><name>PercentileSpeculativeRetryPolicy</name><operator>.</operator><name>NINETY_NINE_P</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>SpeculativeRetryPolicy</name></type> <name>additionalWritePolicy</name> <init>= <expr><name><name>PercentileSpeculativeRetryPolicy</name><operator>.</operator><name>NINETY_NINE_P</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>CachingParams</name></type> <name>caching</name> <init>= <expr><name><name>CachingParams</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>CompactionParams</name></type> <name>compaction</name> <init>= <expr><name><name>CompactionParams</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>CompressionParams</name></type> <name>compression</name> <init>= <expr><name><name>CompressionParams</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>extensions</name> <init>= <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>cdc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>ReadRepairStrategy</name></type> <name>readRepair</name> <init>= <expr><name><name>ReadRepairStrategy</name><operator>.</operator><name>BLOCKING</name></name></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Builder</name><parameter_list>()</parameter_list>
        <block>{<block_content>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>TableParams</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>TableParams</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>comment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>comment</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>bloomFilterFpChance</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>bloomFilterFpChance</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>crcCheckChance</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>crcCheckChance</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>gcGraceSeconds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>gcGraceSeconds</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>defaultTimeToLive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>defaultTimeToLive</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>memtableFlushPeriodInMs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>memtableFlushPeriodInMs</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>minIndexInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>minIndexInterval</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>maxIndexInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>maxIndexInterval</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>speculativeRetry</name><parameter_list>(<parameter><decl><type><name>SpeculativeRetryPolicy</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>speculativeRetry</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>additionalWritePolicy</name><parameter_list>(<parameter><decl><type><name>SpeculativeRetryPolicy</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>additionalWritePolicy</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>caching</name><parameter_list>(<parameter><decl><type><name>CachingParams</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>caching</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>compaction</name><parameter_list>(<parameter><decl><type><name>CompactionParams</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>compaction</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>compression</name><parameter_list>(<parameter><decl><type><name>CompressionParams</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>compression</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>cdc</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>cdc</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>readRepair</name><parameter_list>(<parameter><decl><type><name>ReadRepairStrategy</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>readRepair</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>extensions</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>extensions</name> <operator>=</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
