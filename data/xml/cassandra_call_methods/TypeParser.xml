<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/marshal/TypeParser.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Verify</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>FieldIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Parse a string containing an Type definition.
 */</comment>
<class><specifier>public</specifier> class <name>TypeParser</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <comment type="line">// A cache of parsed string, specially useful for DynamicCompositeType</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cache</name> <init>= <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeParser</name></type> <name>EMPTY_PARSER</name> <init>= <expr><operator>new</operator> <call><name>TypeParser</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>TypeParser</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>TypeParser</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Parse a string containing an type definition.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// A single volatile read of 'cache' should not hurt.</comment>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <init>= <expr><call><name><name>cache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>type</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// This could be simplier (i.e. new TypeParser(str).parse()) but we avoid creating a TypeParser object if not really necessary.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>skipBlank</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><call><name>isEOS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isIdentifierChar</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></while>

        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>skipBlank</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEOS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>getAbstractType</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TypeParser</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>getAbstractType</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name><name>Verify</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>type</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"Parsing %s yielded null, which is a bug"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Prevent concurrent modification to the map acting as the cache for TypeParser at the expense of</comment>
        <comment type="line">// more allocation when the cache needs to be updated, since updates to the cache are rare compared</comment>
        <comment type="line">// to the amount of reads.</comment>
        <comment type="line">//</comment>
        <comment type="line">// Copy the existing cache into a new map and add the parsed AbstractType instance and replace</comment>
        <comment type="line">// the cache, if the type is not already in the cache.</comment>
        <comment type="line">//</comment>
        <comment type="line">// The cache-update is done in a short synchronized block to prevent duplicate instances of AbstractType</comment>
        <comment type="line">// for the same string representation.</comment>
        <synchronized>synchronized <init>(<expr><name><name>TypeParser</name><operator>.</operator><name>class</name></name></expr>)</init>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>cache</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>ImmutableMap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>builder</name> <init>= <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>type</name></expr>;</return>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>compareWith</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>parse</name><argument_list>(<argument><expr><ternary><condition><expr><name>compareWith</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>compareWith</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse an AbstractType from current position of this parser.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parse</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>skipBlank</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>readNextIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>skipBlank</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEOS</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>getAbstractType</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name>getAbstractType</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getKeyValueParameters</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt> <comment type="line">// skipping '('</comment>

        <while>while <condition>(<expr><call><name>skipBlankAndComma</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
                <return>return <expr><name>map</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>k</name> <init>= <expr><call><name>readNextIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>v</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>skipBlank</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>skipBlank</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>readNextIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>throwSyntaxError</name><argument_list>(<argument><expr><literal type="string">"unexpected character '"</literal> <operator>+</operator> <call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <throw>throw <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Syntax error parsing '%s' at char %d: unexpected end of string"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getTypeParameters</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>list</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt> <comment type="line">// skipping '('</comment>

        <while>while <condition>(<expr><call><name>skipBlankAndComma</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
                <return>return <expr><name>list</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>parse</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>SyntaxException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>SyntaxException</name></type> <name>ex</name> <init>= <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Exception while parsing '%s' around char %d"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>ex</name></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
        <throw>throw <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Syntax error parsing '%s' at char %d: unexpected end of string"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Byte</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getAliasParameters</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Byte</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>map</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt> <comment type="line">// skipping '('</comment>


        <while>while <condition>(<expr><call><name>skipBlankAndComma</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
                <return>return <expr><name>map</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>alias</name> <init>= <expr><call><name>readNextIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>alias</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>throwSyntaxError</name><argument_list>(<argument><expr><literal type="string">"An alias should be a single character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name>aliasChar</name> <init>= <expr><call><name><name>alias</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>aliasChar</name> <operator>&lt;</operator> <literal type="number">33</literal> <operator>||</operator> <name>aliasChar</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>throwSyntaxError</name><argument_list>(<argument><expr><literal type="string">"An alias should be a single character in [0..9a..bA..B-+._&amp;]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>skipBlank</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'&gt;'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>throwSyntaxError</name><argument_list>(<argument><expr><literal type="string">"expecting '=&gt;' token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>idx</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>skipBlank</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator><name>aliasChar</name></expr></argument>, <argument><expr><call><name>parse</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>SyntaxException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>SyntaxException</name></type> <name>ex</name> <init>= <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Exception while parsing '%s' around char %d"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>ex</name></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
        <throw>throw <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Syntax error parsing '%s' at char %d: unexpected end of string"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>CollectionType</name></argument>&gt;</argument_list></name></type> <name>getCollectionsParameters</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>CollectionType</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isEOS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>map</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt> <comment type="line">// skipping '('</comment>

        <while>while <condition>(<expr><call><name>skipBlankAndComma</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
                <return>return <expr><name>map</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bb</name> <init>= <expr><call><name>fromHex</name><argument_list>(<argument><expr><call><name>readNextIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>skipBlank</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>throwSyntaxError</name><argument_list>(<argument><expr><literal type="string">"expecting ':' token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>skipBlank</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <init>= <expr><call><name>parse</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>instanceof</operator> <name>CollectionType</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><name>type</name> <operator>+</operator> <literal type="string">" is not a collection type"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>(</operator><name>CollectionType</name><operator>)</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>SyntaxException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>SyntaxException</name></type> <name>ex</name> <init>= <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Exception while parsing '%s' around char %d"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>ex</name></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
        <throw>throw <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Syntax error parsing '%s' at char %d: unexpected end of string"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>fromHex</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>hex</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>hexToBytes</name></name><argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>throwSyntaxError</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>AbstractType</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getUserTypeParameters</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><call><name>isEOS</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt> <comment type="line">// skipping '('</comment>

        <expr_stmt><expr><call><name>skipBlankAndComma</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name>readNextIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>skipBlankAndComma</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>typeName</name> <init>= <expr><call><name>fromHex</name><argument_list>(<argument><expr><call><name>readNextIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>AbstractType</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>defs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name>skipBlankAndComma</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
                <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>defs</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>name</name> <init>= <expr><call><name>fromHex</name><argument_list>(<argument><expr><call><name>readNextIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>skipBlank</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>throwSyntaxError</name><argument_list>(<argument><expr><literal type="string">"expecting ':' token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>skipBlank</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name>AbstractType</name></type> <name>type</name> <init>= <expr><call><name>parse</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>defs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>SyntaxException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>SyntaxException</name></type> <name>ex</name> <init>= <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Exception while parsing '%s' around char %d"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>ex</name></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
        <throw>throw <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Syntax error parsing '%s' at char %d: unexpected end of string"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getAbstractType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>compareWith</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><ternary><condition><expr><call><name><name>compareWith</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>compareWith</name></expr> </then><else>: <expr><literal type="string">"org.apache.cassandra.db.marshal."</literal> <operator>+</operator> <name>compareWith</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>typeClass</name> <init>= <expr><name><name>FBUtilities</name><operator>.</operator></name>&lt;<name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>&gt;</operator><call><name>classForName</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><literal type="string">"abstract-type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>Field</name></type> <name>field</name> <init>= <expr><call><name><name>typeClass</name><operator>.</operator><name>getDeclaredField</name></name><argument_list>(<argument><expr><literal type="string">"instance"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>field</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchFieldException</name></type> | <type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// Trying with empty parser</comment>
            <return>return <expr><call><name>getRawAbstractType</name><argument_list>(<argument><expr><name>typeClass</name></expr></argument>, <argument><expr><name>EMPTY_PARSER</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getAbstractType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>compareWith</name></decl></parameter>, <parameter><decl><type><name>TypeParser</name></type> <name>parser</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument>, <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><ternary><condition><expr><call><name><name>compareWith</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>compareWith</name></expr> </then><else>: <expr><literal type="string">"org.apache.cassandra.db.marshal."</literal> <operator>+</operator> <name>compareWith</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>typeClass</name> <init>= <expr><name><name>FBUtilities</name><operator>.</operator></name>&lt;<name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>&gt;</operator><call><name>classForName</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><literal type="string">"abstract-type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>typeClass</name><operator>.</operator><name>getDeclaredMethod</name></name><argument_list>(<argument><expr><literal type="string">"getInstance"</literal></expr></argument>, <argument><expr><name><name>TypeParser</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>method</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> | <type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// Trying to see if we have an instance field and apply the default parameter to it</comment>
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <init>= <expr><call><name>getRawAbstractType</name><argument_list>(<argument><expr><name>typeClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>AbstractType</name><operator>.</operator><name>parseDefaultParameters</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ConfigurationException</name></type> <name>ex</name> <init>= <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Invalid definition for comparator "</literal> <operator>+</operator> <call><name><name>typeClass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>initCause</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getTargetException</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getRawAbstractType</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>typeClass</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>Field</name></type> <name>field</name> <init>= <expr><call><name><name>typeClass</name><operator>.</operator><name>getDeclaredField</name></name><argument_list>(<argument><expr><literal type="string">"instance"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>field</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchFieldException</name></type> | <type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Invalid comparator class "</literal> <operator>+</operator> <call><name><name>typeClass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">": must define a public static instance field or a public static method getInstance(TypeParser)."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getRawAbstractType</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>typeClass</name></decl></parameter>, <parameter><decl><type><name>TypeParser</name></type> <name>parser</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>typeClass</name><operator>.</operator><name>getDeclaredMethod</name></name><argument_list>(<argument><expr><literal type="string">"getInstance"</literal></expr></argument>, <argument><expr><name><name>TypeParser</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>method</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> | <type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Invalid comparator class "</literal> <operator>+</operator> <call><name><name>typeClass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">": must define a public static instance field or a public static method getInstance(TypeParser)."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ConfigurationException</name></type> <name>ex</name> <init>= <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Invalid definition for comparator "</literal> <operator>+</operator> <call><name><name>typeClass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>initCause</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getTargetException</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>throwSyntaxError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Syntax error parsing '%s' at char %d: %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isEOS</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>isEOS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isEOS</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>i</name> <operator>&gt;=</operator> <call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isBlank</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>skipBlank</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>skipBlank</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>skipBlank</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <while>while <condition>(<expr><operator>!</operator><call><name>isEOS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isBlank</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></while>

        <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// skip all blank and at best one comma, return true if there not EOS</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>skipBlankAndComma</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>commaFound</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><call><name>isEOS</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>commaFound</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>commaFound</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isBlank</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * [0..9a..bA..B-+._&amp;]
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isIdentifierChar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator>
            <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator>
            <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// left idx positioned on the character stopping the read</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>readNextIdentifier</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>idx</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><call><name>isEOS</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isIdentifierChar</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt></block_content></block></while>

        <return>return <expr><call><name><name>str</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Helper function to ease the writing of AbstractType.toString() methods.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>stringifyAliasesParameters</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Byte</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>aliases</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Byte</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>aliases</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Byte</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>byte</name><operator>)</operator><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"=&gt;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Byte</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>byte</name><operator>)</operator><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"=&gt;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Helper function to ease the writing of AbstractType.toString() methods.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>stringifyTypeParameters</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>stringifyTypeParameters</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Helper function to ease the writing of AbstractType.toString() methods.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>stringifyTypeParameters</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>types</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ignoreFreezing</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>types</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>types</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>(<argument><expr><name>ignoreFreezing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>stringifyCollectionsParameters</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>?</name> <extends>extends <name>CollectionType</name></extends></argument>&gt;</argument_list></name></type> <name>collections</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>?</name> <extends>extends <name>CollectionType</name></extends></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>collections</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>bytesToHex</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>stringifyUserTypeParameters</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keysace</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>typeName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FieldIdentifier</name></argument>&gt;</argument_list></name></type> <name>fields</name></decl></parameter>,
                                                     <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>columnTypes</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ignoreFreezing</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>keysace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>bytesToHex</name></name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>fields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>bytesToHex</name></name><argument_list>(<argument><expr><call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>columnTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>(<argument><expr><name>ignoreFreezing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
