<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/ColumnIdentifier.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>MapMaker</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cache</name><operator>.</operator><name>IMeasurableMemory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UTF8Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ObjectSizes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>memory</name><operator>.</operator><name>ByteBufferCloner</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents an identifer for a CQL column definition.
 * TODO : should support light-weight mode without text representation for when not interned
 */</comment>
<class><specifier>public</specifier> class <name>ColumnIdentifier</name> <super_list><implements>implements <super><name>IMeasurableMemory</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>PATTERN_DOUBLE_QUOTE</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><name><name>Pattern</name><operator>.</operator><name>LITERAL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ESCAPED_DOUBLE_QUOTE</name> <init>= <expr><call><name><name>Matcher</name><operator>.</operator><name>quoteReplacement</name></name><argument_list>(<argument><expr><literal type="string">"\"\""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>bytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>text</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * since these objects are compared frequently, we stash an efficiently compared prefix of the bytes, in the expectation
     * that the majority of comparisons can be answered by this value only
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>prefixComparison</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>interned</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>UNQUOTED_IDENTIFIER</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"[a-z][a-z0-9_]*"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>EMPTY_SIZE</name> <init>= <expr><call><name><name>ObjectSizes</name><operator>.</operator><name>measure</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><name><name>ByteBufferUtil</name><operator>.</operator><name>EMPTY_BYTE_BUFFER</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ConcurrentMap</name><argument_list type="generic">&lt;<argument><name>InternedKey</name></argument>, <argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>internedInstances</name> <init>= <expr><operator>new</operator> <call><name>MapMaker</name><argument_list>()</argument_list></call><operator>.</operator><call><name>weakValues</name><argument_list>()</argument_list></call><operator>.</operator><call><name>makeMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>InternedKey</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>bytes</name></decl>;</decl_stmt>

        <constructor><name>InternedKey</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>InternedKey</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>InternedKey</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>bytes</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>bytes</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">31</literal> <operator>*</operator> <call><name><name>type</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>prefixComparison</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>read</name> <init>= <expr><call><name><name>bytes</name><operator>.</operator><name>duplicate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>read</name><operator>.</operator><name>hasRemaining</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>prefix</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>prefix</name> <operator>|=</operator> <call><name><name>read</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>prefix</name> <operator>&lt;&lt;=</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <comment type="line">// by flipping the top bit (==Integer.MIN_VALUE), we ensure that signed comparison gives the same result</comment>
        <comment type="line">// as an unsigned without the bit flipped</comment>
        <expr_stmt><expr><name>prefix</name> <operator>^=</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr>;</expr_stmt>
        <return>return <expr><name>prefix</name></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>ColumnIdentifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>rawText</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>keepCase</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name> <operator>=</operator> <ternary><condition><expr><name>keepCase</name></expr> ?</condition><then> <expr><name>rawText</name></expr> </then><else>: <expr><call><name><name>rawText</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <call><name><name>ByteBufferUtil</name><operator>.</operator><name>bytes</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prefixComparison</name></name> <operator>=</operator> <call><name>prefixComparison</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>interned</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>ColumnIdentifier</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>ColumnIdentifier</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>private</specifier> <name>ColumnIdentifier</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>interned</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>interned</name></name> <operator>=</operator> <name>interned</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prefixComparison</name></name> <operator>=</operator> <call><name>prefixComparison</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnIdentifier</name></type> <name>getInterned</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getInterned</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnIdentifier</name></type> <name>getInterned</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>rawText</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>keepCase</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><ternary><condition><expr><name>keepCase</name></expr> ?</condition><then> <expr><name>rawText</name></expr> </then><else>: <expr><call><name><name>rawText</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bytes</name> <init>= <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>bytes</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getInterned</name><argument_list>(<argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnIdentifier</name></type> <name>getInterned</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name><name>ByteBufferUtil</name><operator>.</operator><name>minimalBufferFor</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>InternedKey</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>InternedKey</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnIdentifier</name></type> <name>id</name> <init>= <expr><call><name><name>internedInstances</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>id</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>ColumnIdentifier</name></type> <name>created</name> <init>= <expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnIdentifier</name></type> <name>previous</name> <init>= <expr><call><name><name>internedInstances</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>created</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>previous</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>created</name></expr> </then><else>: <expr><name>previous</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInterned</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>interned</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>bytes</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>ColumnIdentifier</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>ColumnIdentifier</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>ColumnIdentifier</name><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>bytes</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>text</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a string representation of the identifier that is safe to use directly in CQL queries.
     * If necessary, the string will be double-quoted, and any quotes inside the string will be escaped.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toCQLString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>maybeQuote</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>unsharedHeapSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>EMPTY_SIZE</name>
             <operator>+</operator> <call><name><name>ObjectSizes</name><operator>.</operator><name>sizeOnHeapOf</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call>
             <operator>+</operator> <call><name><name>ObjectSizes</name><operator>.</operator><name>sizeOf</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>unsharedHeapSizeExcludingData</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>EMPTY_SIZE</name>
             <operator>+</operator> <call><name><name>ObjectSizes</name><operator>.</operator><name>sizeOnHeapExcludingData</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call>
             <operator>+</operator> <call><name><name>ObjectSizes</name><operator>.</operator><name>sizeOf</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ColumnIdentifier</name></type> <name>clone</name><parameter_list>(<parameter><decl><type><name>ByteBufferCloner</name></type> <name>cloner</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>interned</name></expr> ?</condition><then> <expr><name>this</name></expr> </then><else>: <expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><call><name><name>cloner</name><operator>.</operator><name>clone</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>that</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>prefixComparison</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>prefixComparison</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>that</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>compareUnsigned</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>maybeQuote</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>UNQUOTED_IDENTIFIER</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>ReservedKeywords</name><operator>.</operator><name>isReserved</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>text</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><literal type="char">'"'</literal> <operator>+</operator> <call><name><name>PATTERN_DOUBLE_QUOTE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>replaceAll</name><argument_list>(<argument><expr><name>ESCAPED_DOUBLE_QUOTE</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">'"'</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
