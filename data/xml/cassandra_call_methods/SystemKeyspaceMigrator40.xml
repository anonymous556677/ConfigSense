<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/SystemKeyspaceMigrator40.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>UntypedResultSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>BytesType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>Int32Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UTF8Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UUIDType</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Migrate 3.0 versions of some tables to 4.0. In this case it's just extra columns and some keys
 * that are changed.
 *
 * Can't just add the additional columns because they are primary key columns and C* doesn't support changing
 * key columns even if it's just clustering columns.
 */</comment>
<class><specifier>public</specifier> class <name>SystemKeyspaceMigrator40</name>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>legacyPeersName</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>LEGACY_PEERS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>peersName</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>PEERS_V2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>legacyPeerEventsName</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>LEGACY_PEER_EVENTS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>peerEventsName</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>PEER_EVENTS_V2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>legacyTransferredRangesName</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>LEGACY_TRANSFERRED_RANGES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>transferredRangesName</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>TRANSFERRED_RANGES_V2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>legacyAvailableRangesName</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>LEGACY_AVAILABLE_RANGES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>availableRangesName</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>AVAILABLE_RANGES_V2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SystemKeyspaceMigrator40</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>SystemKeyspaceMigrator40</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>migrate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>migratePeers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>migratePeerEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>migrateTransferredRanges</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>migrateAvailableRanges</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>migratePeers</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>newPeers</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>PEERS_V2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>newPeers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
             <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"{} table was empty, migrating legacy {}, if this fails you should fix the issue and then truncate {} to have it try again."</literal></expr></argument>,
                                  <argument><expr><name>peersName</name></expr></argument>, <argument><expr><name>legacyPeersName</name></expr></argument>, <argument><expr><name>peersName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s"</literal></expr></argument>,
                                     <argument><expr><name>legacyPeersName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>insert</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO %s ( "</literal>
                                      <operator>+</operator> <literal type="string">"peer, "</literal>
                                      <operator>+</operator> <literal type="string">"peer_port, "</literal>
                                      <operator>+</operator> <literal type="string">"data_center, "</literal>
                                      <operator>+</operator> <literal type="string">"host_id, "</literal>
                                      <operator>+</operator> <literal type="string">"preferred_ip, "</literal>
                                      <operator>+</operator> <literal type="string">"preferred_port, "</literal>
                                      <operator>+</operator> <literal type="string">"rack, "</literal>
                                      <operator>+</operator> <literal type="string">"release_version, "</literal>
                                      <operator>+</operator> <literal type="string">"native_address, "</literal>
                                      <operator>+</operator> <literal type="string">"native_port, "</literal>
                                      <operator>+</operator> <literal type="string">"schema_version, "</literal>
                                      <operator>+</operator> <literal type="string">"tokens) "</literal>
                                      <operator>+</operator> <literal type="string">" values ( ?, ?, ? , ? , ?, ?, ?, ?, ?, ?, ?, ?)"</literal></expr></argument>,
                                      <argument><expr><name>peersName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rows</name> <init>= <expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternalWithPaging</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>transferred</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Migrating rows from legacy {} to {}"</literal></expr></argument>, <argument><expr><name>legacyPeersName</name></expr></argument>, <argument><expr><name>peersName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Transferring row {}"</literal></expr></argument>, <argument><expr><name>transferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternal</name></name><argument_list>(<argument><expr><name>insert</name></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"peer"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getInetAddress</name></name><argument_list>(<argument><expr><literal type="string">"peer"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStoragePort</name></name><argument_list>()</argument_list></call></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"data_center"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"data_center"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"host_id"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"host_id"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"preferred_ip"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getInetAddress</name></name><argument_list>(<argument><expr><literal type="string">"preferred_ip"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStoragePort</name></name><argument_list>()</argument_list></call></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"rack"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"rack"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"release_version"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"release_version"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"rpc_address"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getInetAddress</name></name><argument_list>(<argument><expr><literal type="string">"rpc_address"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNativeTransportPort</name></name><argument_list>()</argument_list></call></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"schema_version"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"schema_version"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"tokens"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getSet</name></name><argument_list>(<argument><expr><literal type="string">"tokens"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transferred</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Migrated {} rows from legacy {} to {}"</literal></expr></argument>, <argument><expr><name>transferred</name></expr></argument>, <argument><expr><name>legacyPeersName</name></expr></argument>, <argument><expr><name>peersName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>migratePeerEvents</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>newPeerEvents</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>PEER_EVENTS_V2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>newPeerEvents</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"{} table was empty, migrating legacy {} to {}"</literal></expr></argument>, <argument><expr><name>peerEventsName</name></expr></argument>, <argument><expr><name>legacyPeerEventsName</name></expr></argument>, <argument><expr><name>peerEventsName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s"</literal></expr></argument>,
                                     <argument><expr><name>legacyPeerEventsName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>insert</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO %s ( "</literal>
                                      <operator>+</operator> <literal type="string">"peer, "</literal>
                                      <operator>+</operator> <literal type="string">"peer_port, "</literal>
                                      <operator>+</operator> <literal type="string">"hints_dropped) "</literal>
                                      <operator>+</operator> <literal type="string">" values ( ?, ?, ? )"</literal></expr></argument>,
                                      <argument><expr><name>peerEventsName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rows</name> <init>= <expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternalWithPaging</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>transferred</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Transferring row {}"</literal></expr></argument>, <argument><expr><name>transferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternal</name></name><argument_list>(<argument><expr><name>insert</name></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"peer"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getInetAddress</name></name><argument_list>(<argument><expr><literal type="string">"peer"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStoragePort</name></name><argument_list>()</argument_list></call></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"hints_dropped"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getMap</name></name><argument_list>(<argument><expr><literal type="string">"hints_dropped"</literal></expr></argument>, <argument><expr><name><name>UUIDType</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name><name>Int32Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transferred</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Migrated {} rows from legacy {} to {}"</literal></expr></argument>, <argument><expr><name>transferred</name></expr></argument>, <argument><expr><name>legacyPeerEventsName</name></expr></argument>, <argument><expr><name>peerEventsName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>migrateTransferredRanges</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>newTransferredRanges</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>TRANSFERRED_RANGES_V2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>newTransferredRanges</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"{} table was empty, migrating legacy {} to {}"</literal></expr></argument>, <argument><expr><name>transferredRangesName</name></expr></argument>, <argument><expr><name>legacyTransferredRangesName</name></expr></argument>, <argument><expr><name>transferredRangesName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s"</literal></expr></argument>,
                                     <argument><expr><name>legacyTransferredRangesName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>insert</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO %s ("</literal>
                                      <operator>+</operator> <literal type="string">"operation, "</literal>
                                      <operator>+</operator> <literal type="string">"peer, "</literal>
                                      <operator>+</operator> <literal type="string">"peer_port, "</literal>
                                      <operator>+</operator> <literal type="string">"keyspace_name, "</literal>
                                      <operator>+</operator> <literal type="string">"ranges) "</literal>
                                      <operator>+</operator> <literal type="string">" values ( ?, ?, ? , ?, ?)"</literal></expr></argument>,
                                      <argument><expr><name>transferredRangesName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rows</name> <init>= <expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternalWithPaging</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>transferred</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Transferring row {}"</literal></expr></argument>, <argument><expr><name>transferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternal</name></name><argument_list>(<argument><expr><name>insert</name></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"operation"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"operation"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"peer"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getInetAddress</name></name><argument_list>(<argument><expr><literal type="string">"peer"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStoragePort</name></name><argument_list>()</argument_list></call></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"keyspace_name"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"keyspace_name"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"ranges"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getSet</name></name><argument_list>(<argument><expr><literal type="string">"ranges"</literal></expr></argument>, <argument><expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transferred</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Migrated {} rows from legacy {} to {}"</literal></expr></argument>, <argument><expr><name>transferred</name></expr></argument>, <argument><expr><name>legacyTransferredRangesName</name></expr></argument>, <argument><expr><name>transferredRangesName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>migrateAvailableRanges</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>newAvailableRanges</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>AVAILABLE_RANGES_V2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>newAvailableRanges</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"{} table was empty, migrating legacy {} to {}"</literal></expr></argument>, <argument><expr><name>availableRangesName</name></expr></argument>, <argument><expr><name>legacyAvailableRangesName</name></expr></argument>, <argument><expr><name>availableRangesName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s"</literal></expr></argument>,
                                     <argument><expr><name>legacyAvailableRangesName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>insert</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO %s ("</literal>
                                      <operator>+</operator> <literal type="string">"keyspace_name, "</literal>
                                      <operator>+</operator> <literal type="string">"full_ranges, "</literal>
                                      <operator>+</operator> <literal type="string">"transient_ranges) "</literal>
                                      <operator>+</operator> <literal type="string">" values ( ?, ?, ? )"</literal></expr></argument>,
                                      <argument><expr><name>availableRangesName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rows</name> <init>= <expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternalWithPaging</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>transferred</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Transferring row {}"</literal></expr></argument>, <argument><expr><name>transferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"keyspace_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>ofNullable</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getSet</name></name><argument_list>(<argument><expr><literal type="string">"ranges"</literal></expr></argument>, <argument><expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>orElse</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternal</name></name><argument_list>(<argument><expr><name>insert</name></expr></argument>,
                                           <argument><expr><name>keyspace</name></expr></argument>,
                                           <argument><expr><name>ranges</name></expr></argument>,
                                           <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transferred</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Migrated {} rows from legacy {} to {}"</literal></expr></argument>, <argument><expr><name>transferred</name></expr></argument>, <argument><expr><name>legacyAvailableRangesName</name></expr></argument>, <argument><expr><name>availableRangesName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>
