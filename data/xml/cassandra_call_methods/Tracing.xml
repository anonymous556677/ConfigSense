<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/tracing/Tracing.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>FastThreadLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>TimeUUIDType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>ParamType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JVMStabilityInspector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>UUIDGen</name></name>;</import>


<comment type="block" format="javadoc">/**
 * A trace session context. Able to track and store trace sessions. A session is usually a user initiated query, and may
 * have multiple local and remote events before it is completed.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Tracing</name> <super_list><implements>implements <super><name><name>ExecutorLocal</name><argument_list type="generic">&lt;<argument><name>TraceState</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>IVersionedSerializer</name><argument_list type="generic">&lt;<argument><name>TraceType</name></argument>&gt;</argument_list></name></type> <name>traceTypeSerializer</name> <init>= <expr><operator>new</operator> <class><super><name><name>IVersionedSerializer</name><argument_list type="generic">&lt;<argument><name>TraceType</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>TraceType</name></type> <name>traceType</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator><call><name><name>traceType</name><operator>.</operator><name>ordinal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>TraceType</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <return>return <expr><call><name><name>TraceType</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>TraceType</name></type> <name>traceType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block">/* this enum is used in serialization; preserve order for compatibility */</comment>
    <enum><specifier>public</specifier> enum <name>TraceType</name>
    <block>{
        <decl><name>NONE</name></decl>,
        <decl><name>QUERY</name></decl>,
        <decl><name>REPAIR</name></decl>;

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TraceType</name><index>[]</index></name></type> <name>ALL_VALUES</name> <init>= <expr><call><name>values</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TraceType</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>b</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ALL_VALUES</name><operator>.</operator><name>length</name></name> <operator>&lt;=</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>NONE</name></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><name><name>ALL_VALUES</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>TraceType</name></type> <name>value</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>byte</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>ordinal</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>TTLS</name> <init>= <expr><block>{ <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getTracetypeQueryTTL</name></name><argument_list>()</argument_list></call></expr>,
                                            <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getTracetypeQueryTTL</name></name><argument_list>()</argument_list></call></expr>,
                                            <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getTracetypeRepairTTL</name></name><argument_list>()</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>getTTL</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name><name>TTLS</name><index>[<expr><call><name>ordinal</name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Tracing</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>localAddress</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getLocalAddressAndPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>FastThreadLocal</name><argument_list type="generic">&lt;<argument><name>TraceState</name></argument>&gt;</argument_list></name></type> <name>state</name> <init>= <expr><operator>new</operator> <call><name><name>FastThreadLocal</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>ConcurrentMap</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>TraceState</name></argument>&gt;</argument_list></name></type> <name>sessions</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Tracing</name></type> <name>instance</name></decl>;</decl_stmt>

    <static>static
    <block>{<block_content>
        <decl_stmt><decl><type><name>Tracing</name></type> <name>tracing</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>customTracingClass</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.custom_tracing_class"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>customTracingClass</name></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>tracing</name> <operator>=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>construct</name></name><argument_list>(<argument><expr><name>customTracingClass</name></expr></argument>, <argument><expr><literal type="string">"Tracing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Using {} as tracing queries (as requested with -Dcassandra.custom_tracing_class)"</literal></expr></argument>, <argument><expr><name>customTracingClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Cannot use class %s for tracing, ignoring by defaulting to normal tracing"</literal></expr></argument>, <argument><expr><name>customTracingClass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>instance</name> <operator>=</operator> <ternary><condition><expr><literal type="null">null</literal> <operator>!=</operator> <name>tracing</name></expr> ?</condition><then> <expr><name>tracing</name></expr> </then><else>: <expr><operator>new</operator> <call><name>TracingImpl</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></static>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getSessionId</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name>isTracing</name><argument_list>()</argument_list></call></expr>;</assert>
        <return>return <expr><call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>sessionId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TraceType</name></type> <name>getTraceType</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name>isTracing</name><argument_list>()</argument_list></call></expr>;</assert>
        <return>return <expr><call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>traceType</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getTTL</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name>isTracing</name><argument_list>()</argument_list></call></expr>;</assert>
        <return>return <expr><call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ttl</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Indicates if the current thread's execution is being traced.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isTracing</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>instance</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>newSession</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>customPayload</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>newSession</name><argument_list>(
                <argument><expr><call><name><name>TimeUUIDType</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name><operator>.</operator><name>getTimeUUIDBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>TraceType</name><operator>.</operator><name>QUERY</name></name></expr></argument>,
                <argument><expr><name>customPayload</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>newSession</name><parameter_list>(<parameter><decl><type><name>TraceType</name></type> <name>traceType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>newSession</name><argument_list>(
                <argument><expr><call><name><name>TimeUUIDType</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name><operator>.</operator><name>getTimeUUIDBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>traceType</name></expr></argument>,
                <argument><expr><name><name>Collections</name><operator>.</operator><name>EMPTY_MAP</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>newSession</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionId</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>customPayload</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>newSession</name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>, <argument><expr><name><name>TraceType</name><operator>.</operator><name>QUERY</name></name></expr></argument>, <argument><expr><name>customPayload</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** This method is intended to be overridden in tracing implementations that need access to the customPayload */</comment>
    <function><type><specifier>protected</specifier> <name>UUID</name></type> <name>newSession</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionId</name></decl></parameter>, <parameter><decl><type><name>TraceType</name></type> <name>traceType</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>customPayload</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name>get</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>;</assert>

        <decl_stmt><decl><type><name>TraceState</name></type> <name>ts</name> <init>= <expr><call><name>newTraceState</name><argument_list>(<argument><expr><name>localAddress</name></expr></argument>, <argument><expr><name>sessionId</name></expr></argument>, <argument><expr><name>traceType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sessions</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>sessionId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>doneWithNonLocalSession</name><parameter_list>(<parameter><decl><type><name>TraceState</name></type> <name>state</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>releaseReference</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>sessions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>sessionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Stop the session and record its complete.  Called by coodinator when request is complete.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>stopSession</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TraceState</name></type> <name>state</name> <init>= <expr><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <comment type="line">// inline isTracing to avoid implicit two calls to state.get()</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"request complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>stopSessionImpl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sessions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>sessionId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>stopSessionImpl</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>TraceState</name></type> <name>get</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TraceState</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionId</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>sessions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TraceState</name></type> <name>tls</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TraceState</name></type> <name>begin</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>begin</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>TraceState</name></type> <name>begin</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>InetAddress</name></type> <name>client</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Determines the tracing context from a message.  Does NOT set the threadlocal state.
     *
     * @param header The internode message header
     */</comment>
    <function><type><specifier>public</specifier> <name>TraceState</name></type> <name>initializeFromMessage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Message</name><operator>.</operator><name>Header</name></name></type> <name>header</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>UUID</name></type> <name>sessionId</name> <init>= <expr><call><name><name>header</name><operator>.</operator><name>traceSession</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sessionId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>TraceState</name></type> <name>ts</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>ts</name><operator>.</operator><name>acquireReference</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>ts</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>TraceType</name></type> <name>traceType</name> <init>= <expr><call><name><name>header</name><operator>.</operator><name>traceType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>header</name><operator>.</operator><name>verb</name><operator>.</operator><name>isResponse</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// received a message for a session we've already closed out.  see CASSANDRA-5668</comment>
            <return>return <expr><operator>new</operator> <call><name>ExpiredTraceState</name><argument_list>(<argument><expr><call><name>newTraceState</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>from</name></name></expr></argument>, <argument><expr><name>sessionId</name></expr></argument>, <argument><expr><name>traceType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>newTraceState</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>from</name></name></expr></argument>, <argument><expr><name>sessionId</name></expr></argument>, <argument><expr><name>traceType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sessions</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>ts</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Record any tracing data, if enabled on this message.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>traceOutgoingMessage</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>serializedSize</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>sendTo</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>UUID</name></type> <name>sessionId</name> <init>= <expr><call><name><name>message</name><operator>.</operator><name>traceSession</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sessionId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>logMessage</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Sending %s message to %s message size %d bytes"</literal></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>verb</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sendTo</name></expr></argument>,
                                              <argument><expr><name>serializedSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>TraceState</name></type> <name>state</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <comment type="line">// session may have already finished; see CASSANDRA-5668</comment>
            <block>{<block_content>
                <decl_stmt><decl><type><name>TraceType</name></type> <name>traceType</name> <init>= <expr><call><name><name>message</name><operator>.</operator><name>traceType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>trace</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>logMessage</name></expr></argument>, <argument><expr><call><name><name>traceType</name><operator>.</operator><name>getTTL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>logMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>verb</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isResponse</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>doneWithNonLocalSession</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"failed to capture the tracing info for an outbound message to {}, ignoring"</literal></expr></argument>, <argument><expr><name>sendTo</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>addTraceHeaders</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>addToMutable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name>isTracing</name><argument_list>()</argument_list></call></expr>;</assert>

        <expr_stmt><expr><call><name><name>addToMutable</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>TRACE_SESSION</name></name></expr></argument>, <argument><expr><call><name><name>Tracing</name><operator>.</operator><name>instance</name><operator>.</operator><name>getSessionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>addToMutable</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>TRACE_TYPE</name></name></expr></argument>, <argument><expr><call><name><name>Tracing</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTraceType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>addToMutable</name></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>TraceState</name></type> <name>newTraceState</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>coordinator</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>sessionId</name></decl></parameter>, <parameter><decl><type><name><name>Tracing</name><operator>.</operator><name>TraceType</name></name></type> <name>traceType</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// repair just gets a varargs method since it's so heavyweight anyway</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>traceRepair</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TraceState</name></type> <name>state</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// inline isTracing to avoid implicit two calls to state.get()</comment>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// normal traces get zero-, one-, and two-argument overloads so common case doesn't need to create varargs array</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TraceState</name></type> <name>state</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// inline isTracing to avoid implicit two calls to state.get()</comment>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>arg</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TraceState</name></type> <name>state</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// inline isTracing to avoid implicit two calls to state.get()</comment>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>arg2</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TraceState</name></type> <name>state</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// inline isTracing to avoid implicit two calls to state.get()</comment>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TraceState</name></type> <name>state</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// inline isTracing to avoid implicit two calls to state.get()</comment>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Called for non-local traces (traces that are not initiated by local node == coordinator).
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>trace</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>sessionId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></class>
</unit>
