<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cache/CaffeineCache.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cache</name></name>;</package>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkState</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>MoreExecutors</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>benmanes</name><operator>.</operator><name>caffeine</name><operator>.</operator><name>cache</name><operator>.</operator><name>Cache</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>benmanes</name><operator>.</operator><name>caffeine</name><operator>.</operator><name>cache</name><operator>.</operator><name>Caffeine</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>benmanes</name><operator>.</operator><name>caffeine</name><operator>.</operator><name>cache</name><operator>.</operator><name>Policy</name><operator>.</operator><name>Eviction</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>benmanes</name><operator>.</operator><name>caffeine</name><operator>.</operator><name>cache</name><operator>.</operator><name>Weigher</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An adapter from a Caffeine cache to the ICache interface. This provides an on-heap cache using
 * the W-TinyLFU eviction policy (http://arxiv.org/pdf/1512.00727.pdf), which has a higher hit rate
 * than an LRU.
 */</comment>
<class><specifier>public</specifier> class <name><name>CaffeineCache</name><parameter_list>&lt;<parameter><name>K</name> <extends>extends <name>IMeasurableMemory</name></extends></parameter>, <parameter><name>V</name> <extends>extends <name>IMeasurableMemory</name></extends></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name><name>ICache</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Cache</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>cache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Eviction</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>policy</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>CaffeineCache</name><parameter_list>(<parameter><decl><type><name><name>Cache</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>cache</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cache</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>policy</name></name> <operator>=</operator> <call><name><name>cache</name><operator>.</operator><name>policy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>eviction</name><argument_list>()</argument_list></call><operator>.</operator><call><name>orElseThrow</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> 
            <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Expected a size bounded cache"</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkState</name><argument_list>(<argument><expr><call><name><name>policy</name><operator>.</operator><name>isWeighted</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Expected a weighted cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Initialize a cache with initial capacity with weightedCapacity
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>K</name> <extends>extends <name>IMeasurableMemory</name></extends></parameter>, <parameter><name>V</name> <extends>extends <name>IMeasurableMemory</name></extends></parameter>&gt;</parameter_list> <name><name>CaffeineCache</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>weightedCapacity</name></decl></parameter>, <parameter><decl><type><name><name>Weigher</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>weigher</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Cache</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>cache</name> <init>= <expr><call><name><name>Caffeine</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>maximumWeight</name><argument_list>(<argument><expr><name>weightedCapacity</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>weigher</name><argument_list>(<argument><expr><name>weigher</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>executor</name><argument_list>(<argument><expr><call><name><name>MoreExecutors</name><operator>.</operator><name>directExecutor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name><name>CaffeineCache</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>K</name> <extends>extends <name>IMeasurableMemory</name></extends></parameter>, <parameter><name>V</name> <extends>extends <name>IMeasurableMemory</name></extends></parameter>&gt;</parameter_list> <name><name>CaffeineCache</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>weightedCapacity</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>weightedCapacity</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>key</name></decl></parameter>, <parameter><decl><name>value</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>unsharedHeapSize</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>value</name><operator>.</operator><name>unsharedHeapSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Serialized size cannot be more than 2GB/Integer.MAX_VALUE"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>capacity</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>policy</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCapacity</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>policy</name><operator>.</operator><name>setMaximum</name></name><argument_list>(<argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>cache</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>cache</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>weightedSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>policy</name><operator>.</operator><name>weightedSize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsLong</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>invalidateAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>V</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>K</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>cache</name><operator>.</operator><name>getIfPresent</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>K</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>putIfAbsent</name><parameter_list>(<parameter><decl><type><name>K</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>cache</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putIfAbsent</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>K</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>cache</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>K</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>invalidate</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>K</name></argument>&gt;</argument_list></name></type> <name>keyIterator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>cache</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>K</name></argument>&gt;</argument_list></name></type> <name>hotKeyIterator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>policy</name><operator>.</operator><name>hottest</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsKey</name><parameter_list>(<parameter><decl><type><name>K</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>cache</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>containsKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
