<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/batchlog/BatchlogManager.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>batchlog</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Future</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ScheduledExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ScheduledThreadPoolExecutor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeoutException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>RateLimiter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>DebuggableScheduledThreadPoolExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>UntypedResultSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Keyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Mutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SystemKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>WriteType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>BytesType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UUIDType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionUpdate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>WriteFailureException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>WriteTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>FailureDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>hints</name><operator>.</operator><name>Hint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>hints</name><operator>.</operator><name>HintsService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputBuffer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputBuffer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replica</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replicas</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessageFlag</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>WriteResponseHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExecutorUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MBeanWrapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>UUIDGen</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name><operator>.</operator><name>executeInternal</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name><operator>.</operator><name>executeInternalWithPaging</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>MUTATION_REQ</name></name>;</import>

<class><specifier>public</specifier> class <name>BatchlogManager</name> <super_list><implements>implements <super><name>BatchlogManagerMBean</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MBEAN_NAME</name> <init>= <expr><literal type="string">"org.apache.cassandra.db:type=BatchlogManager"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>REPLAY_INTERVAL</name> <init>= <expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt> <comment type="line">// milliseconds</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_PAGE_SIZE</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>BatchlogManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BatchlogManager</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>BatchlogManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>BATCHLOG_REPLAY_TIMEOUT</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.batchlog.replay_timeout_in_ms"</literal></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>totalBatchesReplayed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// no concurrency protection necessary as only written by replay thread.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>UUID</name></type> <name>lastReplayedUuid</name> <init>= <expr><call><name><name>UUIDGen</name><operator>.</operator><name>minTimeUUID</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Single-thread executor service for scheduling and serializing log replay.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ScheduledExecutorService</name></type> <name>batchlogTasks</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RateLimiter</name></type> <name>rateLimiter</name> <init>= <expr><call><name><name>RateLimiter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>Double</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BatchlogManager</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ScheduledThreadPoolExecutor</name></type> <name>executor</name> <init>= <expr><operator>new</operator> <call><name>DebuggableScheduledThreadPoolExecutor</name><argument_list>(<argument><expr><literal type="string">"BatchlogTasks"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>setExecuteExistingDelayedTasksAfterShutdownPolicy</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>batchlogTasks</name> <operator>=</operator> <name>executor</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>MBeanWrapper</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerMBean</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>MBEAN_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>batchlogTasks</name><operator>.</operator><name>scheduleWithFixedDelay</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>replayFailedBatches</name></expr></argument>,
                                             <argument><expr><name><name>StorageService</name><operator>.</operator><name>RING_DELAY</name></name></expr></argument>,
                                             <argument><expr><name>REPLAY_INTERVAL</name></expr></argument>,
                                             <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>shutdownAndWait</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>TimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ExecutorUtils</name><operator>.</operator><name>shutdownAndWait</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>batchlogTasks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><call><name><name>PartitionUpdate</name><operator>.</operator><name>fullPartitionDelete</name></name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>Batches</name></name></expr></argument>,
                                                         <argument><expr><call><name><name>UUIDType</name><operator>.</operator><name>instance</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>,
                                                         <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                         <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>store</name><parameter_list>(<parameter><decl><type><name>Batch</name></type> <name>batch</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>store</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>store</name><parameter_list>(<parameter><decl><type><name>Batch</name></type> <name>batch</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>durableWrites</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>mutations</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>batch</name><operator>.</operator><name>encodedMutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>batch</name><operator>.</operator><name>decodedMutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mutations</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name><name>batch</name><operator>.</operator><name>encodedMutations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>Mutation</name></type> <name>mutation</name> <range>: <expr><name><name>batch</name><operator>.</operator><name>decodedMutations</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <try>try <init>(<decl><type><name>DataOutputBuffer</name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <call><name>DataOutputBuffer</name><argument_list>()</argument_list></call></expr></init></decl>)</init>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Mutation</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>MessagingService</name><operator>.</operator><name>current_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mutations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>.</operator><name>buffer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <comment type="line">// shouldn't happen</comment>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name><name>PartitionUpdate</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>PartitionUpdate</name><operator>.</operator><name>simpleBuilder</name></name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>Batches</name></name></expr></argument>, <argument><expr><name><name>batch</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>row</name></name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>timestamp</name><argument_list>(<argument><expr><name><name>batch</name><operator>.</operator><name>creationTime</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name><name>MessagingService</name><operator>.</operator><name>current_version</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>appendAll</name><argument_list>(<argument><expr><literal type="string">"mutations"</literal></expr></argument>, <argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>buildAsMutation</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>(<argument><expr><name>durableWrites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>countAllBatches</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM %s.%s"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>BATCHES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>results</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>results</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>results</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>results</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLong</name><argument_list>(<argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTotalBatchesReplayed</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>totalBatchesReplayed</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>forceBatchlogReplay</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>startBatchlogReplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>startBatchlogReplay</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// If a replay is already in progress this request will be executed after it completes.</comment>
        <return>return <expr><call><name><name>batchlogTasks</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>replayFailedBatches</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>performInitialReplay</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// Invokes initial replay. Used for testing only.</comment>
        <expr_stmt><expr><call><name><name>batchlogTasks</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>replayFailedBatches</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>replayFailedBatches</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Started replayFailedBatches"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// rate limit is in bytes per second. Uses Double.MAX_VALUE if disabled (set to 0 in cassandra.yaml).</comment>
        <comment type="line">// max rate is scaled by the number of nodes in the cluster (same as for HHOM - see CASSANDRA-5272).</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>endpointsCount</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSizeOfAllEndpoints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>endpointsCount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Replay cancelled as there are no peers in the ring."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>setRate</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getBatchlogReplayThrottleInKB</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>UUID</name></type> <name>limitUuid</name> <init>= <expr><call><name><name>UUIDGen</name><operator>.</operator><name>maxTimeUUID</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>getBatchlogTimeout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>store</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>BATCHES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pageSize</name> <init>= <expr><call><name>calculatePageSize</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// There cannot be any live content where token(id) &lt;= token(lastReplayedUuid) as every processed batch is</comment>
        <comment type="line">// deleted, but the tombstoned content may still be present in the tables. To avoid walking over it we specify</comment>
        <comment type="line">// token(id) &gt; token(lastReplayedUuid) as part of the query.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT id, mutations, version FROM %s.%s WHERE token(id) &gt; token(?) AND token(id) &lt;= token(?)"</literal></expr></argument>,
                                     <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>,
                                     <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>BATCHES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>batches</name> <init>= <expr><call><name>executeInternalWithPaging</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>pageSize</name></expr></argument>, <argument><expr><name>lastReplayedUuid</name></expr></argument>, <argument><expr><name>limitUuid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>processBatchlogEntries</name><argument_list>(<argument><expr><name>batches</name></expr></argument>, <argument><expr><name>pageSize</name></expr></argument>, <argument><expr><name>rateLimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastReplayedUuid</name> <operator>=</operator> <name>limitUuid</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Finished replayFailedBatches"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the rate for the current rate limiter. When {@code throttleInKB} is 0, this sets the rate to
     * {@link Double#MAX_VALUE} bytes per second.
     *
     * @param throttleInKB throughput to set in KB per second
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>throttleInKB</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>endpointsCount</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSizeOfAllEndpoints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>endpointsCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>endpointThrottleInKB</name> <init>= <expr><name>throttleInKB</name> <operator>/</operator> <name>endpointsCount</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>throughput</name> <init>= <expr><ternary><condition><expr><name>endpointThrottleInKB</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>Double</name><operator>.</operator><name>MAX_VALUE</name></name></expr> </then><else>: <expr><name>endpointThrottleInKB</name> <operator>*</operator> <literal type="number">1024.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>rateLimiter</name><operator>.</operator><name>getRate</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>throughput</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Updating batchlog replay throttle to {} KB/s, {} KB/s per endpoint"</literal></expr></argument>, <argument><expr><name>throttleInKB</name></expr></argument>, <argument><expr><name>endpointThrottleInKB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>rateLimiter</name><operator>.</operator><name>setRate</name></name><argument_list>(<argument><expr><name>throughput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="line">// read less rows (batches) per page if they are very large</comment>
    <function><type><specifier>static</specifier> <name>int</name></type> <name>calculatePageSize</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>store</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>averageRowSize</name> <init>= <expr><call><name><name>store</name><operator>.</operator><name>getMeanPartitionSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>averageRowSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>DEFAULT_PAGE_SIZE</name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>DEFAULT_PAGE_SIZE</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>/</operator> <name>averageRowSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>processBatchlogEntries</name><parameter_list>(<parameter><decl><type><name>UntypedResultSet</name></type> <name>batches</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageSize</name></decl></parameter>, <parameter><decl><type><name>RateLimiter</name></type> <name>rateLimiter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>positionInPage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ReplayingBatch</name></argument>&gt;</argument_list></name></type> <name>unfinishedBatches</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>pageSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>hintedNodes</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>replayedBatches</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Exception</name></type> <name>caughtException</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Sending out batches for replay without waiting for them, so that one stuck batch doesn't affect others</comment>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><name>batches</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>UUID</name></type> <name>id</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name>ReplayingBatch</name></type> <name>batch</name> <init>= <expr><operator>new</operator> <call><name>ReplayingBatch</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getList</name></name><argument_list>(<argument><expr><literal type="string">"mutations"</literal></expr></argument>, <argument><expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>batch</name><operator>.</operator><name>replay</name></name><argument_list>(<argument><expr><name>rateLimiter</name></expr></argument>, <argument><expr><name>hintedNodes</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>unfinishedBatches</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// no write mutations were sent (either expired or all CFs involved truncated).</comment>
                    <expr_stmt><expr><operator>++</operator><name>totalBatchesReplayed</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Skipped batch replay of {} due to {}"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>caughtException</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>skipped</name></expr>;</expr_stmt>
            </block_content>}</block></catch></try>

            <if_stmt><if>if <condition>(<expr><operator>++</operator><name>positionInPage</name> <operator>==</operator> <name>pageSize</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// We have reached the end of a batch. To avoid keeping more than a page of mutations in memory,</comment>
                <comment type="line">// finish processing the page before requesting the next row.</comment>
                <expr_stmt><expr><call><name>finishAndClearBatches</name><argument_list>(<argument><expr><name>unfinishedBatches</name></expr></argument>, <argument><expr><name>hintedNodes</name></expr></argument>, <argument><expr><name>replayedBatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>positionInPage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// finalize the incomplete last page of batches</comment>
        <if_stmt><if>if <condition>(<expr><name>positionInPage</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>finishAndClearBatches</name><argument_list>(<argument><expr><name>unfinishedBatches</name></expr></argument>, <argument><expr><name>hintedNodes</name></expr></argument>, <argument><expr><name>replayedBatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>caughtException</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Encountered %d unexpected exceptions while sending out batches"</literal></expr></argument>, <argument><expr><name>skipped</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>caughtException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// to preserve batch guarantees, we must ensure that hints (if any) have made it to disk, before deleting the batches</comment>
        <expr_stmt><expr><call><name><name>HintsService</name><operator>.</operator><name>instance</name><operator>.</operator><name>flushAndFsyncBlockingly</name></name><argument_list>(<argument><expr><name>hintedNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// once all generated hints are fsynced, actually delete the batches</comment>
        <expr_stmt><expr><call><name><name>replayedBatches</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>BatchlogManager</name><operator>::</operator><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>finishAndClearBatches</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ReplayingBatch</name></argument>&gt;</argument_list></name></type> <name>batches</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>hintedNodes</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>replayedBatches</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// schedule hints for timed out deliveries</comment>
        <for>for <control>(<init><decl><type><name>ReplayingBatch</name></type> <name>batch</name> <range>: <expr><name>batches</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>finish</name></name><argument_list>(<argument><expr><name>hintedNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>replayedBatches</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>batch</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>totalBatchesReplayed</name> <operator>+=</operator> <call><name><name>batches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>batches</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getBatchlogTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>BATCHLOG_REPLAY_TIMEOUT</name></expr>;</return> <comment type="line">// enough time for the actual write + BM removal mutation</comment>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ReplayingBatch</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>UUID</name></type> <name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>writtenAt</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>replayedBytes</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ReplayWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>replayHandlers</name></decl>;</decl_stmt>

        <constructor><name>ReplayingBatch</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>serializedMutations</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>writtenAt</name></name> <operator>=</operator> <call><name><name>UUIDGen</name><operator>.</operator><name>unixTimestamp</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mutations</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>serializedMutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>replayedBytes</name></name> <operator>=</operator> <call><name>addMutations</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>serializedMutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>replay</name><parameter_list>(<parameter><decl><type><name>RateLimiter</name></type> <name>rateLimiter</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>hintedNodes</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Replaying batch {}"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>mutations</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>gcgs</name> <init>= <expr><call><name>gcgs</name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>MILLISECONDS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><name>writtenAt</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>gcgs</name> <operator>&lt;=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>replayHandlers</name> <operator>=</operator> <call><name>sendReplays</name><argument_list>(<argument><expr><name>mutations</name></expr></argument>, <argument><expr><name>writtenAt</name></expr></argument>, <argument><expr><name>hintedNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>rateLimiter</name><operator>.</operator><name>acquire</name></name><argument_list>(<argument><expr><name>replayedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// acquire afterwards, to not mess up ttl calculation.</comment>

            <return>return <expr><call><name><name>replayHandlers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>finish</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>hintedNodes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>replayHandlers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>ReplayWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>handler</name> <init>= <expr><call><name><name>replayHandlers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>WriteTimeoutException</name></type>|<type><name>WriteFailureException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Failed replaying a batched mutation to a node, will write a hint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Failure was : {}"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// writing hints for the rest to hints, starting from i</comment>
                    <expr_stmt><expr><call><name>writeHintsForUndeliveredEndpoints</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>hintedNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></catch></try>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>addMutations</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>serializedMutations</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>serializedMutation</name> <range>: <expr><name>serializedMutations</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name><name>serializedMutation</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <try>try <init>(<decl><type><name>DataInputBuffer</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>DataInputBuffer</name><argument_list>(<argument><expr><name>serializedMutation</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>addMutation</name><argument_list>(<argument><expr><call><name><name>Mutation</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></try>
            </block_content>}</block></for>

            <return>return <expr><name>ret</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// Remove CFs that have been truncated since. writtenAt and SystemTable#getTruncatedAt() both return millis.</comment>
        <comment type="line">// We don't abort the replay entirely b/c this can be considered a success (truncated is same as delivered then</comment>
        <comment type="line">// truncated.</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>addMutation</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>TableId</name></type> <name>tableId</name> <range>: <expr><call><name><name>mutation</name><operator>.</operator><name>getTableIds</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><name>writtenAt</name> <operator>&lt;=</operator> <call><name><name>SystemKeyspace</name><operator>.</operator><name>getTruncatedAt</name></name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>mutation</name> <operator>=</operator> <call><name><name>mutation</name><operator>.</operator><name>without</name></name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mutation</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>mutations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>mutation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>writeHintsForUndeliveredEndpoints</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startFrom</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>hintedNodes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>gcgs</name> <init>= <expr><call><name>gcgs</name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// expired</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>MILLISECONDS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><name>writtenAt</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>gcgs</name> <operator>&lt;=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>nodesToHint</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>startFrom</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>replayHandlers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>ReplayWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>handler</name> <init>= <expr><call><name><name>replayHandlers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Mutation</name></type> <name>undeliveredMutation</name> <init>= <expr><call><name><name>mutations</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>handler</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>address</name> <range>: <expr><name><name>handler</name><operator>.</operator><name>undelivered</name></name></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>UUID</name></type> <name>hostId</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getHostIdForEndpoint</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>hostId</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>nodesToHint</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></for>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>nodesToHint</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>HintsService</name><operator>.</operator><name>instance</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>nodesToHint</name></expr></argument>, <argument><expr><call><name><name>Hint</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>undeliveredMutation</name></expr></argument>, <argument><expr><name>writtenAt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>hintedNodes</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>nodesToHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>nodesToHint</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ReplayWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sendReplays</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>,
                                                                              <parameter><decl><type><name>long</name></type> <name>writtenAt</name></decl></parameter>,
                                                                              <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>hintedNodes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ReplayWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>handlers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Mutation</name></type> <name>mutation</name> <range>: <expr><name>mutations</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>ReplayWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>handler</name> <init>= <expr><call><name>sendSingleReplayMutation</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>writtenAt</name></expr></argument>, <argument><expr><name>hintedNodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>handlers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>handlers</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * We try to deliver the mutations to the replicas ourselves if they are alive and only resort to writing hints
         * when a replica is down or a write request times out.
         *
         * @return direct delivery handler to wait on
         */</comment>
        <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>ReplayWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>sendSingleReplayMutation</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Mutation</name></type> <name>mutation</name></decl></parameter>,
                                                                                     <parameter><decl><type><name>long</name></type> <name>writtenAt</name></decl></parameter>,
                                                                                     <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>hintedNodes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>ks</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Token</name></type> <name>tk</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// TODO: this logic could do with revisiting at some point, as it is unclear what its rationale is</comment>
            <comment type="line">// we perform a local write, ignoring errors and inline in this thread (potentially slowing replay down)</comment>
            <comment type="line">// effectively bumping CL for locally owned writes and also potentially stalling log replay if an error occurs</comment>
            <comment type="line">// once we decide how it should work, it can also probably be simplified, and avoid constructing a ReplicaPlan directly</comment>
            <decl_stmt><decl><type><name><name>ReplicaLayout</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>liveAndDown</name> <init>= <expr><call><name><name>ReplicaLayout</name><operator>.</operator><name>forTokenWriteLiveAndDown</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Replicas</name><operator>.</operator><name>temporaryAssertFull</name></name><argument_list>(<argument><expr><call><name><name>liveAndDown</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO in CASSANDRA-14549</comment>

            <decl_stmt><decl><type><name>Replica</name></type> <name>selfReplica</name> <init>= <expr><call><name><name>liveAndDown</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>selfIfPresent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>selfReplica</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>mutation</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name><name>ReplicaLayout</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>liveRemoteOnly</name> <init>= <expr><call><name><name>liveAndDown</name><operator>.</operator><name>filter</name></name><argument_list>(
                    <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>FailureDetector</name><operator>.</operator><name>isReplicaAlive</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <name>selfReplica</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><call><name><name>liveAndDown</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>replica</name> <operator>==</operator> <name>selfReplica</name> <operator>||</operator> <call><name><name>liveRemoteOnly</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name>UUID</name></type> <name>hostId</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getHostIdForEndpoint</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>hostId</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>HintsService</name><operator>.</operator><name>instance</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>, <argument><expr><call><name><name>Hint</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>writtenAt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>hintedNodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name> <init>= <expr><operator>new</operator> <call><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>liveAndDown</name><operator>.</operator><name>replicationStrategy</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>ConsistencyLevel</name><operator>.</operator><name>ONE</name></name></expr></argument>, <argument><expr><call><name><name>liveRemoteOnly</name><operator>.</operator><name>pending</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>liveRemoteOnly</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>liveRemoteOnly</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>liveRemoteOnly</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ReplayWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name><name>ReplayWriteResponseHandler</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>outWithFlag</name></name><argument_list>(<argument><expr><name>MUTATION_REQ</name></expr></argument>, <argument><expr><name>mutation</name></expr></argument>, <argument><expr><name><name>MessageFlag</name><operator>.</operator><name>CALL_BACK_ON_FAILURE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><call><name><name>liveRemoteOnly</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWriteWithCallback</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>replica</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <return>return <expr><name>handler</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>gcgs</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>gcgs</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Mutation</name></type> <name>mutation</name> <range>: <expr><name>mutations</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name>gcgs</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>gcgs</name></expr></argument>, <argument><expr><call><name><name>mutation</name><operator>.</operator><name>smallestGCGS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <return>return <expr><name>gcgs</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * A wrapper of WriteResponseHandler that stores the addresses of the endpoints from
         * which we did not receive a successful response.
         */</comment>
        <class><specifier>private</specifier> <specifier>static</specifier> class <name><name>ReplayWriteResponseHandler</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>WriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></super></extends></super_list>
        <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>undelivered</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>newSetFromMap</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <constructor><name>ReplayWriteResponseHandler</name><parameter_list>(<parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>WriteType</name><operator>.</operator><name>UNLOGGED_BATCH</name></name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Iterables</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>undelivered</name></expr></argument>, <argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endpoints</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name>int</name></type> <name>blockFor</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>this</name><operator>.</operator><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onResponse</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>m</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>removed</name> <init>= <expr><call><name><name>undelivered</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>m</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>m</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <assert>assert <expr><name>removed</name></expr>;</assert>
                <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResponse</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
