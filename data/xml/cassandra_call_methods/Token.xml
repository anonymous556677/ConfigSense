<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/dht/Token.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>PartitionPosition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Token</name> <super_list><implements>implements <super><name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></super>, <super><name>Serializable</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TokenSerializer</name></type> <name>serializer</name> <init>= <expr><operator>new</operator> <call><name>TokenSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>TokenFactory</name>
    <block>{
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ByteBuffer</name></type> <name>toByteArray</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>token</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Token</name></type> <name>fromByteArray</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>token</name></decl></parameter>)</parameter_list>;</function_decl> <comment type="line">// serialize as string, not necessarily human-readable</comment>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Token</name></type> <name>fromString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>)</parameter_list>;</function_decl> <comment type="line">// deserialize</comment>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>token</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>;</function_decl>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name>toByteArray</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name>toByteArray</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Token</name></type> <name>fromByteBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name><name>bytes</name><operator>.</operator><name>duplicate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bytes</name><operator>.</operator><name>position</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>limit</name><argument_list>(<argument><expr><name>position</name> <operator>+</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>fromByteArray</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>byteSize</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>token</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>toByteArray</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>remaining</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TokenSerializer</name> <super_list><implements>implements <super><name><name>IPartitionerDependentSerializer</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>IPartitioner</name></type> <name>p</name> <init>= <expr><call><name><name>token</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>byteSize</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Token</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>IPartitioner</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>deserializeSize</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>p</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fromByteArray</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>deserializeSize</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <return>return <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>IPartitioner</name></type> <name>p</name> <init>= <expr><call><name><name>object</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>byteSize</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>byteSize</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><name>byteSize</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>byteSize</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function_decl><type><specifier>abstract</specifier> <specifier>public</specifier> <name>IPartitioner</name></type> <name>getPartitioner</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>abstract</specifier> <specifier>public</specifier> <name>long</name></type> <name>getHeapSize</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>abstract</specifier> <specifier>public</specifier> <name>Object</name></type> <name>getTokenValue</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a measure for the token space covered between this token and next.
     * Used by the token allocation algorithm (see CASSANDRA-7032).
     */</comment>
    <function_decl><type><specifier>abstract</specifier> <specifier>public</specifier> <name>double</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>next</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * Returns a token that is slightly greater than this. Used to avoid clashes
     * between nodes in separate datacentres trying to use the same token via
     * the token allocation algorithm.
     */</comment>
    <function_decl><type><specifier>abstract</specifier> <specifier>public</specifier> <name>Token</name></type> <name>increaseSlightly</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>Token</name></type> <name>getToken</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Token</name></type> <name>minValue</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getPartitioner</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMinimumToken</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMinimum</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>minValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * A token corresponds to the range of all the keys having this token.
     * A token is thus no comparable directly to a key. But to be able to select
     * keys given tokens, we introduce two "fake" keys for each token T:
     *   - lowerBoundKey: a "fake" key representing the lower bound T represents.
     *                    In other words, lowerBoundKey is the smallest key that
     *                    have token T.
     *   - upperBoundKey: a "fake" key representing the upper bound T represents.
     *                    In other words, upperBoundKey is the largest key that
     *                    have token T.
     *
     * Note that those are "fake" keys and should only be used for comparison
     * of other keys, for selection of keys when only a token is known.
     */</comment>
    <function><type><specifier>public</specifier> <name>KeyBound</name></type> <name>minKeyBound</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KeyBound</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>KeyBound</name></type> <name>maxKeyBound</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="block">/*
         * For each token, we needs both minKeyBound and maxKeyBound
         * because a token corresponds to a range of keys. But the minimun
         * token corresponds to no key, so it is valid and actually much
         * simpler to associate the same value for minKeyBound and
         * maxKeyBound for the minimun token.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isMinimum</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>minKeyBound</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>KeyBound</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>KeyBound</name> <super_list><implements>implements <super><name>PartitionPosition</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Token</name></type> <name>token</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isMinimumBound</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>KeyBound</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isMinimumBound</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>token</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isMinimumBound</name></name> <operator>=</operator> <name>isMinimumBound</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>Token</name></type> <name>getToken</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>token</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>PartitionPosition</name></type> <name>pos</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>getToken</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>pos</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>isMinimumBound</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>pos</name> <operator>instanceof</operator> <name>KeyBound</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>KeyBound</name><operator>)</operator><name>pos</name><operator>)</operator><operator>.</operator><name>isMinimumBound</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>pos</name> <operator>instanceof</operator> <name>KeyBound</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>KeyBound</name><operator>)</operator><name>pos</name><operator>)</operator><operator>.</operator><name>isMinimumBound</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>IPartitioner</name></type> <name>getPartitioner</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>getToken</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPartitioner</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>KeyBound</name></type> <name>minValue</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>getPartitioner</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMinimumToken</name><argument_list>()</argument_list></call><operator>.</operator><call><name>minKeyBound</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMinimum</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>getToken</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isMinimum</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>PartitionPosition</name><operator>.</operator><name>Kind</name></name></type> <name>kind</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>isMinimumBound</name></expr> ?</condition><then> <expr><name><name>PartitionPosition</name><operator>.</operator><name>Kind</name><operator>.</operator><name>MIN_BOUND</name></name></expr> </then><else>: <expr><name><name>PartitionPosition</name><operator>.</operator><name>Kind</name><operator>.</operator><name>MAX_BOUND</name></name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>obj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>KeyBound</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>KeyBound</name><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>token</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>token</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>isMinimumBound</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>isMinimumBound</name></name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>getToken</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hashCode</name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>isMinimumBound</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s(%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>isMinimumBound</name></expr> ?</condition><then> <expr><literal type="string">"min"</literal></expr> </then><else>: <expr><literal type="string">"max"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>getToken</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
