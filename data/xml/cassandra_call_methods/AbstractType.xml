<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/marshal/AbstractType.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>AssignmentTestable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>CQL3Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>ColumnSpecification</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>Term</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>SyntaxException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>serializers</name><operator>.</operator><name>MarshalException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>serializers</name><operator>.</operator><name>TypeSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>ProtocolVersion</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>github</name><operator>.</operator><name>jamm</name><operator>.</operator><name>Unmetered</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name><operator>.</operator><name>ComparisonType</name><operator>.</operator><name>CUSTOM</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Specifies a Comparator for a specific type of ByteBuffer.
 *
 * Note that empty ByteBuffer are used to represent "start at the beginning"
 * or "stop at the end" arguments to get_slice, so the Comparator
 * should always handle those values even if they normally do not
 * represent a valid ByteBuffer for the type being compared.
 */</comment>
<class><annotation>@<name>Unmetered</name></annotation>
<specifier>public</specifier> <specifier>abstract</specifier> class <name><name>AbstractType</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></super>, <super><name>AssignmentTestable</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>reverseComparator</name></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>ComparisonType</name>
    <block>{
        <comment type="block" format="javadoc">/**
         * This type should never be compared
         */</comment>
        <decl><name>NOT_COMPARABLE</name></decl>,
        <comment type="block" format="javadoc">/**
         * This type is always compared by its sequence of unsigned bytes
         */</comment>
        <decl><name>BYTE_ORDER</name></decl>,
        <comment type="block" format="javadoc">/**
         * This type can only be compared by calling the type's compareCustom() method, which may be expensive.
         * Support for this may be removed in a major release of Cassandra, however upgrade facilities will be
         * provided if and when this happens.
         */</comment>
        <decl><name>CUSTOM</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ComparisonType</name></type> <name>comparisonType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isByteOrderComparable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ValueComparators</name></type> <name>comparatorSet</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>AbstractType</name><parameter_list>(<parameter><decl><type><name>ComparisonType</name></type> <name>comparisonType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>comparisonType</name></name> <operator>=</operator> <name>comparisonType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isByteOrderComparable</name></name> <operator>=</operator> <name>comparisonType</name> <operator>==</operator> <name><name>ComparisonType</name><operator>.</operator><name>BYTE_ORDER</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>reverseComparator</name> <operator>=</operator> <lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>AbstractType</name><operator>.</operator><name>this</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>o2</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>Method</name></type> <name>custom</name> <init>= <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMethod</name><argument_list>(<argument><expr><literal type="string">"compareCustom"</literal></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ValueAccessor</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>ValueAccessor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>custom</name><operator>.</operator><name>getDeclaringClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AbstractType</name><operator>.</operator><name>class</name></name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>comparisonType</name> <operator>==</operator> <name>CUSTOM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>comparisonType</name> <operator>==</operator> <name>CUSTOM</name></expr> ?</condition><then> <expr><literal type="string">"compareCustom must be overridden if ComparisonType is CUSTOM"</literal></expr>
                                                                         </then><else>: <expr><literal type="string">"compareCustom should not be overridden if ComparisonType is not CUSTOM"</literal></expr></else></ternary><operator>)</operator>
                                                <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><name>comparatorSet</name> <operator>=</operator> <operator>new</operator> <call><name>ValueComparators</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>l</name></decl></parameter>, <parameter><decl><name>r</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>compare</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>ByteArrayAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ByteArrayAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>,
                                             <argument><expr><lambda><parameter_list>(<parameter><decl><name>l</name></decl></parameter>, <parameter><decl><name>r</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>compare</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>ByteBufferAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ByteBufferAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>VL</name></parameter>, <parameter><name>VR</name></parameter>, <parameter><name>T</name> <extends>extends <name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>int</name></type> <name>compareComposed</name><parameter_list>(<parameter><decl><type><name>VL</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>VL</name></argument>&gt;</argument_list></name></type> <name>accessorL</name></decl></parameter>, <parameter><decl><type><name>VR</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>VR</name></argument>&gt;</argument_list></name></type> <name>accessorR</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>accessorL</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>accessorR</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>accessorR</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>accessorL</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>type</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>accessorL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>accessorR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>asCQLTypeStringList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>abstractTypes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>abstractTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>abstractType</name> <range>: <expr><name>abstractTypes</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>abstractType</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>T</name></type> <name>compose</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getSerializer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>compose</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>accessor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getSerializer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>accessor</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>decompose</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getSerializer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** get a string representation of the bytes used for various identifier (NOT just for log messages) */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>accessor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="string">"null"</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>TypeSerializer</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>serializer</name> <init>= <expr><call><name>getSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>serializer</name><operator>.</operator><name>validate</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>accessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>serializer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>accessor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getString</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name><name>ByteBufferAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** get a byte representation of the given string. */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ByteBuffer</name></type> <name>fromString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/** Given a parsed JSON string, return a byte representation of the object.
     * @param parsed the result of parsing a json string
     **/</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Term</name></type> <name>fromJSONObject</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>parsed</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Converts the specified value into its JSON representation.
     * &lt;p&gt;
     * The buffer position will stay the same.
     * &lt;/p&gt;
     *
     * @param buffer the value to convert
     * @param protocolVersion the protocol version to use for the conversion
     * @return a JSON string representing the specified value
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toJSONString</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="char">'"'</literal> <operator>+</operator> <call><name><name>Objects</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name>getSerializer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">'"'</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name>String</name></type> <name>toJSONString</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>accessor</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>toJSONString</name><argument_list>(<argument><expr><call><name><name>accessor</name><operator>.</operator><name>toBuffer</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>protocolVersion</name></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// FIXME</comment>
    </block_content>}</block></function>

    <comment type="block">/* validate that the byte array is a valid sequence for the type we are supposed to be comparing */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>validate</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name><name>ByteBufferAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>accessor</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>getSerializer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>validate</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>accessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>right</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>compare</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>ByteBufferAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name><name>ByteBufferAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <parameter_list type="generic">&lt;<parameter><name>VL</name></parameter>, <parameter><name>VR</name></parameter>&gt;</parameter_list> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>VL</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>VL</name></argument>&gt;</argument_list></name></type> <name>accessorL</name></decl></parameter>, <parameter><decl><type><name>VR</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>VR</name></argument>&gt;</argument_list></name></type> <name>accessorR</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>isByteOrderComparable</name></expr> ?</condition><then> <expr><call><name><name>ValueAccessor</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>accessorL</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>accessorR</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>compareCustom</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>accessorL</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>accessorR</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Implement IFF ComparisonType is CUSTOM
     *
     * Compares the byte representation of two instances of this class,
     * for types where this cannot be done by simple in-order comparison of the
     * unsigned bytes
     *
     * Standard Java compare semantics
     * @param left
     * @param accessorL
     * @param right
     * @param accessorR
     */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>VL</name></parameter>, <parameter><name>VR</name></parameter>&gt;</parameter_list> <name>int</name></type> <name>compareCustom</name><parameter_list>(<parameter><decl><type><name>VL</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>VL</name></argument>&gt;</argument_list></name></type> <name>accessorL</name></decl></parameter>, <parameter><decl><type><name>VR</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>VR</name></argument>&gt;</argument_list></name></type> <name>accessorR</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Validate cell value. Unlike {@linkplain #validate(java.nio.ByteBuffer)},
     * cell value is passed to validate its content.
     * Usually, this is the same as validate except collection.
     *
     * @param cellValue ByteBuffer representing cell value
     * @throws MarshalException
     */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>validateCellValue</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>cellValue</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>accessor</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>validate</name><argument_list>(<argument><expr><name>cellValue</name></expr></argument>, <argument><expr><name>accessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block">/* Most of our internal type should override that. */</comment>
    <function><type><specifier>public</specifier> <name>CQL3Type</name></type> <name>asCQL3Type</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>CQL3Type</name><operator>.</operator><name>Custom</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Same as compare except that this ignore ReversedType. This is to be use when
     * comparing 2 values to decide for a CQL condition (see Operator.isSatisfiedBy) as
     * for CQL, ReversedType is simply an "hint" to the storage engine but it does not
     * change the meaning of queries per-se.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareForCQL</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>v2</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>compare</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>TypeSerializer</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getSerializer</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/* convenience method */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCounter</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFrozenCollection</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>isCollection</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isMultiCell</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isReversed</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parseDefaultParameters</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>baseType</name></decl></parameter>, <parameter><decl><type><name>TypeParser</name></type> <name>parser</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SyntaxException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parameters</name> <init>= <expr><call><name><name>parser</name><operator>.</operator><name>getKeyValueParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>reversed</name> <init>= <expr><call><name><name>parameters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"reversed"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>reversed</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>reversed</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>reversed</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name><name>ReversedType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>baseType</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <return>return <expr><name>baseType</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if this comparator is compatible with the provided
     * previous comparator, that is if previous can safely be replaced by this.
     * A comparator cn should be compatible with a previous one cp if forall columns c1 and c2,
     * if   cn.validate(c1) and cn.validate(c2) and cn.compare(c1, c2) == v,
     * then cp.validate(c1) and cp.validate(c2) and cp.compare(c1, c2) == v.
     *
     * Note that a type should be compatible with at least itself and when in
     * doubt, keep the default behavior of not being compatible with any other comparator!
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCompatibleWith</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>previous</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if values of the other AbstractType can be read and "reasonably" interpreted by the this
     * AbstractType. Note that this is a weaker version of isCompatibleWith, as it does not require that both type
     * compare values the same way.
     *
     * The restriction on the other type being "reasonably" interpreted is to prevent, for example, IntegerType from
     * being compatible with all other types.  Even though any byte string is a valid IntegerType value, it doesn't
     * necessarily make sense to interpret a UUID or a UTF8 string as an integer.
     *
     * Note that a type should be compatible with at least itself.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isValueCompatibleWith</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>otherType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>isValueCompatibleWithInternal</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>otherType</name> <operator>instanceof</operator> <name>ReversedType</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>ReversedType</name><operator>)</operator> <name>otherType</name><operator>)</operator><operator>.</operator><name>baseType</name></expr> </then><else>: <expr><name>otherType</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Needed to handle ReversedType in value-compatibility checks.  Subclasses should implement this instead of
     * isValueCompatibleWith().
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isValueCompatibleWithInternal</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>otherType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>isCompatibleWith</name><argument_list>(<argument><expr><name>otherType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * An alternative comparison function used by CollectionsType in conjunction with CompositeType.
     *
     * This comparator is only called to compare components of a CompositeType. It gets the value of the
     * previous component as argument (or null if it's the first component of the composite).
     *
     * Unless you're doing something very similar to CollectionsType, you shouldn't override this.
     */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>VL</name></parameter>, <parameter><name>VR</name></parameter>&gt;</parameter_list> <name>int</name></type> <name>compareCollectionMembers</name><parameter_list>(<parameter><decl><type><name>VL</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>VL</name></argument>&gt;</argument_list></name></type> <name>accessorL</name></decl></parameter>, <parameter><decl><type><name>VR</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>VR</name></argument>&gt;</argument_list></name></type> <name>accessorR</name></decl></parameter>, <parameter><decl><type><name>VL</name></type> <name>collectionName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>compare</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>accessorL</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>accessorR</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>validateCollectionMember</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>collectionName</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>accessor</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>MarshalException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>getSerializer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>validate</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>accessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCollection</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isUDT</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTuple</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMultiCell</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFreezable</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>freeze</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>subTypes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns an AbstractType instance that is equivalent to this one, but with all nested UDTs and collections
     * explicitly frozen.
     *
     * This is only necessary for {@code 2.x -&gt; 3.x} schema migrations, and can be removed in Cassandra 4.0.
     *
     * See CASSANDRA-11609 and CASSANDRA-11613.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>freezeNestedMulticellTypes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns {@code true} for types where empty should be handled like {@code null} like {@link Int32Type}.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmptyValueMeaningless</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param ignoreFreezing if true, the type string will not be wrapped with FrozenType(...), even if this type is frozen.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>ignoreFreezing</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return a list of the "subcomponents" this type has.
     * This always return a singleton list with the type itself except for CompositeType.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getComponents</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>Collections</name><operator>.</operator></name>&lt;<name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>&gt;</operator><call><name>singletonList</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The length of values for this type if all values are of fixed length, -1 otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>valueLengthIfFixed</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// This assumes that no empty values are passed</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeValue</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>writeValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>ByteBufferAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// This assumes that no empty values are passed</comment>
    <function><type><specifier>public</specifier>  <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>writeValue</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>accessor</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <assert>assert <expr><operator>!</operator><call><name><name>accessor</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="string">"bytes should not be empty for type "</literal> <operator>+</operator> <name>this</name></expr>;</assert>
        <decl_stmt><decl><type><name>int</name></type> <name>expectedValueLength</name> <init>= <expr><call><name>valueLengthIfFixed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>expectedValueLength</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>actualValueLength</name> <init>= <expr><call><name><name>accessor</name><operator>.</operator><name>size</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>actualValueLength</name> <operator>==</operator> <name>expectedValueLength</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>accessor</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Expected exactly %d bytes, but was %d"</literal></expr></argument>,
                                                    <argument><expr><name>expectedValueLength</name></expr></argument>, <argument><expr><name>actualValueLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>accessor</name><operator>.</operator><name>writeWithVIntLength</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>writtenLength</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>writtenLength</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>ByteBufferAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name>long</name></type> <name>writtenLength</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>accessor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><operator>!</operator><call><name><name>accessor</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="string">"bytes should not be empty for type "</literal> <operator>+</operator> <name>this</name></expr>;</assert>
        <return>return <expr><ternary><condition><expr><call><name>valueLengthIfFixed</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>
               ?</condition><then> <expr><call><name><name>accessor</name><operator>.</operator><name>size</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> <comment type="line">// if the size is wrong, this will be detected in writeValue</comment>
               </then><else>: <expr><call><name><name>accessor</name><operator>.</operator><name>sizeWithVIntLength</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>readBuffer</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>readBuffer</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>readBuffer</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValueSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>read</name><argument_list>(<argument><expr><name><name>ByteBufferAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>maxValueSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>readArray</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValueSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>read</name><argument_list>(<argument><expr><name><name>ByteArrayAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>maxValueSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name>V</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>accessor</name></decl></parameter>, <parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValueSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>valueLengthIfFixed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>accessor</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Corrupt (negative) value length encountered"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>maxValueSize</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Corrupt value length %d encountered, as it exceeds the maximum of %d, "</literal> <operator>+</operator>
                                                    <literal type="string">"which is set via max_value_size_in_mb in cassandra.yaml"</literal></expr></argument>,
                                                    <argument><expr><name>l</name></expr></argument>, <argument><expr><name>maxValueSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <return>return <expr><call><name><name>accessor</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>skipValue</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>valueLengthIfFixed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>skipBytesFully</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>skipWithVIntLength</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>referencesUserType</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>referencesUserType</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ByteBufferAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name>boolean</name></type> <name>referencesUserType</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>accessor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns an instance of this type with all references to the provided user type recursively replaced with its new
     * definition.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>withUpdatedUserType</name><parameter_list>(<parameter><decl><type><name>UserType</name></type> <name>udt</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Replace any instances of UserType with equivalent TupleType-s.
     *
     * We need it for dropped_columns, to allow safely dropping unused user types later without retaining any references
     * to them in system_schema.dropped_columns.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>expandUserTypes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>referencesDuration</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests whether a CQL value having this type can be assigned to the provided receiver.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>AssignmentTestable</name><operator>.</operator><name>TestResult</name></name></type> <name>testAssignment</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>receiverType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// testAssignement is for CQL literals and native protocol values, none of which make a meaningful</comment>
        <comment type="line">// difference between frozen or not and reversed or not.</comment>

        <if_stmt><if>if <condition>(<expr><call><name>isFreezable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isMultiCell</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>receiverType</name> <operator>=</operator> <call><name><name>receiverType</name><operator>.</operator><name>freeze</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isReversed</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>receiverType</name><operator>.</operator><name>isReversed</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>receiverType</name> <operator>=</operator> <call><name><name>ReversedType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>receiverType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>equals</name><argument_list>(<argument><expr><name>receiverType</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>AssignmentTestable</name><operator>.</operator><name>TestResult</name><operator>.</operator><name>EXACT_MATCH</name></name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>receiverType</name><operator>.</operator><name>isValueCompatibleWith</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>AssignmentTestable</name><operator>.</operator><name>TestResult</name><operator>.</operator><name>WEAKLY_ASSIGNABLE</name></name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><name><name>AssignmentTestable</name><operator>.</operator><name>TestResult</name><operator>.</operator><name>NOT_ASSIGNABLE</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This must be overriden by subclasses if necessary so that for any
     * AbstractType, this == TypeParser.parse(toString()).
     *
     * Note that for backwards compatibility this includes the full classname.
     * For CQL purposes the short name is fine.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkComparable</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>comparisonType</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>NOT_COMPARABLE</name></expr>:</case>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>this</name> <operator>+</operator> <literal type="string">" cannot be used in comparisons, so cannot be used as a clustering column"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>AssignmentTestable</name><operator>.</operator><name>TestResult</name></name></type> <name>testAssignment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>ColumnSpecification</name></type> <name>receiver</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>testAssignment</name><argument_list>(<argument><expr><name><name>receiver</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
