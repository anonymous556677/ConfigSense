<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/locator/EndpointsForRange.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>all</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A ReplicaCollection where all Replica are required to cover a range that fully contains the range() defined in the builder().
 * Endpoints are guaranteed to be unique; on construction, this is enforced unless optionally silenced (in which case
 * only the first occurrence makes the cut).
 */</comment>
<class><specifier>public</specifier> class <name>EndpointsForRange</name> <super_list><extends>extends <super><name><name>Endpoints</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl>;</decl_stmt>
    <constructor><specifier>private</specifier> <name>EndpointsForRange</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>ReplicaList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaMap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>byEndpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>byEndpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>range</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
        <assert>assert <expr><name>range</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>range</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>initialCapacity</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>initialCapacity</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EndpointsForToken</name></type> <name>forToken</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>token</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>range</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>token</name> <operator>+</operator> <literal type="string">" is not contained within "</literal> <operator>+</operator> <name>range</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>EndpointsForToken</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>byEndpoint</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>EndpointsForRange</name></type> <name>snapshot</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><name>EndpointsForRange</name></type> <name>snapshot</name><parameter_list>(<parameter><decl><type><name>ReplicaList</name></type> <name>newList</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>newList</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>empty</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ReplicaMap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>byEndpoint</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>byEndpoint</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>list</name><operator>.</operator><name>isSubList</name></name><argument_list>(<argument><expr><name>newList</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>byEndpoint</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>byEndpoint</name><operator>.</operator><name>forSubList</name></name><argument_list>(<argument><expr><name>newList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>EndpointsForRange</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>newList</name></expr></argument>, <argument><expr><name>byEndpoint</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Builder</name> <super_list><extends>extends <super><name>EndpointsForRange</name></super></extends> <implements>implements <super><name><name>ReplicaCollection</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>built</name></decl>;</decl_stmt>
        <constructor><specifier>public</specifier> <name>Builder</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></constructor>
        <constructor><specifier>public</specifier> <name>Builder</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ReplicaList</name><argument_list>(<argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></constructor>
        <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>ReplicaList</name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>endpointMap</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name><name>EndpointsForRange</name><operator>.</operator><name>Builder</name></name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>, <parameter><decl><type><name>Conflict</name></type> <name>ignoreConflict</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>built</name></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>replica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>super</name><operator>.</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Replica "</literal> <operator>+</operator> <name>replica</name> <operator>+</operator> <literal type="string">" does not contain "</literal> <operator>+</operator> <name><name>super</name><operator>.</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>super</name><operator>.</operator><name>byEndpoint</name><operator>.</operator><name>internalPutIfAbsent</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <switch>switch <condition>(<expr><name>ignoreConflict</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>DUPLICATE</name></expr>:</case>
                        <if_stmt><if>if <condition>(<expr><call><name>byEndpoint</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <break>break;</break></block_content></block></if></if_stmt>
                    <case>case <expr><name>NONE</name></expr>:</case>
                        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Conflicting replica added (expected unique endpoints): "</literal>
                                <operator>+</operator> <name>replica</name> <operator>+</operator> <literal type="string">"; existing: "</literal> <operator>+</operator> <call><name>byEndpoint</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    <case>case <expr><name>ALL</name></expr>:</case>
                </block_content>}</block></switch>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>EndpointsForRange</name></type> <name>snapshot</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>snapshot</name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>EndpointsForRange</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>built</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>EndpointsForRange</name><argument_list>(<argument><expr><name><name>super</name><operator>.</operator><name>range</name></name></expr></argument>, <argument><expr><name><name>super</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>super</name><operator>.</operator><name>byEndpoint</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>builder</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>builder</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>EndpointsForRange</name></type> <name>empty</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EndpointsForRange</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>EMPTY_LIST</name></expr></argument>, <argument><expr><name>EMPTY_MAP</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>EndpointsForRange</name></type> <name>of</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// we only use ArrayList or ArrayList.SubList, to ensure callsites are bimorphic</comment>
        <decl_stmt><decl><type><name>ReplicaList</name></type> <name>one</name> <init>= <expr><operator>new</operator> <call><name>ReplicaList</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>one</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// we can safely use singletonMap, as we only otherwise use LinkedHashMap</comment>
        <return>return <expr><operator>new</operator> <call><name>EndpointsForRange</name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><call><name>endpointMap</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>EndpointsForRange</name></type> <name>of</name><parameter_list>(<parameter><decl><type><name>Replica</name> <modifier>...</modifier></type> <name>replicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>copyOf</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>replicas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>EndpointsForRange</name></type> <name>copyOf</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>replicas</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Collection must be non-empty to copy"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><call><name><name>replicas</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call><operator>.</operator><call><name>range</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><call><name>all</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>range</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</assert>
        <return>return <expr><call><name>builder</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><call><name><name>replicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
