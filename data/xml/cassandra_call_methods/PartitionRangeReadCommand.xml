<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/PartitionRangeReadCommand.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>filter</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>BaseRowIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>transform</name><operator>.</operator><name>RTBoundValidator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>transform</name><operator>.</operator><name>Transformation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>AbstractBounds</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Bounds</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestExecutionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReadsListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>TableMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ClientState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageProxy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A read command that selects a (part of a) range of partitions.
 */</comment>
<class><specifier>public</specifier> class <name>PartitionRangeReadCommand</name> <super_list><extends>extends <super><name>ReadCommand</name></super></extends> <implements>implements <super><name>PartitionRangeReadQuery</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SelectionDeserializer</name></type> <name>selectionDeserializer</name> <init>= <expr><operator>new</operator> <call><name>Deserializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DataRange</name></type> <name>dataRange</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>PartitionRangeReadCommand</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isDigest</name></decl></parameter>,
                                     <parameter><decl><type><name>int</name></type> <name>digestVersion</name></decl></parameter>,
                                     <parameter><decl><type><name>boolean</name></type> <name>acceptsTransient</name></decl></parameter>,
                                     <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>,
                                     <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>,
                                     <parameter><decl><type><name>ColumnFilter</name></type> <name>columnFilter</name></decl></parameter>,
                                     <parameter><decl><type><name>RowFilter</name></type> <name>rowFilter</name></decl></parameter>,
                                     <parameter><decl><type><name>DataLimits</name></type> <name>limits</name></decl></parameter>,
                                     <parameter><decl><type><name>DataRange</name></type> <name>dataRange</name></decl></parameter>,
                                     <parameter><decl><type><name>IndexMetadata</name></type> <name>index</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Kind</name><operator>.</operator><name>PARTITION_RANGE</name></name></expr></argument>, <argument><expr><name>isDigest</name></expr></argument>, <argument><expr><name>digestVersion</name></expr></argument>, <argument><expr><name>acceptsTransient</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>, <argument><expr><name>columnFilter</name></expr></argument>, <argument><expr><name>rowFilter</name></expr></argument>, <argument><expr><name>limits</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataRange</name></name> <operator>=</operator> <name>dataRange</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PartitionRangeReadCommand</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>,
                                                   <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>,
                                                   <parameter><decl><type><name>ColumnFilter</name></type> <name>columnFilter</name></decl></parameter>,
                                                   <parameter><decl><type><name>RowFilter</name></type> <name>rowFilter</name></decl></parameter>,
                                                   <parameter><decl><type><name>DataLimits</name></type> <name>limits</name></decl></parameter>,
                                                   <parameter><decl><type><name>DataRange</name></type> <name>dataRange</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>PartitionRangeReadCommand</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>,
                                             <argument><expr><literal type="number">0</literal></expr></argument>,
                                             <argument><expr><literal type="boolean">false</literal></expr></argument>,
                                             <argument><expr><name>metadata</name></expr></argument>,
                                             <argument><expr><name>nowInSec</name></expr></argument>,
                                             <argument><expr><name>columnFilter</name></expr></argument>,
                                             <argument><expr><name>rowFilter</name></expr></argument>,
                                             <argument><expr><name>limits</name></expr></argument>,
                                             <argument><expr><name>dataRange</name></expr></argument>,
                                             <argument><expr><call><name>findIndex</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>rowFilter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a new read command that query all the data in the table.
     *
     * @param metadata the table to query.
     * @param nowInSec the time in seconds to use are "now" for this query.
     *
     * @return a newly created read command that queries everything in the table.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PartitionRangeReadCommand</name></type> <name>allDataRead</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>PartitionRangeReadCommand</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>,
                                             <argument><expr><literal type="number">0</literal></expr></argument>,
                                             <argument><expr><literal type="boolean">false</literal></expr></argument>,
                                             <argument><expr><name>metadata</name></expr></argument>,
                                             <argument><expr><name>nowInSec</name></expr></argument>,
                                             <argument><expr><call><name><name>ColumnFilter</name><operator>.</operator><name>all</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name><name>RowFilter</name><operator>.</operator><name>NONE</name></name></expr></argument>,
                                             <argument><expr><name><name>DataLimits</name><operator>.</operator><name>NONE</name></name></expr></argument>,
                                             <argument><expr><call><name><name>DataRange</name><operator>.</operator><name>allData</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>DataRange</name></type> <name>dataRange</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>dataRange</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ClusteringIndexFilter</name></type> <name>clusteringIndexFilter</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>dataRange</name><operator>.</operator><name>clusteringIndexFilter</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNamesQuery</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>dataRange</name><operator>.</operator><name>isNamesQuery</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns an equivalent command but that only queries data within the provided range.
     *
     * @param range the sub-range to restrict the command to. This method &lt;b&gt;assumes&lt;/b&gt; that this is a proper sub-range
     * of the command this is applied to.
     * @param isRangeContinuation whether {@code range} is a direct continuation of whatever previous range we have
     * queried. This matters for the {@code DataLimits} that may contain states when we do paging and in the context of
     * parallel queries: that state only make sense if the range queried is indeed the follow-up of whatever range we've
     * previously query (that yield said state). In practice this means that ranges for which {@code isRangeContinuation}
     * is false may have to be slightly pessimistic when counting data and may include a little bit than necessary, and
     * this should be dealt with post-query (in the case of {@code StorageProxy.getRangeSlice()}, which uses this method
     * for replica queries, this is dealt with by re-counting results on the coordinator). Note that if this is the
     * first range we queried, then the {@code DataLimits} will have not state and the value of this parameter doesn't
     * matter.
     */</comment>
    <function><type><specifier>public</specifier> <name>PartitionRangeReadCommand</name></type> <name>forSubRange</name><parameter_list>(<parameter><decl><type><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>PartitionPosition</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isRangeContinuation</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// If we're not a continuation of whatever range we've previously queried, we should ignore the states of the</comment>
        <comment type="line">// DataLimits as it's either useless, or misleading. This is particularly important for GROUP BY queries, where</comment>
        <comment type="line">// DataLimits.CQLGroupByLimits.GroupByAwareCounter assumes that if GroupingState.hasClustering(), then we're in</comment>
        <comment type="line">// the middle of a group, but we can't make that assumption if we query and range "in advance" of where we are</comment>
        <comment type="line">// on the ring.</comment>
        <return>return <expr><operator>new</operator> <call><name>PartitionRangeReadCommand</name><argument_list>(<argument><expr><call><name>isDigestQuery</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>digestVersion</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>acceptsTransient</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>columnFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>rowFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><ternary><condition><expr><name>isRangeContinuation</name></expr> ?</condition><then> <expr><call><name>limits</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>limits</name><argument_list>()</argument_list></call><operator>.</operator><call><name>withoutState</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                                             <argument><expr><call><name>dataRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>forSubRange</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>indexMetadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>PartitionRangeReadCommand</name></type> <name>copy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>PartitionRangeReadCommand</name><argument_list>(<argument><expr><call><name>isDigestQuery</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>digestVersion</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>acceptsTransient</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>columnFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>rowFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>limits</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>dataRange</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>indexMetadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>PartitionRangeReadCommand</name></type> <name>copyAsDigestQuery</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>PartitionRangeReadCommand</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>,
                                             <argument><expr><call><name>digestVersion</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><literal type="boolean">false</literal></expr></argument>,
                                             <argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>columnFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>rowFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>limits</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>dataRange</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>indexMetadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>PartitionRangeReadCommand</name></type> <name>copyAsTransientQuery</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>PartitionRangeReadCommand</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>,
                                             <argument><expr><literal type="number">0</literal></expr></argument>,
                                             <argument><expr><literal type="boolean">true</literal></expr></argument>,
                                             <argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>columnFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>rowFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>limits</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>dataRange</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>indexMetadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>PartitionRangeReadCommand</name></type> <name>withUpdatedLimit</name><parameter_list>(<parameter><decl><type><name>DataLimits</name></type> <name>newLimits</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>PartitionRangeReadCommand</name><argument_list>(<argument><expr><call><name>isDigestQuery</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>digestVersion</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>acceptsTransient</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>columnFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>rowFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><name>newLimits</name></expr></argument>,
                                             <argument><expr><call><name>dataRange</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>indexMetadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>PartitionRangeReadCommand</name></type> <name>withUpdatedLimitsAndDataRange</name><parameter_list>(<parameter><decl><type><name>DataLimits</name></type> <name>newLimits</name></decl></parameter>, <parameter><decl><type><name>DataRange</name></type> <name>newDataRange</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>PartitionRangeReadCommand</name><argument_list>(<argument><expr><call><name>isDigestQuery</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>digestVersion</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>acceptsTransient</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>columnFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>rowFilter</name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><name>newLimits</name></expr></argument>,
                                             <argument><expr><name>newDataRange</name></expr></argument>,
                                             <argument><expr><call><name>indexMetadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRangeRpcTimeout</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isReversed</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>dataRange</name><operator>.</operator><name>isReversed</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>PartitionIterator</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistency</name></decl></parameter>, <parameter><decl><type><name>ClientState</name></type> <name>clientState</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name><name>StorageProxy</name><operator>.</operator><name>getRangeSlice</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>consistency</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>recordLatency</name><parameter_list>(<parameter><decl><type><name>TableMetrics</name></type> <name>metric</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>latencyNanos</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>metric</name><operator>.</operator><name>rangeLatency</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><name>latencyNanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>UnfilteredPartitionIterator</name></type> <name>queryStorage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>, <parameter><decl><type><name>ReadExecutionController</name></type> <name>controller</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>ColumnFamilyStore</name><operator>.</operator><name>ViewFragment</name></name></type> <name>view</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><call><name><name>View</name><operator>.</operator><name>selectLive</name></name><argument_list>(<argument><expr><call><name>dataRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>keyRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Executing seq scan across {} sstables for {}"</literal></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>sstables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>dataRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>keyRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name>partitionKeyType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// fetch data from current memtable, historical memtables, and SSTables in the correct order.</comment>
        <decl_stmt><decl><type><name><name>InputCollector</name><argument_list type="generic">&lt;<argument><name>UnfilteredPartitionIterator</name></argument>&gt;</argument_list></name></type> <name>inputCollector</name> <init>= <expr><call><name>iteratorsForRange</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>controller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Memtable</name></type> <name>memtable</name> <range>: <expr><name><name>view</name><operator>.</operator><name>memtables</name></name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation> <comment type="line">// We close on exception and on closing the result returned by this method</comment>
                <type><name><name>Memtable</name><operator>.</operator><name>MemtableUnfilteredPartitionIterator</name></name></type> <name>iter</name> <init>= <expr><call><name><name>memtable</name><operator>.</operator><name>makePartitionIterator</name></name><argument_list>(<argument><expr><call><name>columnFilter</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>dataRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>updateMinOldestUnrepairedTombstone</name></name><argument_list>(<argument><expr><call><name><name>iter</name><operator>.</operator><name>getMinLocalDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>inputCollector</name><operator>.</operator><name>addMemtableIterator</name></name><argument_list>(<argument><expr><call><name><name>RTBoundValidator</name><operator>.</operator><name>validate</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name><name>RTBoundValidator</name><operator>.</operator><name>Stage</name><operator>.</operator><name>MEMTABLE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name>SSTableReadsListener</name></type> <name>readCountUpdater</name> <init>= <expr><call><name>newReadCountUpdater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name><name>view</name><operator>.</operator><name>sstables</name></name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation> <comment type="line">// We close on exception and on closing the result returned by this method</comment>
                <type><name>UnfilteredPartitionIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>sstable</name><operator>.</operator><name>getScanner</name></name><argument_list>(<argument><expr><call><name>columnFilter</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>dataRange</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>readCountUpdater</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>inputCollector</name><operator>.</operator><name>addSSTableIterator</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><call><name><name>RTBoundValidator</name><operator>.</operator><name>validate</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name><name>RTBoundValidator</name><operator>.</operator><name>Stage</name><operator>.</operator><name>SSTABLE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sstable</name><operator>.</operator><name>isRepaired</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>updateMinOldestUnrepairedTombstone</name></name><argument_list>(<argument><expr><call><name><name>sstable</name><operator>.</operator><name>getMinLocalDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <comment type="line">// iterators can be empty for offline tools</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>inputCollector</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>EmptyIterators</name><operator>.</operator><name>unfilteredPartition</name></name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><call><name>checkCacheFilter</name><argument_list>(<argument><expr><call><name><name>UnfilteredPartitionIterators</name><operator>.</operator><name>mergeLazily</name></name><argument_list>(<argument><expr><call><name><name>inputCollector</name><operator>.</operator><name>finalizeIterators</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>controller</name><operator>.</operator><name>oldestUnrepairedTombstone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> | <type><name>Error</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>inputCollector</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e1</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>addSuppressed</name></name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a new {@code SSTableReadsListener} to update the SSTables read counts.
     * @return a new {@code SSTableReadsListener} to update the SSTables read counts.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>SSTableReadsListener</name></type> <name>newReadCountUpdater</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <class><super><name>SSTableReadsListener</name></super><argument_list>()</argument_list>
                <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onScanningStarted</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>sstable</name><operator>.</operator><name>incrementReadCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>
                }</block></class></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>UnfilteredPartitionIterator</name></type> <name>checkCacheFilter</name><parameter_list>(<parameter><decl><type><name>UnfilteredPartitionIterator</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <class>class <name>CacheFilter</name> <super_list><extends>extends <super><name><name>Transformation</name><argument_list type="generic">&lt;<argument><name><name>BaseRowIterator</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super></extends></super_list>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name><name>BaseRowIterator</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>applyToPartition</name><parameter_list>(<parameter><decl><type><name><name>BaseRowIterator</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <comment type="line">// Note that we rely on the fact that until we actually advance 'iter', no really costly operation is actually done</comment>
                <comment type="line">// (except for reading the partition key from the index file) due to the call to mergeLazily in queryStorage.</comment>
                <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>dk</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Check if this partition is in the rowCache and if it is, if  it covers our filter</comment>
                <decl_stmt><decl><type><name>CachedPartition</name></type> <name>cached</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>getRawCachedPartition</name></name><argument_list>(<argument><expr><name>dk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ClusteringIndexFilter</name></type> <name>filter</name> <init>= <expr><call><name>dataRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>clusteringIndexFilter</name><argument_list>(<argument><expr><name>dk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>cached</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cfs</name><operator>.</operator><name>isFilterFullyCoveredBy</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>,
                                                                 <argument><expr><call><name>limits</name><argument_list>()</argument_list></call></expr></argument>,
                                                                 <argument><expr><name>cached</name></expr></argument>,
                                                                 <argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>,
                                                                 <argument><expr><call><name><name>iter</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>enforceStrictLiveness</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// We won't use 'iter' so close it now.</comment>
                    <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <return>return <expr><call><name><name>filter</name><operator>.</operator><name>getUnfilteredRowIterator</name></name><argument_list>(<argument><expr><call><name>columnFilter</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cached</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <return>return <expr><name>iter</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
        <return>return <expr><call><name><name>Transformation</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CacheFilter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Verb</name></type> <name>verb</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>Verb</name><operator>.</operator><name>RANGE_REQ</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>appendCQLWhereClause</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>sb</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>dataRange</name><operator>.</operator><name>isUnrestricted</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>rowFilter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" WHERE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// We put the row filter first because the data range can end by "ORDER BY"</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rowFilter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>rowFilter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dataRange</name><operator>.</operator><name>isUnrestricted</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" AND "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dataRange</name><operator>.</operator><name>isUnrestricted</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>dataRange</name><operator>.</operator><name>toCQLString</name></name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Allow to post-process the result of the query after it has been reconciled on the coordinator
     * but before it is passed to the CQL layer to return the ResultSet.
     *
     * See CASSANDRA-8717 for why this exists.
     */</comment>
    <function><type><specifier>public</specifier> <name>PartitionIterator</name></type> <name>postReconciliationProcessing</name><parameter_list>(<parameter><decl><type><name>PartitionIterator</name></type> <name>result</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>index</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><call><name><name>index</name><operator>.</operator><name>postProcessorFor</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Read(%s columns=%s rowfilter=%s limits=%s %s)"</literal></expr></argument>,
                             <argument><expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name>columnFilter</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name>rowFilter</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name>limits</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name>dataRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>serializeSelection</name><parameter_list>(<parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DataRange</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><call><name>dataRange</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>long</name></type> <name>selectionSerializedSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DataRange</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><call><name>dataRange</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * We are currently using PartitionRangeReadCommand for most index queries, even if they are explicitly restricted
     * to a single partition key. Return true if that is the case.
     *
     * See CASSANDRA-11617 and CASSANDRA-11872 for details.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLimitedToOnePartition</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>dataRange</name><operator>.</operator><name>keyRange</name></name> <operator>instanceof</operator> <name>Bounds</name>
            <operator>&amp;&amp;</operator> <call><name><name>dataRange</name><operator>.</operator><name>startKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>kind</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>PartitionPosition</name><operator>.</operator><name>Kind</name><operator>.</operator><name>ROW_KEY</name></name>
            <operator>&amp;&amp;</operator> <call><name><name>dataRange</name><operator>.</operator><name>startKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>dataRange</name><operator>.</operator><name>stopKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeRequest</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>Deserializer</name> <super_list><extends>extends <super><name>SelectionDeserializer</name></super></extends></super_list>
    <block>{
        <function><type><specifier>public</specifier> <name>ReadCommand</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>,
                                       <parameter><decl><type><name>boolean</name></type> <name>isDigest</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>digestVersion</name></decl></parameter>,
                                       <parameter><decl><type><name>boolean</name></type> <name>acceptsTransient</name></decl></parameter>,
                                       <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>,
                                       <parameter><decl><type><name>ColumnFilter</name></type> <name>columnFilter</name></decl></parameter>,
                                       <parameter><decl><type><name>RowFilter</name></type> <name>rowFilter</name></decl></parameter>,
                                       <parameter><decl><type><name>DataLimits</name></type> <name>limits</name></decl></parameter>,
                                       <parameter><decl><type><name>IndexMetadata</name></type> <name>index</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>DataRange</name></type> <name>range</name> <init>= <expr><call><name><name>DataRange</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>PartitionRangeReadCommand</name><argument_list>(<argument><expr><name>isDigest</name></expr></argument>, <argument><expr><name>digestVersion</name></expr></argument>, <argument><expr><name>acceptsTransient</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>, <argument><expr><name>columnFilter</name></expr></argument>, <argument><expr><name>rowFilter</name></expr></argument>, <argument><expr><name>limits</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
