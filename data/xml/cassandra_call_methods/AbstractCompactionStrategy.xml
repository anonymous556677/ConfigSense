<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/compaction/AbstractCompactionStrategy.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Directories</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SerializationHeader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LifecycleNewTracker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Descriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>SSTableMultiWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>SimpleSSTableMultiWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LifecycleTransaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Component</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>ISSTableScanner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataCollector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>StatsMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>CompactionParams</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Pluggable compaction strategy determines how SSTables get merged.
 *
 * There are two main goals:
 *  - perform background compaction constantly as needed; this typically makes a tradeoff between
 *    i/o done by compaction, and merging done at read time.
 *  - perform a full (maximum possible) compaction if requested by the user
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractCompactionStrategy</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AbstractCompactionStrategy</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>DEFAULT_TOMBSTONE_THRESHOLD</name> <init>= <expr><literal type="number">0.2f</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// minimum interval needed to perform tombstone removal compaction in seconds, default 86400 or 1 day.</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DEFAULT_TOMBSTONE_COMPACTION_INTERVAL</name> <init>= <expr><literal type="number">86400</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_UNCHECKED_TOMBSTONE_COMPACTION_OPTION</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_LOG_ALL_OPTION</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TOMBSTONE_THRESHOLD_OPTION</name> <init>= <expr><literal type="string">"tombstone_threshold"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TOMBSTONE_COMPACTION_INTERVAL_OPTION</name> <init>= <expr><literal type="string">"tombstone_compaction_interval"</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// disable range overlap check when deciding if an SSTable is candidate for tombstone compaction (CASSANDRA-6563)</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNCHECKED_TOMBSTONE_COMPACTION_OPTION</name> <init>= <expr><literal type="string">"unchecked_tombstone_compaction"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LOG_ALL_OPTION</name> <init>= <expr><literal type="string">"log_all"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMPACTION_ENABLED</name> <init>= <expr><literal type="string">"enabled"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ONLY_PURGE_REPAIRED_TOMBSTONES</name> <init>= <expr><literal type="string">"only_purge_repaired_tombstones"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>tombstoneThreshold</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>tombstoneCompactionInterval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>uncheckedTombstoneCompaction</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>disableTombstoneCompactions</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>logAll</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Directories</name></type> <name>directories</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * pause/resume/getNextBackgroundTask must synchronize.  This guarantees that after pause completes,
     * no new tasks will be generated; or put another way, pause can't run until in-progress tasks are
     * done being created.
     *
     * This allows runWithCompactionsDisabled to be confident that after pausing, once in-progress
     * tasks abort, it's safe to proceed with truncate/cleanup/etc.
     *
     * See CASSANDRA-3430
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>isActive</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>AbstractCompactionStrategy</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>cfs</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfs</name></name> <operator>=</operator> <name>cfs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* checks must be repeated here, as user supplied strategies might not call validateOptions directly */</comment>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>validateOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>optionValue</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TOMBSTONE_THRESHOLD_OPTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>tombstoneThreshold</name> <operator>=</operator> <ternary><condition><expr><name>optionValue</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>DEFAULT_TOMBSTONE_THRESHOLD</name></expr> </then><else>: <expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>optionValue</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>optionValue</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TOMBSTONE_COMPACTION_INTERVAL_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tombstoneCompactionInterval</name> <operator>=</operator> <ternary><condition><expr><name>optionValue</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>DEFAULT_TOMBSTONE_COMPACTION_INTERVAL</name></expr> </then><else>: <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>optionValue</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>optionValue</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>UNCHECKED_TOMBSTONE_COMPACTION_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>uncheckedTombstoneCompaction</name> <operator>=</operator> <ternary><condition><expr><name>optionValue</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>DEFAULT_UNCHECKED_TOMBSTONE_COMPACTION_OPTION</name></expr> </then><else>: <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name>optionValue</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>optionValue</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>LOG_ALL_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>logAll</name> <operator>=</operator> <ternary><condition><expr><name>optionValue</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>DEFAULT_LOG_ALL_OPTION</name></expr> </then><else>: <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name>optionValue</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Error setting compaction strategy options ({}), defaults will be used"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tombstoneThreshold</name> <operator>=</operator> <name>DEFAULT_TOMBSTONE_THRESHOLD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>tombstoneCompactionInterval</name> <operator>=</operator> <name>DEFAULT_TOMBSTONE_COMPACTION_INTERVAL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>uncheckedTombstoneCompaction</name> <operator>=</operator> <name>DEFAULT_UNCHECKED_TOMBSTONE_COMPACTION_OPTION</name></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><name>directories</name> <operator>=</operator> <call><name><name>cfs</name><operator>.</operator><name>getDirectories</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>Directories</name></type> <name>getDirectories</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>directories</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * For internal, temporary suspension of background compactions so that we can do exceptional
     * things like truncate or major compaction
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>pause</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>isActive</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * For internal, temporary suspension of background compactions so that we can do exceptional
     * things like truncate or major compaction
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>resume</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>isActive</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Performs any extra initialization required
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>startup</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>isActive</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Releases any resources if this strategy is shutdown (when the CFS is reloaded after a schema change).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>shutdown</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>isActive</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param gcBefore throw away tombstones older than this
     *
     * @return the next background/minor compaction task to run; null if nothing to do.
     *
     * Is responsible for marking its sstables as compaction-pending.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>AbstractCompactionTask</name></type> <name>getNextBackgroundTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>gcBefore</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @param gcBefore throw away tombstones older than this
     *
     * @return a compaction task that should be run to compact this columnfamilystore
     * as much as possible.  Null if nothing to do.
     *
     * Is responsible for marking its sstables as compaction-pending.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AbstractCompactionTask</name></argument>&gt;</argument_list></name></type> <name>getMaximalTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>gcBefore</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>splitOutput</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @param sstables SSTables to compact. Must be marked as compacting.
     * @param gcBefore throw away tombstones older than this
     *
     * @return a compaction task corresponding to the requested sstables.
     * Will not be null. (Will throw if user requests an invalid compaction.)
     *
     * Is responsible for marking its sstables as compaction-pending.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>AbstractCompactionTask</name></type> <name>getUserDefinedTask</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>gcBefore</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>AbstractCompactionTask</name></type> <name>getCompactionTask</name><parameter_list>(<parameter><decl><type><name>LifecycleTransaction</name></type> <name>txn</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>gcBefore</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxSSTableBytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>CompactionTask</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the number of background tasks estimated to still be needed for this columnfamilystore
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>getEstimatedRemainingTasks</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return size in bytes of the largest sstables for this strategy
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>getMaxSSTableBytes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Filters SSTables that are to be excluded from the given collection
     *
     * @param originalCandidates The collection to check for excluded SSTables
     * @return list of the SSTables with excluded ones filtered out
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>filterSuspectSSTables</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>originalCandidates</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>filtered</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>originalCandidates</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sstable</name><operator>.</operator><name>isMarkedSuspect</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>filtered</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>filtered</name></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name>ScannerList</name></type> <name>getScanners</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>, <parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>range</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name>getScanners</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>, <argument><expr><operator>(</operator><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><operator>)</operator><literal type="null">null</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>getScanners</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>
    <comment type="block" format="javadoc">/**
     * Returns a list of KeyScanners given sstables and a range on which to scan.
     * The default implementation simply grab one SSTableScanner per-sstable, but overriding this method
     * allow for a more memory efficient solution if we know the sstable don't overlap (see
     * LeveledCompactionStrategy for instance).
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>ScannerList</name></type> <name>getScanners</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ISSTableScanner</name></argument>&gt;</argument_list></name></type> <name>scanners</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ISSTableScanner</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>sstables</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>scanners</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>sstable</name><operator>.</operator><name>getScanner</name></name><argument_list>(<argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>ISSTableScanner</name><operator>.</operator><name>closeAllAndPropagate</name></name><argument_list>(<argument><expr><name>scanners</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><operator>new</operator> <call><name>ScannerList</name><argument_list>(<argument><expr><name>scanners</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Replaces sstables in the compaction strategy
     *
     * Note that implementations must be able to handle duplicate notifications here (that removed are already gone and
     * added have already been added)
     * */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>replaceSSTables</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>removed</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>added</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>remove</name> <range>: <expr><name>removed</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>removeSSTable</name><argument_list>(<argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>addSSTables</name><argument_list>(<argument><expr><name>added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Adds sstable, note that implementations must handle duplicate notifications here (added already being in the compaction strategy)
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>addSSTable</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>added</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Adds sstables, note that implementations must handle duplicate notifications here (added already being in the compaction strategy)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addSSTables</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>added</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>added</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addSSTable</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes sstable from the strategy, implementations must be able to handle the sstable having already been removed.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>removeSSTable</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Removes sstables from the strategy, implementations must be able to handle the sstables having already been removed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSSTables</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>removed</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>removed</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>removeSSTable</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the sstables managed by this strategy instance
     */</comment>
    <function_decl><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>protected</specifier> <specifier>abstract</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>getSSTables</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called when the metadata has changed for an sstable - for example if the level changed
     *
     * Not called when repair status changes (which is also metadata), because this results in the
     * sstable getting removed from the compaction strategy instance.
     *
     * @param oldMetadata
     * @param sstable
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>metadataChanged</name><parameter_list>(<parameter><decl><type><name>StatsMetadata</name></type> <name>oldMetadata</name></decl></parameter>, <parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ScannerList</name> <super_list><implements>implements <super><name>AutoCloseable</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ISSTableScanner</name></argument>&gt;</argument_list></name></type> <name>scanners</name></decl>;</decl_stmt>
        <constructor><specifier>public</specifier> <name>ScannerList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ISSTableScanner</name></argument>&gt;</argument_list></name></type> <name>scanners</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scanners</name></name> <operator>=</operator> <name>scanners</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>getTotalBytesScanned</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>bytesScanned</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>isize</name><init>=<expr><call><name><name>scanners</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>isize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name>bytesScanned</name> <operator>+=</operator> <call><name><name>scanners</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytesScanned</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <return>return <expr><name>bytesScanned</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>getTotalCompressedSize</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>compressedSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>isize</name><init>=<expr><call><name><name>scanners</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>isize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name>compressedSize</name> <operator>+=</operator> <call><name><name>scanners</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCompressedLengthInBytes</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <return>return <expr><name>compressedSize</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>double</name></type> <name>getCompressionRatio</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>compressed</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>uncompressed</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>isize</name><init>=<expr><call><name><name>scanners</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>isize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
                <type><name>ISSTableScanner</name></type> <name>scanner</name> <init>= <expr><call><name><name>scanners</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>compressed</name> <operator>+=</operator> <call><name><name>scanner</name><operator>.</operator><name>getCompressedLengthInBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>uncompressed</name> <operator>+=</operator> <call><name><name>scanner</name><operator>.</operator><name>getLengthInBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><name>compressed</name> <operator>==</operator> <name>uncompressed</name> <operator>||</operator> <name>uncompressed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name><name>MetadataCollector</name><operator>.</operator><name>NO_COMPRESSION_RATIO</name></name></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><name>compressed</name> <operator>/</operator> <name>uncompressed</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>ISSTableScanner</name><operator>.</operator><name>closeAllAndPropagate</name></name><argument_list>(<argument><expr><name>scanners</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name>ScannerList</name></type> <name>getScanners</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>toCompact</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getScanners</name><argument_list>(<argument><expr><name>toCompact</name></expr></argument>, <argument><expr><operator>(</operator><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><operator>)</operator><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if given sstable is worth dropping tombstones at gcBefore.
     * Check is skipped if tombstone_compaction_interval time does not elapse since sstable creation and returns false.
     *
     * @param sstable SSTable to check
     * @param gcBefore time to drop tombstones
     * @return true if given sstable's tombstones are expected to be removed
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>worthDroppingTombstones</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gcBefore</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>disableTombstoneCompactions</name> <operator>||</operator> <name><name>CompactionController</name><operator>.</operator><name>NEVER_PURGE_TOMBSTONES</name></name> <operator>||</operator> <call><name><name>cfs</name><operator>.</operator><name>getNeverPurgeTombstones</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="line">// since we use estimations to calculate, there is a chance that compaction will not drop tombstones actually.</comment>
        <comment type="line">// if that happens we will end up in infinite compaction loop, so first we check enough if enough time has</comment>
        <comment type="line">// elapsed since SSTable created.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>sstable</name><operator>.</operator><name>getCreationTimeFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>tombstoneCompactionInterval</name> <operator>*</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>droppableRatio</name> <init>= <expr><call><name><name>sstable</name><operator>.</operator><name>getEstimatedDroppableTombstoneRatio</name></name><argument_list>(<argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>droppableRatio</name> <operator>&lt;=</operator> <name>tombstoneThreshold</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">//sstable range overlap check is disabled. See CASSANDRA-6563.</comment>
        <if_stmt><if>if <condition>(<expr><name>uncheckedTombstoneCompaction</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>overlaps</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>getOverlappingLiveSSTables</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>overlaps</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// there is no overlap, tombstones are safely droppable</comment>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>CompactionController</name><operator>.</operator><name>getFullyExpiredSSTables</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>overlaps</name></expr></argument>, <argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// what percentage of columns do we expect to compact outside of overlap?</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>sstable</name><operator>.</operator><name>getIndexSummarySize</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// we have too few samples to estimate correct percentage</comment>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// first, calculate estimated keys that do not overlap</comment>
            <decl_stmt><decl><type><name>long</name></type> <name>keys</name> <init>= <expr><call><name><name>sstable</name><operator>.</operator><name>estimatedKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>overlaps</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>overlap</name> <range>: <expr><name>overlaps</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>overlap</name><operator>.</operator><name>first</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>overlap</name><operator>.</operator><name>last</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <decl_stmt><decl><type><name>long</name></type> <name>remainingKeys</name> <init>= <expr><name>keys</name> <operator>-</operator> <call><name><name>sstable</name><operator>.</operator><name>estimatedKeysForRanges</name></name><argument_list>(<argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// next, calculate what percentage of columns we have within those keys</comment>
            <decl_stmt><decl><type><name>long</name></type> <name>columns</name> <init>= <expr><call><name><name>sstable</name><operator>.</operator><name>getEstimatedCellPerPartitionCount</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mean</name><argument_list>()</argument_list></call> <operator>*</operator> <name>remainingKeys</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>remainingColumnsRatio</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>columns</name><operator>)</operator> <operator>/</operator> <operator>(</operator><call><name><name>sstable</name><operator>.</operator><name>getEstimatedCellPerPartitionCount</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>sstable</name><operator>.</operator><name>getEstimatedCellPerPartitionCount</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mean</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

            <comment type="line">// return if we still expect to have droppable tombstones in rest of columns</comment>
            <return>return <expr><name>remainingColumnsRatio</name> <operator>*</operator> <name>droppableRatio</name> <operator>&gt;</operator> <name>tombstoneThreshold</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>validateOptions</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>threshold</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TOMBSTONE_THRESHOLD_OPTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>threshold</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>thresholdValue</name> <init>= <expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>thresholdValue</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s must be greater than 0, but was %f"</literal></expr></argument>, <argument><expr><name>TOMBSTONE_THRESHOLD_OPTION</name></expr></argument>, <argument><expr><name>thresholdValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s is not a parsable int (base10) for %s"</literal></expr></argument>, <argument><expr><name>threshold</name></expr></argument>, <argument><expr><name>TOMBSTONE_THRESHOLD_OPTION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>interval</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>TOMBSTONE_COMPACTION_INTERVAL_OPTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>interval</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>tombstoneCompactionInterval</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>tombstoneCompactionInterval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s must be greater than 0, but was %d"</literal></expr></argument>, <argument><expr><name>TOMBSTONE_COMPACTION_INTERVAL_OPTION</name></expr></argument>, <argument><expr><name>tombstoneCompactionInterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s is not a parsable int (base10) for %s"</literal></expr></argument>, <argument><expr><name>interval</name></expr></argument>, <argument><expr><name>TOMBSTONE_COMPACTION_INTERVAL_OPTION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>unchecked</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>UNCHECKED_TOMBSTONE_COMPACTION_OPTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>unchecked</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>unchecked</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>unchecked</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"'%s' should be either 'true' or 'false', not '%s'"</literal></expr></argument>, <argument><expr><name>UNCHECKED_TOMBSTONE_COMPACTION_OPTION</name></expr></argument>, <argument><expr><name>unchecked</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>logAll</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>LOG_ALL_OPTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>logAll</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>logAll</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>logAll</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"'%s' should either be 'true' or 'false', not %s"</literal></expr></argument>, <argument><expr><name>LOG_ALL_OPTION</name></expr></argument>, <argument><expr><name>logAll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>compactionEnabled</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>COMPACTION_ENABLED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>compactionEnabled</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>compactionEnabled</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>compactionEnabled</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"enabled should either be 'true' or 'false', not %s"</literal></expr></argument>, <argument><expr><name>compactionEnabled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>uncheckedOptions</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>uncheckedOptions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>TOMBSTONE_THRESHOLD_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>uncheckedOptions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>TOMBSTONE_COMPACTION_INTERVAL_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>uncheckedOptions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>UNCHECKED_TOMBSTONE_COMPACTION_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>uncheckedOptions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>LOG_ALL_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>uncheckedOptions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>COMPACTION_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>uncheckedOptions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>ONLY_PURGE_REPAIRED_TOMBSTONES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>uncheckedOptions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>CompactionParams</name><operator>.</operator><name>Option</name><operator>.</operator><name>PROVIDE_OVERLAPPING_TOMBSTONES</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>uncheckedOptions</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Method for grouping similar SSTables together, This will be used by
     * anti-compaction to determine which SSTables should be anitcompacted
     * as a group. If a given compaction strategy creates sstables which
     * cannot be merged due to some constraint it must override this method.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>groupSSTablesForAntiCompaction</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstablesToGroup</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>groupSize</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sortedSSTablesToGroup</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>sstablesToGroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>sortedSSTablesToGroup</name></expr></argument>, <argument><expr><name><name>SSTableReader</name><operator>.</operator><name>sstableComparator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>groupedSSTables</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>currGroup</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>groupSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>sortedSSTablesToGroup</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>currGroup</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>currGroup</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>groupSize</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>groupedSSTables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>currGroup</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>groupSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>currGroup</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>groupedSSTables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>groupedSSTables</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>CompactionLogger</name><operator>.</operator><name>Strategy</name></name></type> <name>strategyLogger</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>CompactionLogger</name><operator>.</operator><name>Strategy</name><operator>.</operator><name>none</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SSTableMultiWriter</name></type> <name>createSSTableMultiWriter</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                                                       <parameter><decl><type><name>long</name></type> <name>keyCount</name></decl></parameter>,
                                                       <parameter><decl><type><name>long</name></type> <name>repairedAt</name></decl></parameter>,
                                                       <parameter><decl><type><name>UUID</name></type> <name>pendingRepair</name></decl></parameter>,
                                                       <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>,
                                                       <parameter><decl><type><name>MetadataCollector</name></type> <name>meta</name></decl></parameter>,
                                                       <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>,
                                                       <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name></decl></parameter>,
                                                       <parameter><decl><type><name>LifecycleNewTracker</name></type> <name>lifecycleNewTracker</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>SimpleSSTableMultiWriter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>keyCount</name></expr></argument>, <argument><expr><name>repairedAt</name></expr></argument>, <argument><expr><name>pendingRepair</name></expr></argument>, <argument><expr><name>isTransient</name></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>indexes</name></expr></argument>, <argument><expr><name>lifecycleNewTracker</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>supportsEarlyOpen</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
