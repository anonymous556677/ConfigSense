<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/concurrent/Ref.java"><comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>PhantomReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>Reference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>ReferenceQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Modifier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicIntegerFieldUpdater</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>InfiniteLoopExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>NamedThreadFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Keyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>Memory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>SafeMemory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExecutorUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NoSpamLogger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>cliffc</name><operator>.</operator><name>high_scale_lib</name><operator>.</operator><name>NonBlockingHashMap</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>emptyList</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExecutorUtils</name><operator>.</operator><name>awaitTermination</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExecutorUtils</name><operator>.</operator><name>shutdownNow</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Throwables</name><operator>.</operator><name>maybeFail</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Throwables</name><operator>.</operator><name>merge</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An object that needs ref counting does the two following:
 *   - defines a Tidy object that will cleanup once it's gone,
 *     (this must retain no references to the object we're tracking (only its resources and how to clean up))
 * Then, one of two options:
 * 1) Construct a Ref directly pointing to it, and always use this Ref; or
 * 2)
 *   - implements RefCounted
 *   - encapsulates a Ref, we'll call selfRef, to which it proxies all calls to RefCounted behaviours
 *   - users must ensure no references to the selfRef leak, or are retained outside of a method scope.
 *     (to ensure the selfRef is collected with the object, so that leaks may be detected and corrected)
 *
 * This class' functionality is achieved by what may look at first glance like a complex web of references,
 * but boils down to:
 *
 * {@code
 * Target --&gt; selfRef --&gt; [Ref.State] &lt;--&gt; Ref.GlobalState --&gt; Tidy
 *                                             ^
 *                                             |
 * Ref ----------------------------------------
 *                                             |
 * Global -------------------------------------
 * }
 * So that, if Target is collected, Impl is collected and, hence, so is selfRef.
 *
 * Once ref or selfRef are collected, the paired Ref.State's release method is called, which if it had
 * not already been called will update Ref.GlobalState and log an error.
 *
 * Once the Ref.GlobalState has been completely released, the Tidy method is called and it removes the global reference
 * to itself so it may also be collected.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name><name>Ref</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name><name>RefCounted</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Ref</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEBUG_ENABLED</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.debugrefcount"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>State</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>T</name></type> <name>referent</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Ref</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>referent</name></decl></parameter>, <parameter><decl><type><name>Tidy</name></type> <name>tidy</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <operator>new</operator> <call><name>State</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GlobalState</name><argument_list>(<argument><expr><name>tidy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>referenceQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>referent</name></name> <operator>=</operator> <name>referent</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><name>Ref</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>referent</name></decl></parameter>, <parameter><decl><type><name>GlobalState</name></type> <name>state</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <operator>new</operator> <call><name>State</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>referenceQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>referent</name></name> <operator>=</operator> <name>referent</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Must be called exactly once, when the logical operation for which this Ref was created has terminated.
     * Failure to abide by this contract will result in an error (eventually) being reported, assuming a
     * hard reference to the resource it managed is not leaked.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>release</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>release</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Throwable</name></type> <name>ensureReleased</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>state</name><operator>.</operator><name>ensureReleased</name></name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>ensureReleased</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeFail</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>ensureReleased</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ensureReleased</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>T</name></type> <name>get</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>assertNotReleased</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>referent</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Ref</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>tryRef</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name><name>state</name><operator>.</operator><name>globalState</name><operator>.</operator><name>ref</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>new</operator> <call><name><name>Ref</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>referent</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>globalState</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Ref</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ref</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ref</name> <init>= <expr><call><name>tryRef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// TODO: print the last release as well as the release here</comment>
        <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>assertNotReleased</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>ref</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>printDebugInfo</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>DEBUG_ENABLED</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>debug</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="string">"Memory was freed by "</literal> <operator>+</operator> <name><name>state</name><operator>.</operator><name>debug</name><operator>.</operator><name>deallocateThread</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="string">"Memory was freed"</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A convenience method for reporting:
     * @return the number of currently extant references globally, including the shared reference
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>globalCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>state</name><operator>.</operator><name>globalState</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// similar to Ref.GlobalState, but tracks only the management of each unique ref created to the managed object</comment>
    <comment type="line">// ensures it is only released once, and that it is always released</comment>
    <class><specifier>static</specifier> <specifier>final</specifier> class <name>State</name> <super_list><extends>extends <super><name><name>PhantomReference</name><argument_list type="generic">&lt;<argument><name>Ref</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Debug</name></type> <name>debug</name> <init>= <expr><ternary><condition><expr><name>DEBUG_ENABLED</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Debug</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>GlobalState</name></type> <name>globalState</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>released</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>AtomicIntegerFieldUpdater</name><argument_list type="generic">&lt;<argument><name>State</name></argument>&gt;</argument_list></name></type> <name>releasedUpdater</name> <init>= <expr><call><name><name>AtomicIntegerFieldUpdater</name><operator>.</operator><name>newUpdater</name></name><argument_list>(<argument><expr><name><name>State</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"released"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>State</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>GlobalState</name></type> <name>globalState</name></decl></parameter>, <parameter><decl><type><name>Ref</name></type> <name>reference</name></decl></parameter>, <parameter><decl><type><name><name>ReferenceQueue</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>Ref</name></super></argument>&gt;</argument_list></name></type> <name>q</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>reference</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>globalState</name></name> <operator>=</operator> <name>globalState</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>globalState</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>void</name></type> <name>assertNotReleased</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>DEBUG_ENABLED</name> <operator>&amp;&amp;</operator> <name>released</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>debug</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <assert>assert <expr><name>released</name> <operator>==</operator> <literal type="number">0</literal></expr>;</assert>
        </block_content>}</block></function>

        <function><type><name>Throwable</name></type> <name>ensureReleased</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>releasedUpdater</name><operator>.</operator><name>getAndSet</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name><name>globalState</name><operator>.</operator><name>release</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>DEBUG_ENABLED</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>debug</name><operator>.</operator><name>deallocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>accumulate</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>release</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>leak</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>releasedUpdater</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>leak</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"BAD RELEASE: attempted to release a reference ({}) that has already been released"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>DEBUG_ENABLED</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>debug</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Attempted to release a reference that has already been released"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Throwable</name></type> <name>fail</name> <init>= <expr><call><name><name>globalState</name><operator>.</operator><name>release</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>leak</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"LEAK DETECTED: a reference ({}) to {} was not released before the reference was garbage collected"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>globalState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>DEBUG_ENABLED</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>debug</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>DEBUG_ENABLED</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>debug</name><operator>.</operator><name>deallocate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>fail</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error when closing {}"</literal></expr></argument>, <argument><expr><name>globalState</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>static</specifier> <specifier>final</specifier> class <name>Debug</name>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>allocateThread</name></decl>, <decl><type ref="prev"/><name>deallocateThread</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>StackTraceElement</name><index>[]</index></name></type> <name>allocateTrace</name></decl>, <decl><type ref="prev"/><name>deallocateTrace</name></decl>;</decl_stmt>
        <constructor><name>Debug</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Thread</name></type> <name>thread</name> <init>= <expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>allocateThread</name> <operator>=</operator> <call><name><name>thread</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>allocateTrace</name> <operator>=</operator> <call><name><name>thread</name><operator>.</operator><name>getStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        <function><type><specifier>synchronized</specifier> <name>void</name></type> <name>deallocate</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Thread</name></type> <name>thread</name> <init>= <expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>deallocateThread</name> <operator>=</operator> <call><name><name>thread</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>deallocateTrace</name> <operator>=</operator> <call><name><name>thread</name><operator>.</operator><name>getStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
        <function><type><specifier>synchronized</specifier> <name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Allocate trace {}:\n{}"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>print</name><argument_list>(<argument><expr><name>allocateThread</name></expr></argument>, <argument><expr><name>allocateTrace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>deallocateThread</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Deallocate trace {}:\n{}"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>print</name><argument_list>(<argument><expr><name>deallocateThread</name></expr></argument>, <argument><expr><name>deallocateTrace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>
        <function><type><name>String</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name><name>StackTraceElement</name><index>[]</index></name></type> <name>trace</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>StackTraceElement</name></type> <name>element</name> <range>: <expr><name>trace</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\tat "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>element</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="line">// the object that manages the actual cleaning up; this does not reference the target object</comment>
    <comment type="line">// so that we can detect when references are lost to the resource itself, and still cleanup afterwards</comment>
    <comment type="line">// the Tidy object MUST NOT contain any references to the object we are managing</comment>
    <class><specifier>static</specifier> <specifier>final</specifier> class <name>GlobalState</name>
    <block>{
        <comment type="line">// we need to retain a reference to each of the PhantomReference instances</comment>
        <comment type="line">// we are using to track individual refs</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>State</name></argument>&gt;</argument_list></name></type> <name>locallyExtant</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentLinkedDeque</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// the number of live refs</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicInteger</name></type> <name>counts</name> <init>= <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// the object to call to cleanup when our refs are all finished with</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Tidy</name></type> <name>tidy</name></decl>;</decl_stmt>

        <constructor><name>GlobalState</name><parameter_list>(<parameter><decl><type><name>Tidy</name></type> <name>tidy</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tidy</name></name> <operator>=</operator> <name>tidy</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>globallyExtant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>void</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><operator>.</operator><name>State</name></name></type> <name>ref</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>locallyExtant</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="line">// increment ref count if not already tidied, and return success/failure</comment>
        <function><type><name>boolean</name></type> <name>ref</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><call><name><name>counts</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>cur</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>counts</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></function>

        <comment type="line">// release a single reference, and cleanup if no more are extant</comment>
        <function><type><name>Throwable</name></type> <name>release</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><operator>.</operator><name>State</name></name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>locallyExtant</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name><name>counts</name><operator>.</operator><name>decrementAndGet</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>globallyExtant</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try>try
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>tidy</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>tidy</name><operator>.</operator><name>tidy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>merge</name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>accumulate</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>int</name></type> <name>count</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name><name>counts</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>tidy</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>tidy</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"@"</literal> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>identityHashCode</name></name><argument_list>(<argument><expr><name>tidy</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>tidy</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><literal type="string">"@"</literal> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>identityHashCode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>concurrentIterableClasses</name> <init>= <expr><operator>new</operator> <name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name>
    <block>{
        <expr><name><name>ConcurrentLinkedQueue</name><operator>.</operator><name>class</name></name></expr>,
        <expr><name><name>ConcurrentLinkedDeque</name><operator>.</operator><name>class</name></name></expr>,
        <expr><name><name>ConcurrentSkipListSet</name><operator>.</operator><name>class</name></name></expr>,
        <expr><name><name>CopyOnWriteArrayList</name><operator>.</operator><name>class</name></name></expr>,
        <expr><name><name>CopyOnWriteArraySet</name><operator>.</operator><name>class</name></name></expr>,
        <expr><name><name>DelayQueue</name><operator>.</operator><name>class</name></name></expr>,
        <expr><name><name>NonBlockingHashMap</name><operator>.</operator><name>class</name></name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>concurrentIterables</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>newSetFromMap</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>IdentityHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>GlobalState</name></argument>&gt;</argument_list></name></type> <name>globallyExtant</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>newSetFromMap</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ReferenceQueue</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>referenceQueue</name> <init>= <expr><operator>new</operator> <call><name><name>ReferenceQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>InfiniteLoopExecutor</name></type> <name>EXEC</name> <init>= <expr><operator>new</operator> <call><name>InfiniteLoopExecutor</name><argument_list>(<argument><expr><literal type="string">"Reference-Reaper"</literal></expr></argument>, <argument><expr><name>Ref</name><operator>::</operator><name>reapOneReference</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>ScheduledExecutorService</name></type> <name>STRONG_LEAK_DETECTOR</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>DEBUG_ENABLED</name></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>Executors</name><operator>.</operator><name>newScheduledThreadPool</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><literal type="string">"Strong-Reference-Leak-Detector"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <static>static
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>DEBUG_ENABLED</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>STRONG_LEAK_DETECTOR</name><operator>.</operator><name>scheduleAtFixedRate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Visitor</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>STRONG_LEAK_DETECTOR</name><operator>.</operator><name>scheduleAtFixedRate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StrongLeakDetector</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>concurrentIterables</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>concurrentIterableClasses</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>reapOneReference</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>obj</name> <init>= <expr><call><name><name>referenceQueue</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name><name>Ref</name><operator>.</operator><name>State</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name><name>Ref</name><operator>.</operator><name>State</name></name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><call><name>release</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>Deque</name><argument_list type="generic">&lt;<argument><name>InProgressVisit</name></argument>&gt;</argument_list></name></type> <name>inProgressVisitPool</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayDeque</name><argument_list type="generic">&lt;<argument><name>InProgressVisit</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><block>{ <expr><literal type="string">"rawtypes"</literal></expr>, <argument><expr><literal type="string">"unchecked"</literal></expr></argument> }</block></expr></argument>)</argument_list></annotation>
    <type><specifier>static</specifier> <name>InProgressVisit</name></type> <name>newInProgressVisit</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Field</name></argument>&gt;</argument_list></name></type> <name>fields</name></decl></parameter>, <parameter><decl><type><name>Field</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>InProgressVisit</name></type> <name>ipv</name> <init>= <expr><call><name><name>inProgressVisitPool</name><operator>.</operator><name>pollLast</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ipv</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ipv</name> <operator>=</operator> <operator>new</operator> <call><name>InProgressVisit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>o</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name><name>Object</name><index>[]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>collectionIterator</name></name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator><name>o</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>ConcurrentMap</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>isMapIterator</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>collectionIterator</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Map</name><operator>)</operator><name>o</name><operator>)</operator><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>concurrentIterables</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <name>o</name> <operator>instanceof</operator> <name>BlockingQueue</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>collectionIterator</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Iterable</name><operator>)</operator><name>o</name><operator>)</operator><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>fields</name></name> <operator>=</operator> <name>fields</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>field</name></name> <operator>=</operator> <name>field</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        <return>return <expr><name>ipv</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>returnInProgressVisit</name><parameter_list>(<parameter><decl><type><name>InProgressVisit</name></type> <name>ipv</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>inProgressVisitPool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>fields</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>o</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>fieldIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>field</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>collectionIterator</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>mapEntryValue</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ipv</name><operator>.</operator><name>isMapIterator</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inProgressVisitPool</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>ipv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block">/*
     * Stack state for walking an object graph.
     * Field index is the index of the current field being fetched.
     */</comment>
    <class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><block>{ <expr><literal type="string">"rawtypes"</literal></expr>}</block></expr></argument>)</argument_list></annotation>
    <specifier>static</specifier> class <name>InProgressVisit</name>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Field</name></argument>&gt;</argument_list></name></type> <name>fields</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fieldIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Field</name></type> <name>field</name></decl>;</decl_stmt>

        <comment type="line">//Need to know if Map.Entry should be returned or traversed as an object</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isMapIterator</name></decl>;</decl_stmt>
        <comment type="line">//If o is a ConcurrentMap, BlockingQueue, or Object[], this is populated with an iterator over the contents</comment>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>collectionIterator</name></decl>;</decl_stmt>
        <comment type="line">//If o is a ConcurrentMap the entry set contains keys and values. The key is returned as the first child</comment>
        <comment type="line">//And the associated value is stashed here and returned next</comment>
        <decl_stmt><decl><type><name>Object</name></type> <name>mapEntryValue</name></decl>;</decl_stmt>

        <function><type><specifier>private</specifier> <name>Field</name></type> <name>nextField</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>fields</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>fieldIndex</name> <operator>&gt;=</operator> <call><name><name>fields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>Field</name></type> <name>retval</name> <init>= <expr><call><name><name>fields</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fieldIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>fieldIndex</name><operator>++</operator></expr>;</expr_stmt>
            <return>return <expr><name>retval</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name>Field</name></argument>&gt;</argument_list></name></type> <name>nextChild</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IllegalAccessException</name></expr></argument></throws>
        <block>{<block_content>
            <comment type="line">//If the last child returned was a key from a map, the value from that entry is stashed</comment>
            <comment type="line">//so it can be returned next</comment>
            <if_stmt><if>if <condition>(<expr><name>mapEntryValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name>Field</name></argument>&gt;</argument_list></name></type> <name>retval</name> <init>= <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>mapEntryValue</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>mapEntryValue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <return>return <expr><name>retval</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//If o is a ConcurrentMap, BlockingQueue, or Object[], then an iterator will be stored to return the elements</comment>
            <if_stmt><if>if <condition>(<expr><name>collectionIterator</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>collectionIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>nextItem</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <comment type="line">//Find the next non-null element to traverse since returning null will cause the visitor to stop</comment>
                <while>while <condition>(<expr><call><name><name>collectionIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>nextItem</name> <operator>=</operator> <call><name><name>collectionIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content/>}</block></while>
                <if_stmt><if>if <condition>(<expr><name>nextItem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>isMapIterator</name> <operator>&amp;</operator> <name>nextItem</name> <operator>instanceof</operator> <name><name>Map</name><operator>.</operator><name>Entry</name></name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name>Entry</name></name></type> <name>entry</name> <init>= <expr><operator>(</operator><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>)</operator><name>nextItem</name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>mapEntryValue</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>nextItem</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <return>return <expr><literal type="null">null</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//Basic traversal of an object by its member fields</comment>
            <comment type="line">//Don't return null values as that indicates no more objects</comment>
            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Field</name></type> <name>nextField</name> <init>= <expr><call><name>nextField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>nextField</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

                <comment type="line">//A weak reference isn't strongly reachable</comment>
                <comment type="line">//subclasses of WeakReference contain strong references in their fields, so those need to be traversed</comment>
                <comment type="line">//The weak reference fields are in the common Reference class base so filter those out</comment>
                <if_stmt><if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>WeakReference</name> <operator>&amp;</operator> <call><name><name>nextField</name><operator>.</operator><name>getDeclaringClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Reference</name><operator>.</operator><name>class</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name>Object</name></type> <name>nextObject</name> <init>= <expr><call><name><name>nextField</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>nextObject</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>nextField</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nextField</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>field</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><call><name><name>field</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>static</specifier> class <name>Visitor</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Deque</name><argument_list type="generic">&lt;<argument><name>InProgressVisit</name></argument>&gt;</argument_list></name></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayDeque</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>visited</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>newSetFromMap</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>IdentityHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation>
        <type><name>int</name></type> <name>lastVisitedCount</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation>
        <type><name>long</name></type> <name>iterations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GlobalState</name></type> <name>visiting</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>GlobalState</name></argument>&gt;</argument_list></name></type> <name>haveLoops</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>GlobalState</name></type> <name>globalState</name> <range>: <expr><name>globallyExtant</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>globalState</name><operator>.</operator><name>tidy</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue;</continue></block_content></block></if></if_stmt>

                    <comment type="line">// do a graph exploration of the GlobalState, since it should be shallow; if it references itself, we have a problem</comment>
                    <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>visited</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lastVisitedCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>iterations</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>visited</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>globalState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>visiting</name> <operator>=</operator> <name>globalState</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>traverse</name><argument_list>(<argument><expr><name><name>globalState</name><operator>.</operator><name>tidy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch>
            <finally>finally
            <block>{<block_content>
                <expr_stmt><expr><name>lastVisitedCount</name> <operator>=</operator> <call><name><name>visited</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>visited</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block></function>

        <comment type="block">/*
         * Searches for an indirect strong reference between rootObject and visiting.
         */</comment>
        <function><type><name>void</name></type> <name>traverse</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>RefCounted</name><operator>.</operator><name>Tidy</name></name></type> <name>rootObject</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><call><name>newInProgressVisit</name><argument_list>(<argument><expr><name>rootObject</name></expr></argument>, <argument><expr><call><name>getFields</name><argument_list>(<argument><expr><call><name><name>rootObject</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>rootObject</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>InProgressVisit</name></type> <name>inProgress</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>inProgress</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>path</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">//If necessary fetch the next object to start tracing</comment>
                <if_stmt><if>if <condition>(<expr><name>inProgress</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>inProgress</name> <operator>=</operator> <call><name><name>path</name><operator>.</operator><name>pollLast</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <try>try
                <block>{<block_content>
                    <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name>Field</name></argument>&gt;</argument_list></name></type> <name>p</name> <init>= <expr><call><name><name>inProgress</name><operator>.</operator><name>nextChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Object</name></type> <name>child</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Field</name></type> <name>field</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>iterations</name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>visited</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>inProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>inProgress</name> <operator>=</operator> <call><name>newInProgressVisit</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><call><name>getFields</name><argument_list>(<argument><expr><call><name><name>child</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <continue>continue;</continue>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>visiting</name> <operator>==</operator> <name>child</name></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>haveLoops</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>haveLoops</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>visiting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>NoSpamLogger</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>,
                                <argument><expr><name><name>NoSpamLogger</name><operator>.</operator><name>Level</name><operator>.</operator><name>ERROR</name></name></expr></argument>,
                                <argument><expr><call><name><name>rootObject</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><literal type="number">1</literal></expr></argument>,
                                <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>,
                                <argument><expr><literal type="string">"Strong self-ref loop detected {}"</literal></expr></argument>,
                                <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>child</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>returnInProgressVisit</name><argument_list>(<argument><expr><name>inProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>inProgress</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>NoSpamLogger</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><name><name>NoSpamLogger</name><operator>.</operator><name>Level</name><operator>.</operator><name>ERROR</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>, <argument><expr><literal type="string">"Could not fully check for self-referential leaks"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></while>
        </block_content>}</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Field</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fieldMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Field</name></argument>&gt;</argument_list></name></type> <name>getFields</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>clazz</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>clazz</name> <operator>==</operator> <name><name>PhantomReference</name><operator>.</operator><name>class</name></name> <operator>||</operator> <name>clazz</name> <operator>==</operator> <name><name>Class</name><operator>.</operator><name>class</name></name> <operator>||</operator> <call><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Member</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>emptyList</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Field</name></argument>&gt;</argument_list></name></type> <name>fields</name> <init>= <expr><call><name><name>fieldMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fields</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>fields</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>fieldMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>fields</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Field</name></type> <name>field</name> <range>: <expr><call><name><name>clazz</name><operator>.</operator><name>getDeclaredFields</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>field</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPrimitive</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>Modifier</name><operator>.</operator><name>isStatic</name></name><argument_list>(<argument><expr><call><name><name>field</name><operator>.</operator><name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fields</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>fields</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>getFields</name><argument_list>(<argument><expr><call><name><name>clazz</name><operator>.</operator><name>getSuperclass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>fields</name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>IdentityCollection</name>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Tidy</name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl>;</decl_stmt>
        <constructor><specifier>public</specifier> <name>IdentityCollection</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Tidy</name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>candidates</name></name> <operator>=</operator> <name>candidates</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>ref</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>candidates</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>ref</name><operator>.</operator><name>state</name><operator>.</operator><name>globalState</name><operator>.</operator><name>tidy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name><name>SelfRefCounted</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>ref</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>ref</name><operator>.</operator><name>selfRef</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>SharedCloseable</name></type> <name>ref</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name>SharedCloseableImpl</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><operator>(</operator><name>SharedCloseableImpl</name><operator>)</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>SharedCloseableImpl</name></type> <name>ref</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>ref</name><operator>.</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Memory</name></type> <name>memory</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>memory</name> <operator>instanceof</operator> <name>SafeMemory</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SafeMemory</name><operator>)</operator> <name>memory</name><operator>)</operator><operator>.</operator><call><name>addTo</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>StrongLeakDetector</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Tidy</name></argument>&gt;</argument_list></name></type> <name>candidates</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Tidy</name></argument>&gt;</argument_list></name></type> <name>candidates</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>newSetFromMap</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>IdentityHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>GlobalState</name></type> <name>state</name> <range>: <expr><name>globallyExtant</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>candidates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>tidy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name>removeExpected</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>candidates</name><operator>.</operator><name>retainAll</name></name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>candidates</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>names</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>candidates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Tidy</name></type> <name>tidy</name> <range>: <expr><name><name>this</name><operator>.</operator><name>candidates</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>names</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tidy</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Strong reference leak candidates detected: {}"</literal></expr></argument>, <argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>candidates</name></name> <operator>=</operator> <name>candidates</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>removeExpected</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Tidy</name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Ref</name><operator>.</operator><name>IdentityCollection</name></name></type> <name>expected</name> <init>= <expr><operator>new</operator> <call><name><name>Ref</name><operator>.</operator><name>IdentityCollection</name></name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>ks</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name><name>ks</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>reader</name> <range>: <expr><call><name><name>view</name><operator>.</operator><name>allKnownSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></function>
    }</block></class>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>shutdownReferenceReaper</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>TimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ExecutorUtils</name><operator>.</operator><name>shutdownNowAndWait</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>EXEC</name></expr></argument>, <argument><expr><name>STRONG_LEAK_DETECTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
