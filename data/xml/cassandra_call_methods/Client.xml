<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/transport/Client.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Splitter</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>PasswordAuthenticator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>EncryptionOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>Int32Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UTF8Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>messages</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Hex</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JVMStabilityInspector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MD5Digest</name></name>;</import>

<class><specifier>public</specifier> class <name>Client</name> <super_list><extends>extends <super><name>SimpleClient</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SimpleEventHandler</name></type> <name>eventHandler</name> <init>= <expr><operator>new</operator> <call><name>SimpleEventHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Client</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>EncryptionOptions</name></type> <name>encryptionOptions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name><name>version</name><operator>.</operator><name>isBeta</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>encryptionOptions</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setEventHandler</name><argument_list>(<argument><expr><name>eventHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// Start the connection attempt.</comment>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"Connecting..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>establishConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Read commands from the stdin.</comment>
        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Event</name></type> <name>event</name></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>event</name> <operator>=</operator> <call><name><name>eventHandler</name><operator>.</operator><name>queue</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"&lt;&lt; "</literal> <operator>+</operator> <name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>

            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"&gt;&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>Message</name><operator>.</operator><name>Request</name></name></type> <name>req</name> <init>= <expr><call><name>parseLine</name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"! Error parsing line."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>Message</name><operator>.</operator><name>Response</name></name></type> <name>resp</name> <init>= <expr><call><name>execute</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"-&gt; "</literal> <operator>+</operator> <name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ERROR: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Message</name><operator>.</operator><name>Request</name></name></type> <name>parseLine</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>line</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Splitter</name></type> <name>splitter</name> <init>= <expr><call><name><name>Splitter</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trimResults</name><argument_list>()</argument_list></call><operator>.</operator><call><name>omitEmptyStrings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>splitter</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>msgType</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>msgType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"STARTUP"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StartupMessage</name><operator>.</operator><name>CQL_VERSION</name></name></expr></argument>, <argument><expr><literal type="string">"3.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
               <decl_stmt><decl><type><name>String</name></type> <name>next</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
               <if_stmt><if>if <condition>(<expr><call><name><name>next</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"snappy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
               <block>{<block_content>
                   <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StartupMessage</name><operator>.</operator><name>COMPRESSION</name></name></expr></argument>, <argument><expr><literal type="string">"snappy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name><name>connection</name><operator>.</operator><name>setCompressor</name></name><argument_list>(<argument><expr><name><name>Compressor</name><operator>.</operator><name>SnappyCompressor</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if></if_stmt>
               <if_stmt><if>if <condition>(<expr><call><name><name>next</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"lz4"</literal></expr></argument>)</argument_list></call></expr>)</condition>
               <block>{<block_content>
                   <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StartupMessage</name><operator>.</operator><name>COMPRESSION</name></name></expr></argument>, <argument><expr><literal type="string">"lz4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name><name>connection</name><operator>.</operator><name>setCompressor</name></name><argument_list>(<argument><expr><name><name>Compressor</name><operator>.</operator><name>LZ4Compressor</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if></if_stmt>
               <if_stmt><if>if <condition>(<expr><call><name><name>next</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"throw_on_overload"</literal></expr></argument>)</argument_list></call></expr>)</condition>
               <block>{<block_content>
                   <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>StartupMessage</name><operator>.</operator><name>THROW_ON_OVERLOAD</name></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name><name>connection</name><operator>.</operator><name>setThrowOnOverload</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
            <return>return <expr><operator>new</operator> <call><name>StartupMessage</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>msgType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"QUERY"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name><name>line</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Ugly hack to allow setting a page size, but that's playground code anyway</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>pageSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>line</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">".+ !\\d+$"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name><name>line</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><name>pageSize</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>line</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>line</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <return>return <expr><literal type="null">null</literal></expr>;</return>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>QueryMessage</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name><name>QueryOptions</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ConsistencyLevel</name><operator>.</operator><name>ONE</name></name></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>ByteBuffer</name><operator>&gt;</operator><call><name>emptyList</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>pageSize</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>msgType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"PREPARE"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>PrepareMessage</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>msgType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"EXECUTE"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>preparedStatementId</name> <init>= <expr><call><name><name>Hex</name><operator>.</operator><name>hexToBytes</name></name><argument_list>(<argument><expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>resultMetadataId</name> <init>= <expr><call><name><name>Hex</name><operator>.</operator><name>hexToBytes</name></name><argument_list>(<argument><expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while<condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>next</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl>;</decl_stmt>
                    <try>try
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name><name>Int32Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch></try>
                    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <return>return <expr><operator>new</operator> <call><name>ExecuteMessage</name><argument_list>(<argument><expr><call><name><name>MD5Digest</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>preparedStatementId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>MD5Digest</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>resultMetadataId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>QueryOptions</name><operator>.</operator><name>forInternalCalls</name></name><argument_list>(<argument><expr><name><name>ConsistencyLevel</name><operator>.</operator><name>ONE</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>msgType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>OptionsMessage</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>msgType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"AUTHENTICATE"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>credentials</name> <init>= <expr><call><name>readCredentials</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>credentials</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>PasswordAuthenticator</name><operator>.</operator><name>USERNAME_KEY</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>credentials</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>PasswordAuthenticator</name><operator>.</operator><name>PASSWORD_KEY</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"[ERROR] Authentication requires both 'username' and 'password'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>AuthResponse</name><argument_list>(<argument><expr><call><name>encodeCredentialsForSasl</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>msgType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"REGISTER"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>RegisterMessage</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><call><name><name>Enum</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>Type</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"[ERROR] Unknown event type: "</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>readCredentials</name><parameter_list>(<parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>credentials</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>next</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>kv</name> <init>= <expr><call><name><name>next</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"[ERROR] Default authentication requires username &amp; password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>credentials</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>kv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>kv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>credentials</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>encodeCredentialsForSasl</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>credentials</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>username</name> <init>= <expr><call><name><name>credentials</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>PasswordAuthenticator</name><operator>.</operator><name>USERNAME_KEY</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>password</name> <init>= <expr><call><name><name>credentials</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>PasswordAuthenticator</name><operator>.</operator><name>PASSWORD_KEY</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>initialResponse</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>username</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name><name>password</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>initialResponse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>initialResponse</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>username</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>initialResponse</name><index>[<expr><name><name>username</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>initialResponse</name></expr></argument>, <argument><expr><name><name>username</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>password</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>initialResponse</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>clientInitialization</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Print usage if no argument is specified.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>args</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <operator>+</operator> <call><name><name>Client</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" &lt;host&gt; &lt;port&gt; [&lt;version&gt;]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Parse options.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>host</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ProtocolVersion</name></type> <name>version</name> <init>= <expr><ternary><condition><expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><call><name><name>ProtocolVersion</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNativeTransportAllowOlderProtocols</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>ProtocolVersion</name><operator>.</operator><name>CURRENT</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>EncryptionOptions</name></type> <name>encryptionOptions</name> <init>= <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>()</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"CQL binary protocol console "</literal> <operator>+</operator> <name>host</name> <operator>+</operator> <literal type="string">"@"</literal> <operator>+</operator> <name>port</name> <operator>+</operator> <literal type="string">" using native protocol version "</literal> <operator>+</operator> <name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>Client</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>encryptionOptions</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
