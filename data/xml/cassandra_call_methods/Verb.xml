<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/net/Verb.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Modifier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Supplier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>ToLongFunction</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>batchlog</name><operator>.</operator><name>Batch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>batchlog</name><operator>.</operator><name>BatchRemoveVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>batchlog</name><operator>.</operator><name>BatchStoreVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>CounterMutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>CounterMutationVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Mutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>MutationVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadCommandVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadRepairVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SnapshotCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TruncateResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TruncateVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TruncateRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestFailureReason</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>GossipDigestAck</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>GossipDigestAck2</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>GossipDigestAck2VerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>GossipDigestAckVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>GossipDigestSyn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>GossipDigestSynVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>GossipShutdownVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>hints</name><operator>.</operator><name>HintMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>hints</name><operator>.</operator><name>HintVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>IVersionedAsymmetricSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>RepairMessageVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>CleanupMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>FailSession</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>FinalizeCommit</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>FinalizePromise</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>FinalizePropose</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>PrepareConsistentRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>PrepareConsistentResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>PrepareMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>SnapshotMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>StatusRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>StatusResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>SyncResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>SyncRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>ValidationResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>ValidationRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaPullVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaPushVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaVersionVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>BooleanSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>EchoVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>SnapshotVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>Commit</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>CommitVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>PrepareResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>PrepareVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>ProposeVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>ReplicationDoneVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>UUIDSerializer</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Stage</name><operator>.</operator><name>*</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Stage</name><operator>.</operator><name>INTERNAL_RESPONSE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Stage</name><operator>.</operator><name>MISC</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>VerbTimeouts</name><operator>.</operator><name>*</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>Kind</name><operator>.</operator><name>*</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>Priority</name><operator>.</operator><name>*</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>MigrationManager</name><operator>.</operator><name>MigrationsSerializer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Note that priorities except P0 are presently unused.  P0 corresponds to urgent, i.e. what used to be the "Gossip" connection.
 */</comment>
<enum><specifier>public</specifier> enum <name>Verb</name>
<block>{
    <decl><name>MUTATION_RSP</name>           <argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></decl>,
    <call><name>MUTATION_REQ</name>           <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,   <argument><expr><name>P3</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>MUTATION</name></expr></argument>,          <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>Mutation</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>MutationVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,        <argument><expr><name>MUTATION_RSP</name></expr></argument>        )</argument_list></call>,
    <call><name>HINT_RSP</name>               <argument_list>(<argument><expr><literal type="number">61</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>HINT_REQ</name>               <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,   <argument><expr><name>P4</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>MUTATION</name></expr></argument>,          <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>HintMessage</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,               <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>HintVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,            <argument><expr><name>HINT_RSP</name></expr></argument>            )</argument_list></call>,
    <call><name>READ_REPAIR_RSP</name>        <argument_list>(<argument><expr><literal type="number">62</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>READ_REPAIR_REQ</name>        <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,   <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>MUTATION</name></expr></argument>,          <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>Mutation</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ReadRepairVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,      <argument><expr><name>READ_REPAIR_RSP</name></expr></argument>     )</argument_list></call>,
    <call><name>BATCH_STORE_RSP</name>        <argument_list>(<argument><expr><literal type="number">65</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>BATCH_STORE_REQ</name>        <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,   <argument><expr><name>P3</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>MUTATION</name></expr></argument>,          <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>Batch</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                     <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>BatchStoreVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,      <argument><expr><name>BATCH_STORE_RSP</name></expr></argument>     )</argument_list></call>,
    <call><name>BATCH_REMOVE_RSP</name>       <argument_list>(<argument><expr><literal type="number">66</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>BATCH_REMOVE_REQ</name>       <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,   <argument><expr><name>P3</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>MUTATION</name></expr></argument>,          <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>UUIDSerializer</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>BatchRemoveVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,     <argument><expr><name>BATCH_REMOVE_RSP</name></expr></argument>    )</argument_list></call>,

    <call><name>PAXOS_PREPARE_RSP</name>      <argument_list>(<argument><expr><literal type="number">93</literal></expr></argument>,  <argument><expr><name>P2</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>PrepareResponse</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,           <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>PAXOS_PREPARE_REQ</name>      <argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>,  <argument><expr><name>P2</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>MUTATION</name></expr></argument>,          <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>Commit</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                    <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>PrepareVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,         <argument><expr><name>PAXOS_PREPARE_RSP</name></expr></argument>   )</argument_list></call>,
    <call><name>PAXOS_PROPOSE_RSP</name>      <argument_list>(<argument><expr><literal type="number">94</literal></expr></argument>,  <argument><expr><name>P2</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>BooleanSerializer</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>PAXOS_PROPOSE_REQ</name>      <argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>,  <argument><expr><name>P2</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>MUTATION</name></expr></argument>,          <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>Commit</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                    <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ProposeVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,         <argument><expr><name>PAXOS_PROPOSE_RSP</name></expr></argument>   )</argument_list></call>,
    <call><name>PAXOS_COMMIT_RSP</name>       <argument_list>(<argument><expr><literal type="number">95</literal></expr></argument>,  <argument><expr><name>P2</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>PAXOS_COMMIT_REQ</name>       <argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>,  <argument><expr><name>P2</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>MUTATION</name></expr></argument>,          <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>Commit</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                    <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>CommitVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,          <argument><expr><name>PAXOS_COMMIT_RSP</name></expr></argument>    )</argument_list></call>,

    <call><name>TRUNCATE_RSP</name>           <argument_list>(<argument><expr><literal type="number">79</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>truncateTimeout</name></expr></argument>, <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>TruncateResponse</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,          <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>TRUNCATE_REQ</name>           <argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>truncateTimeout</name></expr></argument>, <argument><expr><name>MUTATION</name></expr></argument>,          <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>TruncateRequest</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,           <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>TruncateVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,        <argument><expr><name>TRUNCATE_RSP</name></expr></argument>        )</argument_list></call>,

    <call><name>COUNTER_MUTATION_RSP</name>   <argument_list>(<argument><expr><literal type="number">84</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>counterTimeout</name></expr></argument>,  <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>COUNTER_MUTATION_REQ</name>   <argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>,  <argument><expr><name>P2</name></expr></argument>, <argument><expr><name>counterTimeout</name></expr></argument>,  <argument><expr><name>COUNTER_MUTATION</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>CounterMutation</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,           <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>CounterMutationVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>, <argument><expr><name>COUNTER_MUTATION_RSP</name></expr></argument>)</argument_list></call>,

    <call><name>READ_RSP</name>               <argument_list>(<argument><expr><literal type="number">63</literal></expr></argument>,  <argument><expr><name>P2</name></expr></argument>, <argument><expr><name>readTimeout</name></expr></argument>,     <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ReadResponse</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,              <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>READ_REQ</name>               <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,   <argument><expr><name>P3</name></expr></argument>, <argument><expr><name>readTimeout</name></expr></argument>,     <argument><expr><name>READ</name></expr></argument>,              <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ReadCommand</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,               <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ReadCommandVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,     <argument><expr><name>READ_RSP</name></expr></argument>            )</argument_list></call>,
    <call><name>RANGE_RSP</name>              <argument_list>(<argument><expr><literal type="number">69</literal></expr></argument>,  <argument><expr><name>P2</name></expr></argument>, <argument><expr><name>rangeTimeout</name></expr></argument>,    <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ReadResponse</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,              <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>RANGE_REQ</name>              <argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,   <argument><expr><name>P3</name></expr></argument>, <argument><expr><name>rangeTimeout</name></expr></argument>,    <argument><expr><name>READ</name></expr></argument>,              <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ReadCommand</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,               <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ReadCommandVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,     <argument><expr><name>RANGE_RSP</name></expr></argument>           )</argument_list></call>,

    <call><name>GOSSIP_DIGEST_SYN</name>      <argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>longTimeout</name></expr></argument>,     <argument><expr><name>GOSSIP</name></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>GossipDigestSyn</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,           <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>GossipDigestSynVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                      )</argument_list></call>,
    <call><name>GOSSIP_DIGEST_ACK</name>      <argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>longTimeout</name></expr></argument>,     <argument><expr><name>GOSSIP</name></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>GossipDigestAck</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,           <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>GossipDigestAckVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                      )</argument_list></call>,
    <call><name>GOSSIP_DIGEST_ACK2</name>     <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>longTimeout</name></expr></argument>,     <argument><expr><name>GOSSIP</name></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>GossipDigestAck2</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,          <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>GossipDigestAck2VerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                     )</argument_list></call>,
    <call><name>GOSSIP_SHUTDOWN</name>        <argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>GOSSIP</name></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>GossipShutdownVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                       )</argument_list></call>,

    <call><name>ECHO_RSP</name>               <argument_list>(<argument><expr><literal type="number">91</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>GOSSIP</name></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>ECHO_REQ</name>               <argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>GOSSIP</name></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>EchoVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,            <argument><expr><name>ECHO_RSP</name></expr></argument>            )</argument_list></call>,
    <call><name>PING_RSP</name>               <argument_list>(<argument><expr><literal type="number">97</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>pingTimeout</name></expr></argument>,     <argument><expr><name>GOSSIP</name></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>PING_REQ</name>               <argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>pingTimeout</name></expr></argument>,     <argument><expr><name>GOSSIP</name></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>PingRequest</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,               <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>PingVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,            <argument><expr><name>PING_RSP</name></expr></argument>            )</argument_list></call>,

    <comment type="line">// P1 because messages can be arbitrarily large or aren't crucial</comment>
    <call><name>SCHEMA_PUSH_RSP</name>        <argument_list>(<argument><expr><literal type="number">98</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>MIGRATION</name></expr></argument>,         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>SCHEMA_PUSH_REQ</name>        <argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>MIGRATION</name></expr></argument>,         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>MigrationsSerializer</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,        <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>SchemaPushVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,      <argument><expr><name>SCHEMA_PUSH_RSP</name></expr></argument>     )</argument_list></call>,
    <call><name>SCHEMA_PULL_RSP</name>        <argument_list>(<argument><expr><literal type="number">88</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>MIGRATION</name></expr></argument>,         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>MigrationsSerializer</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,        <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>SCHEMA_PULL_REQ</name>        <argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>MIGRATION</name></expr></argument>,         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>SchemaPullVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,      <argument><expr><name>SCHEMA_PULL_RSP</name></expr></argument>     )</argument_list></call>,
    <call><name>SCHEMA_VERSION_RSP</name>     <argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>MIGRATION</name></expr></argument>,         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>UUIDSerializer</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>SCHEMA_VERSION_REQ</name>     <argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>MIGRATION</name></expr></argument>,         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>SchemaVersionVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>SCHEMA_VERSION_RSP</name></expr></argument>  )</argument_list></call>,

    <comment type="line">// repair; mostly doesn't use callbacks and sends responses as their own request messages, with matching sessions by uuid; should eventually harmonize and make idiomatic</comment>
    <call><name>REPAIR_RSP</name>             <argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>VALIDATION_RSP</name>         <argument_list>(<argument><expr><literal type="number">102</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ValidationResponse</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,        <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>VALIDATION_REQ</name>         <argument_list>(<argument><expr><literal type="number">101</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ValidationRequest</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>SYNC_RSP</name>               <argument_list>(<argument><expr><literal type="number">104</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>SyncResponse</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,              <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>SYNC_REQ</name>               <argument_list>(<argument><expr><literal type="number">103</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>SyncRequest</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,               <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>PREPARE_MSG</name>            <argument_list>(<argument><expr><literal type="number">105</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>PrepareMessage</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>SNAPSHOT_MSG</name>           <argument_list>(<argument><expr><literal type="number">106</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>SnapshotMessage</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,           <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>CLEANUP_MSG</name>            <argument_list>(<argument><expr><literal type="number">107</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>CleanupMessage</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>PREPARE_CONSISTENT_RSP</name> <argument_list>(<argument><expr><literal type="number">109</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>PrepareConsistentResponse</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>PREPARE_CONSISTENT_REQ</name> <argument_list>(<argument><expr><literal type="number">108</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>PrepareConsistentRequest</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>FINALIZE_PROPOSE_MSG</name>   <argument_list>(<argument><expr><literal type="number">110</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>FinalizePropose</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,           <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>FINALIZE_PROMISE_MSG</name>   <argument_list>(<argument><expr><literal type="number">111</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>FinalizePromise</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,           <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>FINALIZE_COMMIT_MSG</name>    <argument_list>(<argument><expr><literal type="number">112</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>FinalizeCommit</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>FAILED_SESSION_MSG</name>     <argument_list>(<argument><expr><literal type="number">113</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>FailSession</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,               <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>STATUS_RSP</name>             <argument_list>(<argument><expr><literal type="number">115</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>StatusResponse</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,
    <call><name>STATUS_REQ</name>             <argument_list>(<argument><expr><literal type="number">114</literal></expr></argument>, <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>ANTI_ENTROPY</name></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>StatusRequest</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,             <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RepairMessageVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,   <argument><expr><name>REPAIR_RSP</name></expr></argument>          )</argument_list></call>,

    <call><name>REPLICATION_DONE_RSP</name>   <argument_list>(<argument><expr><literal type="number">82</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>MISC</name></expr></argument>,              <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>REPLICATION_DONE_REQ</name>   <argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>MISC</name></expr></argument>,              <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ReplicationDoneVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>, <argument><expr><name>REPLICATION_DONE_RSP</name></expr></argument>)</argument_list></call>,
    <call><name>SNAPSHOT_RSP</name>           <argument_list>(<argument><expr><literal type="number">87</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>MISC</name></expr></argument>,              <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,
    <call><name>SNAPSHOT_REQ</name>           <argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>MISC</name></expr></argument>,              <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>SnapshotCommand</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,           <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>SnapshotVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>,        <argument><expr><name>SNAPSHOT_RSP</name></expr></argument>        )</argument_list></call>,

    <comment type="line">// generic failure response</comment>
    <call><name>FAILURE_RSP</name>            <argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>noTimeout</name></expr></argument>,       <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>RequestFailureReason</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></call>,

    <comment type="line">// dummy verbs</comment>
    <call><name>_TRACE</name>                 <argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>TRACING</name></expr></argument>,           <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="null">null</literal></expr></block_content></block></lambda></expr></argument>                                                     )</argument_list></call>,
    <call><name>_SAMPLE</name>                <argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>INTERNAL_RESPONSE</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="null">null</literal></expr></block_content></block></lambda></expr></argument>                                                     )</argument_list></call>,
    <call><name>_TEST_1</name>                <argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,  <argument><expr><name>P0</name></expr></argument>, <argument><expr><name>writeTimeout</name></expr></argument>,    <argument><expr><name>IMMEDIATE</name></expr></argument>,         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="null">null</literal></expr></block_content></block></lambda></expr></argument>                                                     )</argument_list></call>,
    <call><name>_TEST_2</name>                <argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>IMMEDIATE</name></expr></argument>,         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>NoPayload</name><operator>.</operator><name>serializer</name></name></expr></block_content></block></lambda></expr></argument>,                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="null">null</literal></expr></block_content></block></lambda></expr></argument>                                                     )</argument_list></call>,

    @<decl><name>Deprecated</name>
    <name>REQUEST_RSP</name>            <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,   <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>REQUEST_RESPONSE</name></expr></argument>,  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="null">null</literal></expr></block_content></block></lambda></expr></argument>,                                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></decl>,
    @<decl><name>Deprecated</name>
    <name>INTERNAL_RSP</name>           <argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>,  <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>INTERNAL_RESPONSE</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="null">null</literal></expr></block_content></block></lambda></expr></argument>,                                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr></block_content></block></lambda></expr></argument>                             )</argument_list></decl>,

    <comment type="line">// largest used ID: 116</comment>

    <comment type="line">// CUSTOM VERBS</comment>
    <call><name>UNUSED_CUSTOM_VERB</name>     <argument_list>(<argument><expr><name>CUSTOM</name></expr></argument>,
                            <argument><expr><literal type="number">0</literal></expr></argument>,   <argument><expr><name>P1</name></expr></argument>, <argument><expr><name>rpcTimeout</name></expr></argument>,      <argument><expr><name>INTERNAL_RESPONSE</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="null">null</literal></expr></block_content></block></lambda></expr></argument>,                                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="null">null</literal></expr></block_content></block></lambda></expr></argument>                                                     )</argument_list></call>,

    ;

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Verb</name></argument>&gt;</argument_list></name></type> <name>VERBS</name> <init>= <expr><call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>Verb</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>Priority</name>
    <block>{
        <decl><name>P0</name></decl>,  <comment type="line">// sends on the urgent connection (i.e. for Gossip, Echo)</comment>
        <decl><name>P1</name></decl>,  <comment type="line">// small or empty responses</comment>
        <decl><name>P2</name></decl>,  <comment type="line">// larger messages that can be dropped but who have a larger impact on system stability (e.g. READ_REPAIR, READ_RSP)</comment>
        <decl><name>P3</name></decl>,
        <decl><name>P4</name></decl>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>Kind</name>
    <block>{
        <decl><name>NORMAL</name></decl>,
        <decl><name>CUSTOM</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Priority</name></type> <name>priority</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Stage</name></type> <name>stage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Messages we receive from peers have a Verb that tells us what kind of message it is.
     * Most of the time, this is enough to determine how to deserialize the message payload.
     * The exception is the REQUEST_RSP verb, which just means "a response to something you told me to do."
     * Traditionally, this was fine since each VerbHandler knew what type of payload it expected, and
     * handled the deserialization itself.  Now that we do that in ITC, to avoid the extra copy to an
     * intermediary byte[] (See CASSANDRA-3716), we need to wire that up to the CallbackInfo object
     * (see below).
     *
     * NOTE: we use a Supplier to avoid loading the dependent classes until necessary.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>serializer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVerbHandler</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>handler</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Verb</name></type> <name>responseVerb</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>expiration</name></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * Verbs it's okay to drop if the request has been queued longer than the request timeout.  These
     * all correspond to client requests or something triggered by them; we don't want to
     * drop internal messages like bootstrap or repair notifications.
     */</comment>
    <constructor><name>Verb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Priority</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>expiration</name></decl></parameter>, <parameter><decl><type><name>Stage</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>serializer</name></decl></parameter>, <parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVerbHandler</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>handler</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>, <argument><expr><name>expiration</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>, <argument><expr><name>serializer</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><name>Verb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Priority</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>expiration</name></decl></parameter>, <parameter><decl><type><name>Stage</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>serializer</name></decl></parameter>, <parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVerbHandler</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>Verb</name></type> <name>responseVerb</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>NORMAL</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>, <argument><expr><name>expiration</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>, <argument><expr><name>serializer</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>responseVerb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><name>Verb</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Priority</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>expiration</name></decl></parameter>, <parameter><decl><type><name>Stage</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>serializer</name></decl></parameter>, <parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVerbHandler</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>handler</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>, <argument><expr><name>expiration</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>, <argument><expr><name>serializer</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><name>Verb</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Priority</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>expiration</name></decl></parameter>, <parameter><decl><type><name>Stage</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>serializer</name></decl></parameter>, <parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVerbHandler</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>Verb</name></type> <name>responseVerb</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>stage</name></name> <operator>=</operator> <name>stage</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Verb id must be non-negative, got "</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">" for verb "</literal> <operator>+</operator> <call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>CUSTOM</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <name>MAX_CUSTOM_VERB_ID</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Invalid custom verb id "</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">" - we only allow custom ids between 0 and "</literal> <operator>+</operator> <name>MAX_CUSTOM_VERB_ID</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>idForCustomVerb</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <name>CUSTOM_VERB_START</name> <operator>-</operator> <name>MAX_CUSTOM_VERB_ID</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Invalid verb id "</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">" - we only allow ids between 0 and "</literal> <operator>+</operator> <operator>(</operator><name>CUSTOM_VERB_START</name> <operator>-</operator> <name>MAX_CUSTOM_VERB_ID</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>priority</name></name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>serializer</name></name> <operator>=</operator> <name>serializer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>responseVerb</name></name> <operator>=</operator> <name>responseVerb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expiration</name></name> <operator>=</operator> <name>expiration</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>In</name></parameter>, <parameter><name>Out</name></parameter>&gt;</parameter_list> <name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name></type> <name>serializer</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>serializer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>IVerbHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>handler</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name><name>IVerbHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>handler</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>expiresAtNanos</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>nowNanos</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>nowNanos</name> <operator>+</operator> <call><name>expiresAfterNanos</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>expiresAfterNanos</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>expiration</name><operator>.</operator><name>applyAsLong</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// this is a little hacky, but reduces the number of parameters up top</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isResponse</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>handler</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ResponseVerbHandler</name><operator>.</operator><name>instance</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Verb</name></type> <name>toPre40Verb</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isResponse</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>this</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>priority</name> <operator>==</operator> <name>P0</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>INTERNAL_RSP</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>REQUEST_RSP</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVerbHandler</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>unsafeSetHandler</name><parameter_list>(<parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVerbHandler</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>handler</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchFieldException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVerbHandler</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>original</name> <init>= <expr><name><name>this</name><operator>.</operator><name>handler</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Field</name></type> <name>field</name> <init>= <expr><call><name><name>Verb</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredField</name></name></name><argument_list>(<argument><expr><literal type="string">"handler"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Field</name></type> <name>modifiers</name> <init>= <expr><call><name><name>Field</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredField</name></name></name><argument_list>(<argument><expr><literal type="string">"modifiers"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>modifiers</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>modifiers</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><call><name><name>field</name><operator>.</operator><name>getModifiers</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name><name>Modifier</name><operator>.</operator><name>FINAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>original</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>unsafeSetSerializer</name><parameter_list>(<parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>serializer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchFieldException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>original</name> <init>= <expr><name><name>this</name><operator>.</operator><name>serializer</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Field</name></type> <name>field</name> <init>= <expr><call><name><name>Verb</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredField</name></name></name><argument_list>(<argument><expr><literal type="string">"serializer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Field</name></type> <name>modifiers</name> <init>= <expr><call><name><name>Field</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredField</name></name></name><argument_list>(<argument><expr><literal type="string">"modifiers"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>modifiers</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>modifiers</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><call><name><name>field</name><operator>.</operator><name>getModifiers</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name><name>Modifier</name><operator>.</operator><name>FINAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>original</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>unsafeSetExpiration</name><parameter_list>(<parameter><decl><type><name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>expiration</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchFieldException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>original</name> <init>= <expr><name><name>this</name><operator>.</operator><name>expiration</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Field</name></type> <name>field</name> <init>= <expr><call><name><name>Verb</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredField</name></name></name><argument_list>(<argument><expr><literal type="string">"expiration"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Field</name></type> <name>modifiers</name> <init>= <expr><call><name><name>Field</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredField</name></name></name><argument_list>(<argument><expr><literal type="string">"modifiers"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>modifiers</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>modifiers</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><call><name><name>field</name><operator>.</operator><name>getModifiers</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name><name>Modifier</name><operator>.</operator><name>FINAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>expiration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>original</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// This is the largest number we can store in 2 bytes using VIntCoding (1 bit per byte is used to indicate if there is more data coming).</comment>
    <comment type="line">// When generating ids we count *down* from this number</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CUSTOM_VERB_START</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Sanity check for the custom verb ids - avoids someone mistakenly adding a custom verb id close to the normal verbs which</comment>
    <comment type="line">// could cause a conflict later when new normal verbs are added.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_CUSTOM_VERB_ID</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Verb</name><index>[]</index></name></type> <name>idToVerbMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Verb</name><index>[]</index></name></type> <name>idToCustomVerbMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>minCustomId</name></decl>;</decl_stmt>

    <static>static
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Verb</name><index>[]</index></name></type> <name>verbs</name> <init>= <expr><call><name>values</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>minCustom</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Verb</name></type> <name>v</name> <range>: <expr><name>verbs</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <switch>switch <condition>(<expr><name><name>v</name><operator>.</operator><name>kind</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>NORMAL</name></expr>:</case>
                    <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>CUSTOM</name></expr>:</case>
                    <expr_stmt><expr><name>minCustom</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>minCustom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Unsupported Verb Kind: "</literal> <operator>+</operator> <name><name>v</name><operator>.</operator><name>kind</name></name> <operator>+</operator> <literal type="string">" for verb "</literal> <operator>+</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></switch>
        </block_content>}</block></for>
        <expr_stmt><expr><name>minCustomId</name> <operator>=</operator> <name>minCustom</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>minCustom</name> <operator>&lt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Overlapping verb ids are not allowed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Verb</name><index>[]</index></name></type> <name>idMap</name> <init>= <expr><operator>new</operator> <name><name>Verb</name><index>[<expr><name>max</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>customCount</name> <init>= <expr><ternary><condition><expr><name>minCustom</name> <operator>&lt;</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr> ?</condition><then> <expr><name>CUSTOM_VERB_START</name> <operator>-</operator> <name>minCustom</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Verb</name><index>[]</index></name></type> <name>customIdMap</name> <init>= <expr><operator>new</operator> <name><name>Verb</name><index>[<expr><name>customCount</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Verb</name></type> <name>v</name> <range>: <expr><name>verbs</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <switch>switch <condition>(<expr><name><name>v</name><operator>.</operator><name>kind</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>NORMAL</name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><name><name>idMap</name><index>[<expr><name><name>v</name><operator>.</operator><name>id</name></name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"cannot have two verbs that map to the same id: "</literal> <operator>+</operator> <name>v</name> <operator>+</operator> <literal type="string">" and "</literal> <operator>+</operator> <name><name>idMap</name><index>[<expr><name><name>v</name><operator>.</operator><name>id</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>idMap</name><index>[<expr><name><name>v</name><operator>.</operator><name>id</name></name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>CUSTOM</name></expr>:</case>
                    <decl_stmt><decl><type><name>int</name></type> <name>relativeId</name> <init>= <expr><call><name>idForCustomVerb</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>customIdMap</name><index>[<expr><name>relativeId</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"cannot have two custom verbs that map to the same id: "</literal> <operator>+</operator> <name>v</name> <operator>+</operator> <literal type="string">" and "</literal> <operator>+</operator> <name><name>customIdMap</name><index>[<expr><name>relativeId</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>customIdMap</name><index>[<expr><name>relativeId</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Unsupported Verb Kind: "</literal> <operator>+</operator> <name><name>v</name><operator>.</operator><name>kind</name></name> <operator>+</operator> <literal type="string">" for verb "</literal> <operator>+</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></switch>
        </block_content>}</block></for>

        <expr_stmt><expr><name>idToVerbMap</name> <operator>=</operator> <name>idMap</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>idToCustomVerbMap</name> <operator>=</operator> <name>customIdMap</name></expr>;</expr_stmt>
    </block_content>}</block></static>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Verb</name></type> <name>fromId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Verb</name><index>[]</index></name></type> <name>verbs</name> <init>= <expr><name>idToVerbMap</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <name>minCustomId</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>idForCustomVerb</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>verbs</name> <operator>=</operator> <name>idToCustomVerbMap</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Verb</name></type> <name>verb</name> <init>= <expr><ternary><condition><expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>id</name> <operator>&lt;</operator> <name><name>verbs</name><operator>.</operator><name>length</name></name></expr> ?</condition><then> <expr><name><name>verbs</name><index>[<expr><name>id</name></expr>]</index></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>verb</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unknown verb id "</literal> <operator>+</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>verb</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * calculate an id for a custom verb
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>idForCustomVerb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>CUSTOM_VERB_START</name> <operator>-</operator> <name>id</name></expr>;</return>
    </block_content>}</block></function>
}</block></enum>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
class <name>VerbTimeouts</name>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>rpcTimeout</name>      <init>= <expr><name>DatabaseDescriptor</name><operator>::</operator><name>getRpcTimeout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>writeTimeout</name>    <init>= <expr><name>DatabaseDescriptor</name><operator>::</operator><name>getWriteRpcTimeout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>readTimeout</name>     <init>= <expr><name>DatabaseDescriptor</name><operator>::</operator><name>getReadRpcTimeout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>rangeTimeout</name>    <init>= <expr><name>DatabaseDescriptor</name><operator>::</operator><name>getRangeRpcTimeout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>counterTimeout</name>  <init>= <expr><name>DatabaseDescriptor</name><operator>::</operator><name>getCounterWriteRpcTimeout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>truncateTimeout</name> <init>= <expr><name>DatabaseDescriptor</name><operator>::</operator><name>getTruncateRpcTimeout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>pingTimeout</name>     <init>= <expr><name>DatabaseDescriptor</name><operator>::</operator><name>getPingTimeout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>longTimeout</name>     <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>units</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRpcTimeout</name></name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>units</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><literal type="number">5L</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ToLongFunction</name><argument_list type="generic">&lt;<argument><name>TimeUnit</name></argument>&gt;</argument_list></name></type> <name>noTimeout</name>       <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>units</name></decl></parameter></parameter_list> -&gt; <block>{<block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw> </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>
}</block></class></unit>
