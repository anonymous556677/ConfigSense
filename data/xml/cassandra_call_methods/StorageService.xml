<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/StorageService.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Paths</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>MatchResult</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>StreamSupport</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>openmbean</name><operator>.</operator><name>CompositeData</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>openmbean</name><operator>.</operator><name>OpenDataException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>openmbean</name><operator>.</operator><name>TabularData</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>openmbean</name><operator>.</operator><name>TabularDataSupport</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Predicates</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>ParameterizedClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>RangeStreamer</name><operator>.</operator><name>FetchReplica</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>fql</name><operator>.</operator><name>FullQueryLogger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>fql</name><operator>.</operator><name>FullQueryLoggerOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>fql</name><operator>.</operator><name>FullQueryLoggerOptionsCompositeData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaCollection</name><operator>.</operator><name>Builder</name><operator>.</operator><name>Conflict</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>AuthKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>AuthSchemaChangeListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>batchlog</name><operator>.</operator><name>BatchlogManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorLocals</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>NamedThreadFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ScheduledExecutors</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>CommitLog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>CompactionManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>Verifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LifecycleTransaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>virtual</name><operator>.</operator><name>VirtualKeyspaceRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name><operator>.</operator><name>TokenFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>hints</name><operator>.</operator><name>HintsService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>SSTableLoader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>VersionAndType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>StorageMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>RepairOption</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>CompactionParams</name><operator>.</operator><name>TombstoneOption</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>KeyspaceMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>MigrationCoordinator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>MigrationManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ReplicationParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadataRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ViewMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>TraceKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>ClientResourceLimits</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>ProtocolVersion</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>logging</name><operator>.</operator><name>LoggingSupportFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>progress</name><operator>.</operator><name>ProgressEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>progress</name><operator>.</operator><name>ProgressEventType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>progress</name><operator>.</operator><name>ProgressListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>progress</name><operator>.</operator><name>jmx</name><operator>.</operator><name>JMXBroadcastExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>progress</name><operator>.</operator><name>jmx</name><operator>.</operator><name>JMXProgressSupport</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>transform</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>tryFind</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name><operator>.</operator><name>asList</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name><operator>.</operator><name>stream</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name><operator>.</operator><name>toList</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name><operator>.</operator><name>toMap</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>BOOTSTRAP_SCHEMA_DELAY_MS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>BOOTSTRAP_SKIP_SCHEMA_CHECK</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>DRAIN_EXECUTOR_TIMEOUT_MS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>REPLACEMENT_ALLOW_EMPTY</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>SecondaryIndexManager</name><operator>.</operator><name>getIndexName</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>SecondaryIndexManager</name><operator>.</operator><name>isIndexColumnFamily</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>NoPayload</name><operator>.</operator><name>noPayload</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>REPLICATION_DONE_REQ</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>MigrationManager</name><operator>.</operator><name>evolveSystemKeyspace</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This abstraction contains the token/identifier of this node
 * on the identifier space. This token gets gossiped around.
 * This class will also maintain histograms of the load information
 * of other nodes in the cluster.
 */</comment>
<class><specifier>public</specifier> class <name>StorageService</name> <super_list><extends>extends <super><name>NotificationBroadcasterSupport</name></super></extends> <implements>implements <super><name>IEndpointStateChangeSubscriber</name></super>, <super><name>StorageServiceMBean</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>StorageService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INDEFINITE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RING_DELAY</name> <init>= <expr><call><name>getRingDelay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// delay after which we assume ring has stablized</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SCHEMA_DELAY_MILLIS</name> <init>= <expr><call><name>getSchemaDelay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>REQUIRE_SCHEMAS</name> <init>= <expr><operator>!</operator><call><name><name>BOOTSTRAP_SKIP_SCHEMA_CHECK</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JMXProgressSupport</name></type> <name>progressSupport</name> <init>= <expr><operator>new</operator> <call><name>JMXProgressSupport</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRingDelay</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>newdelay</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.ring_delay_ms"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>newdelay</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Overriding RING_DELAY to {}ms"</literal></expr></argument>, <argument><expr><name>newdelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>newdelay</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <return>return <expr><literal type="number">30</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>getSchemaDelay</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>newdelay</name> <init>= <expr><call><name><name>BOOTSTRAP_SCHEMA_DELAY_MS</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>newdelay</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Overriding SCHEMA_DELAY_MILLIS to {}ms"</literal></expr></argument>, <argument><expr><name>newdelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>newdelay</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <return>return <expr><literal type="number">30</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block">/* This abstraction maintains the token/endpoint metadata information */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TokenMetadata</name></type> <name>tokenMetadata</name> <init>= <expr><operator>new</operator> <call><name>TokenMetadata</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>volatile</specifier> <name><name>VersionedValue</name><operator>.</operator><name>VersionedValueFactory</name></name></type> <name>valueFactory</name> <init>= <expr><operator>new</operator> <call><name><name>VersionedValue</name><operator>.</operator><name>VersionedValueFactory</name></name><argument_list>(<argument><expr><name><name>tokenMetadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Thread</name></type> <name>drainOnShutdown</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>isShutdown</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>preShutdownHooks</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>postShutdownHooks</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StorageService</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>StorageService</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isInShutdownHook</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>isShutdown</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isShutdown</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>isShutdown</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * for in-jvm dtest use - forces isShutdown to be set to whatever passed in.
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setIsShutdownUnsafeForTests</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isShutdown</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isShutdown</name></name> <operator>=</operator> <name>isShutdown</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RangesAtEndpoint</name></type> <name>getLocalReplicas</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getAddressReplicas</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getLocalAndPendingRanges</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ks</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>broadcastAddress</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>r</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddressReplicas</name><argument_list>(<argument><expr><name>broadcastAddress</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>r</name> <range>: <expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPendingRanges</name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><name>broadcastAddress</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>ranges</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getPrimaryRanges</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getPrimaryRangesForEndpoint</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getPrimaryRangesWithinDC</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getPrimaryRangeForEndpointWithinDC</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>replicatingNodes</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>newConcurrentHashSet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CassandraDaemon</name></type> <name>daemon</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>InetAddressAndPort</name></type> <name>removingNode</name></decl>;</decl_stmt>

    <comment type="block">/* Are we starting this node in bootstrap mode? */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>isBootstrapMode</name></decl>;</decl_stmt>

    <comment type="block">/* we bootstrap but do NOT join the ring unless told to do so */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isSurveyMode</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name>
            <argument_list>(<argument><expr><literal type="string">"cassandra.write_survey"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/* true if node is rebuilding and receiving data */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicBoolean</name></type> <name>isRebuilding</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicBoolean</name></type> <name>isDecommissioning</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>initialized</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>joined</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>gossipActive</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicBoolean</name></type> <name>authSetupCalled</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>authSetupComplete</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* the probability for tracing any particular request, 0 disables tracing and 1 enables for all */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>traceProbability</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

    <enum><specifier>private</specifier> <specifier>static</specifier> enum <name>Mode</name> <block>{ <decl><name>STARTING</name></decl>, <decl><name>NORMAL</name></decl>, <decl><name>JOINING</name></decl>, <decl><name>LEAVING</name></decl>, <decl><name>DECOMMISSIONED</name></decl>, <decl><name>MOVING</name></decl>, <decl><name>DRAINING</name></decl>, <decl><name>DRAINED</name></decl> }</block></enum>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>Mode</name></type> <name>operationMode</name> <init>= <expr><name><name>Mode</name><operator>.</operator><name>STARTING</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Used for tracking drain progress */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>totalCFs</name></decl>, <decl><type ref="prev"/><name>remainingCFs</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>AtomicInteger</name></type> <name>nextRepairCommand</name> <init>= <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IEndpointLifecycleSubscriber</name></argument>&gt;</argument_list></name></type> <name>lifecycleSubscribers</name> <init>= <expr><operator>new</operator> <call><name><name>CopyOnWriteArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>jmxObjectName</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>bootstrapTokens</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// true when keeping strict consistency while bootstrapping</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>useStrictConsistency</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.consistent.rangemovement"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>allowSimultaneousMoves</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.consistent.simultaneousmoves.allow"</literal></expr></argument>,<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>joinRing</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.join_ring"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>replacing</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>StreamStateStore</name></type> <name>streamStateStore</name> <init>= <expr><operator>new</operator> <call><name>StreamStateStore</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>SSTablesGlobalTracker</name></type> <name>sstablesTracker</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSurveyMode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>isSurveyMode</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasJoined</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>joined</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method updates the local token on disk
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTokens</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>tokens</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>tokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>:</operator> <literal type="string">"Node needs at least one token."</literal></expr>;</assert>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Setting tokens to {}"</literal></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updateTokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>localTokens</name> <init>= <expr><call><name>getLocalTokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setGossipTokens</name><argument_list>(<argument><expr><name>localTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateNormalTokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>NORMAL</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGossipTokens</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>states</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>TOKENS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>tokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>normal</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>normal</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationStates</name></name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>StorageService</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// use dedicated executor for handling JMX notifications</comment>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>JMXBroadcastExecutor</name><operator>.</operator><name>executor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>jmxObjectName</name> <operator>=</operator> <literal type="string">"org.apache.cassandra.db:type=StorageService"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MBeanWrapper</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerMBean</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>jmxObjectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MBeanWrapper</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerMBean</name></name><argument_list>(<argument><expr><name><name>StreamManager</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name><name>StreamManager</name><operator>.</operator><name>OBJECT_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>sstablesTracker</name> <operator>=</operator> <operator>new</operator> <call><name>SSTablesGlobalTracker</name><argument_list>(<argument><expr><call><name><name>SSTableFormat</name><operator>.</operator><name>Type</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerDaemon</name><parameter_list>(<parameter><decl><type><name>CassandraDaemon</name></type> <name>daemon</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>daemon</name></name> <operator>=</operator> <name>daemon</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name>IEndpointLifecycleSubscriber</name></type> <name>subscriber</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>lifecycleSubscribers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>subscriber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unregister</name><parameter_list>(<parameter><decl><type><name>IEndpointLifecycleSubscriber</name></type> <name>subscriber</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>lifecycleSubscribers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>subscriber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// should only be called via JMX</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>stopGossiping</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>gossipActive</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNormal</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Unable to stop gossip because the node is not in the normal state. Try to stop the node instead."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Stopping gossip by operator request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>isNativeTransportRunning</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Disabling gossip while native transport is still active is unsafe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>gossipActive</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="line">// should only be called via JMX</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>startGossiping</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gossipActive</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>checkServiceAllowedToStart</name><argument_list>(<argument><expr><literal type="string">"gossip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Starting gossip by operator request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getSavedTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>validTokens</name> <init>= <expr><name>tokens</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>tokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// shouldn't be called before these are set if we intend to join the ring/are in the process of doing so</comment>
            <if_stmt><if>if <condition>(<expr><name>joined</name> <operator>||</operator> <name>joinRing</name></expr>)</condition><block type="pseudo"><block_content>
                <assert>assert <expr><name>validTokens</name> <operator>:</operator> <literal type="string">"Cannot start gossiping for a node intended to join without valid tokens"</literal></expr>;</assert></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>validTokens</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>setGossipTokens</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>forceNewerGeneration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>gossipActive</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="line">// should only be called via JMX</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGossipRunning</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>startNativeTransport</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkServiceAllowedToStart</name><argument_list>(<argument><expr><literal type="string">"native transport"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>daemon</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"No configured daemon"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>daemon</name><operator>.</operator><name>startNativeTransport</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error starting native transport: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>stopNativeTransport</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>daemon</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"No configured daemon"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>daemon</name><operator>.</operator><name>stopNativeTransport</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNativeTransportRunning</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>daemon</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>daemon</name><operator>.</operator><name>isNativeTransportRunning</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>enableNativeTransportOldProtocolVersions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setNativeTransportAllowOlderProtocols</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>disableNativeTransportOldProtocolVersions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setNativeTransportAllowOlderProtocols</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>stopTransports</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isNativeTransportRunning</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Stopping native transport"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>stopNativeTransport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isGossipActive</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Stopping gossiper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>stopGossiping</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the Gossip flag RPC_READY to false and then
     * shutdown the client services (thrift and CQL).
     *
     * Note that other nodes will do this for us when
     * they get the Gossip shutdown message, so even if
     * we don't get time to broadcast this, it is not a problem.
     *
     * See {@link Gossiper#markAsShutdown(InetAddressAndPort)}
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>shutdownClientServers</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setRpcReady</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stopNativeTransport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>stopClient</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>unregister</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// give it a second so that task accepted before the MessagingService shutdown gets submitted to the stage (to avoid RejectedExecutionException)</comment>
        <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Stage</name><operator>.</operator><name>shutdownNow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>initialized</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGossipActive</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>gossipActive</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDaemonSetupCompleted</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>daemon</name> <operator>==</operator> <literal type="null">null</literal></expr>
               ?</condition><then> <expr><literal type="boolean">false</literal></expr>
               </then><else>: <expr><call><name><name>daemon</name><operator>.</operator><name>setupCompleted</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>stopDaemon</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>daemon</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"No configured daemon"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>daemon</name><operator>.</operator><name>deactivate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>UUID</name></type> <name>prepareForReplacement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>bootstrapComplete</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Cannot replace address with a node that is already bootstrapped"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>joinRing</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Cannot set both join_ring=false and attempt to replace a node"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shouldBootstrap</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.allow_unsafe_replace"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Replacing a node without bootstrapping risks invalidating consistency "</literal> <operator>+</operator>
                                       <literal type="string">"guarantees as the expected data may not be present until repair is run. "</literal> <operator>+</operator>
                                       <literal type="string">"To perform this operation, please restart with "</literal> <operator>+</operator>
                                       <literal type="string">"-Dcassandra.allow_unsafe_replace=true"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>replaceAddress</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Gathering node replacement information for {}"</literal></expr></argument>, <argument><expr><name>replaceAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>epStates</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>doShadowRound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// as we've completed the shadow round of gossip, we should be able to find the node we're replacing</comment>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><call><name><name>epStates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>replaceAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Cannot replace_address %s because it doesn't exist in gossip"</literal></expr></argument>, <argument><expr><name>replaceAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>validateEndpointSnitch</name><argument_list>(<argument><expr><call><name><name>epStates</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>VersionedValue</name></type> <name>tokensVersionedValue</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>TOKENS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tokensVersionedValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Could not find tokens for %s to replace"</literal></expr></argument>, <argument><expr><name>replaceAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>TokenSerializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name><name>tokenMetadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>tokensVersionedValue</name><operator>.</operator><name>toBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>bootstrapTokens</name> <operator>=</operator> <call><name>validateReplacementBootstrapTokens</name><argument_list>(<argument><expr><name>tokenMetadata</name></expr></argument>, <argument><expr><name>replaceAddress</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>isEmptyWithoutStatus</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>REPLACEMENT_ALLOW_EMPTY</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Gossip state not present for replacing node {}. Adding temporary entry to continue."</literal></expr></argument>, <argument><expr><name>replaceAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// When replacing a node, we take ownership of all its tokens.</comment>
                <comment type="line">// If that node is currently down and not present in the gossip info</comment>
                <comment type="line">// of any other live peers, then we will not be able to take ownership</comment>
                <comment type="line">// of its tokens during bootstrap as they have no way of being propagated</comment>
                <comment type="line">// to this node's TokenMetadata. TM is loaded at startup (in which case</comment>
                <comment type="line">// it will be/ empty for a new replacement node) and only updated with</comment>
                <comment type="line">// tokens for an endpoint during normal state propagation (which will not</comment>
                <comment type="line">// occur if no peers have gossip state for it).</comment>
                <comment type="line">// However, the presence of host id and tokens in the system tables implies</comment>
                <comment type="line">// that the node managed to complete bootstrap at some point in the past.</comment>
                <comment type="line">// Peers may include this information loaded directly from system tables</comment>
                <comment type="line">// in a GossipDigestAck *only if* the GossipDigestSyn was sent as part of a</comment>
                <comment type="line">// shadow round (otherwise, a GossipDigestAck contains only state about peers</comment>
                <comment type="line">// learned via gossip).</comment>
                <comment type="line">// It is safe to do this here as since we completed a shadow round we know</comment>
                <comment type="line">// that :</comment>
                <comment type="line">// * replaceAddress successfully bootstrapped at some point and owned these</comment>
                <comment type="line">//   tokens</comment>
                <comment type="line">// * we know that no other node currently owns these tokens</comment>
                <comment type="line">// * we are going to completely take over replaceAddress's ownership of</comment>
                <comment type="line">//   these tokens.</comment>
                <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateNormalTokens</name></name><argument_list>(<argument><expr><name>bootstrapTokens</name></expr></argument>, <argument><expr><name>replaceAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>UUID</name></type> <name>hostId</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getHostId</name></name><argument_list>(<argument><expr><name>replaceAddress</name></expr></argument>, <argument><expr><name>epStates</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>hostId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateHostId</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>, <argument><expr><name>replaceAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// If we were only able to learn about the node being replaced through the</comment>
                <comment type="line">// shadow gossip round (i.e. there is no state in gossip across the cluster</comment>
                <comment type="line">// about it, perhaps because the entire cluster has been bounced since it went</comment>
                <comment type="line">// down), then we're safe to proceed with the replacement. In this case, there</comment>
                <comment type="line">// will be no local endpoint state as we discard the results of the shadow</comment>
                <comment type="line">// round after preparing replacement info. We inject a minimal EndpointState</comment>
                <comment type="line">// to keep FailureDetector::isAlive and Gossiper::compareEndpointStartup from</comment>
                <comment type="line">// failing later in the replacement, as they both expect the replaced node to</comment>
                <comment type="line">// be fully present in gossip.</comment>
                <comment type="line">// Otherwise, if the replaced node is present in gossip, we need check that</comment>
                <comment type="line">// it is not in fact live.</comment>
                <comment type="line">// We choose to not include the EndpointState provided during the shadow round</comment>
                <comment type="line">// as its possible to include more state than is desired, so by creating a</comment>
                <comment type="line">// new empty endpoint without that information we can control what is in our</comment>
                <comment type="line">// local gossip state</comment>
                <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>initializeUnreachableNodeUnsafe</name></name><argument_list>(<argument><expr><name>replaceAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name>UUID</name></type> <name>localHostId</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getOrInitializeLocalHostId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isReplacingSameAddress</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>localHostId</name> <operator>=</operator> <call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getHostId</name></name><argument_list>(<argument><expr><name>replaceAddress</name></expr></argument>, <argument><expr><name>epStates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>setLocalHostId</name></name><argument_list>(<argument><expr><name>localHostId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// use the replacee's host Id as our own so we receive hints, etc</comment>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>localHostId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>validateReplacementBootstrapTokens</name><parameter_list>(<parameter><decl><type><name>TokenMetadata</name></type> <name>tokenMetadata</name></decl></parameter>,
                                                                        <parameter><decl><type><name>InetAddressAndPort</name></type> <name>replaceAddress</name></decl></parameter>,
                                                                        <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>bootstrapTokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>conflicts</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Token</name></type> <name>token</name> <range>: <expr><name>bootstrapTokens</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>conflict</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpoint</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>conflict</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>conflict</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>replaceAddress</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>conflicts</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpoint</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>conflicts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>error</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Conflicting token ownership information detected between "</literal> <operator>+</operator>
                                         <literal type="string">"gossip and current ring view during proposed replacement "</literal> <operator>+</operator>
                                         <literal type="string">"of %s. Some tokens identified in gossip for the node being "</literal> <operator>+</operator>
                                         <literal type="string">"replaced are currently owned by other peers: %s"</literal></expr></argument>,
                                         <argument><expr><name>replaceAddress</name></expr></argument>,
                                         <argument><expr><call><name><name>conflicts</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call>
                                                  <operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                                  <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"("</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></block_content></block></lambda></expr></argument> )</argument_list></call>
                                                  <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>joining</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw>

        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>bootstrapTokens</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>checkForEndpointCollision</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>localHostId</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>peers</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.allow_unsafe_join"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Skipping endpoint collision check as cassandra.allow_unsafe_join=true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Starting shadow gossip round to check for endpoint collision"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>epStates</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>doShadowRound</name></name><argument_list>(<argument><expr><name>peers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>epStates</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSeeds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Unable to gossip with any peers but continuing anyway since node is in its own seed list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// If bootstrapping, check whether any previously known status for the endpoint makes it unsafe to do so.</comment>
        <comment type="line">// If not bootstrapping, compare the host id for this endpoint learned from gossip (if any) with the local</comment>
        <comment type="line">// one, which was either read from system.local or generated at startup. If a learned id is present &amp;</comment>
        <comment type="line">// doesn't match the local, then the node needs replacing</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>isSafeForStartup</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>localHostId</name></expr></argument>, <argument><expr><call><name>shouldBootstrap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>epStates</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"A node with address %s already exists, cancelling join. "</literal> <operator>+</operator>
                                                     <literal type="string">"Use cassandra.replace_address if you want to replace this node."</literal></expr></argument>,
                                                     <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>validateEndpointSnitch</name><argument_list>(<argument><expr><call><name><name>epStates</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>shouldBootstrap</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>useStrictConsistency</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>allowSimultaneousMoves</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>epStates</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <comment type="line">// ignore local node or empty status</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name>VersionedValue</name></type> <name>value</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>pieces</name> <init>= <expr><call><name>splitValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <assert>assert <expr><operator>(</operator><name><name>pieces</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>
                <decl_stmt><decl><type><name>String</name></type> <name>state</name> <init>= <expr><name><name>pieces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_BOOTSTRAPPING</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>state</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_LEAVING</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>state</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_MOVING</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Other bootstrapping/leaving/moving nodes detected, cannot bootstrap while cassandra.consistent.rangemovement is true"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateEndpointSnitch</name><parameter_list>(<parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>endpointStates</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>datacenters</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>racks</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>endpointStates</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><call><name><name>endpointStates</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>VersionedValue</name></type> <name>val</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>DC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>datacenters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>racks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>

        <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>snitch</name><operator>.</operator><name>validate</name></name><argument_list>(<argument><expr><name>datacenters</name></expr></argument>, <argument><expr><name>racks</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>allowSimultaneousMoves</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>allowSimultaneousMoves</name> <operator>&amp;&amp;</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNumTokens</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// for testing only</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsafeInitialize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>gossipActive</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// needed for node-ring gathering.</comment>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>NET_VERSION</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>networkVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>listen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>initServer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>initServer</name><argument_list>(<argument><expr><name>RING_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>initServer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>delay</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Cassandra version: {}"</literal></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getReleaseVersionString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"CQL version: {}"</literal></expr></argument>, <argument><expr><name><name>QueryProcessor</name><operator>.</operator><name>CQL_VERSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Native protocol supported versions: {} (default: {})"</literal></expr></argument>,
                    <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><call><name><name>ProtocolVersion</name><operator>.</operator><name>supportedVersions</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>CURRENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{<block_content>
            <comment type="line">// Ensure StorageProxy is initialized on start-up; see CASSANDRA-3797.</comment>
            <expr_stmt><expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"org.apache.cassandra.service.StorageProxy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// also IndexSummaryManager, which is otherwise unreferenced</comment>
            <expr_stmt><expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"org.apache.cassandra.io.sstable.IndexSummaryManager"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <if_stmt><if>if <condition>(<expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.load_ring_state"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Loading persisted ring state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>populatePeerTokenMetadata</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <range>: <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getAllEndpoints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>runInGossipStageBlocking</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addSavedEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// daemon threads, like our executors', continue to run while shutdown hooks are invoked</comment>
        <expr_stmt><expr><name>drainOnShutdown</name> <operator>=</operator> <call><name><name>NamedThreadFactory</name><operator>.</operator><name>createThread</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>WrappedRunnable</name></super><argument_list>()</argument_list>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws>
            <block>{<block_content>
                <expr_stmt><expr><call><name>drain</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>FBUtilities</name><operator>.</operator><name>isWindows</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>WindowsTimer</name><operator>.</operator><name>endTimerPeriod</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getWindowsTimerInterval</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name><name>LoggingSupportFactory</name><operator>.</operator><name>getLoggingSupport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>onShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><literal type="string">"StorageServiceShutdownHook"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addShutdownHook</name><argument_list>(<argument><expr><name>drainOnShutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>replacing</name> <operator>=</operator> <call><name>isReplacing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.start_gossip"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Not starting gossip as requested."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>prepareToJoin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Has to be called after the host id has potentially changed in prepareToJoin().</comment>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>CacheService</name><operator>.</operator><name>instance</name><operator>.</operator><name>counterCache</name><operator>.</operator><name>loadSavedAsync</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Error loading counter cache"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <if_stmt><if>if <condition>(<expr><name>joinRing</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>joinTokenRing</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getSavedTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateNormalTokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// order is important here, the gossiper can fire in between adding these two states.  It's ok to send TOKENS without STATUS, but *not* vice versa.</comment>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>states</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>TOKENS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>tokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>hibernate</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>hibernate</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationStates</name></name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>doAuthSetup</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Not joining ring as requested. Use JMX (StorageService-&gt;joinRing()) to initiate ring joining"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>populateTokenMetadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.load_ring_state"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>populatePeerTokenMetadata</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// if we have not completed bootstrapping, we should not add ourselves as a normal token</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shouldBootstrap</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateNormalTokens</name></name><argument_list>(<argument><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getSavedTokens</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Token metadata: {}"</literal></expr></argument>, <argument><expr><name>tokenMetadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>populatePeerTokenMetadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Populating token metadata from system tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>loadedTokens</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>loadTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// entry has been mistakenly added, delete it</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>loadedTokens</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>removeEndpoint</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>loadedHostIds</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>loadHostIds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>ep</name> <range>: <expr><call><name><name>loadedTokens</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateNormalTokens</name></name><argument_list>(<argument><expr><call><name><name>loadedTokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>loadedHostIds</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateHostId</name></name><argument_list>(<argument><expr><call><name><name>loadedHostIds</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isReplacing</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.replace_address_first_boot"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>SystemKeyspace</name><operator>.</operator><name>bootstrapComplete</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Replace address on first boot requested; this node is already bootstrapped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceAddress</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * In the event of forceful termination we need to remove the shutdown hook to prevent hanging (OOM for instance)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeShutdownHook</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>drainOnShutdown</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeShutdownHook</name><argument_list>(<argument><expr><name>drainOnShutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>FBUtilities</name><operator>.</operator><name>isWindows</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>WindowsTimer</name><operator>.</operator><name>endTimerPeriod</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getWindowsTimerInterval</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>shouldBootstrap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isAutoBootstrap</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>SystemKeyspace</name><operator>.</operator><name>bootstrapComplete</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isSeed</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSeed</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSeeds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>prepareToJoin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>MigrationCoordinator</name><operator>.</operator><name>instance</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>joined</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>appStates</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>wasDecommissioned</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.override_decommission"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"This node was decommissioned, but overriding by operator request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>setBootstrapState</name></name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>BootstrapState</name><operator>.</operator><name>COMPLETED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"This node was decommissioned and will not rejoin the ring unless cassandra.override_decommission=true has been set, or all existing data is removed and the node is bootstrapped again"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceTokens</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceNode</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Replace method removed; use cassandra.replace_address instead"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>listen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>UUID</name></type> <name>localHostId</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getOrInitializeLocalHostId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>replacing</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>localHostId</name> <operator>=</operator> <call><name>prepareForReplacement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>appStates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>TOKENS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>tokens</name></name><argument_list>(<argument><expr><name>bootstrapTokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shouldBootstrap</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Will not do replace procedure, persist the tokens we're taking over locally</comment>
                    <comment type="line">// so that they don't get clobbered with auto generated ones in joinTokenRing</comment>
                    <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updateTokens</name></name><argument_list>(<argument><expr><name>bootstrapTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><call><name>isReplacingSameAddress</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">//only go into hibernate state if replacing the same address (CASSANDRA-8523)</comment>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Writes will not be forwarded to this node during replacement because it has the same address as "</literal> <operator>+</operator>
                                <literal type="string">"the node to be replaced ({}). If the previous node has been down for longer than max_hint_window_in_ms, "</literal> <operator>+</operator>
                                <literal type="string">"repair must be run after the replacement process in order to make this node consistent."</literal></expr></argument>,
                                <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>appStates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>hibernate</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>appStates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>hibernate</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>MigrationCoordinator</name><operator>.</operator><name>instance</name><operator>.</operator><name>removeAndIgnoreEndpoint</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>checkForEndpointCollision</name><argument_list>(<argument><expr><name>localHostId</name></expr></argument>, <argument><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>loadHostIds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>bootstrapComplete</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkState</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>Config</name><operator>.</operator><name>isClientMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// tokens are only ever saved to system.local after bootstrap has completed and we're joining the ring,</comment>
                    <comment type="line">// or when token update operations (move, decom) are completed</comment>
                    <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>savedTokens</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getSavedTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>savedTokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>appStates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>TOKENS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>tokens</name></name><argument_list>(<argument><expr><name>savedTokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// have to start the gossip service before we can see any info on other nodes.  this is necessary</comment>
            <comment type="line">// for bootstrap to get the load info it needs.</comment>
            <comment type="line">// (we won't be part of the storage ring though until we add a counterId to our state, below.)</comment>
            <comment type="line">// Seed the host ID-to-endpoint map with our own ID.</comment>
            <expr_stmt><expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateHostId</name><argument_list>(<argument><expr><name>localHostId</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>appStates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>NET_VERSION</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>networkVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>appStates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>HOST_ID</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>hostId</name></name><argument_list>(<argument><expr><name>localHostId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>appStates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>NATIVE_ADDRESS_AND_PORT</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>nativeaddressAndPort</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastNativeAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>appStates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RPC_ADDRESS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>rpcaddress</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getJustBroadcastNativeAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>appStates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RELEASE_VERSION</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>releaseVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>appStates</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>SSTABLE_VERSIONS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>sstableVersions</name></name><argument_list>(<argument><expr><call><name><name>sstablesTracker</name><operator>.</operator><name>versionsInUse</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Starting up server gossip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>incrementAndGetGeneration</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>appStates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// needed for node-ring gathering.</comment>
            <expr_stmt><expr><name>gossipActive</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>sstablesTracker</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>notification</name></decl></parameter>, <parameter><decl><name>o</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>notification</name> <operator>instanceof</operator> <name>SSTablesVersionsInUseChangeNotification</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>VersionAndType</name></argument>&gt;</argument_list></name></type> <name>versions</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSTablesVersionsInUseChangeNotification</name><operator>)</operator><name>notification</name><operator>)</operator><operator>.</operator><name>versionsInUse</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Updating local sstables version in Gossip to {}"</literal></expr></argument>, <argument><expr><name>versions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>SSTABLE_VERSIONS</name></name></expr></argument>,
                                                           <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>sstableVersions</name></name><argument_list>(<argument><expr><name>versions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// gossip snitch infos (local DC and rack)</comment>
            <expr_stmt><expr><call><name>gossipSnitchInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// gossip Schema.emptyVersion forcing immediate check for schema updates (see MigrationManager#maybeScheduleSchemaPull)</comment>
            <expr_stmt><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>updateVersionAndAnnounce</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Ensure we know our own actual Schema UUID in preparation for updates</comment>
            <expr_stmt><expr><call><name><name>LoadBroadcaster</name><operator>.</operator><name>instance</name><operator>.</operator><name>startBroadcasting</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>HintsService</name><operator>.</operator><name>instance</name><operator>.</operator><name>startDispatch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>BatchlogManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>waitForSchema</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>delay</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// first sleep the delay to make sure we see all our peers</comment>
        <for>for <control>(<init><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>delay</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1000</literal></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// if we see schema, we can proceed to the next check directly</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"current schema version: {}"</literal></expr></argument>, <argument><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>boolean</name></type> <name>schemasReceived</name> <init>= <expr><call><name><name>MigrationCoordinator</name><operator>.</operator><name>instance</name><operator>.</operator><name>awaitSchemaRequests</name></name><argument_list>(<argument><expr><name>SCHEMA_DELAY_MILLIS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>schemasReceived</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"There are nodes in the cluster with a different schema version than us we did not merged schemas from, "</literal> <operator>+</operator>
                                  <literal type="string">"our version : (%s), outstanding versions -&gt; endpoints : %s. Use -Dcassandra.skip_schema_check=true "</literal> <operator>+</operator>
                                  <literal type="string">"to ignore this, -Dcassandra.skip_schema_check_for_endpoints=&lt;ep1[,epN]&gt; to skip specific endpoints,"</literal> <operator>+</operator>
                                  <literal type="string">"or -Dcassandra.skip_schema_check_for_versions=&lt;ver1[,verN]&gt; to skip specific schema versions"</literal></expr></argument>,
                                  <argument><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>MigrationCoordinator</name><operator>.</operator><name>instance</name><operator>.</operator><name>outstandingVersions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>REQUIRE_SCHEMAS</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Didn't receive schemas for all known versions within the timeout. "</literal> <operator>+</operator>
                                       <literal type="string">"Use -Dcassandra.skip_schema_check=true to skip this check."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>joinTokenRing</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>schemaTimeoutMillis</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>joinTokenRing</name><argument_list>(<argument><expr><operator>!</operator><name>isSurveyMode</name></expr></argument>, <argument><expr><call><name>shouldBootstrap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>schemaTimeoutMillis</name></expr></argument>, <argument><expr><name>INDEFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>joinTokenRing</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>finishJoiningRing</name></decl></parameter>,
                              <parameter><decl><type><name>boolean</name></type> <name>shouldBootstrap</name></decl></parameter>,
                              <parameter><decl><type><name>long</name></type> <name>schemaTimeoutMillis</name></decl></parameter>,
                              <parameter><decl><type><name>long</name></type> <name>bootstrapTimeoutMillis</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><name>joined</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <comment type="line">// We bootstrap if we haven't successfully bootstrapped before, as long as we are not a seed.</comment>
        <comment type="line">// If we are a seed, or if the user manually sets auto_bootstrap to false,</comment>
        <comment type="line">// we'll skip streaming data from other nodes and jump directly into the ring.</comment>
        <comment type="line">//</comment>
        <comment type="line">// The seed check allows us to skip the RING_DELAY sleep for the single-node cluster case,</comment>
        <comment type="line">// which is useful for both new users and testing.</comment>
        <comment type="line">//</comment>
        <comment type="line">// We attempted to replace this with a schema-presence check, but you need a meaningful sleep</comment>
        <comment type="line">// to get schema info from gossip which defeats the purpose.  See CASSANDRA-4427 for the gory details.</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>current</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Bootstrap variables: {} {} {} {}"</literal></expr></argument>,
                         <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isAutoBootstrap</name></name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>bootstrapInProgress</name></name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>bootstrapComplete</name></name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSeeds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isAutoBootstrap</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>SystemKeyspace</name><operator>.</operator><name>bootstrapComplete</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSeeds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"This node will not auto bootstrap because it is configured to be a seed node."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>dataAvailable</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt> <comment type="line">// make this to false when bootstrap streaming failed</comment>

        <if_stmt><if>if <condition>(<expr><name>shouldBootstrap</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>current</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>prepareForBootstrap</name><argument_list>(<argument><expr><name>schemaTimeoutMillis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dataAvailable</name> <operator>=</operator> <call><name>bootstrap</name><argument_list>(<argument><expr><name>bootstrapTokens</name></expr></argument>, <argument><expr><name>bootstrapTimeoutMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>bootstrapTokens</name> <operator>=</operator> <call><name><name>SystemKeyspace</name><operator>.</operator><name>getSavedTokens</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>bootstrapTokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>bootstrapTokens</name> <operator>=</operator> <call><name><name>BootStrapper</name><operator>.</operator><name>getBootstrapTokens</name></name><argument_list>(<argument><expr><name>tokenMetadata</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>schemaTimeoutMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>bootstrapTokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNumTokens</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Cannot change the number of tokens from "</literal> <operator>+</operator> <call><name><name>bootstrapTokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" to "</literal> <operator>+</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNumTokens</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Using saved tokens {}"</literal></expr></argument>, <argument><expr><name>bootstrapTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>setUpDistributedSystemKeyspaces</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>finishJoiningRing</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>dataAvailable</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>finishJoiningRing</name><argument_list>(<argument><expr><name>shouldBootstrap</name></expr></argument>, <argument><expr><name>bootstrapTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// remove the existing info about the replaced node.</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>current</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>runInGossipStageBlocking</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>existing</name> <range>: <expr><name>current</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>replacedEndpoint</name></name><argument_list>(<argument><expr><name>existing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Some data streaming failed. Use nodetool to check bootstrap state and resume. For more, see `nodetool help bootstrap`. {}"</literal></expr></argument>, <argument><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getBootstrapState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>dataAvailable</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Startup complete, but write survey mode is active, not becoming an active ring member. Use JMX (StorageService-&gt;joinRing()) to finalize ring joining."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Some data streaming failed. Use nodetool to check bootstrap state and resume. For more, see `nodetool help bootstrap`. {}"</literal></expr></argument>, <argument><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getBootstrapState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isReplacingSameAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>replaceAddress</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>replaceAddress</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>replaceAddress</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>gossipSnitchInfo</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dc</name> <init>= <expr><call><name><name>snitch</name><operator>.</operator><name>getLocalDatacenter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>rack</name> <init>= <expr><call><name><name>snitch</name><operator>.</operator><name>getLocalRack</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>DC</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>datacenter</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RACK</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>rack</name></name><argument_list>(<argument><expr><name>rack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>joinRing</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>SystemKeyspace</name><operator>.</operator><name>BootstrapState</name></name></type> <name>state</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getBootstrapState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>joinRing</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>BootstrapState</name><operator>.</operator><name>IN_PROGRESS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>joinRing</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>resumedBootstrap</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>joined</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Joining ring by operator request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name>joinTokenRing</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>doAuthSetup</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>isSurveyMode</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// if isSurveyMode is on then verify isBootstrapMode</comment>
            <comment type="line">// node can join the ring even if isBootstrapMode is true which should not happen</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isBootstrapMode</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Leaving write survey mode and joining ring at operator request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>finishJoiningRing</name><argument_list>(<argument><expr><name>resumedBootstrap</name></expr></argument>, <argument><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getSavedTokens</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>doAuthSetup</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>isSurveyMode</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>daemon</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Can't join the ring because in write_survey mode and bootstrap hasn't completed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>isBootstrapMode</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// bootstrap is not complete hence node cannot join the ring</comment>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Can't join the ring because bootstrap hasn't completed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>executePreJoinTasks</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>bootstrap</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>StreamSupport</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>spliterator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>cfs</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getUserKeyspaces</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>cfs</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>cfs</name><operator>.</operator><name>indexManager</name><operator>.</operator><name>executePreJoinTasksBlocking</name></name><argument_list>(<argument><expr><name>bootstrap</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>finishJoiningRing</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>didBootstrap</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// start participating in the ring.</comment>
        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>JOINING</name></name></expr></argument>, <argument><expr><literal type="string">"Finish joining ring"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>setBootstrapState</name></name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>BootstrapState</name><operator>.</operator><name>COMPLETED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executePreJoinTasks</name><argument_list>(<argument><expr><name>didBootstrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTokens</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <assert>assert <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</assert>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>doAuthSetup</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>setUpSchema</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>authSetupCalled</name><operator>.</operator><name>getAndSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>setUpSchema</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutation</name> <init>= <expr><call><name>evolveSystemKeyspace</name><argument_list>(<argument><expr><call><name><name>AuthKeyspace</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>GENERATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>mutation</name><operator>.</operator><name>ifPresent</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>value</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>FBUtilities</name><operator>.</operator><name>waitOnFuture</name></name><argument_list>(<argument><expr><call><name><name>MigrationManager</name><operator>.</operator><name>announceWithoutPush</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRoleManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthenticator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthorizer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNetworkAuthorizer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthSchemaChangeListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>authSetupComplete</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAuthSetupComplete</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>authSetupComplete</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>authSetupCalled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>authSetupCalled</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setUpDistributedSystemKeyspaces</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>changes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>evolveSystemKeyspace</name><argument_list>(            <argument><expr><call><name><name>TraceKeyspace</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>,             <argument><expr><name><name>TraceKeyspace</name><operator>.</operator><name>GENERATION</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ifPresent</name><argument_list>(<argument><expr><name>changes</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>evolveSystemKeyspace</name><argument_list>(<argument><expr><call><name><name>SystemDistributedKeyspace</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SystemDistributedKeyspace</name><operator>.</operator><name>GENERATION</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ifPresent</name><argument_list>(<argument><expr><name>changes</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>evolveSystemKeyspace</name><argument_list>(             <argument><expr><call><name><name>AuthKeyspace</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>,              <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>GENERATION</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ifPresent</name><argument_list>(<argument><expr><name>changes</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>changes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>FBUtilities</name><operator>.</operator><name>waitOnFuture</name></name><argument_list>(<argument><expr><call><name><name>MigrationManager</name><operator>.</operator><name>announceWithoutPush</name></name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isJoined</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>isSurveyMode</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>rebuild</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sourceDc</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>rebuild</name><argument_list>(<argument><expr><name>sourceDc</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>rebuild</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sourceDc</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>specificSources</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// check ongoing rebuild</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>isRebuilding</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Node is still rebuilding. Check nodetool netstats."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// check the arguments</comment>
        <if_stmt><if>if <condition>(<expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>tokens</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Cannot specify tokens without keyspace."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"rebuild from dc: {}, {}, {}"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>sourceDc</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"(any dc)"</literal></expr> </then><else>: <expr><name>sourceDc</name></expr></else></ternary></expr></argument>,
                    <argument><expr><ternary><condition><expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"(All keyspaces)"</literal></expr> </then><else>: <expr><name>keyspace</name></expr></else></ternary></expr></argument>,
                    <argument><expr><ternary><condition><expr><name>tokens</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"(All tokens)"</literal></expr> </then><else>: <expr><name>tokens</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>RangeStreamer</name></type> <name>streamer</name> <init>= <expr><operator>new</operator> <call><name>RangeStreamer</name><argument_list>(<argument><expr><name>tokenMetadata</name></expr></argument>,
                                                       <argument><expr><literal type="null">null</literal></expr></argument>,
                                                       <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                       <argument><expr><name><name>StreamOperation</name><operator>.</operator><name>REBUILD</name></name></expr></argument>,
                                                       <argument><expr><name>useStrictConsistency</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>replacing</name></expr></argument>,
                                                       <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                       <argument><expr><name>streamStateStore</name></expr></argument>,
                                                       <argument><expr><literal type="boolean">false</literal></expr></argument>,
                                                       <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStreamingConnectionsPerHost</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sourceDc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>streamer</name><operator>.</operator><name>addSourceFilter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>RangeStreamer</name><operator>.</operator><name>SingleDatacenterFilter</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sourceDc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspaceName</name> <range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonLocalStrategyKeyspaces</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>streamer</name><operator>.</operator><name>addRanges</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><call><name>getLocalReplicas</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>tokens</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>streamer</name><operator>.</operator><name>addRanges</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name>getLocalReplicas</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>Token</name><operator>.</operator><name>TokenFactory</name></name></type> <name>factory</name> <init>= <expr><call><name>getTokenFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Pattern</name></type> <name>rangePattern</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"\\(\\s*(-?\\w+)\\s*,\\s*(-?\\w+)\\s*\\]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <init>(<decl><type><name>Scanner</name></type> <name>tokenScanner</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
                <block>{<block_content>
                    <while>while <condition>(<expr><call><name><name>tokenScanner</name><operator>.</operator><name>findInLine</name></name><argument_list>(<argument><expr><name>rangePattern</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>MatchResult</name></type> <name>range</name> <init>= <expr><call><name><name>tokenScanner</name><operator>.</operator><name>match</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Token</name></type> <name>startToken</name> <init>= <expr><call><name><name>factory</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name><name>range</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Token</name></type> <name>endToken</name> <init>= <expr><call><name><name>factory</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name><name>range</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"adding range: ({},{}]"</literal></expr></argument>, <argument><expr><name>startToken</name></expr></argument>, <argument><expr><name>endToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>startToken</name></expr></argument>, <argument><expr><name>endToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>
                    <if_stmt><if>if <condition>(<expr><call><name><name>tokenScanner</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unexpected string: "</literal> <operator>+</operator> <call><name><name>tokenScanner</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                </block_content>}</block></try>

                <comment type="line">// Ensure all specified ranges are actually ranges owned by this host</comment>
                <decl_stmt><decl><type><name>RangesAtEndpoint</name></type> <name>localReplicas</name> <init>= <expr><call><name>getLocalReplicas</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>RangesAtEndpoint</name><operator>.</operator><name>Builder</name></name></type> <name>streamRanges</name> <init>= <expr><operator>new</operator> <call><name><name>RangesAtEndpoint</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>specifiedRange</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>foundParentRange</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>Replica</name></type> <name>localReplica</name> <range>: <expr><name>localReplicas</name></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>localReplica</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>specifiedRange</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name><name>streamRanges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>localReplica</name><operator>.</operator><name>decorateSubrange</name></name><argument_list>(<argument><expr><name>specifiedRange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>foundParentRange</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>foundParentRange</name></expr>)</condition>
                    <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"The specified range %s is not a range that is owned by this node. Please ensure that all token ranges specified to be rebuilt belong to this node."</literal></expr></argument>, <argument><expr><call><name><name>specifiedRange</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <if_stmt><if>if <condition>(<expr><name>specificSources</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>stringHosts</name> <init>= <expr><call><name><name>specificSources</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>sources</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>stringHosts</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>String</name></type> <name>stringHost</name> <range>: <expr><name>stringHosts</name></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <try>try
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <init>= <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>stringHost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
                            <block>{<block_content>
                                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"This host was specified as a source for rebuilding. Sources for a rebuild can only be other nodes in the cluster."</literal></expr></argument>)</argument_list></call></expr>;</throw>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name><name>sources</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                        <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>ex</name></decl></parameter>)</parameter_list>
                        <block>{<block_content>
                            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unknown host specified "</literal> <operator>+</operator> <name>stringHost</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
                        </block_content>}</block></catch></try>
                    </block_content>}</block></for>
                    <expr_stmt><expr><call><name><name>streamer</name><operator>.</operator><name>addSourceFilter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>RangeStreamer</name><operator>.</operator><name>AllowedSourcesFilter</name></name><argument_list>(<argument><expr><name>sources</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name><name>streamer</name><operator>.</operator><name>addRanges</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>streamRanges</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name>StreamResultFuture</name></type> <name>resultFuture</name> <init>= <expr><call><name><name>streamer</name><operator>.</operator><name>fetchAsync</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// wait for result</comment>
            <expr_stmt><expr><call><name><name>resultFuture</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Interrupted while waiting on rebuild streaming"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// This is used exclusively through JMX, so log the full trace but only throw a simple RTE</comment>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error while rebuilding node"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error while rebuilding node: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <comment type="line">// rebuild is done (successfully or not)</comment>
            <expr_stmt><expr><call><name><name>isRebuilding</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRpcTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setRpcTimeout</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"set rpc timeout to {} ms"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getRpcTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReadRpcTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setReadRpcTimeout</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"set read rpc timeout to {} ms"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getReadRpcTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReadRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeRpcTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setRangeRpcTimeout</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"set range rpc timeout to {} ms"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getRangeRpcTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRangeRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWriteRpcTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"set write rpc timeout to {} ms"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getWriteRpcTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInternodeTcpConnectTimeoutInMS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setInternodeTcpConnectTimeoutInMS</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"set internode tcp connect timeout to {} ms"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInternodeTcpConnectTimeoutInMS</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeTcpConnectTimeoutInMS</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInternodeTcpUserTimeoutInMS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setInternodeTcpUserTimeoutInMS</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"set internode tcp user timeout to {} ms"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInternodeTcpUserTimeoutInMS</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeTcpUserTimeoutInMS</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInternodeStreamingTcpUserTimeoutInMS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"TCP user timeout cannot be negative for internode streaming connection. Got %s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setInternodeStreamingTcpUserTimeoutInMS</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"set internode streaming tcp user timeout to {} ms"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInternodeStreamingTcpUserTimeoutInMS</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeStreamingTcpUserTimeoutInMS</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCounterWriteRpcTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setCounterWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"set counter write rpc timeout to {} ms"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getCounterWriteRpcTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCounterWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCasContentionTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setCasContentionTimeout</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"set cas contention rpc timeout to {} ms"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getCasContentionTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCasContentionTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTruncateRpcTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setTruncateRpcTimeout</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"set truncate rpc timeout to {} ms"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTruncateRpcTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getTruncateRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStreamThroughputMbPerSec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>oldValue</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStreamThroughputOutboundMegabitsPerSec</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setStreamThroughputOutboundMegabitsPerSec</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>StreamManager</name><operator>.</operator><name>StreamRateLimiter</name><operator>.</operator><name>updateThroughput</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"setstreamthroughput: throttle set to {} Mb/s (was {} Mb/s)"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getStreamThroughputMbPerSec</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStreamThroughputOutboundMegabitsPerSec</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInterDCStreamThroughputMbPerSec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>oldValue</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInterDCStreamThroughputOutboundMegabitsPerSec</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setInterDCStreamThroughputOutboundMegabitsPerSec</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>StreamManager</name><operator>.</operator><name>StreamRateLimiter</name><operator>.</operator><name>updateInterDCThroughput</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"setinterdcstreamthroughput: throttle set to {} Mb/s (was {} Mb/s)"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInterDCStreamThroughputMbPerSec</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInterDCStreamThroughputOutboundMegabitsPerSec</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCompactionThroughputMbPerSec</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCompactionThroughputMbPerSec</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompactionThroughputMbPerSec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setCompactionThroughputMbPerSec</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>CompactionManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>setRate</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getBatchlogReplayThrottleInKB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getBatchlogReplayThrottleInKB</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBatchlogReplayThrottleInKB</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>throttleInKB</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setBatchlogReplayThrottleInKB</name></name><argument_list>(<argument><expr><name>throttleInKB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>BatchlogManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>setRate</name></name><argument_list>(<argument><expr><name>throttleInKB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getConcurrentCompactors</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getConcurrentCompactors</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setConcurrentCompactors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Number of concurrent compactors should be greater than 0."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setConcurrentCompactors</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>CompactionManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>setConcurrentCompactors</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>bypassConcurrentValidatorsLimit</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Enabling the ability to set concurrent validations to an unlimited value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>DatabaseDescriptor</name><operator>.</operator><name>allowUnlimitedConcurrentValidations</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>enforceConcurrentValidatorsLimit</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Disabling the ability to set concurrent validations to an unlimited value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>DatabaseDescriptor</name><operator>.</operator><name>allowUnlimitedConcurrentValidations</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr> ;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isConcurrentValidatorsLimitEnforced</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>DatabaseDescriptor</name><operator>.</operator><name>allowUnlimitedConcurrentValidations</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getConcurrentValidators</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getConcurrentValidations</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setConcurrentValidators</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>concurrentCompactors</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getConcurrentCompactors</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>concurrentCompactors</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>DatabaseDescriptor</name><operator>.</operator><name>allowUnlimitedConcurrentValidations</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
            <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Cannot set concurrent_validations greater than concurrent_compactors (%d)"</literal></expr></argument>,
                          <argument><expr><name>concurrentCompactors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Using default value of concurrent_compactors ({}) for concurrent_validations"</literal></expr></argument>, <argument><expr><name>concurrentCompactors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <name>concurrentCompactors</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Setting concurrent_validations to {}"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setConcurrentValidations</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>CompactionManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>setConcurrentValidations</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getConcurrentViewBuilders</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getConcurrentViewBuilders</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setConcurrentViewBuilders</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Number of concurrent view builders should be greater than 0."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setConcurrentViewBuilders</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>CompactionManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>setConcurrentViewBuilders</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getConcurrentViewBuilders</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isIncrementalBackupsEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isIncrementalBackupsEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncrementalBackupsEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setIncrementalBackupsEnabled</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation> <comment type="line">// only used by test</comment>
    <type><specifier>public</specifier> <name>void</name></type> <name>setMovingModeUnsafe</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>MOVING</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Only used in jvm dtest when not using GOSSIP.
     * See org.apache.cassandra.distributed.impl.Instance#startup(org.apache.cassandra.distributed.api.ICluster)
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setNormalModeUnsafe</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>NORMAL</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setMode</name><parameter_list>(<parameter><decl><type><name>Mode</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>log</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setMode</name><parameter_list>(<parameter><decl><type><name>Mode</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>log</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>operationMode</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>logMsg</name> <init>= <expr><ternary><condition><expr><name>msg</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>m</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>log</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><name>logMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><name>logMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>prepareForBootstrap</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>schemaDelay</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>collisions</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>bootstrapInProgress</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Detected previous bootstrap failure; retrying"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>setBootstrapState</name></name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>BootstrapState</name><operator>.</operator><name>IN_PROGRESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>JOINING</name></name></expr></argument>, <argument><expr><literal type="string">"waiting for ring information"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>waitForSchema</name><argument_list>(<argument><expr><name>schemaDelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>JOINING</name></name></expr></argument>, <argument><expr><literal type="string">"schema complete, ready to bootstrap"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>JOINING</name></name></expr></argument>, <argument><expr><literal type="string">"waiting for pending range calculation"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>blockUntilFinished</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>JOINING</name></name></expr></argument>, <argument><expr><literal type="string">"calculation complete, ready to bootstrap"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"... got ring + schema info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>useStrictConsistency</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>allowSimultaneousMoves</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
            <operator>(</operator>
            <call><name><name>tokenMetadata</name><operator>.</operator><name>getBootstrapTokens</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>valueSet</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name><name>tokenMetadata</name><operator>.</operator><name>getSizeOfLeavingEndpoints</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name><name>tokenMetadata</name><operator>.</operator><name>getSizeOfMovingEndpoints</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal>
            <operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>bootstrapTokens</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getBootstrapTokens</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>valueSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>leavingTokens</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getLeavingEndpoints</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>movingTokens</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getMovingEndpoints</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>e</name><operator>.</operator><name>right</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Other bootstrapping/leaving/moving nodes detected, cannot bootstrap while cassandra.consistent.rangemovement is true. Nodes detected, bootstrapping: %s; leaving: %s; moving: %s;"</literal></expr></argument>, <argument><expr><name>bootstrapTokens</name></expr></argument>, <argument><expr><name>leavingTokens</name></expr></argument>, <argument><expr><name>movingTokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get bootstrap tokens</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>replacing</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><literal type="string">"This node is already a member of the token ring; bootstrap aborted. (If replacing a dead node, remove the old one from the ring first.)"</literal></expr></init></decl>;</decl_stmt>
                <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>JOINING</name></name></expr></argument>, <argument><expr><literal type="string">"getting bootstrap token"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bootstrapTokens</name> <operator>=</operator> <call><name><name>BootStrapper</name><operator>.</operator><name>getBootstrapTokens</name></name><argument_list>(<argument><expr><name>tokenMetadata</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>schemaDelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isReplacingSameAddress</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <comment type="line">// Sleep additionally to make sure that the server actually is not alive</comment>
                    <comment type="line">// and giving it more time to gossip if alive.</comment>
                    <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name><name>LoadBroadcaster</name><operator>.</operator><name>BROADCAST_INTERVAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>

                <comment type="line">// check for operator errors...</comment>
                <for>for <control>(<init><decl><type><name>Token</name></type> <name>token</name> <range>: <expr><name>bootstrapTokens</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>existing</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpoint</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>existing</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>long</name></type> <name>nanoDelay</name> <init>= <expr><name>schemaDelay</name> <operator>*</operator> <literal type="number">1000000L</literal></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>existing</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getUpdateTimestamp</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>nanoDelay</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot replace a live node... "</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>collisions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>existing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot replace token "</literal> <operator>+</operator> <name>token</name> <operator>+</operator> <literal type="string">" which does not exist!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>RING_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>

            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>JOINING</name></name></expr></argument>, <argument><expr><literal type="string">"Replacing a node with token(s): "</literal> <operator>+</operator> <name>bootstrapTokens</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>collisions</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Bootstrap node by fetching data from other nodes.
     * If node is bootstrapping as a new node, then this also announces bootstrapping to the cluster.
     *
     * This blocks until streaming is done.
     *
     * @param tokens bootstrapping tokens
     * @return true if bootstrap succeeds.
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>bootstrap</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>bootstrapTimeoutMillis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>isBootstrapMode</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updateTokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// DON'T use setToken, that makes us part of the ring locally which is incorrect until we are done bootstrapping</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>replacing</name> <operator>||</operator> <operator>!</operator><call><name>isReplacingSameAddress</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// if not an existing token then bootstrap</comment>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>states</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>TOKENS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>tokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>replacing</name></expr>?</condition><then>
                                                            <expr><call><name><name>valueFactory</name><operator>.</operator><name>bootReplacingWithPort</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>:
                                                            <expr><call><name><name>valueFactory</name><operator>.</operator><name>bootstrapping</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>replacing</name></expr>?</condition><then>
                                                            <expr><call><name><name>valueFactory</name><operator>.</operator><name>bootReplacing</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><name>address</name></expr></argument>)</argument_list></call></expr> </then><else>:
                                                            <expr><call><name><name>valueFactory</name><operator>.</operator><name>bootstrapping</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationStates</name></name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>JOINING</name></name></expr></argument>, <argument><expr><literal type="string">"sleeping "</literal> <operator>+</operator> <name>RING_DELAY</name> <operator>+</operator> <literal type="string">" ms for pending range setup"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><name>RING_DELAY</name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// Dont set any state for the node which is bootstrapping the existing token...</comment>
            <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateNormalTokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>removeEndpoint</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>seenAnySeed</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Unable to contact any seeds: "</literal> <operator>+</operator> <call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getSeeds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.reset_bootstrap_progress"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Resetting bootstrap progress to start fresh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>resetAvailableRanges</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Force disk boundary invalidation now that local tokens are set</comment>
        <expr_stmt><expr><call><name>invalidateDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Future</name><argument_list type="generic">&lt;<argument><name>StreamState</name></argument>&gt;</argument_list></name></type> <name>bootstrapStream</name> <init>= <expr><call><name>startBootstrap</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>bootstrapTimeoutMillis</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>bootstrapStream</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>bootstrapTimeoutMillis</name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>bootstrapStream</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><call><name>bootstrapFinished</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Bootstrap completed for tokens {}"</literal></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error while waiting on bootstrap to complete. Bootstrap will have to be restarted."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Future</name><argument_list type="generic">&lt;<argument><name>StreamState</name></argument>&gt;</argument_list></name></type> <name>startBootstrap</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>JOINING</name></name></expr></argument>, <argument><expr><literal type="string">"Starting to bootstrap..."</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BootStrapper</name></type> <name>bootstrapper</name> <init>= <expr><operator>new</operator> <call><name>BootStrapper</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>tokenMetadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bootstrapper</name><operator>.</operator><name>addProgressListener</name></name><argument_list>(<argument><expr><name>progressSupport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>bootstrapper</name><operator>.</operator><name>bootstrap</name></name><argument_list>(<argument><expr><name>streamStateStore</name></expr></argument>, <argument><expr><name>useStrictConsistency</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>replacing</name></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// handles token update</comment>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>invalidateDiskBoundaries</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>store</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>concatWithIndexes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>invalidateDiskBoundaries</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * All MVs have been created during bootstrap, so mark them as built
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>markViewsAsBuilt</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getUserKeyspaces</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ViewMetadata</name></type> <name>view</name><range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceMetadata</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><name>views</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>finishViewBuildStatus</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>keyspace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Called when bootstrap did finish successfully
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>bootstrapFinished</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>markViewsAsBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>isBootstrapMode</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>resumeBootstrap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isBootstrapMode</name> <operator>&amp;&amp;</operator> <call><name><name>SystemKeyspace</name><operator>.</operator><name>bootstrapInProgress</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Resuming bootstrap..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// get bootstrap tokens saved in system keyspace</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getSavedTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// already bootstrapped ranges are filtered during bootstrap</comment>
            <decl_stmt><decl><type><name>BootStrapper</name></type> <name>bootstrapper</name> <init>= <expr><operator>new</operator> <call><name>BootStrapper</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>tokenMetadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>bootstrapper</name><operator>.</operator><name>addProgressListener</name></name><argument_list>(<argument><expr><name>progressSupport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>StreamState</name></argument>&gt;</argument_list></name></type> <name>bootstrapStream</name> <init>= <expr><call><name><name>bootstrapper</name><operator>.</operator><name>bootstrap</name></name><argument_list>(<argument><expr><name>streamStateStore</name></expr></argument>, <argument><expr><name>useStrictConsistency</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>replacing</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// handles token update</comment>
            <expr_stmt><expr><call><name><name>Futures</name><operator>.</operator><name>addCallback</name></name><argument_list>(<argument><expr><name>bootstrapStream</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>FutureCallback</name><argument_list type="generic">&lt;<argument><name>StreamState</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <function><annotation>@<name>Override</name></annotation>
                <type><specifier>public</specifier> <name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>StreamState</name></type> <name>streamState</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <try>try
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>bootstrapFinished</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>isSurveyMode</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Startup complete, but write survey mode is active, not becoming an active ring member. Use JMX (StorageService-&gt;joinRing()) to finalize ring joining."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
                            <expr_stmt><expr><name>isSurveyMode</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>progressSupport</name><operator>.</operator><name>progress</name></name><argument_list>(<argument><expr><literal type="string">"bootstrap"</literal></expr></argument>, <argument><expr><call><name><name>ProgressEvent</name><operator>.</operator><name>createNotification</name></name><argument_list>(<argument><expr><literal type="string">"Joining ring..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>finishJoiningRing</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>bootstrapTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>doAuthSetup</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><call><name><name>progressSupport</name><operator>.</operator><name>progress</name></name><argument_list>(<argument><expr><literal type="string">"bootstrap"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ProgressEvent</name><argument_list>(<argument><expr><name><name>ProgressEventType</name><operator>.</operator><name>COMPLETE</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Resume bootstrap complete"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNativeTransportRunning</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>daemon</name><operator>.</operator><name>initializeClientTransports</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>daemon</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Resume complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>onFailure</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <throw>throw <expr><name>e</name></expr>;</throw>
                    </block_content>}</block></catch></try>
                </block_content>}</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <type><specifier>public</specifier> <name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><literal type="string">"Error during bootstrap: "</literal></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>ExecutionException</name> <operator>&amp;&amp;</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>message</name> <operator>+=</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><name>message</name> <operator>+=</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>progressSupport</name><operator>.</operator><name>progress</name></name><argument_list>(<argument><expr><literal type="string">"bootstrap"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ProgressEvent</name><argument_list>(<argument><expr><name><name>ProgressEventType</name><operator>.</operator><name>ERROR</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>progressSupport</name><operator>.</operator><name>progress</name></name><argument_list>(<argument><expr><literal type="string">"bootstrap"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ProgressEvent</name><argument_list>(<argument><expr><name><name>ProgressEventType</name><operator>.</operator><name>COMPLETE</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Resume bootstrap complete"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></function>
            }</block></class></expr></argument>, <argument><expr><call><name><name>MoreExecutors</name><operator>.</operator><name>directExecutor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Resuming bootstrap is requested, but the node is already bootstrapped."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getConcurrency</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stageNames</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Stream</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stageStream</name> <init>= <expr><ternary><condition><expr><call><name><name>stageNames</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>stream</name><argument_list>(<argument><expr><call><name><name>Stage</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>stageNames</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Stage</name><operator>::</operator><name>fromPoolName</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>stageStream</name><operator>.</operator><name>collect</name></name><argument_list>(<argument><expr><call><name>toMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>s</name><operator>.</operator><name>jmxName</name></name></expr></block_content></block></lambda></expr></argument>,
                                         <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getCorePoolSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getMaximumPoolSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setConcurrency</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>threadPoolName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newCorePoolSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newMaximumPoolSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Stage</name></type> <name>stage</name> <init>= <expr><call><name><name>Stage</name><operator>.</operator><name>fromPoolName</name></name><argument_list>(<argument><expr><name>threadPoolName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>newCorePoolSize</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>setCorePoolSize</name></name><argument_list>(<argument><expr><name>newCorePoolSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>setMaximumPoolSize</name></name><argument_list>(<argument><expr><name>newMaximumPoolSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBootstrapMode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>isBootstrapMode</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TokenMetadata</name></type> <name>getTokenMetadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>tokenMetadata</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRangeToEndpointMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getRangeToEndpointMap</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRangeToEndpointWithPortMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
         <return>return <expr><call><name>getRangeToEndpointMap</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * for a keyspace, return the ranges and corresponding listen addresses.
     * @param keyspace
     * @return the endpoint map
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRangeToEndpointMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="block">/* All the ranges for the tokens */</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name>getRangeToAddressMap</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>asList</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Replicas</name><operator>.</operator><name>stringify</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>map</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return the native address associated with an endpoint as a string.
     * @param endpoint The endpoint to get rpc address for
     * @return the native address
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getNativeaddress</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>endpoint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastNativeAddressAndPort</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>(<argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>NATIVE_ADDRESS_AND_PORT</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>address</name> <init>= <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>NATIVE_ADDRESS_AND_PORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>address</name><operator>.</operator><name>getHostAddress</name></name><argument_list>(<argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RPC_ADDRESS</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>endpoint</name><operator>.</operator><name>address</name><operator>.</operator><name>getHostAddress</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNativeTransportPort</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RPC_ADDRESS</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNativeTransportPort</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRangeToRpcaddressMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getRangeToNativeaddressMap</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRangeToNativeaddressWithPortMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getRangeToNativeaddressMap</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * for a keyspace, return the ranges and corresponding RPC addresses for a given keyspace.
     * @param keyspace
     * @return the endpoint map
     */</comment>
    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRangeToNativeaddressMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="block">/* All the ranges for the tokens */</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name>getRangeToAddressMap</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rpcaddrs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replicas</name><range>: <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>rpcaddrs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getNativeaddress</name><argument_list>(<argument><expr><call><name><name>replicas</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>asList</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rpcaddrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>map</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getPendingRangeToEndpointMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getPendingRangeToEndpointMap</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getPendingRangeToEndpointWithPortMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getPendingRangeToEndpointMap</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getPendingRangeToEndpointMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// some people just want to get a visual representation of things. Allow null and set it to the first</comment>
        <comment type="line">// non-system keyspace.</comment>
        <if_stmt><if>if <condition>(<expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>keyspace</name> <operator>=</operator> <call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonLocalStrategyKeyspaces</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getPendingRangesMM</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>asMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>asList</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Replicas</name><operator>.</operator><name>stringify</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>map</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EndpointsByRange</name></type> <name>getRangeToAddressMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getRangeToAddressMap</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EndpointsByRange</name></type> <name>getRangeToAddressMapInLocalDC</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>isLocalDC</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>replica</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>isLocalDC</name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>EndpointsByRange</name></type> <name>origMap</name> <init>= <expr><call><name>getRangeToAddressMap</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name>getTokensInLocalDC</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></type> <name>filteredMap</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>origMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>endpointsInLocalDC</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>isLocalDC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>filteredMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>endpointsInLocalDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><operator>new</operator> <call><name>EndpointsByRange</name><argument_list>(<argument><expr><name>filteredMap</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>getTokensInLocalDC</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>filteredTokens</name> <init>= <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Token</name></type> <name>token</name> <range>: <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpoint</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isLocalDC</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>filteredTokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>filteredTokens</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isLocalDC</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>targetHost</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>remoteDC</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenter</name><argument_list>(<argument><expr><name>targetHost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>localDC</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocalDatacenter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>remoteDC</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>localDC</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>EndpointsByRange</name></type> <name>getRangeToAddressMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>sortedTokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// some people just want to get a visual representation of things. Allow null and set it to the first</comment>
        <comment type="line">// non-system keyspace.</comment>
        <if_stmt><if>if <condition>(<expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>keyspace</name> <operator>=</operator> <call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonLocalStrategyKeyspaces</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><call><name>getAllRanges</name><argument_list>(<argument><expr><name>sortedTokens</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>constructRangeToEndpointMap</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>describeRingJMX</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>describeRingJMX</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>describeRingWithPortJMX</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>describeRingJMX</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The same as {@code describeRing(String)} but converts TokenRange to the String for JMX compatibility
     *
     * @param keyspace The keyspace to fetch information about
     *
     * @return a List of TokenRange(s) converted to String for the given keyspace
     */</comment>
    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>describeRingJMX</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TokenRange</name></argument>&gt;</argument_list></name></type> <name>tokenRanges</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>tokenRanges</name> <operator>=</operator> <call><name>describeRing</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tokenRanges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>TokenRange</name></type> <name>tokenRange</name> <range>: <expr><name>tokenRanges</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tokenRange</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The TokenRange for a given keyspace.
     *
     * @param keyspace The keyspace to fetch information about
     *
     * @return a List of TokenRange(s) for the given keyspace
     *
     * @throws InvalidRequestException if there is no ring information available about keyspace
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>TokenRange</name></argument>&gt;</argument_list></name></type> <name>describeRing</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>describeRing</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The same as {@code describeRing(String)} but considers only the part of the ring formed by nodes in the local DC.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>TokenRange</name></argument>&gt;</argument_list></name></type> <name>describeLocalRing</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>describeRing</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>TokenRange</name></argument>&gt;</argument_list></name></type> <name>describeRing</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeOnlyLocalDC</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaces</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"No such keyspace: "</literal> <operator>+</operator> <name>keyspace</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>LocalStrategy</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"There is no ring for the keyspace: "</literal> <operator>+</operator> <name>keyspace</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TokenRange</name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Token</name><operator>.</operator><name>TokenFactory</name></name></type> <name>tf</name> <init>= <expr><call><name>getTokenFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>EndpointsByRange</name></type> <name>rangeToAddressMap</name> <init>=
                <expr><ternary><condition><expr><name>includeOnlyLocalDC</name></expr>
                        ?</condition><then> <expr><call><name>getRangeToAddressMapInLocalDC</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>
                        </then><else>: <expr><call><name>getRangeToAddressMap</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>rangeToAddressMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>TokenRange</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endpoints</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><name>ranges</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTokenToEndpointMap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getTokenToEndpointMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTokenToEndpointWithPortMap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getTokenToEndpointMap</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTokenToEndpointMap</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>mapInetAddress</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getNormalAndBootstrappingTokenToEndpointMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// in order to preserve tokens in ascending order, we use LinkedHashMap here</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mapString</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mapInetAddress</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mapInetAddress</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Token</name></type> <name>token</name> <range>: <expr><name>tokens</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapString</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mapInetAddress</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>(<argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>mapString</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLocalHostId</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostId</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getLocalHostUUID</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostId</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getHostIdMap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getEndpointToHostId</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getEndpointToHostId</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getEndpointToHostId</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getEndpointWithPortToHostId</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getEndpointToHostId</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier>  <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getEndpointToHostId</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mapOut</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>UUID</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEndpointToHostIdMapForReading</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>mapOut</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>(<argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>mapOut</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getHostIdToEndpoint</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getHostIdToEndpoint</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getHostIdToEndpointWithPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getHostIdToEndpoint</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getHostIdToEndpoint</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mapOut</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>UUID</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEndpointToHostIdMapForReading</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>mapOut</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>(<argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>mapOut</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Construct the range to endpoint mapping based on the true view
     * of the world.
     * @param ranges
     * @return mapping of ranges to the replicas responsible for them.
    */</comment>
    <function><type><specifier>private</specifier> <name>EndpointsByRange</name></type> <name>constructRangeToEndpointMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>strategy</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></type> <name>rangeToEndpointMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>rangeToEndpointMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><call><name><name>strategy</name><operator>.</operator><name>getNaturalReplicas</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><operator>new</operator> <call><name>EndpointsByRange</name><argument_list>(<argument><expr><name>rangeToEndpointMap</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>beforeChange</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>currentState</name></decl></parameter>, <parameter><decl><type><name>ApplicationState</name></type> <name>newStateKey</name></decl></parameter>, <parameter><decl><type><name>VersionedValue</name></type> <name>newValue</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// no-op</comment>
    </block_content>}</block></function>

    <comment type="block">/*
     * Handle the reception of a new particular ApplicationState for a particular endpoint. Note that the value of the
     * ApplicationState has not necessarily "changed" since the last known value, if we already received the same update
     * from somewhere else.
     *
     * onChange only ever sees one ApplicationState piece change at a time (even if many ApplicationState updates were
     * received at the same time), so we perform a kind of state machine here. We are concerned with two events: knowing
     * the token associated with an endpoint, and knowing its operation mode. Nodes can start in either bootstrap or
     * normal mode, and from bootstrap mode can change mode to normal. A node in bootstrap mode needs to have
     * pendingranges set in TokenMetadata; a node in normal mode should instead be part of the token ring.
     *
     * Normal progression of ApplicationState.STATUS values for a node should be like this:
     * STATUS_BOOTSTRAPPING,token
     *   if bootstrapping. stays this way until all files are received.
     * STATUS_NORMAL,token
     *   ready to serve reads and writes.
     * STATUS_LEAVING,token
     *   get ready to leave the cluster as part of a decommission
     * STATUS_LEFT,token
     *   set after decommission is completed.
     *
     * Other STATUS values that may be seen (possibly anywhere in the normal progression):
     * STATUS_MOVING,newtoken
     *   set if node is currently moving to a new token in the ring
     * REMOVING_TOKEN,deadtoken
     *   set if the node is dead and is being removed by its REMOVAL_COORDINATOR
     * REMOVED_TOKEN,deadtoken
     *   set if the node is dead and has been removed by its REMOVAL_COORDINATOR
     *
     * Note: Any time a node state changes from STATUS_NORMAL, it will not be visible to new nodes. So it follows that
     * you should never bootstrap a new node during a removenode, decommission or move.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>onChange</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>ApplicationState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>VersionedValue</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name> <operator>||</operator> <name>state</name> <operator>==</operator> <name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>pieces</name> <init>= <expr><call><name>splitValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><operator>(</operator><name><name>pieces</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>

            <decl_stmt><decl><type><name>String</name></type> <name>moveName</name> <init>= <expr><name><name>pieces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <switch>switch <condition>(<expr><name>moveName</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_BOOTSTRAPPING_REPLACE</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleStateBootreplacing</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>pieces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_BOOTSTRAPPING</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleStateBootstrap</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_NORMAL</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleStateNormal</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VersionedValue</name><operator>.</operator><name>SHUTDOWN</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleStateNormal</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name><name>VersionedValue</name><operator>.</operator><name>SHUTDOWN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VersionedValue</name><operator>.</operator><name>REMOVING_TOKEN</name></name></expr>:</case>
                <case>case <expr><name><name>VersionedValue</name><operator>.</operator><name>REMOVED_TOKEN</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleStateRemoving</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>pieces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_LEAVING</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleStateLeaving</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_LEFT</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleStateLeft</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>pieces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_MOVING</name></name></expr>:</case>
                    <expr_stmt><expr><call><name>handleStateMoving</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>pieces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>isDeadState</name></name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring state change for dead or unknown endpoint: {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isMember</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <switch>switch <condition>(<expr><name>state</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>RELEASE_VERSION</name></expr>:</case>
                        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerInfo</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><literal type="string">"release_version"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>DC</name></expr>:</case>
                        <expr_stmt><expr><call><name>updateTopology</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerInfo</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><literal type="string">"data_center"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>RACK</name></expr>:</case>
                        <expr_stmt><expr><call><name>updateTopology</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerInfo</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><literal type="string">"rack"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>RPC_ADDRESS</name></expr>:</case>
                        <try>try
                        <block>{<block_content>
                            <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerInfo</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><literal type="string">"rpc_address"</literal></expr></argument>, <argument><expr><call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                        <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                        <block>{<block_content>
                            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                        </block_content>}</block></catch></try>
                        <break>break;</break>
                    <case>case <expr><name>NATIVE_ADDRESS_AND_PORT</name></expr>:</case>
                        <try>try
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>address</name> <init>= <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerNativeAddress</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                        <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                        <block>{<block_content>
                            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                        </block_content>}</block></catch></try>
                        <break>break;</break>
                    <case>case <expr><name>SCHEMA</name></expr>:</case>
                        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerInfo</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><literal type="string">"schema_version"</literal></expr></argument>, <argument><expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>MigrationCoordinator</name><operator>.</operator><name>instance</name><operator>.</operator><name>reportEndpointVersion</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>HOST_ID</name></expr>:</case>
                        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerInfo</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><literal type="string">"host_id"</literal></expr></argument>, <argument><expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>RPC_READY</name></expr>:</case>
                        <expr_stmt><expr><call><name>notifyRpcChange</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>epState</name><operator>.</operator><name>isRpcReady</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>NET_VERSION</name></expr>:</case>
                        <expr_stmt><expr><call><name>updateNetVersion</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                </block_content>}</block></switch>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring application state {} from {} because it is not a member in token metadata"</literal></expr></argument>,
                             <argument><expr><name>state</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>splitValue</name><parameter_list>(<parameter><decl><type><name>VersionedValue</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>DELIMITER_STR</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateNetVersion</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>VersionedValue</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>versions</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Got invalid value for NET_VERSION application state: "</literal> <operator>+</operator> <name><name>value</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateTopology</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isMember</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateTopology</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateTopology</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateTopology</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>updatePeerInfo</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InetAddress</name></type> <name>native_address</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>native_port</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNativeTransportPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>epState</name><operator>.</operator><name>states</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <switch>switch <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>RELEASE_VERSION</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerInfo</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><literal type="string">"release_version"</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>DC</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerInfo</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><literal type="string">"data_center"</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>RACK</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerInfo</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><literal type="string">"rack"</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>RPC_ADDRESS</name></expr>:</case>
                    <try>try
                    <block>{<block_content>
                        <expr_stmt><expr><name>native_address</name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch></try>
                    <break>break;</break>
                <case>case <expr><name>NATIVE_ADDRESS_AND_PORT</name></expr>:</case>
                    <try>try
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>address</name> <init>= <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>native_address</name> <operator>=</operator> <name><name>address</name><operator>.</operator><name>address</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>native_port</name> <operator>=</operator> <name><name>address</name><operator>.</operator><name>port</name></name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch></try>
                    <break>break;</break>
                <case>case <expr><name>SCHEMA</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerInfo</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><literal type="string">"schema_version"</literal></expr></argument>, <argument><expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>HOST_ID</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerInfo</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><literal type="string">"host_id"</literal></expr></argument>, <argument><expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></for>

        <comment type="line">//Some tests won't set all the states</comment>
        <if_stmt><if>if <condition>(<expr><name>native_address</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePeerNativeAddress</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>,
                                                   <argument><expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(<argument><expr><name>native_address</name></expr></argument>,
                                                                                                   <argument><expr><name>native_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyRpcChange</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ready</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ready</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>notifyUp</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>notifyDown</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyUp</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isRpcReady</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>IEndpointLifecycleSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>lifecycleSubscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onUp</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyDown</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>IEndpointLifecycleSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>lifecycleSubscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onDown</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyJoined</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isStatus</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_NORMAL</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>IEndpointLifecycleSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>lifecycleSubscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onJoinCluster</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyMoved</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>IEndpointLifecycleSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>lifecycleSubscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onMove</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyLeft</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>IEndpointLifecycleSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>lifecycleSubscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onLeaveCluster</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isStatus</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>status</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>state</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>state</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRpcReady</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>state</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>state</name><operator>.</operator><name>isRpcReady</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the RPC status. Because when draining a node we need to set the RPC
     * status to not ready, and drain is called by the shutdown hook, it may be that value is false
     * and there is no local endpoint state. In this case it's OK to just do nothing. Therefore,
     * we assert that the local endpoint state is not null only when value is true.
     *
     * @param value - true indicates that RPC is ready, false indicates the opposite.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRpcReady</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// if value is false we're OK with a null state, if it is true we are not.</comment>
        <assert>assert <expr><operator>!</operator><name>value</name> <operator>||</operator> <name>state</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RPC_READY</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>rpcReady</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>getTokensFor</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>VersionedValue</name></type> <name>versionedValue</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>TOKENS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>versionedValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><call><name><name>TokenSerializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name><name>tokenMetadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>versionedValue</name><operator>.</operator><name>toBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handle node bootstrap
     *
     * @param endpoint bootstrapping node
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleStateBootstrap</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl>;</decl_stmt>
        <comment type="line">// explicitly check for TOKENS, because a bootstrapping node might be bootstrapping in legacy mode; that is, not using vnodes and no token specified</comment>
        <expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name>getTokensFor</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Node {} state bootstrapping, token {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// if this node is present in token metadata, either we have missed intermediate states</comment>
        <comment type="line">// or the node had crashed. Print warning if needed, clear obsolete stuff and</comment>
        <comment type="line">// continue.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// If isLeaving is false, we have missed both LEAVING and LEFT. However, if</comment>
            <comment type="line">// isLeaving is true, we have only missed LEFT. Waiting time between completing</comment>
            <comment type="line">// leave operation and rebootstrapping is relatively short, so the latter is quite</comment>
            <comment type="line">// common (not enough time for gossip to spread). Therefore we report only the</comment>
            <comment type="line">// former in the log.</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tokenMetadata</name><operator>.</operator><name>isLeaving</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Node {} state jump to bootstrap"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>removeEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>addBootstrapTokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateHostId</name></name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getHostId</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleStateBootreplacing</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>newNode</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>pieces</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>oldNode</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>oldNode</name> <operator>=</operator> <call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Node {} tried to replace malformed endpoint {}."</literal></expr></argument>, <argument><expr><name>newNode</name></expr></argument>, <argument><expr><name><name>pieces</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch></try>

        <if_stmt><if>if <condition>(<expr><call><name><name>FailureDetector</name><operator>.</operator><name>instance</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><name>oldNode</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Node %s is trying to replace alive node %s."</literal></expr></argument>, <argument><expr><name>newNode</name></expr></argument>, <argument><expr><name>oldNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>replacingNode</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getReplacingNode</name></name><argument_list>(<argument><expr><name>newNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>replacingNode</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>replacingNode</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>oldNode</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Node %s is already replacing %s but is trying to replace %s."</literal></expr></argument>,
                                                     <argument><expr><name>newNode</name></expr></argument>, <argument><expr><call><name><name>replacingNode</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oldNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name>getTokensFor</name><argument_list>(<argument><expr><name>newNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Node {} is replacing {}, tokens {}"</literal></expr></argument>, <argument><expr><name>newNode</name></expr></argument>, <argument><expr><name>oldNode</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>addReplaceTokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>newNode</name></expr></argument>, <argument><expr><name>oldNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateHostId</name></name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getHostId</name></name><argument_list>(<argument><expr><name>newNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>newNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>ensureUpToDateTokenMetadata</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getTokensFor</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Node {} state {}, tokens {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// If the node is previously unknown or tokens do not match, update tokenmetadata to</comment>
        <comment type="line">// have this node as 'normal' (it must have been using this token before the</comment>
        <comment type="line">// leave). This way we'll get pending ranges right.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Node {} state jump to {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateTokenMetadata</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>tokens</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getTokens</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Node {} '{}' token mismatch. Long network partition?"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateTokenMetadata</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateTokenMetadata</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>updateTokenMetadata</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateTokenMetadata</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpointsToRemove</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokensToUpdateInMetadata</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokensToUpdateInSystemKeyspace</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Token</name></type> <name>token</name> <range>: <expr><name>tokens</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <comment type="line">// we don't want to update if this node is responsible for the token and it has a later startup time than endpoint.</comment>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>currentOwner</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpoint</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentOwner</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"New node {} at token {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tokensToUpdateInMetadata</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tokensToUpdateInSystemKeyspace</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>endpoint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>currentOwner</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// set state back to normal, since the node may have tried to leave, but failed and is now back up</comment>
                <expr_stmt><expr><call><name><name>tokensToUpdateInMetadata</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tokensToUpdateInSystemKeyspace</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>compareEndpointStartup</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>currentOwner</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>tokensToUpdateInMetadata</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tokensToUpdateInSystemKeyspace</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// currentOwner is no longer current, endpoint is.  Keep track of these moves, because when</comment>
                <comment type="line">// a host no longer has any tokens, we'll want to remove it.</comment>
                <decl_stmt><decl><type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>epToTokenCopy</name> <init>= <expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEndpointToTokenMapForReading</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>epToTokenCopy</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currentOwner</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>epToTokenCopy</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currentOwner</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>endpointsToRemove</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentOwner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Nodes {} and {} have the same token {}. {} is the new owner"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>currentOwner</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Nodes {} and {} have the same token {}.  Ignoring {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>currentOwner</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateNormalTokens</name></name><argument_list>(<argument><expr><name>tokensToUpdateInMetadata</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>ep</name> <range>: <expr><name>endpointsToRemove</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>removeEndpoint</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>replacing</name> <operator>&amp;&amp;</operator> <call><name><name>ep</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>replacementQuarantine</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// quarantine locally longer than normally; see CASSANDRA-8260</comment>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tokensToUpdateInSystemKeyspace</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updateTokens</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>tokensToUpdateInSystemKeyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isReplacingSameHostAddressAndHostId</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>hostId</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name>isReplacingSameAddress</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
                    <call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
                    <operator>&amp;&amp;</operator> <call><name><name>hostId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getHostId</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReplaceAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>ex</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// If a host is decomissioned and the DNS entry is removed before the</comment>
            <comment type="line">// bootstrap completes, when it completes and advertises NORMAL state to other nodes, they will be unable</comment>
            <comment type="line">// to resolve it to an InetAddress unless it happens to be cached. This could happen on nodes</comment>
            <comment type="line">// storing large amounts of data or with long index rebuild times or if new instances have been added</comment>
            <comment type="line">// to the cluster through expansion or additional host replacement.</comment>
            <comment type="line">//</comment>
            <comment type="line">// The original host replacement must have been able to resolve the replacing address on startup</comment>
            <comment type="line">// when setting StorageService.replacing, so if it is impossible to resolve now it is probably</comment>
            <comment type="line">// decommissioned and did not have the same IP address or host id.  Allow the handleStateNormal</comment>
            <comment type="line">// handling to proceed, otherwise gossip state will be inconistent with some nodes believing the</comment>
            <comment type="line">// replacement host to be normal, and nodes unable to resolve the hostname will be left in JOINING.</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>ex</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>ex</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>UnknownHostException</name><operator>.</operator><name>class</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Suppressed exception while checking isReplacingSameHostAddressAndHostId({}). Original host was probably decommissioned. ({})"</literal></expr></argument>,
                        <argument><expr><name>hostId</name></expr></argument>, <argument><expr><call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw> <comment type="line">// otherwise rethrow</comment>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handle node move to normal state. That is, node is entering token ring and participating
     * in reads.
     *
     * @param endpoint node
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleStateNormal</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>status</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name>getTokensFor</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpointsToRemove</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Node {} state {}, token {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Node {} state jump to {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>status</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_NORMAL</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Node {} is in state normal but it has no tokens, state: {}"</literal></expr></argument>,
                         <argument><expr><name>endpoint</name></expr></argument>,
                         <argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>replacingNode</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getReplacingNode</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>replacingNode</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <assert>assert <expr><operator>!</operator><call><name><name>endpoint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>replacingNode</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="string">"Pending replacement endpoint with same address is not supported"</literal></expr>;</assert>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Node {} will complete replacement of {} for tokens {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>replacingNode</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>FailureDetector</name><operator>.</operator><name>instance</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><call><name><name>replacingNode</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Node {} cannot complete replacement of alive node {}."</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>replacingNode</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>endpointsToRemove</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>replacingNode</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>replacementNode</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getReplacementNode</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>replacementNode</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Node {} is currently being replaced by node {}."</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>replacementNode</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>updatePeerInfo</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Order Matters, TM.updateHostID() should be called before TM.updateNormalToken(), (see CASSANDRA-4300).</comment>
        <decl_stmt><decl><type><name>UUID</name></type> <name>hostId</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getHostId</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>existing</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpointForHostId</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>replacing</name> <operator>&amp;&amp;</operator> <call><name>isReplacingSameHostAddressAndHostId</name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Not updating token metadata for {} because I am replacing it"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>existing</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>existing</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>existing</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Not updating host ID {} for {} because it's mine"</literal></expr></argument>, <argument><expr><name>hostId</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>removeEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>endpointsToRemove</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>compareEndpointStartup</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>existing</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Host ID collision for {} between {} and {}; {} is the new owner"</literal></expr></argument>, <argument><expr><name>hostId</name></expr></argument>, <argument><expr><name>existing</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>removeEndpoint</name></name><argument_list>(<argument><expr><name>existing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>endpointsToRemove</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>existing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateHostId</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Host ID collision for {} between {} and {}; ignored {}"</literal></expr></argument>, <argument><expr><name>hostId</name></expr></argument>, <argument><expr><name>existing</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>removeEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>endpointsToRemove</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>updateHostId</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// capture because updateNormalTokens clears moving and member status</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isMember</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isMoving</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>isMoving</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>updateTokenMetadata</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>endpointsToRemove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>isMoving</name> <operator>||</operator> <name>operationMode</name> <operator>==</operator> <name><name>Mode</name><operator>.</operator><name>MOVING</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>removeFromMoving</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyMoved</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><name>isMember</name></expr>)</condition> <comment type="line">// prior to this, the node was not a member</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name>notifyJoined</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handle node preparing to leave the ring
     *
     * @param endpoint node
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleStateLeaving</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// If the node is previously unknown or tokens do not match, update tokenmetadata to</comment>
        <comment type="line">// have this node as 'normal' (it must have been using this token before the</comment>
        <comment type="line">// leave). This way we'll get pending ranges right.</comment>

        <expr_stmt><expr><call><name>ensureUpToDateTokenMetadata</name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_LEAVING</name></name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// at this point the endpoint is certainly a member with this token, so let's proceed</comment>
        <comment type="line">// normally</comment>
        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>addLeavingEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handle node leaving the ring. This will happen when a node is decommissioned
     *
     * @param endpoint If reason for leaving is decommission, endpoint is the leaving node.
     * @param pieces STATE_LEFT,token
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleStateLeft</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>pieces</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name><name>pieces</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</assert>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name>getTokensFor</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Node {} state left, tokens {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>excise</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name>extractExpireTime</name><argument_list>(<argument><expr><name>pieces</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handle node moving inside the ring.
     *
     * @param endpoint moving endpoint address
     * @param pieces STATE_MOVING, token
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleStateMoving</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>pieces</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ensureUpToDateTokenMetadata</name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_MOVING</name></name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <assert>assert <expr><name><name>pieces</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</assert>
        <decl_stmt><decl><type><name>Token</name></type> <name>token</name> <init>= <expr><call><name>getTokenFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>fromString</name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Node {} state moving, new token {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>addMovingEndpoint</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handle notification that a node being actively removed from the ring via 'removenode'
     *
     * @param endpoint node
     * @param pieces either REMOVED_TOKEN (node is gone) or REMOVING_TOKEN (replicas need to be restored)
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleStateRemoving</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>pieces</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><operator>(</operator><name><name>pieces</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>

        <if_stmt><if>if <condition>(<expr><call><name><name>endpoint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Received removenode gossip about myself. Is this node rejoining after an explicit removenode?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name>drain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>state</name> <init>= <expr><name><name>pieces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>removeTokens</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getTokens</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>VersionedValue</name><operator>.</operator><name>REMOVED_TOKEN</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>excise</name><argument_list>(<argument><expr><name>removeTokens</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name>extractExpireTime</name><argument_list>(<argument><expr><name>pieces</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>VersionedValue</name><operator>.</operator><name>REMOVING_TOKEN</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ensureUpToDateTokenMetadata</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Tokens {} removed manually (endpoint was {})"</literal></expr></argument>, <argument><expr><name>removeTokens</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Note that the endpoint is being removed</comment>
                <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>addLeavingEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// find the endpoint coordinating this removal that we need to notify when we're done</comment>
                <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>coordinator</name> <init>= <expr><call><name>splitValue</name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>REMOVAL_COORDINATOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>UUID</name></type> <name>hostId</name> <init>= <expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name><name>coordinator</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// grab any data we are now responsible for and notify responsible node</comment>
                <expr_stmt><expr><call><name>restoreReplicaCount</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpointForHostId</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// now that the gossiper has told us about this nonexistent member, notify the gossiper to remove it</comment>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>VersionedValue</name><operator>.</operator><name>REMOVED_TOKEN</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addExpireTimeIfFound</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name>extractExpireTime</name><argument_list>(<argument><expr><name>pieces</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>removeEndpoint</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>excise</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Removing tokens {} for {}"</literal></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>UUID</name></type> <name>hostId</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getHostId</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>hostId</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// enough time for writes to expire and MessagingService timeout reporter callback to fire, which is where</comment>
            <comment type="line">// hints are mostly written from - using getMinRpcTimeout() / 2 for the interval.</comment>
            <decl_stmt><decl><type><name>long</name></type> <name>delay</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getMinRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ScheduledExecutors</name><operator>.</operator><name>optionalTasks</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>HintsService</name><operator>.</operator><name>instance</name><operator>.</operator><name>excise</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>removeEndpoint</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>removeEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>removeBootstrapTokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>notifyLeft</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>excise</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expireTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addExpireTimeIfFound</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>expireTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>excise</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** unlike excise we just need this endpoint gone without going through any notifications **/</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>removeEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>runInGossipStageBlocking</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>removeEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MigrationCoordinator</name><operator>.</operator><name>instance</name><operator>.</operator><name>removeAndIgnoreEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>removeEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addExpireTimeIfFound</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expireTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>expireTime</name> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addExpireTimeForEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>expireTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>long</name></type> <name>extractExpireTime</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>pieces</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>pieces</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Finds living endpoints responsible for the given ranges
     *
     * @param keyspaceName the keyspace ranges belong to
     * @param leavingReplicas the ranges to find sources for
     * @return multimap of addresses to ranges the address is responsible for
     */</comment>
    <function><type><specifier>private</specifier> <name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>FetchReplica</name></argument>&gt;</argument_list></name></type> <name>getNewSourceReplicas</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>LeavingReplica</name></argument>&gt;</argument_list></name></type> <name>leavingReplicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>myAddress</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EndpointsByRange</name></type> <name>rangeReplicas</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRangeAddresses</name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>cloneOnlyTokenMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>FetchReplica</name></argument>&gt;</argument_list></name></type> <name>sourceRanges</name> <init>= <expr><call><name><name>HashMultimap</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IFailureDetector</name></type> <name>failureDetector</name> <init>= <expr><name><name>FailureDetector</name><operator>.</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Getting new source replicas for {}"</literal></expr></argument>, <argument><expr><name>leavingReplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// find alive sources for our new ranges</comment>
        <for>for <control>(<init><decl><type><name>LeavingReplica</name></type> <name>leaver</name> <range>: <expr><name>leavingReplicas</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <comment type="line">//We need this to find the replicas from before leaving to supply the data</comment>
            <decl_stmt><decl><type><name>Replica</name></type> <name>leavingReplica</name> <init>= <expr><name><name>leaver</name><operator>.</operator><name>leavingReplica</name></name></expr></init></decl>;</decl_stmt>
            <comment type="line">//We need this to know what to fetch and what the transient status is</comment>
            <decl_stmt><decl><type><name>Replica</name></type> <name>ourReplica</name> <init>= <expr><name><name>leaver</name><operator>.</operator><name>ourReplica</name></name></expr></init></decl>;</decl_stmt>
            <comment type="line">//If we are going to be a full replica only consider full replicas</comment>
            <decl_stmt><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>replicaFilter</name> <init>= <expr><ternary><condition><expr><call><name><name>ourReplica</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>Replica</name><operator>::</operator><name>isFull</name></expr> </then><else>: <expr><call><name><name>Predicates</name><operator>.</operator><name>alwaysTrue</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>notSelf</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>replica</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>myAddress</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>possibleReplicas</name> <init>= <expr><call><name><name>rangeReplicas</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>leavingReplica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Possible replicas for newReplica {} are {}"</literal></expr></argument>, <argument><expr><name>ourReplica</name></expr></argument>, <argument><expr><name>possibleReplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>sortedPossibleReplicas</name> <init>= <expr><call><name><name>snitch</name><operator>.</operator><name>sortedByProximity</name></name><argument_list>(<argument><expr><name>myAddress</name></expr></argument>, <argument><expr><name>possibleReplicas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Sorted possible replicas starts as {}"</literal></expr></argument>, <argument><expr><name>sortedPossibleReplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>myCurrentReplica</name> <init>= <expr><call><name>tryFind</name><argument_list>(<argument><expr><name>possibleReplicas</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>replica</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>myAddress</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toJavaUtil</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>transientToFull</name> <init>= <expr><call><name><name>myCurrentReplica</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>myCurrentReplica</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isTransient</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ourReplica</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><operator>!</operator><call><name><name>sortedPossibleReplicas</name><operator>.</operator><name>endpoints</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>myAddress</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>transientToFull</name> <operator>:</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"My address %s, sortedPossibleReplicas %s, myCurrentReplica %s, myNewReplica %s"</literal></expr></argument>, <argument><expr><name>myAddress</name></expr></argument>, <argument><expr><name>sortedPossibleReplicas</name></expr></argument>, <argument><expr><name>myCurrentReplica</name></expr></argument>, <argument><expr><name>ourReplica</name></expr></argument>)</argument_list></call></expr>;</assert>

            <comment type="line">//Originally this didn't log if it couldn't restore replication and that seems wrong</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>foundLiveReplica</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>possibleReplica</name> <range>: <expr><call><name><name>sortedPossibleReplicas</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><call><name><name>Predicates</name><operator>.</operator><name>and</name></name><argument_list>(<argument><expr><name>replicaFilter</name></expr></argument>, <argument><expr><name>notSelf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>failureDetector</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><call><name><name>possibleReplica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>foundLiveReplica</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sourceRanges</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>possibleReplica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>FetchReplica</name><argument_list>(<argument><expr><name>ourReplica</name></expr></argument>, <argument><expr><name>possibleReplica</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Skipping down replica {}"</literal></expr></argument>, <argument><expr><name>possibleReplica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>foundLiveReplica</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Didn't find live replica to restore replication for "</literal> <operator>+</operator> <name>ourReplica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>sourceRanges</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sends a notification to a node indicating we have finished replicating data.
     *
     * @param remote node to send notification to
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>sendReplicationNotification</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>remote</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// notify the remote token</comment>
        <decl_stmt><decl><type><name>Message</name></type> <name>msg</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>REPLICATION_DONE_REQ</name></expr></argument>, <argument><expr><name>noPayload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IFailureDetector</name></type> <name>failureDetector</name> <init>= <expr><name><name>FailureDetector</name><operator>.</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Notifying {} of replication completion\n"</literal></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <while>while <condition>(<expr><call><name><name>failureDetector</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>AsyncOneResponse</name></type> <name>ior</name> <init>= <expr><operator>new</operator> <call><name>AsyncOneResponse</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWithCallback</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>, <argument><expr><name>ior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ior</name><operator>.</operator><name>awaitUninterruptibly</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRpcTimeout</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="line">// try again if we timeout</comment>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ior</name><operator>.</operator><name>isSuccess</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><call><name><name>ior</name><operator>.</operator><name>cause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <return>return;</return>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>LeavingReplica</name>
    <block>{
        <comment type="line">//The node that is leaving</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Replica</name></type> <name>leavingReplica</name></decl>;</decl_stmt>

        <comment type="line">//Our range and transient status</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Replica</name></type> <name>ourReplica</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>LeavingReplica</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>leavingReplica</name></decl></parameter>, <parameter><decl><type><name>Replica</name></type> <name>ourReplica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>leavingReplica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>ourReplica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>leavingReplica</name></name> <operator>=</operator> <name>leavingReplica</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ourReplica</name></name> <operator>=</operator> <name>ourReplica</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>LeavingReplica</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>LeavingReplica</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>leavingReplica</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>leavingReplica</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><call><name><name>ourReplica</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>ourReplica</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>leavingReplica</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <call><name><name>ourReplica</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"LeavingReplica{"</literal> <operator>+</operator>
                   <literal type="string">"leavingReplica="</literal> <operator>+</operator> <name>leavingReplica</name> <operator>+</operator>
                   <literal type="string">", ourReplica="</literal> <operator>+</operator> <name>ourReplica</name> <operator>+</operator>
                   <literal type="char">'}'</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Called when an endpoint is removed from the ring. This function checks
     * whether this node becomes responsible for new ranges as a
     * consequence and streams data if needed.
     *
     * This is rather ineffective, but it does not matter so much
     * since this is called very seldom
     *
     * @param endpoint the node that left
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>restoreReplicaCount</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>notifyEndpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>FetchReplica</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>replicasToFetch</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>myAddress</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspaceName</name> <range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonLocalStrategyKeyspaces</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Restoring replica count for keyspace {}"</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>EndpointsByReplica</name></type> <name>changedReplicas</name> <init>= <expr><call><name>getChangedReplicasForLeaving</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>tokenMetadata</name></expr></argument>, <argument><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>LeavingReplica</name></argument>&gt;</argument_list></name></type> <name>myNewReplicas</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>, <argument><name>Replica</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>changedReplicas</name><operator>.</operator><name>flattenEntries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Replica</name></type> <name>replica</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>myAddress</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">//Maybe we don't technically need to fetch transient data from somewhere</comment>
                    <comment type="line">//but it's probably not a lot and it probably makes things a hair more resilient to people</comment>
                    <comment type="line">//not running repair when they should.</comment>
                    <expr_stmt><expr><call><name><name>myNewReplicas</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LeavingReplica</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Changed replicas for leaving {}, myNewReplicas {}"</literal></expr></argument>, <argument><expr><name>changedReplicas</name></expr></argument>, <argument><expr><name>myNewReplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>replicasToFetch</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><call><name>getNewSourceReplicas</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>myNewReplicas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>StreamPlan</name></type> <name>stream</name> <init>= <expr><operator>new</operator> <call><name>StreamPlan</name><argument_list>(<argument><expr><name><name>StreamOperation</name><operator>.</operator><name>RESTORE_REPLICA_COUNT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>replicasToFetch</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>keyspaceName</name></decl></parameter>, <parameter><decl><name>sources</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Requesting keyspace {} sources"</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sources</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>sourceAddress</name></decl></parameter>, <parameter><decl><name>fetchReplicas</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Source and our replicas are {}"</literal></expr></argument>, <argument><expr><name>fetchReplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//Remember whether this node is providing the full or transient replicas for this range. We are going</comment>
                <comment type="line">//to pass streaming the local instance of Replica for the range which doesn't tell us anything about the source</comment>
                <comment type="line">//By encoding it as two separate sets we retain this information about the source.</comment>
                <decl_stmt><decl><type><name>RangesAtEndpoint</name></type> <name>full</name> <init>= <expr><call><name><name>fetchReplicas</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                                                             <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>f</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>f</name><operator>.</operator><name>remote</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                                             <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>f</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>f</name><operator>.</operator><name>local</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                                             <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>RangesAtEndpoint</name><operator>.</operator><name>collector</name></name><argument_list>(<argument><expr><name>myAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>RangesAtEndpoint</name></type> <name>transientReplicas</name> <init>= <expr><call><name><name>fetchReplicas</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                                                                  <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>f</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>f</name><operator>.</operator><name>remote</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>f</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>f</name><operator>.</operator><name>local</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>RangesAtEndpoint</name><operator>.</operator><name>collector</name></name><argument_list>(<argument><expr><name>myAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Requesting from {} full replicas {} transient replicas {}"</literal></expr></argument>, <argument><expr><name>sourceAddress</name></expr></argument>, <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>transientReplicas</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>requestRanges</name></name><argument_list>(<argument><expr><name>sourceAddress</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><name>transientReplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StreamResultFuture</name></type> <name>future</name> <init>= <expr><call><name><name>stream</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Futures</name><operator>.</operator><name>addCallback</name></name><argument_list>(<argument><expr><name>future</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>FutureCallback</name><argument_list type="generic">&lt;<argument><name>StreamState</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>StreamState</name></type> <name>finalState</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name>sendReplicationNotification</name><argument_list>(<argument><expr><name>notifyEndpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Streaming to restore replica count failed"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// We still want to send the notification</comment>
                <expr_stmt><expr><call><name>sendReplicationNotification</name><argument_list>(<argument><expr><name>notifyEndpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><call><name><name>MoreExecutors</name><operator>.</operator><name>directExecutor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This is used in three contexts, graceful decomission, and restoreReplicaCount/removeNode.
     * Graceful decomission should never lose data and it's going to be important that transient data
     * is streamed to at least one other node from this one for each range.
     *
     * For ranges this node replicates its removal should cause a new replica to be selected either as transient or full
     * for every range. So I believe the current code doesn't have to do anything special because it will engage in streaming
     * for every range it replicates to at least one other node and that should propagate the transient data that was here.
     * When I graphed this out on paper the result of removal looked correct and there are no issues such as
     * this node needing to create a full replica for a range it transiently replicates because what is created is just another
     * transient replica to replace this node.
     * @param keyspaceName
     * @param endpoint
     * @return
     */</comment>
    <comment type="line">// needs to be modified to accept either a keyspace or ARS.</comment>
    <function><type><specifier>static</specifier> <name>EndpointsByReplica</name></type> <name>getChangedReplicasForLeaving</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>TokenMetadata</name></type> <name>tokenMetadata</name></decl></parameter>, <parameter><decl><type><name>AbstractReplicationStrategy</name></type> <name>strat</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// First get all ranges the leaving endpoint is responsible for</comment>
        <decl_stmt><decl><type><name>RangesAtEndpoint</name></type> <name>replicas</name> <init>= <expr><call><name><name>strat</name><operator>.</operator><name>getAddressReplicas</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Node {} replicas [{}]"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>replicas</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></type> <name>currentReplicaEndpoints</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newHashMapWithExpectedSize</name></name><argument_list>(<argument><expr><call><name><name>replicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Find (for each range) all nodes that store replicas for these ranges as well</comment>
        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>metadata</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>cloneOnlyTokenMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// don't do this in the loop! #7758</comment>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><name>replicas</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>currentReplicaEndpoints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>, <argument><expr><call><name><name>strat</name><operator>.</operator><name>calculateNaturalReplicas</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>temp</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>cloneAfterAllLeft</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// endpoint might or might not be 'leaving'. If it was not leaving (that is, removenode</comment>
        <comment type="line">// command was used), it is still present in temp and must be removed.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>temp</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>removeEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>EndpointsByReplica</name><operator>.</operator><name>Builder</name></name></type> <name>changedRanges</name> <init>= <expr><operator>new</operator> <call><name><name>EndpointsByReplica</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Go through the ranges and for each range check who will be</comment>
        <comment type="line">// storing replicas for these ranges when the leaving endpoint</comment>
        <comment type="line">// is gone. Whoever is present in newReplicaEndpoints list, but</comment>
        <comment type="line">// not in the currentReplicaEndpoints list, will be needing the</comment>
        <comment type="line">// range.</comment>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><name>replicas</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>newReplicaEndpoints</name> <init>= <expr><call><name><name>strat</name><operator>.</operator><name>calculateNaturalReplicas</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>newReplicaEndpoints</name> <operator>=</operator> <call><name><name>newReplicaEndpoints</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>newReplica</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
                <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>currentReplicaOptional</name> <init>=
                    <expr><call><name>tryFind</name><argument_list>(<argument><expr><call><name><name>currentReplicaEndpoints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>currentReplica</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>newReplica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>currentReplica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>
                    )</argument_list></call><operator>.</operator><call><name>toJavaUtil</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">//If it is newly replicating then yes we must do something to get the data there</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>currentReplicaOptional</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name>Replica</name></type> <name>currentReplica</name> <init>= <expr><call><name><name>currentReplicaOptional</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">//This transition requires streaming to occur</comment>
                <comment type="line">//Full -&gt; transient is handled by nodetool cleanup</comment>
                <comment type="line">//transient -&gt; transient and full -&gt; full don't require any action</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>currentReplica</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>newReplica</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>newReplicaEndpoints</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Replica {} already in all replicas"</literal></expr></argument>, <argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Replica {} will be responsibility of {}"</literal></expr></argument>, <argument><expr><name>replica</name></expr></argument>, <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>newReplicaEndpoints</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>changedRanges</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>, <argument><expr><name>newReplicaEndpoints</name></expr></argument>, <argument><expr><name><name>Conflict</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><call><name><name>changedRanges</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>onJoin</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>epState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Explicitly process STATUS or STATUS_WITH_PORT before the other</comment>
        <comment type="line">// application states to maintain pre-4.0 semantics with the order</comment>
        <comment type="line">// they are processed.  Otherwise the endpoint will not be added</comment>
        <comment type="line">// to TokenMetadata so non-STATUS* appstates will be ignored.</comment>
        <decl_stmt><decl><type><name>ApplicationState</name></type> <name>statusState</name> <init>= <expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>VersionedValue</name></type> <name>statusValue</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>statusValue</name> <operator>=</operator> <call><name><name>epState</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name>statusState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>statusValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>statusState</name> <operator>=</operator> <name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>statusValue</name> <operator>=</operator> <call><name><name>epState</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name>statusState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>statusValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>onChange</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>statusState</name></expr></argument>, <argument><expr><name>statusValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>epState</name><operator>.</operator><name>states</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name> <operator>||</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>onChange</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>onAlive</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>state</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>notifyUp</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>onRemove</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>removeEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>onDead</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>state</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// interrupt any outbound connection; if the node is failing and we cannot reconnect,</comment>
        <comment type="line">// this will rapidly lower the number of bytes we are willing to queue to the node</comment>
        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>interruptOutbound</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyDown</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>onRestart</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>state</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// If we have restarted before the node was even marked down, we need to reset the connection pool</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>onDead</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Then, the node may have been upgraded and changed its messaging protocol version. If so, we</comment>
        <comment type="line">// want to update that before we mark the node live again to avoid problems like CASSANDRA-11128.</comment>
        <decl_stmt><decl><type><name>VersionedValue</name></type> <name>netVersion</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>NET_VERSION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>netVersion</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>updateNetVersion</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>netVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLoadString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>FileUtils</name><operator>.</operator><name>stringifyFileSize</name></name><argument_list>(<argument><expr><call><name><name>StorageMetrics</name><operator>.</operator><name>load</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLoadMapWithPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getLoadMap</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLoadMap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getLoadMap</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLoadMap</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>LoadBroadcaster</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLoadInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>(<argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>FileUtils</name><operator>.</operator><name>stringifyFileSize</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="line">// gossiper doesn't see its own updates, so we need to special-case the local node</comment>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>(<argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getLoadString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>map</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// TODO</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>deliverHints</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>getLocalTokens</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getSavedTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>tokens</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>tokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</assert> <comment type="line">// should not be called before initServer sets this</comment>
        <return>return <expr><name>tokens</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>InetAddressAndPort</name></type> <name>getEndpointForHostId</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>hostId</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpointForHostId</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>UUID</name></type> <name>getHostIdForEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getHostId</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/* These methods belong to the MBean interface */</comment>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTokens</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getTokens</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTokens</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>endpoint</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>getTokens</name><argument_list>(<argument><expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTokens</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>strTokens</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Token</name></type> <name>tok</name> <range>: <expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTokens</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>strTokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>tok</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>strTokens</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getReleaseVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getReleaseVersionString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSchemaVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeyspaceReplicationInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspaceInstance</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceInstance</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>keyspaceInstance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt> <comment type="line">// ideally should never happen</comment>
        <decl_stmt><decl><type><name>ReplicationParams</name></type> <name>replicationParams</name> <init>= <expr><call><name><name>keyspaceInstance</name><operator>.</operator><name>getMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>params</name><operator>.</operator><name>replication</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>replicationInfo</name> <init>= <expr><call><name><name>replicationParams</name><operator>.</operator><name>klass</name><operator>.</operator><name>getSimpleName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>replicationParams</name><operator>.</operator><name>options</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>replicationInfo</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLeavingNodes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>stringify</name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getLeavingEndpoints</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLeavingNodesWithPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>stringify</name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getLeavingEndpoints</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getMovingNodes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>endpoints</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>node</name> <range>: <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getMovingEndpoints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>endpoints</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>right</name><operator>.</operator><name>address</name><operator>.</operator><name>getHostAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>endpoints</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getMovingNodesWithPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>endpoints</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>node</name> <range>: <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getMovingEndpoints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>endpoints</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>right</name><operator>.</operator><name>getHostAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>endpoints</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getJoiningNodes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>stringify</name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getBootstrapTokens</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>valueSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getJoiningNodesWithPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>stringify</name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getBootstrapTokens</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>valueSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLiveNodes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>stringify</name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLiveMembers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLiveNodesWithPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>stringify</name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLiveMembers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>getLiveRingMembers</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getLiveRingMembers</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>getLiveRingMembers</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>excludeDeadStates</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>ret</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>ep</name> <range>: <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLiveMembers</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>excludeDeadStates</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointStateForEndpoint</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>isDeadState</name></name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>


    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getUnreachableNodes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>stringify</name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getUnreachableMembers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getUnreachableNodesWithPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>stringify</name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getUnreachableMembers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getAllDataFileLocations</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getCanonicalPaths</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAllDataFileLocations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>getCanonicalPaths</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>paths</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>locations</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><name><name>paths</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>paths</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>locations</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>FileUtils</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>locations</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getLocalSystemKeyspacesDataFileLocations</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getCanonicalPaths</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalSystemKeyspacesDataFileLocations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getNonLocalSystemKeyspacesDataFileLocations</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getCanonicalPaths</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNonLocalSystemKeyspacesDataFileLocations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCommitLogLocation</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>FileUtils</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCommitLogLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSavedCachesLocation</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>FileUtils</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSavedCachesLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stringify</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpoints</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stringEndpoints</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>ep</name> <range>: <expr><name>endpoints</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>stringEndpoints</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ep</name><operator>.</operator><name>getHostAddress</name></name><argument_list>(<argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>stringEndpoints</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCurrentGenerationNumber</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getCurrentGenerationNumber</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>forceKeyspaceCleanup</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tables</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>forceKeyspaceCleanup</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>forceKeyspaceCleanup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jobs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tables</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>SchemaConstants</name><operator>.</operator><name>isLocalSystemKeyspace</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Cleanup of the system keyspace is neither necessary nor wise"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name></name></type> <name>status</name> <init>= <expr><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name><operator>.</operator><name>SUCCESSFUL</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name>getValidColumnFamilies</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name></name></type> <name>oneStatus</name> <init>= <expr><call><name><name>cfStore</name><operator>.</operator><name>forceCleanup</name></name><argument_list>(<argument><expr><name>jobs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>oneStatus</name> <operator>!=</operator> <name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name><operator>.</operator><name>SUCCESSFUL</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <name>oneStatus</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name><name>status</name><operator>.</operator><name>statusCode</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>scrub</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>disableSnapshot</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>skipCorrupted</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tables</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>scrub</name><argument_list>(<argument><expr><name>disableSnapshot</name></expr></argument>, <argument><expr><name>skipCorrupted</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>scrub</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>disableSnapshot</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>skipCorrupted</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>checkData</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tables</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>scrub</name><argument_list>(<argument><expr><name>disableSnapshot</name></expr></argument>, <argument><expr><name>skipCorrupted</name></expr></argument>, <argument><expr><name>checkData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>scrub</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>disableSnapshot</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>skipCorrupted</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>checkData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tables</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>scrub</name><argument_list>(<argument><expr><name>disableSnapshot</name></expr></argument>, <argument><expr><name>skipCorrupted</name></expr></argument>, <argument><expr><name>checkData</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>jobs</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>scrub</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>disableSnapshot</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>skipCorrupted</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>checkData</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>reinsertOverflowedTTL</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tables</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name></name></type> <name>status</name> <init>= <expr><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name><operator>.</operator><name>SUCCESSFUL</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name>getValidColumnFamilies</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name></name></type> <name>oneStatus</name> <init>= <expr><call><name><name>cfStore</name><operator>.</operator><name>scrub</name></name><argument_list>(<argument><expr><name>disableSnapshot</name></expr></argument>, <argument><expr><name>skipCorrupted</name></expr></argument>, <argument><expr><name>reinsertOverflowedTTL</name></expr></argument>, <argument><expr><name>checkData</name></expr></argument>, <argument><expr><name>jobs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>oneStatus</name> <operator>!=</operator> <name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name><operator>.</operator><name>SUCCESSFUL</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <name>oneStatus</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name><name>status</name><operator>.</operator><name>statusCode</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>verify</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>extendedVerify</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tableNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>verify</name><argument_list>(<argument><expr><name>extendedVerify</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableNames</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>verify</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>extendedVerify</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>checkVersion</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>diskFailurePolicy</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>mutateRepairStatus</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>checkOwnsTokens</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>quick</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tableNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name></name></type> <name>status</name> <init>= <expr><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name><operator>.</operator><name>SUCCESSFUL</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Verifier</name><operator>.</operator><name>Options</name></name></type> <name>options</name> <init>= <expr><call><name><name>Verifier</name><operator>.</operator><name>options</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>invokeDiskFailurePolicy</name><argument_list>(<argument><expr><name>diskFailurePolicy</name></expr></argument>)</argument_list></call>
                                                     <operator>.</operator><call><name>extendedVerification</name><argument_list>(<argument><expr><name>extendedVerify</name></expr></argument>)</argument_list></call>
                                                     <operator>.</operator><call><name>checkVersion</name><argument_list>(<argument><expr><name>checkVersion</name></expr></argument>)</argument_list></call>
                                                     <operator>.</operator><call><name>mutateRepairStatus</name><argument_list>(<argument><expr><name>mutateRepairStatus</name></expr></argument>)</argument_list></call>
                                                     <operator>.</operator><call><name>checkOwnsTokens</name><argument_list>(<argument><expr><name>checkOwnsTokens</name></expr></argument>)</argument_list></call>
                                                     <operator>.</operator><call><name>quick</name><argument_list>(<argument><expr><name>quick</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Verifying {}.{} with options = {}"</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>tableNames</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name>getValidColumnFamilies</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableNames</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name></name></type> <name>oneStatus</name> <init>= <expr><call><name><name>cfStore</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>oneStatus</name> <operator>!=</operator> <name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name><operator>.</operator><name>SUCCESSFUL</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <name>oneStatus</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name><name>status</name><operator>.</operator><name>statusCode</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>upgradeSSTables</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>excludeCurrentVersion</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tableNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>upgradeSSTables</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>excludeCurrentVersion</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tableNames</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>upgradeSSTables</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>excludeCurrentVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobs</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tableNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name></name></type> <name>status</name> <init>= <expr><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name><operator>.</operator><name>SUCCESSFUL</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name>getValidColumnFamilies</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableNames</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name></name></type> <name>oneStatus</name> <init>= <expr><call><name><name>cfStore</name><operator>.</operator><name>sstablesRewrite</name></name><argument_list>(<argument><expr><name>excludeCurrentVersion</name></expr></argument>, <argument><expr><name>jobs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>oneStatus</name> <operator>!=</operator> <name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name><operator>.</operator><name>SUCCESSFUL</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <name>oneStatus</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name><name>status</name><operator>.</operator><name>statusCode</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getPreparedStatements</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>statements</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>MD5Digest</name></argument>, <argument><name><name>QueryHandler</name><operator>.</operator><name>Prepared</name></name></argument>&gt;</argument_list></name></type> <name>e</name> <range>: <expr><call><name><name>QueryProcessor</name><operator>.</operator><name>instance</name><operator>.</operator><name>getPreparedStatements</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>statements</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>rawCQLStatement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>statements</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>dropPreparedStatements</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>memoryOnly</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>QueryProcessor</name><operator>.</operator><name>instance</name><operator>.</operator><name>clearPreparedStatements</name></name><argument_list>(<argument><expr><name>memoryOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>forceKeyspaceCompaction</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>splitOutput</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tableNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name>getValidColumnFamilies</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableNames</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>cfStore</name><operator>.</operator><name>forceMajorCompaction</name></name><argument_list>(<argument><expr><name>splitOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>relocateSSTables</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>...</modifier></type> <name>columnFamilies</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>relocateSSTables</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>columnFamilies</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>relocateSSTables</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jobs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>...</modifier></type> <name>columnFamilies</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name></name></type> <name>status</name> <init>= <expr><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name><operator>.</operator><name>SUCCESSFUL</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name>getValidColumnFamilies</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>columnFamilies</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name></name></type> <name>oneStatus</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>relocateSSTables</name></name><argument_list>(<argument><expr><name>jobs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>oneStatus</name> <operator>!=</operator> <name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name><operator>.</operator><name>SUCCESSFUL</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <name>oneStatus</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name><name>status</name><operator>.</operator><name>statusCode</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>garbageCollect</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tombstoneOptionString</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>...</modifier></type> <name>columnFamilies</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TombstoneOption</name></type> <name>tombstoneOption</name> <init>= <expr><call><name><name>TombstoneOption</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>tombstoneOptionString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name></name></type> <name>status</name> <init>= <expr><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name><operator>.</operator><name>SUCCESSFUL</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name>getValidColumnFamilies</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>columnFamilies</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name></name></type> <name>oneStatus</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>garbageCollect</name></name><argument_list>(<argument><expr><name>tombstoneOption</name></expr></argument>, <argument><expr><name>jobs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>oneStatus</name> <operator>!=</operator> <name><name>CompactionManager</name><operator>.</operator><name>AllSSTableOpStatus</name><operator>.</operator><name>SUCCESSFUL</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <name>oneStatus</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name><name>status</name><operator>.</operator><name>statusCode</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Takes the snapshot of a multiple column family from different keyspaces. A snapshot name must be specified.
     *
     * @param tag
     *            the tag given to the snapshot; may not be null or empty
     * @param options
     *            Map of options (skipFlush is the only supported option for now)
     * @param entities
     *            list of keyspaces / tables in the form of empty | ks1 ks2 ... | ks1.cf1,ks2.cf2,...
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>takeSnapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>entities</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>skipFlush</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><literal type="string">"skipFlush"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>entities</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>entities</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>entities</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>takeMultipleTableSnapshot</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>skipFlush</name></expr></argument>, <argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>takeSnapshot</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>skipFlush</name></expr></argument>, <argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Takes the snapshot of a specific table. A snapshot name must be
     * specified.
     *
     * @param keyspaceName
     *            the keyspace which holds the specified table
     * @param tableName
     *            the table to snapshot
     * @param tag
     *            the tag given to the snapshot; may not be null or empty
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>takeTableSnapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>takeMultipleTableSnapshot</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>keyspaceName</name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>forceKeyspaceCompactionForTokenRange</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>startToken</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>endToken</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tableNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>tokenRanges</name> <init>= <expr><call><name>createRepairRangeFrom</name><argument_list>(<argument><expr><name>startToken</name></expr></argument>, <argument><expr><name>endToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name>getValidColumnFamilies</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableNames</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>cfStore</name><operator>.</operator><name>forceCompactionForTokenRange</name></name><argument_list>(<argument><expr><name>tokenRanges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Takes the snapshot for the given keyspaces. A snapshot name must be specified.
     *
     * @param tag the tag given to the snapshot; may not be null or empty
     * @param keyspaceNames the names of the keyspaces to snapshot; empty means "all."
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>takeSnapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>keyspaceNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>takeSnapshot</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>keyspaceNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Takes the snapshot of a multiple column family from different keyspaces. A snapshot name must be specified.
     *
     * @param tag
     *            the tag given to the snapshot; may not be null or empty
     * @param tableList
     *            list of tables from different keyspace in the form of ks1.cf1 ks2.cf2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>takeMultipleTableSnapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tableList</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>takeMultipleTableSnapshot</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>tableList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Takes the snapshot for the given keyspaces. A snapshot name must be specified.
     *
     * @param tag the tag given to the snapshot; may not be null or empty
     * @param skipFlush Skip blocking flush of memtable
     * @param keyspaceNames the names of the keyspaces to snapshot; empty means "all."
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>takeSnapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>skipFlush</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>keyspaceNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>operationMode</name> <operator>==</operator> <name><name>Mode</name><operator>.</operator><name>JOINING</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Cannot snapshot until bootstrap completes"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>tag</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"You must supply a snapshot name."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Keyspace</name></argument>&gt;</argument_list></name></type> <name>keyspaces</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>keyspaceNames</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>keyspaces</name> <operator>=</operator> <call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Keyspace</name></argument>&gt;</argument_list></name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>keyspaceNames</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspaceName</name> <range>: <expr><name>keyspaceNames</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getValidKeyspace</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>keyspaces</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Do a check to see if this snapshot exists before we actually snapshot</comment>
        <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><name>keyspaces</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>keyspace</name><operator>.</operator><name>snapshotExists</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Snapshot "</literal> <operator>+</operator> <name>tag</name> <operator>+</operator> <literal type="string">" already exists."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block_content></block></for>


        <decl_stmt><decl><type><name>RateLimiter</name></type> <name>snapshotRateLimiter</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSnapshotRateLimiter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><name>keyspaces</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>skipFlush</name></expr></argument>, <argument><expr><name>snapshotRateLimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Takes the snapshot of a multiple column family from different keyspaces. A snapshot name must be specified.
     *
     *
     * @param tag
     *            the tag given to the snapshot; may not be null or empty
     * @param skipFlush
     *            Skip blocking flush of memtable
     * @param tableList
     *            list of tables from different keyspace in the form of ks1.cf1 ks2.cf2
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>takeMultipleTableSnapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>skipFlush</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tableList</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Keyspace</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>keyspaceColumnfamily</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Keyspace</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>table</name> <range>: <expr><name>tableList</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name><name>splittedString</name><index>[]</index></name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>splittedString</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><name><name>splittedString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><name><name>splittedString</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>keyspaceName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"You must supply a keyspace name"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>operationMode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>JOINING</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Cannot snapshot until bootstrap completes"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>tableName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"You must supply a table name"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>tag</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"You must supply a snapshot name."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name>getValidKeyspace</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>columnFamilyStore</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// As there can be multiple column family from same keyspace check if snapshot exist for that specific</comment>
                <comment type="line">// columnfamily and not for whole keyspace</comment>

                <if_stmt><if>if <condition>(<expr><call><name><name>columnFamilyStore</name><operator>.</operator><name>snapshotExists</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Snapshot "</literal> <operator>+</operator> <name>tag</name> <operator>+</operator> <literal type="string">" already exists."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>keyspaceColumnfamily</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>keyspaceColumnfamily</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Add Keyspace columnfamily to map in order to support atomicity for snapshot process.</comment>
                <comment type="line">// So no snapshot should happen if any one of the above conditions fail for any keyspace or columnfamily</comment>
                <expr_stmt><expr><call><name><name>keyspaceColumnfamily</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
                        <argument><expr><literal type="string">"Cannot take a snapshot on secondary index or invalid column family name. You must supply a column family name in the form of keyspace.columnfamily"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>RateLimiter</name></type> <name>snapshotRateLimiter</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSnapshotRateLimiter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Keyspace</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>keyspaceColumnfamily</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>table</name> <range>: <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>snapshot</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>skipFlush</name></expr></argument>, <argument><expr><name>snapshotRateLimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></for>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>verifyKeyspaceIsValid</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>VirtualKeyspaceRegistry</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceNullable</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Cannot perform any operations against virtual keyspace "</literal> <operator>+</operator> <name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaces</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Keyspace "</literal> <operator>+</operator> <name>keyspaceName</name> <operator>+</operator> <literal type="string">" does not exist"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Keyspace</name></type> <name>getValidKeyspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>verifyKeyspaceIsValid</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the snapshot with the given name from the given keyspaces.
     * If no tag is specified we will remove all snapshots.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearSnapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>keyspaceNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>tag</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>tag</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keyspaces</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>dataDir</name> <range>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAllDataFileLocations</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for<control>(<init><decl><type><name>String</name></type> <name>keyspaceDir</name> <range>: <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>list</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <comment type="line">// Only add a ks if it has been specified as a param, assuming params were actually provided.</comment>
                <if_stmt><if>if <condition>(<expr><name><name>keyspaceNames</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>keyspaceNames</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>keyspaceDir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>keyspaces</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>keyspaceDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspace</name> <range>: <expr><name>keyspaces</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>clearSnapshot</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Cleared out snapshot directories"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TabularData</name></argument>&gt;</argument_list></name></type> <name>getSnapshotDetails</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TabularData</name></argument>&gt;</argument_list></name></type> <name>snapshotMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Directories</name><operator>.</operator><name>SnapshotSizeDetails</name></name></argument>&gt;</argument_list></name></name></type> <name>snapshotDetail</name> <range>: <expr><call><name><name>cfStore</name><operator>.</operator><name>getSnapshotDetails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>TabularDataSupport</name></type> <name>data</name> <init>= <expr><operator>(</operator><name>TabularDataSupport</name><operator>)</operator><call><name><name>snapshotMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>snapshotDetail</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <call><name>TabularDataSupport</name><argument_list>(<argument><expr><name><name>SnapshotDetailsTabularData</name><operator>.</operator><name>TABULAR_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>snapshotMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>snapshotDetail</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><call><name><name>SnapshotDetailsTabularData</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name><name>snapshotDetail</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfStore</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>snapshotDetail</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><name>snapshotMap</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>trueSnapshotsSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>SchemaConstants</name><operator>.</operator><name>isLocalSystemKeyspace</name></name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name><name>cfStore</name><operator>.</operator><name>trueSnapshotsSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <return>return <expr><name>total</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSnapshotLinksPerSecond</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>throttle</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Setting snapshot throttle to {}"</literal></expr></argument>, <argument><expr><name>throttle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setSnapshotLinksPerSecond</name></name><argument_list>(<argument><expr><name>throttle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getSnapshotLinksPerSecond</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSnapshotLinksPerSecond</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>refreshSizeEstimates</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanupSizeEstimates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FBUtilities</name><operator>.</operator><name>waitOnFuture</name></name><argument_list>(<argument><expr><call><name><name>ScheduledExecutors</name><operator>.</operator><name>optionalTasks</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><name><name>SizeEstimatesRecorder</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>cleanupSizeEstimates</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>clearAllEstimates</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param allowIndexes Allow index CF names to be passed in
     * @param autoAddIndexes Automatically add secondary indexes if a CF has them
     * @param keyspaceName keyspace
     * @param cfNames CFs
     * @throws java.lang.IllegalArgumentException when given CF name does not exist
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>ColumnFamilyStore</name></argument>&gt;</argument_list></name></type> <name>getValidColumnFamilies</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>allowIndexes</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>autoAddIndexes</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>cfNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name>getValidKeyspace</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>keyspace</name><operator>.</operator><name>getValidColumnFamilies</name></name><argument_list>(<argument><expr><name>allowIndexes</name></expr></argument>, <argument><expr><name>autoAddIndexes</name></expr></argument>, <argument><expr><name>cfNames</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Flush all memtables for a keyspace and column families.
     * @param keyspaceName
     * @param tableNames
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>forceKeyspaceFlush</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tableNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name>getValidColumnFamilies</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableNames</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Forcing flush on keyspace {}, CF {}"</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name><name>cfStore</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfStore</name><operator>.</operator><name>forceBlockingFlush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>repairAsync</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>repairSpec</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>repair</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>repairSpec</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>left</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>repair</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>repairSpec</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ProgressListener</name></argument>&gt;</argument_list></name></type> <name>listeners</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RepairOption</name></type> <name>option</name> <init>= <expr><call><name><name>RepairOption</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>repairSpec</name></expr></argument>, <argument><expr><name><name>tokenMetadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// if ranges are not specified</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>option</name><operator>.</operator><name>getRanges</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>option</name><operator>.</operator><name>isPrimaryRange</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// when repairing only primary range, neither dataCenters nor hosts can be set</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>option</name><operator>.</operator><name>getDataCenters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>option</name><operator>.</operator><name>getHosts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>option</name><operator>.</operator><name>getRanges</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><call><name>getPrimaryRanges</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <comment type="line">// except dataCenters only contain local DC (i.e. -local)</comment>
                <if type="elseif">else if <condition>(<expr><call><name><name>option</name><operator>.</operator><name>isInLocalDCOnly</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>option</name><operator>.</operator><name>getRanges</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><call><name>getPrimaryRangesWithinDC</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"You need to run primary range repair on all nodes in the cluster."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Iterables</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>option</name><operator>.</operator><name>getRanges</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getLocalReplicas</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>onlyFull</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ranges</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>option</name><operator>.</operator><name>getRanges</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReplicationFactor</name><argument_list>()</argument_list></call><operator>.</operator><name>allReplicas</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Futures</name><operator>.</operator><name>immediateFuture</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>cmd</name> <init>= <expr><call><name><name>nextRepairCommand</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name><name>ActiveRepairService</name><operator>.</operator><name>repairCommandExecutor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>submit</name><argument_list>(<argument><expr><call><name>createRepairTask</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>listeners</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create collection of ranges that match ring layout from given tokens.
     *
     * @param beginToken beginning token of the range
     * @param endToken end token of the range
     * @return collection of ranges that match ring layout in TokenMetadata
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>createRepairRangeFrom</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>beginToken</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>endToken</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Token</name></type> <name>parsedBeginToken</name> <init>= <expr><call><name>getTokenFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>fromString</name><argument_list>(<argument><expr><name>beginToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Token</name></type> <name>parsedEndToken</name> <init>= <expr><call><name>getTokenFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>fromString</name><argument_list>(<argument><expr><name>endToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Break up given range to match ring layout in TokenMetadata</comment>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>repairingRange</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tokens</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>parsedBeginToken</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>tokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>parsedBeginToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tokens</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>parsedEndToken</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>tokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>parsedEndToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// tokens now contain all tokens including our endpoints</comment>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>parsedBeginToken</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>parsedEndToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>repairingRange</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>repairingRange</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TokenFactory</name></type> <name>getTokenFactory</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>FutureTask</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>createRepairTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>RepairOption</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ProgressListener</name></argument>&gt;</argument_list></name></type> <name>listeners</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>options</name><operator>.</operator><name>getDataCenters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>options</name><operator>.</operator><name>getDataCenters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalDataCenter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"the local data center must be part of the repair"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>existingDatacenters</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>cloneOnlyTokenMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTopology</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenterEndpoints</name><argument_list>()</argument_list></call><operator>.</operator><call><name>keys</name><argument_list>()</argument_list></call><operator>.</operator><call><name>elementSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>datacenters</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>getDataCenters</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>existingDatacenters</name><operator>.</operator><name>containsAll</name></name><argument_list>(<argument><expr><name>datacenters</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>datacenters</name><operator>.</operator><name>removeAll</name></name><argument_list>(<argument><expr><name>existingDatacenters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"data center(s) "</literal> <operator>+</operator> <call><name><name>datacenters</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" not found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>RepairRunnable</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>RepairRunnable</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>addProgressListener</name></name><argument_list>(<argument><expr><name>progressSupport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>ProgressListener</name></type> <name>listener</name> <range>: <expr><name>listeners</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>addProgressListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>isTraced</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Runnable</name></type> <name>r</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt;
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <finally>finally
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>ExecutorLocals</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></finally></try>
            </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name><name>FutureTask</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name><name>FutureTask</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>forceTerminateAllRepairSessions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ActiveRepairService</name><operator>.</operator><name>instance</name><operator>.</operator><name>terminateSessions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getParentRepairStatus</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>ActiveRepairService</name><operator>.</operator><name>ParentRepairStatus</name></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><call><name><name>ActiveRepairService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getRepairStatus</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>pair</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>:
               <expr><name><name>ImmutableList</name><operator>.</operator></name>&lt;<name>String</name><operator>&gt;</operator><call><name>builder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>pair</name><operator>.</operator><name>left</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRepairSessionMaxTreeDepth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setRepairSessionMaxTreeDepth</name></name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRepairSessionMaxTreeDepth</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRepairSessionMaxTreeDepth</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/* End of MBean interface methods */</comment>

    <comment type="block" format="javadoc">/**
     * Get the "primary ranges" for the specified keyspace and endpoint.
     * "Primary ranges" are the ranges that the node is responsible for storing replica primarily.
     * The node that stores replica primarily is defined as the first node returned
     * by {@link AbstractReplicationStrategy#calculateNaturalReplicas}.
     *
     * @param keyspace Keyspace name to check primary ranges
     * @param ep endpoint we are interested in.
     * @return primary ranges for the specified endpoint.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getPrimaryRangesForEndpoint</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>strategy</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>primaryRanges</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>metadata</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>cloneOnlyTokenMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Token</name></type> <name>token</name> <range>: <expr><call><name><name>metadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>replicas</name> <init>= <expr><call><name><name>strategy</name><operator>.</operator><name>calculateNaturalReplicas</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>replicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>replicas</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>endpoint</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkState</name></name><argument_list>(<argument><expr><call><name><name>replicas</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isFull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>primaryRanges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>getPredecessor</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>primaryRanges</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the "primary ranges" within local DC for the specified keyspace and endpoint.
     *
     * @see #getPrimaryRangesForEndpoint(String, InetAddressAndPort)
     * @param keyspace Keyspace name to check primary ranges
     * @param referenceEndpoint endpoint we are interested in.
     * @return primary ranges within local DC for the specified endpoint.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getPrimaryRangeForEndpointWithinDC</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>referenceEndpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>metadata</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>cloneOnlyTokenMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>localDC</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenter</name><argument_list>(<argument><expr><name>referenceEndpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>localDcNodes</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>getTopology</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenterEndpoints</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>localDC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>strategy</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>localDCPrimaryRanges</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Token</name></type> <name>token</name> <range>: <expr><call><name><name>metadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>replicas</name> <init>= <expr><call><name><name>strategy</name><operator>.</operator><name>calculateNaturalReplicas</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><name>replicas</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>localDcNodes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>referenceEndpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>localDCPrimaryRanges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>getPredecessor</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <return>return <expr><name>localDCPrimaryRanges</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getLocalPrimaryRange</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getLocalPrimaryRangeForEndpoint</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getLocalPrimaryRangeForEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>referenceEndpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>tokenMetadata</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>tokenMetadata</name><operator>.</operator><name>cloneOnlyTokenMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><name>referenceEndpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dc</name> <init>= <expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><name>referenceEndpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getTokens</name></name><argument_list>(<argument><expr><name>referenceEndpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// filter tokens to the single DC</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>filteredTokens</name> <init>= <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Token</name></type> <name>token</name> <range>: <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpoint</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>dc</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>filteredTokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><call><name>getAllRanges</name><argument_list>(<argument><expr><name>filteredTokens</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                           <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>tokens</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get all ranges that span the ring given a set
     * of tokens. All ranges are in sorted order of
     * ranges.
     * @return ranges in sorted order
    */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getAllRanges</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>sortedTokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"computing ranges for {}"</literal></expr></argument>, <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>sortedTokens</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>sortedTokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>sortedTokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>sortedTokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>sortedTokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>sortedTokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>sortedTokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>ranges</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method returns the N endpoints that are responsible for storing the
     * specified key i.e for replication.
     *
     * @param keyspaceName keyspace name also known as keyspace
     * @param cf Column family name
     * @param key key for which we need to find the endpoint
     * @return the endpoint responsible for this key
     */</comment>
    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>getNaturalEndpoints</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointsForToken</name></type> <name>replicas</name> <init>= <expr><call><name>getNaturalReplicasForToken</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>cf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>inetList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>replicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>replicas</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>inetList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call><operator>.</operator><name>address</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>inetList</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getNaturalEndpointsWithPort</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Replicas</name><operator>.</operator><name>stringify</name></name><argument_list>(<argument><expr><call><name>getNaturalReplicasForToken</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>cf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>getNaturalEndpoints</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointsForToken</name></type> <name>replicas</name> <init>= <expr><call><name>getNaturalReplicasForToken</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>inetList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>replicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>replicas</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>inetList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call><operator>.</operator><name>address</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>inetList</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getNaturalEndpointsWithPort</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointsForToken</name></type> <name>replicas</name> <init>= <expr><call><name>getNaturalReplicasForToken</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Replicas</name><operator>.</operator><name>stringify</name></name><argument_list>(<argument><expr><name>replicas</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EndpointsForToken</name></type> <name>getNaturalReplicasForToken</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>ksMetaData</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceMetadata</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ksMetaData</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unknown keyspace '"</literal> <operator>+</operator> <name>keyspaceName</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>metadata</name> <init>= <expr><call><name><name>ksMetaData</name><operator>.</operator><name>getTableOrViewNullable</name></name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>metadata</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unknown table '"</literal> <operator>+</operator> <name>cf</name> <operator>+</operator> <literal type="string">"' in keyspace '"</literal> <operator>+</operator> <name>keyspaceName</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <return>return <expr><call><name>getNaturalReplicasForToken</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><call><name><name>metadata</name><operator>.</operator><name>partitionKeyType</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EndpointsForToken</name></type> <name>getNaturalReplicasForToken</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Token</name></type> <name>token</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>getToken</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNaturalReplicasForToken</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLoggingLevel</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>classQualifier</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rawLevel</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>LoggingSupportFactory</name><operator>.</operator><name>getLoggingSupport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLoggingLevel</name><argument_list>(<argument><expr><name>classQualifier</name></expr></argument>, <argument><expr><name>rawLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the runtime logging levels for all the configured loggers
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLoggingLevels</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>LoggingSupportFactory</name><operator>.</operator><name>getLoggingSupport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLoggingLevels</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return list of Token ranges (_not_ keys!) together with estimated key count,
     *      breaking up the data this node is responsible for into pieces of roughly keysPerSplit
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getSplits</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cfName</name></decl></parameter>, <parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keysPerSplit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>t</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name>keySamples</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>totalRowCountEstimate</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>estimatedKeysForRange</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// splitCount should be much smaller than number of key samples, to avoid huge sampling error</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>minSamplesPerSplit</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>maxSplitCount</name> <init>= <expr><call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <name>minSamplesPerSplit</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>splitCount</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>maxSplitCount</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>totalRowCountEstimate</name> <operator>/</operator> <name>keysPerSplit</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name>keysToTokens</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getSplits</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>splitCount</name></expr></argument>, <argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getSplits</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>splitCount</name></decl></parameter>, <parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>step</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>splitCount</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Token</name></type> <name>prevToken</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>splits</name> <init>= <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayListWithExpectedSize</name></name><argument_list>(<argument><expr><name>splitCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>splitCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <name>step</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Token</name></type> <name>token</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>prevToken</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// always return an estimate &gt; 0 (see CASSANDRA-7322)</comment>
            <expr_stmt><expr><call><name><name>splits</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>params</name><operator>.</operator><name>minIndexInterval</name></name></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>estimatedKeysForRange</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>prevToken</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>splits</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>keysToTokens</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>keys</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayListWithExpectedSize</name></name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>DecoratedKey</name></type> <name>key</name> <range>: <expr><name>keys</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>tokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name><name>tokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>tokens</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>keySamples</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>ColumnFamilyStore</name></argument>&gt;</argument_list></name></type> <name>cfses</name></decl></parameter>, <parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><name>cfses</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>Iterables</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>keySamples</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name><name>FBUtilities</name><operator>.</operator><name>sortSampledKeys</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>keys</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Broadcast leaving status and update local tokenMetadata accordingly
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>startLeaving</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>leaving</name></name><argument_list>(<argument><expr><call><name>getLocalTokens</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>leaving</name></name><argument_list>(<argument><expr><call><name>getLocalTokens</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>addLeavingEndpoint</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>decommission</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>metadata</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>cloneAfterAllLeft</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>operationMode</name> <operator>!=</operator> <name><name>Mode</name><operator>.</operator><name>LEAVING</name></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"local node is not a member of the token ring yet"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>metadata</name><operator>.</operator><name>getAllEndpoints</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"no other normal nodes in the ring; decommission would be pointless"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>operationMode</name> <operator>!=</operator> <name><name>Mode</name><operator>.</operator><name>NORMAL</name></name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Node in "</literal> <operator>+</operator> <name>operationMode</name> <operator>+</operator> <literal type="string">" state; wait for status to become normal or restart"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>isDecommissioning</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Node is still decommissioning. Check nodetool netstats."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"DECOMMISSIONING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>blockUntilFinished</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>dc</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocalDatacenter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>operationMode</name> <operator>!=</operator> <name><name>Mode</name><operator>.</operator><name>LEAVING</name></name></expr>)</condition> <comment type="line">// If we're already decommissioning there is no point checking RF/pending ranges</comment>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>rf</name></decl>, <decl><type ref="prev"/><name>numNodes</name></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspaceName</name> <range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonLocalStrategyKeyspaces</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>keyspace</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>NetworkTopologyStrategy</name></expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>NetworkTopologyStrategy</name></type> <name>strategy</name> <init>= <expr><operator>(</operator><name>NetworkTopologyStrategy</name><operator>)</operator> <call><name><name>keyspace</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name>rf</name> <operator>=</operator> <call><name><name>strategy</name><operator>.</operator><name>getReplicationFactor</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>.</operator><name>allReplicas</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>numNodes</name> <operator>=</operator> <call><name><name>metadata</name><operator>.</operator><name>getTopology</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenterEndpoints</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
                            <expr_stmt><expr><name>numNodes</name> <operator>=</operator> <call><name><name>metadata</name><operator>.</operator><name>getAllEndpoints</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>rf</name> <operator>=</operator> <call><name><name>keyspace</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReplicationFactor</name><argument_list>()</argument_list></call><operator>.</operator><name>allReplicas</name></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>

                        <if_stmt><if>if <condition>(<expr><name>numNodes</name> <operator>&lt;=</operator> <name>rf</name></expr>)</condition><block type="pseudo"><block_content>
                            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Not enough live nodes to maintain replication factor in keyspace "</literal>
                                                                    <operator>+</operator> <name>keyspaceName</name> <operator>+</operator> <literal type="string">" (RF = "</literal> <operator>+</operator> <name>rf</name> <operator>+</operator> <literal type="string">", N = "</literal> <operator>+</operator> <name>numNodes</name> <operator>+</operator> <literal type="string">")."</literal>
                                                                    <operator>+</operator> <literal type="string">" Perform a forceful decommission to ignore."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <comment type="line">// TODO: do we care about fixing transient/full self-movements here? probably</comment>
                    <if_stmt><if>if <condition>(<expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getPendingRanges</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"data is currently moving to this node; unable to leave the ring"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>startLeaving</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>RING_DELAY</name></expr></argument>, <argument><expr><call><name><name>BatchlogManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>getBatchlogTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>LEAVING</name></name></expr></argument>, <argument><expr><literal type="string">"sleeping "</literal> <operator>+</operator> <name>timeout</name> <operator>+</operator> <literal type="string">" ms for batch processing and pending range setup"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Runnable</name></type> <name>finishLeaving</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>shutdownClientServers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <try>try
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>IOError</name></type> <name>ioe</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"failed to shutdown message service: {}"</literal></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch></try>

                    <expr_stmt><expr><call><name><name>Stage</name><operator>.</operator><name>shutdownNow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>setBootstrapState</name></name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>BootstrapState</name><operator>.</operator><name>DECOMMISSIONED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>DECOMMISSIONED</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// let op be responsible for killing the process</comment>
                </block_content>}</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>unbootstrap</name><argument_list>(<argument><expr><name>finishLeaving</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Node interrupted while decommissioning"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error while decommissioning node "</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error while decommissioning node: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>isDecommissioning</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>leaveRing</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>setBootstrapState</name></name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>BootstrapState</name><operator>.</operator><name>NEEDS_BOOTSTRAP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>removeEndpoint</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>left</name></name><argument_list>(<argument><expr><call><name>getLocalTokens</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>computeExpireTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>left</name></name><argument_list>(<argument><expr><call><name>getLocalTokens</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>computeExpireTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>delay</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>RING_DELAY</name></expr></argument>, <argument><expr><name><name>Gossiper</name><operator>.</operator><name>intervalInMillis</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Announcing that I have left the ring for {}ms"</literal></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><name>delay</name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>unbootstrap</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>onFinish</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>EndpointsByReplica</name></argument>&gt;</argument_list></name></type> <name>rangesToStream</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspaceName</name> <range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonLocalStrategyKeyspaces</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointsByReplica</name></type> <name>rangesMM</name> <init>= <expr><call><name>getChangedReplicasForLeaving</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tokenMetadata</name></expr></argument>, <argument><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Ranges needing transfer are [{}]"</literal></expr></argument>, <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><call><name><name>rangesMM</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>rangesToStream</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>rangesMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>LEAVING</name></name></expr></argument>, <argument><expr><literal type="string">"replaying batch log and streaming data to other nodes"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Start with BatchLog replay, which may create hints but no writes since this is no longer a valid endpoint.</comment>
        <decl_stmt><decl><type><name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>batchlogReplay</name> <init>= <expr><call><name><name>BatchlogManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>startBatchlogReplay</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Future</name><argument_list type="generic">&lt;<argument><name>StreamState</name></argument>&gt;</argument_list></name></type> <name>streamSuccess</name> <init>= <expr><call><name>streamRanges</name><argument_list>(<argument><expr><name>rangesToStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Wait for batch log to complete before streaming hints.</comment>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"waiting for batch log processing."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>batchlogReplay</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>LEAVING</name></name></expr></argument>, <argument><expr><literal type="string">"streaming hints to other nodes"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Future</name></type> <name>hintsSuccess</name> <init>= <expr><call><name>streamHints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// wait for the transfer runnables to signal the latch.</comment>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"waiting for stream acks."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>streamSuccess</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hintsSuccess</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"stream acks all received."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>leaveRing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>onFinish</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Future</name></type> <name>streamHints</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>HintsService</name><operator>.</operator><name>instance</name><operator>.</operator><name>transferHints</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>getPreferredHintsStreamTarget</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>EndpointsForRange</name></type> <name>getStreamCandidates</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpoints</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>endpoints</name> <operator>=</operator> <call><name><name>endpoints</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                             <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>endpoint</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>FailureDetector</name><operator>.</operator><name>instance</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                             <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>SystemReplicas</name><operator>.</operator><name>getSystemReplicas</name></name><argument_list>(<argument><expr><name>endpoints</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <comment type="block" format="javadoc">/**
     * Find the best target to stream hints to. Currently the closest peer according to the snitch
     */</comment>
    <function><type><specifier>private</specifier> <name>UUID</name></type> <name>getPreferredHintsStreamTarget</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpoints</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>cloneAfterAllLeft</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllEndpoints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>candidates</name> <init>= <expr><call><name>getStreamCandidates</name><argument_list>(<argument><expr><name>endpoints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>candidates</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to stream hints since no live endpoints seen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Unable to stream hints since no live endpoints seen"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// stream to the closest peer as chosen by the snitch</comment>
            <expr_stmt><expr><name>candidates</name> <operator>=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sortedByProximity</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>hintsDestinationHost</name> <init>= <expr><call><name><name>candidates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>endpoint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getHostId</name></name><argument_list>(<argument><expr><name>hintsDestinationHost</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>move</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>newToken</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>getTokenFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>validate</name><argument_list>(<argument><expr><name>newToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name>move</name><argument_list>(<argument><expr><call><name>getTokenFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>fromString</name><argument_list>(<argument><expr><name>newToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * move the node to new token or find a new token to boot to according to load
     *
     * @param newToken new token to boot to, or if null, find balanced token to boot to
     *
     * @throws IOException on any I/O operation error
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>move</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>newToken</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>newToken</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Can't move to the undefined (null) token."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>tokenMetadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>newToken</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"target token "</literal> <operator>+</operator> <name>newToken</name> <operator>+</operator> <literal type="string">" is already owned by another node."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <comment type="line">// address of the current node</comment>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>localAddress</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// This doesn't make any sense in a vnodes environment.</comment>
        <if_stmt><if>if <condition>(<expr><call><name>getTokenMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTokens</name><argument_list>(<argument><expr><name>localAddress</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid request to move(Token); This node has more than one token and cannot be moved thusly."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"This node has more than one token and cannot be moved thusly."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keyspacesToProcess</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonLocalStrategyKeyspaces</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>blockUntilFinished</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// checking if data is moving to this node</comment>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspaceName</name> <range>: <expr><name>keyspacesToProcess</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <comment type="line">// TODO: do we care about fixing transient/full self-movements here?</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getPendingRanges</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>localAddress</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"data is currently moving to this node; unable to leave the ring"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>moving</name></name><argument_list>(<argument><expr><name>newToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>, <argument><expr><call><name><name>valueFactory</name><operator>.</operator><name>moving</name></name><argument_list>(<argument><expr><name>newToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>MOVING</name></name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Moving %s from %s to %s."</literal></expr></argument>, <argument><expr><name>localAddress</name></expr></argument>, <argument><expr><call><name>getLocalTokens</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newToken</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>MOVING</name></name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Sleeping %s ms before start streaming/fetching ranges"</literal></expr></argument>, <argument><expr><name>RING_DELAY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><name>RING_DELAY</name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RangeRelocator</name></type> <name>relocator</name> <init>= <expr><operator>new</operator> <call><name>RangeRelocator</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>newToken</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspacesToProcess</name></expr></argument>, <argument><expr><name>tokenMetadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>relocator</name><operator>.</operator><name>calculateToFromStreams</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>relocator</name><operator>.</operator><name>streamsNeeded</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>MOVING</name></name></expr></argument>, <argument><expr><literal type="string">"fetching new ranges and streaming old ranges"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>relocator</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> | <type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Interrupted while waiting for stream/fetch ranges to finish: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>MOVING</name></name></expr></argument>, <argument><expr><literal type="string">"No ranges to fetch/stream"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>setTokens</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>newToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// setting new token as we have everything settled</comment>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Successfully moved to new token {}"</literal></expr></argument>, <argument><expr><call><name>getLocalTokens</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRemovalStatus</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getRemovalStatus</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRemovalStatusWithPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getRemovalStatus</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the status of a token removal.
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getRemovalStatus</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>removingNode</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><literal type="string">"No token removals in process."</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Collection</name></type> <name>toFormat</name> <init>= <expr><name>replicatingNodes</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>withPort</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>toFormat</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>replicatingNodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>node</name> <range>: <expr><name>replicatingNodes</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>toFormat</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Removing token (%s). Waiting for replication confirmation from [%s]."</literal></expr></argument>,
                             <argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getToken</name></name><argument_list>(<argument><expr><name>removingNode</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>toFormat</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Force a remove operation to complete. This may be necessary if a remove operation
     * blocks forever due to node/stream failure. removeNode() must be called
     * first, this is a last resort measure.  No further attempt will be made to restore replicas.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>forceRemoveCompletion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>replicatingNodes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call>  <operator>||</operator> <call><name><name>tokenMetadata</name><operator>.</operator><name>getSizeOfLeavingEndpoints</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Removal not confirmed for for {}"</literal></expr></argument>, <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>replicatingNodes</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <range>: <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getLeavingEndpoints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>UUID</name></type> <name>hostId</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getHostId</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>advertiseTokenRemoved</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>excise</name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getTokens</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>replicatingNodes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>removingNode</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"No nodes to force removal on, call 'removenode' first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove a node that has died, attempting to restore the replica count.
     * If the node is alive, decommission should be attempted.  If decommission
     * fails, then removeNode should be called.  If we fail while trying to
     * restore the replica count, finally forceRemoveCompleteion should be
     * called to forcibly remove the node without regard to replica count.
     *
     * @param hostIdString Host ID for the node
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeNode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>hostIdString</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>myAddress</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UUID</name></type> <name>localHostId</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getHostId</name></name><argument_list>(<argument><expr><name>myAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UUID</name></type> <name>hostId</name> <init>= <expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name>hostIdString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpointForHostId</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>endpoint</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Host ID not found."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tokenMetadata</name><operator>.</operator><name>isMember</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Node to be removed is not a member of the token ring"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>endpoint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>myAddress</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
             <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot remove self"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLiveMembers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Node "</literal> <operator>+</operator> <name>endpoint</name> <operator>+</operator> <literal type="string">" is alive and owns this ID. Use decommission command to remove it from the ring"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <comment type="line">// A leaving endpoint that is dead is already being removed.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>tokenMetadata</name><operator>.</operator><name>isLeaving</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Node {} is already being removed, continuing removal anyway"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>replicatingNodes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"This node is already processing a removal. Wait for it to complete, or use 'removenode force' if this has failed."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getTokens</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Find the endpoints that are going to become responsible for data</comment>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspaceName</name> <range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonLocalStrategyKeyspaces</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <comment type="line">// if the replication factor is 1 the data is lost so we shouldn't wait for confirmation</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReplicationFactor</name><argument_list>()</argument_list></call><operator>.</operator><name>allReplicas</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <comment type="line">// get all ranges that change ownership (that is, a node needs</comment>
            <comment type="line">// to take responsibility for new range)</comment>
            <decl_stmt><decl><type><name>EndpointsByReplica</name></type> <name>changedRanges</name> <init>= <expr><call><name>getChangedReplicasForLeaving</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>tokenMetadata</name></expr></argument>, <argument><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>IFailureDetector</name></type> <name>failureDetector</name> <init>= <expr><name><name>FailureDetector</name><operator>.</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>ep</name> <range>: <expr><call><name>transform</name><argument_list>(<argument><expr><call><name><name>changedRanges</name><operator>.</operator><name>flattenValues</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Replica</name><operator>::</operator><name>endpoint</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>failureDetector</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>replicatingNodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Endpoint {} is down and will not receive data for re-replication of {}"</literal></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><name>removingNode</name> <operator>=</operator> <name>endpoint</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>addLeavingEndpoint</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// the gossiper will handle spoofing this node's state to REMOVING_TOKEN for us</comment>
        <comment type="line">// we add our own token so other nodes to let us know when they're done</comment>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>advertiseRemoving</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>hostId</name></expr></argument>, <argument><expr><name>localHostId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// kick off streaming commands</comment>
        <expr_stmt><expr><call><name>restoreReplicaCount</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>myAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// wait for ReplicationDoneVerbHandler to signal we're done</comment>
        <while>while <condition>(<expr><operator>!</operator><call><name><name>replicatingNodes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>excise</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// gossiper will indicate the token has left</comment>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>advertiseTokenRemoved</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>replicatingNodes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>removingNode</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>confirmReplication</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>node</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// replicatingNodes can be empty in the case where this node used to be a removal coordinator,</comment>
        <comment type="line">// but restarted before all 'replication finished' messages arrived. In that case, we'll</comment>
        <comment type="line">// still go ahead and acknowledge it.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>replicatingNodes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>replicatingNodes</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Received unexpected REPLICATION_FINISHED message from {}. Was this node recently a removal coordinator?"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getOperationMode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>operationMode</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isStarting</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>operationMode</name> <operator>==</operator> <name><name>Mode</name><operator>.</operator><name>STARTING</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMoving</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>operationMode</name> <operator>==</operator> <name><name>Mode</name><operator>.</operator><name>MOVING</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isJoining</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>operationMode</name> <operator>==</operator> <name><name>Mode</name><operator>.</operator><name>JOINING</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDrained</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>operationMode</name> <operator>==</operator> <name><name>Mode</name><operator>.</operator><name>DRAINED</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDraining</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>operationMode</name> <operator>==</operator> <name><name>Mode</name><operator>.</operator><name>DRAINING</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNormal</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>operationMode</name> <operator>==</operator> <name><name>Mode</name><operator>.</operator><name>NORMAL</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDrainProgress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Drained %s/%s ColumnFamilies"</literal></expr></argument>, <argument><expr><name>remainingCFs</name></expr></argument>, <argument><expr><name>totalCFs</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Shuts node off to writes, empties memtables and the commit log.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>drain</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>drain</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>drain</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isFinalShutdown</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Stage</name><operator>.</operator><name>areMutationExecutorsTerminated</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isFinalShutdown</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Cannot drain node (did it already happen?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <assert>assert <expr><operator>!</operator><name>isShutdown</name></expr>;</assert>
        <expr_stmt><expr><name>isShutdown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Throwable</name></type> <name>preShutdownHookThrowable</name> <init>= <expr><call><name><name>Throwables</name><operator>.</operator><name>perform</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>preShutdownHooks</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>h</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name>h</name><operator>::</operator><name>run</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>preShutdownHookThrowable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Attempting to continue draining after pre-shutdown hooks returned exception"</literal></expr></argument>, <argument><expr><name>preShutdownHookThrowable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>DRAINING</name></name></expr></argument>, <argument><expr><literal type="string">"starting drain process"</literal></expr></argument>, <argument><expr><operator>!</operator><name>isFinalShutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <try>try
            <block>{<block_content>
                <comment type="block">/* not clear this is reasonable time, but propagated from prior embedded behaviour */</comment>
                <expr_stmt><expr><call><name><name>BatchlogManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>shutdownAndWait</name></name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>MINUTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>TimeoutException</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Batchlog manager timed out shutting down"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>

            <expr_stmt><expr><call><name><name>HintsService</name><operator>.</operator><name>instance</name><operator>.</operator><name>pauseDispatch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>daemon</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>shutdownClientServers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>ScheduledExecutors</name><operator>.</operator><name>optionalTasks</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ActiveRepairService</name><operator>.</operator><name>instance</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isFinalShutdown</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>DRAINING</name></name></expr></argument>, <argument><expr><literal type="string">"shutting down MessageService"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// In-progress writes originating here could generate hints to be written,</comment>
            <comment type="line">// which is currently scheduled on the mutation stage. So shut down MessagingService</comment>
            <comment type="line">// before mutation stage, so we can get all the hints saved before shutting down.</comment>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <comment type="line">// prevent messaging service timing out shutdown from aborting</comment>
                <comment type="line">// drain process; otherwise drain and/or shutdown might throw</comment>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Messaging service timed out shutting down"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isFinalShutdown</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>DRAINING</name></name></expr></argument>, <argument><expr><literal type="string">"clearing mutation stage"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>Stage</name><operator>.</operator><name>shutdownAndAwaitMutatingExecutors</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>,
                                                    <argument><expr><call><name><name>DRAIN_EXECUTOR_TIMEOUT_MS</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>StorageProxy</name><operator>.</operator><name>instance</name><operator>.</operator><name>verifyNoHintsInProgress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isFinalShutdown</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>DRAINING</name></name></expr></argument>, <argument><expr><literal type="string">"flushing column families"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// we don't want to start any new compactions while we are draining</comment>
            <expr_stmt><expr><call><name>disableAutoCompaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// count CFs first, since forceFlush could block for the flushWriter to get a queue slot empty</comment>
            <expr_stmt><expr><name>totalCFs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>nonSystem</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name>totalCFs</name> <operator>+=</operator> <call><name><name>keyspace</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>remainingCFs</name> <operator>=</operator> <name>totalCFs</name></expr>;</expr_stmt>
            <comment type="line">// flush</comment>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>flushes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>nonSystem</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>flushes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>forceFlush</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></for>
            <comment type="line">// wait for the flushes.</comment>
            <comment type="line">// TODO this is a godawful way to track progress, since they flush in parallel.  a long one could</comment>
            <comment type="line">// thus make several short ones "instant" if we wait for them later.</comment>
            <for>for <control>(<init><decl><type><name>Future</name></type> <name>f</name> <range>: <expr><name>flushes</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>FBUtilities</name><operator>.</operator><name>waitOnFuture</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// don't let this stop us from shutting down the commitlog and other thread pools</comment>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Caught exception while waiting for memtable flushes during shutdown hook"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>

                <expr_stmt><expr><name>remainingCFs</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="line">// Interrupt ongoing compactions and shutdown CM to prevent further compactions.</comment>
            <expr_stmt><expr><call><name><name>CompactionManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>forceShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Flush the system tables after all other tables are flushed, just in case flushing modifies any system state</comment>
            <comment type="line">// like CASSANDRA-5151. Don't bother with progress tracking since system data is tiny.</comment>
            <comment type="line">// Flush system tables after stopping compactions since they modify</comment>
            <comment type="line">// system tables (for example compactions can obsolete sstables and the tidiers in SSTableReader update</comment>
            <comment type="line">// system tables, see SSTableReader.GlobalTidy)</comment>
            <expr_stmt><expr><call><name><name>flushes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>system</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>flushes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>forceFlush</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>FBUtilities</name><operator>.</operator><name>waitOnFutures</name></name><argument_list>(<argument><expr><name>flushes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>HintsService</name><operator>.</operator><name>instance</name><operator>.</operator><name>shutdownBlocking</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Interrupt ongoing compactions and shutdown CM to prevent further compactions.</comment>
            <expr_stmt><expr><call><name><name>CompactionManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>forceShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// whilst we've flushed all the CFs, which will have recycled all completed segments, we want to ensure</comment>
            <comment type="line">// there are no segments to replay, so we force the recycling of any remaining (should be at most one)</comment>
            <expr_stmt><expr><call><name><name>CommitLog</name><operator>.</operator><name>instance</name><operator>.</operator><name>forceRecycleAllSegments</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>CommitLog</name><operator>.</operator><name>instance</name><operator>.</operator><name>shutdownBlocking</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// wait for miscellaneous tasks like sstable and commitlog segment deletion</comment>
            <expr_stmt><expr><call><name><name>ScheduledExecutors</name><operator>.</operator><name>nonPeriodicTasks</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ScheduledExecutors</name><operator>.</operator><name>nonPeriodicTasks</name><operator>.</operator><name>awaitTermination</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MINUTES</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to terminate non-periodic tasks within 1 minute."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>shutdownPostFlushExecutor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>DRAINED</name></name></expr></argument>, <argument><expr><operator>!</operator><name>isFinalShutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Caught an exception while draining "</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <decl_stmt><decl><type><name>Throwable</name></type> <name>postShutdownHookThrowable</name> <init>= <expr><call><name><name>Throwables</name><operator>.</operator><name>perform</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>postShutdownHooks</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>h</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name>h</name><operator>::</operator><name>run</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>postShutdownHookThrowable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Post-shutdown hooks returned exception"</literal></expr></argument>, <argument><expr><name>postShutdownHookThrowable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>disableAutoCompaction</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>disableAutoCompaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a runnable which will be called before shut down or drain. This is useful for other
     * applications running in the same JVM which may want to shut down first rather than time
     * out attempting to use Cassandra calls which will no longer work.
     * @param hook: the code to run
     * @return true on success, false if Cassandra is already shutting down, in which case the runnable
     * has NOT been added.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>addPreShutdownHook</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>hook</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isDraining</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isDrained</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>preShutdownHooks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove a preshutdown hook
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>removePreShutdownHook</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>hook</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>preShutdownHooks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a runnable which will be called after shutdown or drain. This is useful for other applications
     * running in the same JVM that Cassandra needs to work and should shut down later.
     * @param hook: the code to run
     * @return true on success, false if Cassandra is already shutting down, in which case the runnable has NOT been
     * added.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>addPostShutdownHook</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>hook</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isDraining</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isDrained</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>postShutdownHooks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove a postshutdownhook
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>removePostShutdownHook</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>hook</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>postShutdownHooks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Some services are shutdown during draining and we should not attempt to start them again.
     *
     * @param service - the name of the service we are trying to start.
     * @throws IllegalStateException - an exception that nodetool is able to convert into a message to display to the user
     */</comment>
    <function><type><specifier>synchronized</specifier> <name>void</name></type> <name>checkServiceAllowedToStart</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>service</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isDraining</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// when draining isShutdown is also true, so we check first to return a more accurate message</comment>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unable to start %s because the node is draining."</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isShutdown</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// do not rely on operationMode in case it gets changed to decomissioned or other</comment>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unable to start %s because the node was drained."</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNormal</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unable to start %s because the node is not in the normal state."</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="line">// Never ever do this at home. Used by tests.</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>IPartitioner</name></type> <name>setPartitionerUnsafe</name><parameter_list>(<parameter><decl><type><name>IPartitioner</name></type> <name>newPartitioner</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>IPartitioner</name></type> <name>oldPartitioner</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setPartitionerUnsafe</name></name><argument_list>(<argument><expr><name>newPartitioner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tokenMetadata</name> <operator>=</operator> <call><name><name>tokenMetadata</name><operator>.</operator><name>cloneWithNewPartitioner</name></name><argument_list>(<argument><expr><name>newPartitioner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>valueFactory</name> <operator>=</operator> <operator>new</operator> <call><name><name>VersionedValue</name><operator>.</operator><name>VersionedValueFactory</name></name><argument_list>(<argument><expr><name>newPartitioner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>oldPartitioner</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TokenMetadata</name></type> <name>setTokenMetadataUnsafe</name><parameter_list>(<parameter><decl><type><name>TokenMetadata</name></type> <name>tmd</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>old</name> <init>= <expr><name>tokenMetadata</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tokenMetadata</name> <operator>=</operator> <name>tmd</name></expr>;</expr_stmt>
        <return>return <expr><name>old</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>truncate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TimeoutException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>verifyKeyspaceIsValid</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>StorageProxy</name><operator>.</operator><name>truncateBlocking</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnavailableException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>getOwnership</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>sortedTokens</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// describeOwnership returns tokens in an unspecified order, let's re-order them</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>tokenMap</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>describeOwnership</name></name><argument_list>(<argument><expr><name>sortedTokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>nodeMap</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>tokenMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpoint</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Float</name></type> <name>tokenOwnership</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>nodeMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>endpoint</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>nodeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>endpoint</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><call><name><name>nodeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>endpoint</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>tokenOwnership</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>nodeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>endpoint</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name>tokenOwnership</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>nodeMap</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>getOwnershipWithPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>sortedTokens</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// describeOwnership returns tokens in an unspecified order, let's re-order them</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>tokenMap</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>describeOwnership</name></name><argument_list>(<argument><expr><name>sortedTokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>nodeMap</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>tokenMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpoint</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Float</name></type> <name>tokenOwnership</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>nodeMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>endpoint</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>nodeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>endpoint</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>nodeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>endpoint</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>tokenOwnership</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>nodeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>endpoint</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tokenOwnership</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>nodeMap</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculates ownership. If there are multiple DC's and the replication strategy is DC aware then ownership will be
     * calculated per dc, i.e. each DC will have total ring ownership divided amongst its nodes. Without replication
     * total ownership will be a multiple of the number of DC's and this value will then go up within each DC depending
     * on the number of replicas within itself. For DC unaware replication strategies, ownership without replication
     * will be 100%.
     *
     * @throws IllegalStateException when node is not configured properly.
     */</comment>
    <function><type><specifier>private</specifier> <name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>getEffectiveOwnership</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>strategy</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>keyspace</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspaceInstance</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceInstance</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>keyspaceInstance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"The keyspace "</literal> <operator>+</operator> <name>keyspace</name> <operator>+</operator> <literal type="string">", does not exist"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>keyspaceInstance</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>LocalStrategy</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Ownership values for keyspaces with LocalStrategy are meaningless"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>strategy</name> <operator>=</operator> <call><name><name>keyspaceInstance</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>userKeyspaces</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getUserKeyspaces</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>userKeyspaces</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>keyspace</name> <operator>=</operator> <call><name><name>userKeyspaces</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceInstance</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspaceName</name> <range>: <expr><name>userKeyspaces</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceInstance</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasSameSettings</name><argument_list>(<argument><expr><name>replicationStrategy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Non-system keyspaces don't have the same replication settings, effective ownership information is meaningless"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>keyspace</name> <operator>=</operator> <literal type="string">"system_traces"</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspaceInstance</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceInstance</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>keyspaceInstance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"The node does not have "</literal> <operator>+</operator> <name>keyspace</name> <operator>+</operator> <literal type="string">" yet, probably still bootstrapping. Effective ownership information is meaningless."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>strategy</name> <operator>=</operator> <call><name><name>keyspaceInstance</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>metadata</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>cloneOnlyTokenMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>endpointsGroupedByDc</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// mapping of dc's to nodes, use sorted map so that we get dcs sorted</comment>
        <decl_stmt><decl><type><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sortedDcsToEndpoints</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>getTopology</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenterEndpoints</name><argument_list>()</argument_list></call><operator>.</operator><call><name>asMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpoints</name> <range>: <expr><call><name><name>sortedDcsToEndpoints</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>endpointsGroupedByDc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>endpoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>tokenOwnership</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>describeOwnership</name></name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>finalOwnership</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newLinkedHashMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RangesByEndpoint</name></type> <name>endpointToRanges</name> <init>= <expr><call><name><name>strategy</name><operator>.</operator><name>getAddressReplicas</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// calculate ownership per dc</comment>
        <for>for <control>(<init><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpoints</name> <range>: <expr><name>endpointsGroupedByDc</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <comment type="line">// calculate the ownership with replication and add the endpoint to the final ownership map</comment>
            <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <range>: <expr><name>endpoints</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>ownership</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><call><name><name>endpointToRanges</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>tokenOwnership</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call><operator>.</operator><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>ownership</name> <operator>+=</operator> <call><name><name>tokenOwnership</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call><operator>.</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>finalOwnership</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>ownership</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><name>finalOwnership</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>effectiveOwnership</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalStateException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name>getEffectiveOwnership</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>asInets</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEachOrdered</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>entry</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>asInets</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><name>address</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>asInets</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>effectiveOwnershipWithPort</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalStateException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name>getEffectiveOwnership</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>asStrings</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEachOrdered</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>entry</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>asStrings</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostAddressAndPort</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>asStrings</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getKeyspaces</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keyspaceNamesList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaces</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableList</name></name><argument_list>(<argument><expr><name>keyspaceNamesList</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getNonSystemKeyspaces</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>nonKeyspaceNamesList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonSystemKeyspaces</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableList</name></name><argument_list>(<argument><expr><name>nonKeyspaceNamesList</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getNonLocalStrategyKeyspaces</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableList</name></name><argument_list>(<argument><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonLocalStrategyKeyspaces</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getViewBuildStatuses</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>coreViewStatus</name> <init>= <expr><call><name><name>SystemDistributedKeyspace</name><operator>.</operator><name>viewStatus</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>hostIdToEndpoint</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getEndpointToHostIdMapForReading</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>UUID</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>hostIdToEndpoint</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>UUID</name></type> <name>hostId</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>endpoint</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name><name>coreViewStatus</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>, <argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getViewBuildStatuses</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>view</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getViewBuildStatuses</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>view</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getViewBuildStatusesWithPort</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>view</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getViewBuildStatuses</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>view</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDynamicUpdateInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dynamicUpdateInterval</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>DynamicEndpointSnitch</name></expr>)</condition>
        <block>{<block_content>

            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name>updateSnitch</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>dynamicUpdateInterval</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDynamicUpdateInterval</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDynamicUpdateInterval</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateSnitch</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>epSnitchClassName</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>dynamic</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>dynamicUpdateInterval</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>dynamicResetInterval</name></decl></parameter>, <parameter><decl><type><name>Double</name></type> <name>dynamicBadnessThreshold</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// apply dynamic snitch configuration</comment>
        <if_stmt><if>if <condition>(<expr><name>dynamicUpdateInterval</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setDynamicUpdateInterval</name></name><argument_list>(<argument><expr><name>dynamicUpdateInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>dynamicResetInterval</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setDynamicResetInterval</name></name><argument_list>(<argument><expr><name>dynamicResetInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>dynamicBadnessThreshold</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setDynamicBadnessThreshold</name></name><argument_list>(<argument><expr><name>dynamicBadnessThreshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>oldSnitch</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// new snitch registers mbean during construction</comment>
        <if_stmt><if>if<condition>(<expr><name>epSnitchClassName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>

            <comment type="line">// need to unregister the mbean _before_ the new dynamic snitch is instantiated (and implicitly initialized</comment>
            <comment type="line">// and its mbean registered)</comment>
            <if_stmt><if>if <condition>(<expr><name>oldSnitch</name> <operator>instanceof</operator> <name>DynamicEndpointSnitch</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>DynamicEndpointSnitch</name><operator>)</operator><name>oldSnitch</name><operator>)</operator><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>newSnitch</name></decl>;</decl_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>newSnitch</name> <operator>=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>createEndpointSnitch</name></name><argument_list>(<argument><expr><name>dynamic</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>dynamic</name></expr></argument>, <argument><expr><name>epSnitchClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ClassNotFoundException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>

            <if_stmt><if>if <condition>(<expr><name>newSnitch</name> <operator>instanceof</operator> <name>DynamicEndpointSnitch</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Created new dynamic snitch {} with update-interval={}, reset-interval={}, badness-threshold={}"</literal></expr></argument>,
                            <argument><expr><operator>(</operator><operator>(</operator><name>DynamicEndpointSnitch</name><operator>)</operator><name>newSnitch</name><operator>)</operator><operator>.</operator><call><name><name>subsnitch</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDynamicUpdateInterval</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDynamicResetInterval</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDynamicBadnessThreshold</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Created new non-dynamic snitch {}"</literal></expr></argument>, <argument><expr><call><name><name>newSnitch</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// point snitch references to the new instance</comment>
            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setEndpointSnitch</name></name><argument_list>(<argument><expr><name>newSnitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>ks</name> <range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaces</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call><operator>.</operator><name>snitch</name> <operator>=</operator> <name>newSnitch</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>oldSnitch</name> <operator>instanceof</operator> <name>DynamicEndpointSnitch</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Applying config change to dynamic snitch {} with update-interval={}, reset-interval={}, badness-threshold={}"</literal></expr></argument>,
                            <argument><expr><operator>(</operator><operator>(</operator><name>DynamicEndpointSnitch</name><operator>)</operator><name>oldSnitch</name><operator>)</operator><operator>.</operator><call><name><name>subsnitch</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDynamicUpdateInterval</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDynamicResetInterval</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDynamicBadnessThreshold</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>DynamicEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><operator>(</operator><name>DynamicEndpointSnitch</name><operator>)</operator><name>oldSnitch</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>snitch</name><operator>.</operator><name>applyConfigChanges</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>updateTopology</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Send data to the endpoints that will be responsible for it in the future
     *
     * @param rangesToStreamByKeyspace keyspaces and data ranges with endpoints included for each
     * @return async Future for whether stream was success
     */</comment>
    <function><type><specifier>private</specifier> <name><name>Future</name><argument_list type="generic">&lt;<argument><name>StreamState</name></argument>&gt;</argument_list></name></type> <name>streamRanges</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>EndpointsByReplica</name></argument>&gt;</argument_list></name></type> <name>rangesToStreamByKeyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// First, we build a list of ranges to stream to each host, per table</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>RangesByEndpoint</name></argument>&gt;</argument_list></name></type> <name>sessionsToStreamByKeyspace</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>EndpointsByReplica</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>rangesToStreamByKeyspace</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>EndpointsByReplica</name></type> <name>rangesWithEndpoints</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>rangesWithEndpoints</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <comment type="line">//Description is always Unbootstrap? Is that right?</comment>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>transferredRangePerKeyspace</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getTransferredRanges</name></name><argument_list>(<argument><expr><literal type="string">"Unbootstrap"</literal></expr></argument>,
                                                                                                                         <argument><expr><name>keyspace</name></expr></argument>,
                                                                                                                         <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>partitioner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>RangesByEndpoint</name><operator>.</operator><name>Builder</name></name></type> <name>replicasPerEndpoint</name> <init>= <expr><operator>new</operator> <call><name><name>RangesByEndpoint</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>, <argument><name>Replica</name></argument>&gt;</argument_list></name></name></type> <name>endPointEntry</name> <range>: <expr><call><name><name>rangesWithEndpoints</name><operator>.</operator><name>flattenEntries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Replica</name></type> <name>local</name> <init>= <expr><call><name><name>endPointEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Replica</name></type> <name>remote</name> <init>= <expr><call><name><name>endPointEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>transferredRanges</name> <init>= <expr><call><name><name>transferredRangePerKeyspace</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>remote</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>transferredRanges</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>transferredRanges</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>local</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Skipping transferred range {} of keyspace {}, endpoint {}"</literal></expr></argument>, <argument><expr><name>local</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name><name>replicasPerEndpoint</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>remote</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>remote</name><operator>.</operator><name>decorateSubrange</name></name><argument_list>(<argument><expr><call><name><name>local</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name><name>sessionsToStreamByKeyspace</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>replicasPerEndpoint</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>StreamPlan</name></type> <name>streamPlan</name> <init>= <expr><operator>new</operator> <call><name>StreamPlan</name><argument_list>(<argument><expr><name><name>StreamOperation</name><operator>.</operator><name>DECOMMISSION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Vinculate StreamStateStore to current StreamPlan to update transferred rangeas per StreamSession</comment>
        <expr_stmt><expr><call><name><name>streamPlan</name><operator>.</operator><name>listeners</name></name><argument_list>(<argument><expr><name>streamStateStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>RangesByEndpoint</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>sessionsToStreamByKeyspace</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RangesByEndpoint</name></type> <name>replicasPerEndpoint</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>RangesAtEndpoint</name></argument>&gt;</argument_list></name></name></type> <name>rangesEntry</name> <range>: <expr><call><name><name>replicasPerEndpoint</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>RangesAtEndpoint</name></type> <name>replicas</name> <init>= <expr><call><name><name>rangesEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>newEndpoint</name> <init>= <expr><call><name><name>rangesEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// TODO each call to transferRanges re-flushes, this is potentially a lot of waste</comment>
                <expr_stmt><expr><call><name><name>streamPlan</name><operator>.</operator><name>transferRanges</name></name><argument_list>(<argument><expr><name>newEndpoint</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>replicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>streamPlan</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>bulkLoad</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>directory</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>bulkLoadInternal</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>bulkLoadAsync</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>directory</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>bulkLoadInternal</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>planId</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>StreamResultFuture</name></type> <name>bulkLoadInternal</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>directory</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>dir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Invalid directory "</literal> <operator>+</operator> <name>directory</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>SSTableLoader</name><operator>.</operator><name>Client</name></name></type> <name>client</name> <init>= <expr><operator>new</operator> <class><super><name><name>SSTableLoader</name><operator>.</operator><name>Client</name></name></super><argument_list>()</argument_list>
        <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspace</name></name> <operator>=</operator> <name>keyspace</name></expr>;</expr_stmt>
                <try>try
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getRangeToAddressMap</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>replicas</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>Replicas</name><operator>.</operator><name>temporaryAssertFull</name></name><argument_list>(<argument><expr><name>replicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <range>: <expr><call><name><name>replicas</name><operator>.</operator><name>endpoints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>addRangeForEndpoint</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                    </block_content>}</block></for>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>TableMetadataRef</name></type> <name>getTableMetadata</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTableMetadataRef</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>new</operator> <call><name>SSTableLoader</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>OutputHandler</name><operator>.</operator><name>LogOutput</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>rescheduleFailedDeletions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>LifecycleTransaction</name><operator>.</operator><name>rescheduleFailedDeletions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * #{@inheritDoc}
     */</comment>
    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>loadNewSSTables</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cfName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isInitialized</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Not yet initialized, can't load new sstables"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>verifyKeyspaceIsValid</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>loadNewSSTables</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * #{@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>sampleKeyRange</name><parameter_list>()</parameter_list> <comment type="line">// do not rename to getter - see CASSANDRA-4452 for details</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>nonLocalStrategy</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <range>: <expr><call><name>getPrimaryRangesForEndpoint</name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>keySamples</name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>sampledKeys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>DecoratedKey</name></type> <name>key</name> <range>: <expr><name>keys</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>sampledKeys</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>sampledKeys</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * { "sampler_name": [ {table: "", count: i, error: i, value: ""}, ... ] }
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CompositeData</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>samplePartitions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>durationMillis</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
            <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>samplers</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>OpenDataException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CompositeData</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>sampler</name> <range>: <expr><name>samplers</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>table</name> <range>: <expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>beginLocalSampling</name></name><argument_list>(<argument><expr><name>sampler</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>durationMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><name>durationMillis</name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>sampler</name> <range>: <expr><name>samplers</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CompositeData</name></argument>&gt;</argument_list></name></type> <name>topk</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>table</name> <range>: <expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>topk</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>finishLocalSampling</name></name><argument_list>(<argument><expr><name>sampler</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>topk</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Ordering</name><argument_list type="generic">&lt;<argument><name>CompositeData</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>CompositeData</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>CompositeData</name></type> <name>right</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <return>return <expr><call><name><name>Long</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name><name>right</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name><name>left</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// sublist is not serializable for jmx</comment>
            <expr_stmt><expr><name>topk</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>topk</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>topk</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>sampler</name></expr></argument>, <argument><expr><name>topk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>rebuildSecondaryIndex</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cfName</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>idxNames</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>indices</name> <init>= <expr><call><name>asList</name><argument_list>(<argument><expr><name>idxNames</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                           <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><ternary><condition><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>p</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><ternary><condition><expr><call><name>isIndexColumnFamily</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>getIndexName</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></block_content></block></lambda></expr></condition></ternary></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name>toList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>toArray</name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><name><name>idxNames</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>rebuildSecondaryIndex</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>resetLocalSchema</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>MigrationManager</name><operator>.</operator><name>resetLocalSchema</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reloadLocalSchema</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>reloadSchemaAndAnnounceVersion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTraceProbability</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>probability</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>traceProbability</name></name> <operator>=</operator> <name>probability</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getTraceProbability</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>traceProbability</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>shouldTraceProbablistically</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>traceProbability</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>ThreadLocalRandom</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextDouble</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>traceProbability</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>disableAutoCompaction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ks</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tables</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name>getValidColumnFamilies</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>ks</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>disableAutoCompaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>enableAutoCompaction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ks</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tables</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkServiceAllowedToStart</name><argument_list>(<argument><expr><literal type="string">"auto compaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name>getValidColumnFamilies</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>ks</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>enableAutoCompaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>getAutoCompactionStatus</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ks</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>tables</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>status</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name>getValidColumnFamilies</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>ks</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>isAutoCompactionDisabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>status</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Returns the name of the cluster */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getClusterName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Returns the cluster partitioner */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPartitionerName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getPartitionerName</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSSTablePreemptiveOpenIntervalInMB</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>intervalInMB</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setSSTablePreemptiveOpenIntervalInMB</name></name><argument_list>(<argument><expr><name>intervalInMB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSSTablePreemptiveOpenIntervalInMB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSSTablePreemptiveOpenIntervalInMB</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getMigrateKeycacheOnCompaction</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>shouldMigrateKeycacheOnCompaction</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMigrateKeycacheOnCompaction</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>invalidateKeyCacheOnCompaction</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setMigrateKeycacheOnCompaction</name></name><argument_list>(<argument><expr><name>invalidateKeyCacheOnCompaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getTombstoneWarnThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getTombstoneWarnThreshold</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTombstoneWarnThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setTombstoneWarnThreshold</name></name><argument_list>(<argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"updated tombstone_warn_threshold to {}"</literal></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getTombstoneFailureThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getTombstoneFailureThreshold</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTombstoneFailureThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setTombstoneFailureThreshold</name></name><argument_list>(<argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"updated tombstone_failure_threshold to {}"</literal></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCachedReplicaRowsWarnThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCachedReplicaRowsWarnThreshold</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCachedReplicaRowsWarnThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setCachedReplicaRowsWarnThreshold</name></name><argument_list>(<argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"updated replica_filtering_protection.cached_rows_warn_threshold to {}"</literal></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCachedReplicaRowsFailThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCachedReplicaRowsFailThreshold</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCachedReplicaRowsFailThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setCachedReplicaRowsFailThreshold</name></name><argument_list>(<argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"updated replica_filtering_protection.cached_rows_fail_threshold to {}"</literal></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnIndexCacheSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getColumnIndexCacheSizeInKB</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setColumnIndexCacheSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cacheSizeInKB</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setColumnIndexCacheSize</name></name><argument_list>(<argument><expr><name>cacheSizeInKB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Updated column_index_cache_size_in_kb to {}"</literal></expr></argument>, <argument><expr><name>cacheSizeInKB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getBatchSizeFailureThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getBatchSizeFailThresholdInKB</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBatchSizeFailureThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setBatchSizeFailThresholdInKB</name></name><argument_list>(<argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"updated batch_size_fail_threshold_in_kb to {}"</literal></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getBatchSizeWarnThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getBatchSizeWarnThresholdInKB</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBatchSizeWarnThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setBatchSizeWarnThresholdInKB</name></name><argument_list>(<argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Updated batch_size_warn_threshold_in_kb to {}"</literal></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInitialRangeTombstoneListAllocationSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInitialRangeTombstoneListAllocationSize</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInitialRangeTombstoneListAllocationSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Not updating initial_range_tombstone_allocation_size as it must be in the range [0, 1024] inclusive"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>originalSize</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInitialRangeTombstoneListAllocationSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setInitialRangeTombstoneListAllocationSize</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Updated initial_range_tombstone_allocation_size from {} to {}"</literal></expr></argument>, <argument><expr><name>originalSize</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRangeTombstoneResizeListGrowthFactor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRangeTombstoneListGrowthFactor</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeTombstoneListResizeGrowthFactor</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>growthFactor</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalStateException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>growthFactor</name> <operator>&lt;</operator> <literal type="number">1.2</literal> <operator>||</operator> <name>growthFactor</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Not updating range_tombstone_resize_factor as growth factor must be in the range [1.2, 5.0] inclusive"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>originalGrowthFactor</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRangeTombstoneListGrowthFactor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setRangeTombstoneListGrowthFactor</name></name><argument_list>(<argument><expr><name>growthFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Updated range_tombstone_resize_factor from {} to {}"</literal></expr></argument>, <argument><expr><name>originalGrowthFactor</name></expr></argument>, <argument><expr><name>growthFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHintedHandoffThrottleInKB</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>throttleInKB</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setHintedHandoffThrottleInKB</name></name><argument_list>(<argument><expr><name>throttleInKB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"updated hinted_handoff_throttle_in_kb to {}"</literal></expr></argument>, <argument><expr><name>throttleInKB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>clearConnectionHistory</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>daemon</name><operator>.</operator><name>clearConnectionHistory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Cleared connection history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>disableAuditLog</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>AuditLogManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>disableAuditLog</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Auditlog is disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>enableAuditLog</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>loggerName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>includedKeyspaces</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedKeyspaces</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>includedCategories</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedCategories</name></decl></parameter>,
                               <parameter><decl><type><name>String</name></type> <name>includedUsers</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedUsers</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>enableAuditLog</name><argument_list>(<argument><expr><name>loggerName</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>includedKeyspaces</name></expr></argument>, <argument><expr><name>excludedKeyspaces</name></expr></argument>, <argument><expr><name>includedCategories</name></expr></argument>, <argument><expr><name>excludedCategories</name></expr></argument>, <argument><expr><name>includedUsers</name></expr></argument>, <argument><expr><name>excludedUsers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>enableAuditLog</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>loggerName</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>includedKeyspaces</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedKeyspaces</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>includedCategories</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedCategories</name></decl></parameter>,
                               <parameter><decl><type><name>String</name></type> <name>includedUsers</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedUsers</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><name>loggerName</name> <operator>=</operator> <ternary><condition><expr><name>loggerName</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>loggerName</name></expr> </then><else>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuditLoggingOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>logger</name><operator>.</operator><name>class_name</name></name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>loggerName</name></expr></argument>, <argument><expr><literal type="string">"cassandra.yaml did not have logger in audit_logging_option and not set as parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkState</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>isAuditLoggerClassExists</name></name><argument_list>(<argument><expr><name>loggerName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unable to find AuditLogger class: "</literal><operator>+</operator><name>loggerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>AuditLogOptions</name></type> <name>auditLogOptions</name> <init>= <expr><operator>new</operator> <call><name>AuditLogOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>auditLogOptions</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>auditLogOptions</name><operator>.</operator><name>logger</name></name> <operator>=</operator> <operator>new</operator> <call><name>ParameterizedClass</name><argument_list>(<argument><expr><name>loggerName</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>auditLogOptions</name><operator>.</operator><name>included_keyspaces</name></name> <operator>=</operator> <ternary><condition><expr><name>includedKeyspaces</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>includedKeyspaces</name></expr> </then><else>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuditLoggingOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><name>included_keyspaces</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>auditLogOptions</name><operator>.</operator><name>excluded_keyspaces</name></name> <operator>=</operator> <ternary><condition><expr><name>excludedKeyspaces</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>excludedKeyspaces</name></expr> </then><else>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuditLoggingOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><name>excluded_keyspaces</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>auditLogOptions</name><operator>.</operator><name>included_categories</name></name> <operator>=</operator> <ternary><condition><expr><name>includedCategories</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>includedCategories</name></expr> </then><else>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuditLoggingOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><name>included_categories</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>auditLogOptions</name><operator>.</operator><name>excluded_categories</name></name> <operator>=</operator> <ternary><condition><expr><name>excludedCategories</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>excludedCategories</name></expr> </then><else>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuditLoggingOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><name>excluded_categories</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>auditLogOptions</name><operator>.</operator><name>included_users</name></name> <operator>=</operator> <ternary><condition><expr><name>includedUsers</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>includedUsers</name></expr> </then><else>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuditLoggingOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><name>included_users</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>auditLogOptions</name><operator>.</operator><name>excluded_users</name></name> <operator>=</operator> <ternary><condition><expr><name>excludedUsers</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>excludedUsers</name></expr> </then><else>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuditLoggingOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><name>excluded_users</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>AuditLogManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><name>auditLogOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"AuditLog is enabled with logger: [{}], included_keyspaces: [{}], excluded_keyspaces: [{}], "</literal> <operator>+</operator>
                    <literal type="string">"included_categories: [{}], excluded_categories: [{}], included_users: [{}], "</literal>
                    <operator>+</operator> <literal type="string">"excluded_users: [{}], archive_command: [{}]"</literal></expr></argument>, <argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>logger</name></name></expr></argument>, <argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>included_keyspaces</name></name></expr></argument>, <argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>excluded_keyspaces</name></name></expr></argument>,
                    <argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>included_categories</name></name></expr></argument>, <argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>excluded_categories</name></name></expr></argument>, <argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>included_users</name></name></expr></argument>, <argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>excluded_users</name></name></expr></argument>,
                    <argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>archive_command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAuditLogEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>AuditLogManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCorruptedTombstoneStrategy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCorruptedTombstoneStrategy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCorruptedTombstoneStrategy</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>strategy</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setCorruptedTombstoneStrategy</name></name><argument_list>(<argument><expr><call><name><name>Config</name><operator>.</operator><name>CorruptedTombstoneStrategy</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Setting corrupted tombstone strategy to {}"</literal></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getNativeTransportMaxConcurrentRequestsInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ClientResourceLimits</name><operator>.</operator><name>getGlobalLimit</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setNativeTransportMaxConcurrentRequestsInBytes</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>newLimit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ClientResourceLimits</name><operator>.</operator><name>setGlobalLimit</name></name><argument_list>(<argument><expr><name>newLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getNativeTransportMaxConcurrentRequestsInBytesPerIp</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ClientResourceLimits</name><operator>.</operator><name>getEndpointLimit</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setNativeTransportMaxConcurrentRequestsInBytesPerIp</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>newLimit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ClientResourceLimits</name><operator>.</operator><name>setEndpointLimit</name></name><argument_list>(<argument><expr><name>newLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>shutdownServer</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>drainOnShutdown</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeShutdownHook</name><argument_list>(<argument><expr><name>drainOnShutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>enableFullQueryLogger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rollCycle</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>blocking</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxQueueWeight</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxLogSize</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>archiveCommand</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxArchiveRetries</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>FullQueryLoggerOptions</name></type> <name>fqlOptions</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getFullQueryLogOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>path</name> <operator>=</operator> <ternary><condition><expr><name>path</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>path</name></expr> </then><else>: <expr><name><name>fqlOptions</name><operator>.</operator><name>log_dir</name></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>rollCycle</name> <operator>=</operator> <ternary><condition><expr><name>rollCycle</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>rollCycle</name></expr> </then><else>: <expr><name><name>fqlOptions</name><operator>.</operator><name>roll_cycle</name></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>blocking</name> <operator>=</operator> <ternary><condition><expr><name>blocking</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>blocking</name></expr> </then><else>: <expr><name><name>fqlOptions</name><operator>.</operator><name>block</name></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxQueueWeight</name> <operator>=</operator> <ternary><condition><expr><name>maxQueueWeight</name> <operator>!=</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr> ?</condition><then> <expr><name>maxQueueWeight</name></expr> </then><else>: <expr><name><name>fqlOptions</name><operator>.</operator><name>max_queue_weight</name></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxLogSize</name> <operator>=</operator> <ternary><condition><expr><name>maxLogSize</name> <operator>!=</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr> ?</condition><then> <expr><name>maxLogSize</name></expr> </then><else>: <expr><name><name>fqlOptions</name><operator>.</operator><name>max_log_size</name></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>archiveCommand</name> <operator>=</operator> <ternary><condition><expr><name>archiveCommand</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>archiveCommand</name></expr> </then><else>: <expr><name><name>fqlOptions</name><operator>.</operator><name>archive_command</name></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxArchiveRetries</name> <operator>=</operator> <ternary><condition><expr><name>maxArchiveRetries</name> <operator>!=</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr> ?</condition><then> <expr><name>maxArchiveRetries</name></expr> </then><else>: <expr><name><name>fqlOptions</name><operator>.</operator><name>max_archive_retries</name></name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"cassandra.yaml did not set log_dir and not set as parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FullQueryLogger</name><operator>.</operator><name>instance</name><operator>.</operator><name>enableWithoutClean</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rollCycle</name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>, <argument><expr><name>maxQueueWeight</name></expr></argument>, <argument><expr><name>maxLogSize</name></expr></argument>, <argument><expr><name>archiveCommand</name></expr></argument>, <argument><expr><name>maxArchiveRetries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>resetFullQueryLogger</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>FullQueryLogger</name><operator>.</operator><name>instance</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getFullQueryLogOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><name>log_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>stopFullQueryLogger</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>FullQueryLogger</name><operator>.</operator><name>instance</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isFullQueryLogEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>FullQueryLogger</name><operator>.</operator><name>instance</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>CompositeData</name></type> <name>getFullQueryLoggerOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>FullQueryLoggerOptionsCompositeData</name><operator>.</operator><name>toCompositeData</name></name><argument_list>(<argument><expr><call><name><name>FullQueryLogger</name><operator>.</operator><name>instance</name><operator>.</operator><name>getFullQueryLoggerOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getOutstandingSchemaVersions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>outstanding</name> <init>= <expr><call><name><name>MigrationCoordinator</name><operator>.</operator><name>instance</name><operator>.</operator><name>outstandingVersions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>outstanding</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toMap</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>,
                                                                        <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>i</name><operator>.</operator><name>address</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getOutstandingSchemaVersionsWithPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>outstanding</name> <init>= <expr><call><name><name>MigrationCoordinator</name><operator>.</operator><name>instance</name><operator>.</operator><name>outstandingVersions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>outstanding</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toMap</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>,
                                                                        <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>InetAddressAndPort</name><operator>::</operator><name>toString</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>autoOptimiseIncRepairStreams</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>autoOptimiseIncRepairStreams</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoOptimiseIncRepairStreams</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setAutoOptimiseIncRepairStreams</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>autoOptimiseFullRepairStreams</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>autoOptimiseFullRepairStreams</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoOptimiseFullRepairStreams</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setAutoOptimiseFullRepairStreams</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>autoOptimisePreviewRepairStreams</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>autoOptimisePreviewRepairStreams</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoOptimisePreviewRepairStreams</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setAutoOptimisePreviewRepairStreams</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getTableCountWarnThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>tableCountWarnThreshold</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTableCountWarnThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Table count warn threshold should be positive, not "</literal><operator>+</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Changing table count warn threshold from {} to {}"</literal></expr></argument>, <argument><expr><call><name>getTableCountWarnThreshold</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setTableCountWarnThreshold</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getKeyspaceCountWarnThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>keyspaceCountWarnThreshold</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeyspaceCountWarnThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Keyspace count warn threshold should be positive, not "</literal><operator>+</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Changing keyspace count warn threshold from {} to {}"</literal></expr></argument>, <argument><expr><call><name>getKeyspaceCountWarnThreshold</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setKeyspaceCountWarnThreshold</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
