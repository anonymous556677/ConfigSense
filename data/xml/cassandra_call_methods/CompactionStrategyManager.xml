<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/compaction/CompactionStrategyManager.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ConcurrentModificationException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReentrantReadWriteLock</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Supplier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>primitives</name><operator>.</operator><name>Longs</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Directories</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>DiskBoundaries</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SerializationHeader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>AbstractStrategyHolder</name><operator>.</operator><name>TaskSupplier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>PendingRepairManager</name><operator>.</operator><name>CleanupTask</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LifecycleNewTracker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LifecycleTransaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>SSTableSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Component</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Descriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>ISSTableScanner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>SSTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>SSTableMultiWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataCollector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>StatsMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>notifications</name><operator>.</operator><name>INotification</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>notifications</name><operator>.</operator><name>INotificationConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>notifications</name><operator>.</operator><name>SSTableAddedNotification</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>notifications</name><operator>.</operator><name>SSTableDeletingNotification</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>notifications</name><operator>.</operator><name>SSTableListChangedNotification</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>notifications</name><operator>.</operator><name>SSTableMetadataChanged</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>notifications</name><operator>.</operator><name>SSTableRepairStatusChanged</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>consistent</name><operator>.</operator><name>admin</name><operator>.</operator><name>CleanupSummary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>CompactionParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ActiveRepairService</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>AbstractStrategyHolder</name><operator>.</operator><name>GroupedSSTableContainer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Manages the compaction strategies.
 *
 * SSTables are isolated from each other based on their incremental repair status (repaired, unrepaired, or pending repair)
 * and directory (determined by their starting token). This class handles the routing between {@link AbstractStrategyHolder}
 * instances based on repair status, and the {@link AbstractStrategyHolder} instances have separate compaction strategies
 * for each directory, which it routes sstables to. Note that {@link PendingRepairHolder} also divides sstables on their
 * pending repair id.
 *
 * Operations on this class are guarded by a {@link ReentrantReadWriteLock}. This lock performs mutual exclusion on
 * reads and writes to the following variables: {@link this#repaired}, {@link this#unrepaired}, {@link this#isActive},
 * {@link this#params}, {@link this#currentBoundaries}. Whenever performing reads on these variables,
 * the {@link this#readLock} should be acquired. Likewise, updates to these variables should be guarded by
 * {@link this#writeLock}.
 *
 * Whenever the {@link DiskBoundaries} change, the compaction strategies must be reloaded, so in order to ensure
 * the compaction strategy placement reflect most up-to-date disk boundaries, call {@link this#maybeReloadDiskBoundaries()}
 * before acquiring the read lock to acess the strategies.
 *
 */</comment>

<class><specifier>public</specifier> class <name>CompactionStrategyManager</name> <super_list><implements>implements <super><name>INotificationConsumer</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>CompactionStrategyManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>CompactionLogger</name></type> <name>compactionLogger</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>partitionSSTablesByTokenRange</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>DiskBoundaries</name></argument>&gt;</argument_list></name></type> <name>boundariesSupplier</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Performs mutual exclusion on the variables below
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ReentrantReadWriteLock</name></type> <name>lock</name> <init>= <expr><operator>new</operator> <call><name>ReentrantReadWriteLock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ReentrantReadWriteLock</name><operator>.</operator><name>ReadLock</name></name></type> <name>readLock</name> <init>= <expr><call><name><name>lock</name><operator>.</operator><name>readLock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ReentrantReadWriteLock</name><operator>.</operator><name>WriteLock</name></name></type> <name>writeLock</name> <init>= <expr><call><name><name>lock</name><operator>.</operator><name>writeLock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Variables guarded by read and write lock above
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PendingRepairHolder</name></type> <name>transientRepairs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PendingRepairHolder</name></type> <name>pendingRepairs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CompactionStrategyHolder</name></type> <name>repaired</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CompactionStrategyHolder</name></type> <name>unrepaired</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><name>AbstractStrategyHolder</name></argument>&gt;</argument_list></name></type> <name>holders</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>CompactionParams</name></type> <name>params</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DiskBoundaries</name></type> <name>currentBoundaries</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>enabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>isActive</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
        We keep a copy of the schema compaction parameters here to be able to decide if we
        should update the compaction strategy in maybeReload() due to an ALTER.

        If a user changes the local compaction strategy and then later ALTERs a compaction parameter,
        we will use the new compaction parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>CompactionParams</name></type> <name>schemaCompactionParams</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>supportsEarlyOpen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>fanout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>maxSSTableSizeBytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CompactionStrategyManager</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>cfs</name><operator>::</operator><name>getDiskBoundaries</name></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>splitter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><annotation>@<name>VisibleForTesting</name></annotation>
    <specifier>public</specifier> <name>CompactionStrategyManager</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>, <parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>DiskBoundaries</name></argument>&gt;</argument_list></name></type> <name>boundariesSupplier</name></decl></parameter>,
                                     <parameter><decl><type><name>boolean</name></type> <name>partitionSSTablesByTokenRange</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>AbstractStrategyHolder</name><operator>.</operator><name>DestinationRouter</name></name></type> <name>router</name> <init>= <expr><operator>new</operator> <class><super><name><name>AbstractStrategyHolder</name><operator>.</operator><name>DestinationRouter</name></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>getIndexForSSTable</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name>compactionStrategyIndexFor</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>getIndexForSSTableDirectory</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name>compactionStrategyIndexForDirectory</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>transientRepairs</name> <operator>=</operator> <operator>new</operator> <call><name>PendingRepairHolder</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>router</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pendingRepairs</name> <operator>=</operator> <operator>new</operator> <call><name>PendingRepairHolder</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>router</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>repaired</name> <operator>=</operator> <operator>new</operator> <call><name>CompactionStrategyHolder</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>router</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>unrepaired</name> <operator>=</operator> <operator>new</operator> <call><name>CompactionStrategyHolder</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>router</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>holders</name> <operator>=</operator> <call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>transientRepairs</name></expr></argument>, <argument><expr><name>pendingRepairs</name></expr></argument>, <argument><expr><name>repaired</name></expr></argument>, <argument><expr><name>unrepaired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"{} subscribed to the data tracker."</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfs</name></name> <operator>=</operator> <name>cfs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compactionLogger</name></name> <operator>=</operator> <operator>new</operator> <call><name>CompactionLogger</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>boundariesSupplier</name></name> <operator>=</operator> <name>boundariesSupplier</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>partitionSSTablesByTokenRange</name></name> <operator>=</operator> <name>partitionSSTablesByTokenRange</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>params</name> <operator>=</operator> <call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>params</name><operator>.</operator><name>compaction</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>enabled</name> <operator>=</operator> <call><name><name>params</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>reload</name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>params</name><operator>.</operator><name>compaction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Return the next background task
     *
     * Returns a task for the compaction strategy that needs it the most (most estimated remaining tasks)
     */</comment>
    <function><type><specifier>public</specifier> <name>AbstractCompactionTask</name></type> <name>getNextBackgroundTask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gcBefore</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>numPartitions</name> <init>= <expr><call><name>getNumTokenPartitions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// first try to promote/demote sstables from completed repairs</comment>
            <decl_stmt><decl><type><name>AbstractCompactionTask</name></type> <name>repairFinishedTask</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>repairFinishedTask</name> <operator>=</operator> <call><name><name>pendingRepairs</name><operator>.</operator><name>getNextRepairFinishedTask</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>repairFinishedTask</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>repairFinishedTask</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>repairFinishedTask</name> <operator>=</operator> <call><name><name>transientRepairs</name><operator>.</operator><name>getNextRepairFinishedTask</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>repairFinishedTask</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>repairFinishedTask</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="line">// sort compaction task suppliers by remaining tasks descending</comment>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TaskSupplier</name></argument>&gt;</argument_list></name></type> <name>suppliers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>numPartitions</name> <operator>*</operator> <call><name><name>holders</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>AbstractStrategyHolder</name></type> <name>holder</name> <range>: <expr><name>holders</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>suppliers</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>holder</name><operator>.</operator><name>getBackgroundTaskSuppliers</name></name><argument_list>(<argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>suppliers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// return the first non-null task</comment>
            <for>for <control>(<init><decl><type><name>TaskSupplier</name></type> <name>supplier</name> <range>: <expr><name>suppliers</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AbstractCompactionTask</name></type> <name>task</name> <init>= <expr><call><name><name>supplier</name><operator>.</operator><name>getTask</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>task</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>task</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * finds the oldest (by modification date) non-latest-version sstable on disk and creates an upgrade task for it
     * @return
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation> <comment type="line">// transaction is closed by AbstractCompactionTask::execute</comment>
    <type><name>AbstractCompactionTask</name></type> <name>findUpgradeSSTableTask</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEnabled</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>automaticSSTableUpgrade</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>compacting</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompacting</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>potentialUpgrade</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>getLiveSSTables</name></name><argument_list>()</argument_list></call>
                                                  <operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                                  <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>compacting</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>s</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>version</name><operator>.</operator><name>isLatestVersion</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                                  <operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt; <block>{
                                                      <expr><name>File</name> <name>f1</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>o1</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>;
                                                      <argument><expr><name>File</name> <name>f2</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>o2</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
                                                      return <argument><expr><call><name><name>Longs</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>f1</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f2</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></init></decl></decl_stmt>
                                                  </block_content>}</block></function>)</block><expr_stmt><expr><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></class>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>potentialUpgrade</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>LifecycleTransaction</name></type> <name>txn</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tryModify</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name><name>OperationType</name><operator>.</operator><name>UPGRADE_SSTABLES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Running automatic sstable upgrade for {}"</literal></expr></argument>, <argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name>getCompactionStrategyFor</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCompactionTask</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>, <argument><expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }

    public <function><type><name>boolean</name></type> <name>isEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>enabled</name> <operator>&amp;&amp;</operator> <name>isActive</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isActive</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>isActive</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>resume</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>isActive</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * pause compaction while we cancel all ongoing compactions
     *
     * Separate call from enable/disable to not have to save the enabled-state externally
      */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>pause</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>isActive</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>startup</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>sstable</name><operator>.</operator><name>openReason</name></name> <operator>!=</operator> <name><name>SSTableReader</name><operator>.</operator><name>OpenReason</name><operator>.</operator><name>EARLY</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>compactionStrategyFor</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addSSTable</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>holders</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>AbstractStrategyHolder</name><operator>::</operator><name>startup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>supportsEarlyOpen</name> <operator>=</operator> <call><name><name>repaired</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>supportsEarlyOpen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fanout</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name><name>repaired</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>LeveledCompactionStrategy</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>LeveledCompactionStrategy</name><operator>)</operator> <call><name><name>repaired</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getLevelFanoutSize</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>LeveledCompactionStrategy</name><operator>.</operator><name>DEFAULT_LEVEL_FANOUT_SIZE</name></name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxSSTableSizeBytes</name> <operator>=</operator> <call><name><name>repaired</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMaxSSTableBytes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>repaired</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>

        <if_stmt><if>if <condition>(<expr><call><name><name>repaired</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call><operator>.</operator><name>logAll</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>compactionLogger</name><operator>.</operator><name>enable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * return the compaction strategy for the given sstable
     *
     * returns differently based on the repaired status and which vnode the compaction strategy belongs to
     * @param sstable
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <name>AbstractCompactionStrategy</name></type> <name>getCompactionStrategyFor</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>compactionStrategyFor</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>AbstractCompactionStrategy</name></type> <name>compactionStrategyFor</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// should not call maybeReloadDiskBoundaries because it may be called from within lock</comment>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name>getHolder</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStrategyFor</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the correct compaction strategy for the given sstable. If the first token starts within a disk boundary, we
     * will add it to that compaction strategy.
     *
     * In the case we are upgrading, the first compaction strategy will get most files - we do not care about which disk
     * the sstable is on currently (unless we don't know the local tokens yet). Once we start compacting we will write out
     * sstables in the correct locations and give them to the correct compaction strategy instance.
     *
     * @param sstable
     * @return
     */</comment>
    <function><type><name>int</name></type> <name>compactionStrategyIndexFor</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// should not call maybeReloadDiskBoundaries because it may be called from within lock</comment>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <comment type="line">//We only have a single compaction strategy when sstables are not</comment>
            <comment type="line">//partitioned by token range</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>partitionSSTablesByTokenRange</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><call><name><name>currentBoundaries</name><operator>.</operator><name>getDiskIndex</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>compactionStrategyIndexForDirectory</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>partitionSSTablesByTokenRange</name></expr> ?</condition><then> <expr><call><name><name>currentBoundaries</name><operator>.</operator><name>getBoundariesFromSSTableDirectory</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>CompactionStrategyHolder</name></type> <name>getRepairedUnsafe</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>repaired</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>CompactionStrategyHolder</name></type> <name>getUnrepairedUnsafe</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>unrepaired</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>PendingRepairHolder</name></type> <name>getPendingRepairsUnsafe</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>pendingRepairs</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>PendingRepairHolder</name></type> <name>getTransientRepairsUnsafe</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>transientRepairs</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasDataForPendingRepair</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>pendingRepairs</name><operator>.</operator><name>hasDataForSession</name></name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>transientRepairs</name><operator>.</operator><name>hasDataForSession</name></name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>shutdown</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>isActive</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holders</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>AbstractStrategyHolder</name><operator>::</operator><name>shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>compactionLogger</name><operator>.</operator><name>disable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>maybeReload</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// compare the old schema configuration to the new one, ignore any locally set changes.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>metadata</name><operator>.</operator><name>params</name><operator>.</operator><name>compaction</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>schemaCompactionParams</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <comment type="line">// compare the old schema configuration to the new one, ignore any locally set changes.</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>metadata</name><operator>.</operator><name>params</name><operator>.</operator><name>compaction</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>schemaCompactionParams</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>reload</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>params</name><operator>.</operator><name>compaction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the disk boundaries changed and reloads the compaction strategies
     * to reflect the most up-to-date disk boundaries.
     *
     * This is typically called before acquiring the {@link this#readLock} to ensure the most up-to-date
     * disk locations and boundaries are used.
     *
     * This should *never* be called inside by a thread holding the {@link this#readLock}, since it
     * will potentially acquire the {@link this#writeLock} to update the compaction strategies
     * what can cause a deadlock.
     */</comment>
    <comment type="line">//TODO improve this to reload after receiving a notification rather than trying to reload on every operation</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>maybeReloadDiskBoundaries</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>currentBoundaries</name><operator>.</operator><name>isOutOfDate</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>currentBoundaries</name><operator>.</operator><name>isOutOfDate</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>reload</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Reload the compaction strategies
     *
     * Called after changing configuration and at startup.
     * @param newCompactionParams
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>reload</name><parameter_list>(<parameter><decl><type><name>CompactionParams</name></type> <name>newCompactionParams</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>enabledWithJMX</name> <init>= <expr><name>enabled</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>shouldBeEnabled</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>disabledWithJMX</name> <init>= <expr><operator>!</operator><name>enabled</name> <operator>&amp;&amp;</operator> <call><name>shouldBeEnabled</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>currentBoundaries</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>newCompactionParams</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>schemaCompactionParams</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Recreating compaction strategy - compaction parameters changed for {}.{}"</literal></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>currentBoundaries</name><operator>.</operator><name>isOutOfDate</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Recreating compaction strategy - disk boundaries are out of date for {}.{}."</literal></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>currentBoundaries</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>currentBoundaries</name><operator>.</operator><name>isOutOfDate</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>currentBoundaries</name> <operator>=</operator> <call><name><name>boundariesSupplier</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>setStrategy</name><argument_list>(<argument><expr><name>newCompactionParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>schemaCompactionParams</name> <operator>=</operator> <call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>params</name><operator>.</operator><name>compaction</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>disabledWithJMX</name> <operator>||</operator> <operator>!</operator><call><name>shouldBeEnabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>enabledWithJMX</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>disable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><call><name>startup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>AbstractCompactionStrategy</name></argument>&gt;</argument_list></name></type> <name>getAllStrategies</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>holders</name></expr></argument>, <argument><expr><name>AbstractStrategyHolder</name><operator>::</operator><name>allStrategies</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getUnleveledSSTables</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>repaired</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>LeveledCompactionStrategy</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>AbstractCompactionStrategy</name></type> <name>strategy</name> <range>: <expr><call><name>getAllStrategies</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>LeveledCompactionStrategy</name><operator>)</operator> <name>strategy</name><operator>)</operator><operator>.</operator><call><name>getLevelSize</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><name>count</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLevelFanoutSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>fanout</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>getSSTableCountPerLevel</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>repaired</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>LeveledCompactionStrategy</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>res</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>LeveledGenerations</name><operator>.</operator><name>MAX_LEVEL_COUNT</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>AbstractCompactionStrategy</name></type> <name>strategy</name> <range>: <expr><call><name>getAllStrategies</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>repairedCountPerLevel</name> <init>= <expr><operator>(</operator><operator>(</operator><name>LeveledCompactionStrategy</name><operator>)</operator> <name>strategy</name><operator>)</operator><operator>.</operator><call><name>getAllLevelSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sumArrays</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>repairedCountPerLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>res</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name><name>int</name><index>[]</index></name></type> <name>sumArrays</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>b</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>res</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>res</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Should only be called holding the readLock
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleFlushNotification</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>added</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>added</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>compactionStrategyFor</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addSSTable</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>getHolderIndex</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>holders</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>holders</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>managesSSTable</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"No holder claimed "</literal> <operator>+</operator> <name>sstable</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>AbstractStrategyHolder</name></type> <name>getHolder</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>AbstractStrategyHolder</name></type> <name>holder</name> <range>: <expr><name>holders</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>holder</name><operator>.</operator><name>managesSSTable</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>holder</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"No holder claimed "</literal> <operator>+</operator> <name>sstable</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>AbstractStrategyHolder</name></type> <name>getHolder</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>repairedAt</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>pendingRepair</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getHolder</name><argument_list>(<argument><expr><name>repairedAt</name> <operator>!=</operator> <name><name>ActiveRepairService</name><operator>.</operator><name>UNREPAIRED_SSTABLE</name></name></expr></argument>,
                         <argument><expr><name>pendingRepair</name> <operator>!=</operator> <name><name>ActiveRepairService</name><operator>.</operator><name>NO_PENDING_REPAIR</name></name></expr></argument>,
                         <argument><expr><name>isTransient</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>AbstractStrategyHolder</name></type> <name>getHolder</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isRepaired</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isPendingRepair</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>AbstractStrategyHolder</name></type> <name>holder</name> <range>: <expr><name>holders</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>holder</name><operator>.</operator><name>managesRepairedGroup</name></name><argument_list>(<argument><expr><name>isRepaired</name></expr></argument>, <argument><expr><name>isPendingRepair</name></expr></argument>, <argument><expr><name>isTransient</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>holder</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"No holder claimed isPendingRepair: %s, isPendingRepair %s"</literal></expr></argument>,
                                                      <argument><expr><name>isRepaired</name></expr></argument>, <argument><expr><name>isPendingRepair</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><name>AbstractStrategyHolder</name></argument>&gt;</argument_list></name></type> <name>getHolders</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>holders</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Split sstables into a list of grouped sstable containers, the list index an sstable
     *
     * lives in matches the list index of the holder that's responsible for it
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>GroupedSSTableContainer</name></argument>&gt;</argument_list></name></type> <name>groupSSTables</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GroupedSSTableContainer</name></argument>&gt;</argument_list></name></type> <name>classified</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>holders</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>AbstractStrategyHolder</name></type> <name>holder</name> <range>: <expr><name>holders</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>classified</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>holder</name><operator>.</operator><name>createGroupedSSTableContainer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>sstables</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>classified</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getHolderIndex</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>classified</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Should only be called holding the readLock
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleListChangedNotification</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>added</name></decl></parameter>, <parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>removed</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GroupedSSTableContainer</name></argument>&gt;</argument_list></name></type> <name>addedGroups</name> <init>= <expr><call><name>groupSSTables</name><argument_list>(<argument><expr><name>added</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GroupedSSTableContainer</name></argument>&gt;</argument_list></name></type> <name>removedGroups</name> <init>= <expr><call><name>groupSSTables</name><argument_list>(<argument><expr><name>removed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>holders</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>holders</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>replaceSSTables</name><argument_list>(<argument><expr><call><name><name>removedGroups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>addedGroups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Should only be called holding the readLock
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleRepairStatusChangedNotification</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GroupedSSTableContainer</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr><call><name>groupSSTables</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>holders</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GroupedSSTableContainer</name></type> <name>group</name> <init>= <expr><call><name><name>groups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>group</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>AbstractStrategyHolder</name></type> <name>dstHolder</name> <init>= <expr><call><name><name>holders</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>AbstractStrategyHolder</name></type> <name>holder</name> <range>: <expr><name>holders</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>holder</name> <operator>!=</operator> <name>dstHolder</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>removeSSTables</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// adding sstables into another strategy may change its level,</comment>
            <comment type="line">// thus it won't be removed from original LCS. We have to remove sstables first</comment>
            <expr_stmt><expr><call><name><name>dstHolder</name><operator>.</operator><name>addSSTables</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Should only be called holding the readLock
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleMetadataChangedNotification</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>, <parameter><decl><type><name>StatsMetadata</name></type> <name>oldMetadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AbstractCompactionStrategy</name></type> <name>acs</name> <init>= <expr><call><name>getCompactionStrategyFor</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>acs</name><operator>.</operator><name>metadataChanged</name></name><argument_list>(<argument><expr><name>oldMetadata</name></expr></argument>, <argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Should only be called holding the readLock
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleDeletingNotification</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>deleted</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>compactionStrategyFor</name><argument_list>(<argument><expr><name>deleted</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>removeSSTable</name><argument_list>(<argument><expr><name>deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleNotification</name><parameter_list>(<parameter><decl><type><name>INotification</name></type> <name>notification</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>sender</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// we might race with reload adding/removing the sstables, this means that compaction strategies</comment>
        <comment type="line">// must handle double notifications.</comment>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><name>notification</name> <operator>instanceof</operator> <name>SSTableAddedNotification</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>SSTableAddedNotification</name></type> <name>flushedNotification</name> <init>= <expr><operator>(</operator><name>SSTableAddedNotification</name><operator>)</operator> <name>notification</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>handleFlushNotification</name><argument_list>(<argument><expr><name><name>flushedNotification</name><operator>.</operator><name>added</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>notification</name> <operator>instanceof</operator> <name>SSTableListChangedNotification</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>SSTableListChangedNotification</name></type> <name>listChangedNotification</name> <init>= <expr><operator>(</operator><name>SSTableListChangedNotification</name><operator>)</operator> <name>notification</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>handleListChangedNotification</name><argument_list>(<argument><expr><name><name>listChangedNotification</name><operator>.</operator><name>added</name></name></expr></argument>, <argument><expr><name><name>listChangedNotification</name><operator>.</operator><name>removed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>notification</name> <operator>instanceof</operator> <name>SSTableRepairStatusChanged</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>handleRepairStatusChangedNotification</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SSTableRepairStatusChanged</name><operator>)</operator> <name>notification</name><operator>)</operator><operator>.</operator><name>sstables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>notification</name> <operator>instanceof</operator> <name>SSTableDeletingNotification</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>handleDeletingNotification</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SSTableDeletingNotification</name><operator>)</operator> <name>notification</name><operator>)</operator><operator>.</operator><name>deleting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>notification</name> <operator>instanceof</operator> <name>SSTableMetadataChanged</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>SSTableMetadataChanged</name></type> <name>lcNotification</name> <init>= <expr><operator>(</operator><name>SSTableMetadataChanged</name><operator>)</operator> <name>notification</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>handleMetadataChangedNotification</name><argument_list>(<argument><expr><name><name>lcNotification</name><operator>.</operator><name>sstable</name></name></expr></argument>, <argument><expr><name><name>lcNotification</name><operator>.</operator><name>oldMetadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>enable</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <comment type="line">// enable this last to make sure the strategies are ready to get calls.</comment>
            <expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>disable</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create ISSTableScanners from the given sstables
     *
     * Delegates the call to the compaction strategies to allow LCS to create a scanner
     * @param sstables
     * @param ranges
     * @return
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name><name>AbstractCompactionStrategy</name><operator>.</operator><name>ScannerList</name></name></type> <name>maybeGetScanners</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>,  <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ISSTableScanner</name></argument>&gt;</argument_list></name></type> <name>scanners</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>sstables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GroupedSSTableContainer</name></argument>&gt;</argument_list></name></type> <name>sstableGroups</name> <init>= <expr><call><name>groupSSTables</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>holders</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AbstractStrategyHolder</name></type> <name>holder</name> <init>= <expr><call><name><name>holders</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>GroupedSSTableContainer</name></type> <name>group</name> <init>= <expr><call><name><name>sstableGroups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>scanners</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>holder</name><operator>.</operator><name>getScanners</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name><name>PendingRepairManager</name><operator>.</operator><name>IllegalSSTableArgumentException</name></name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>ISSTableScanner</name><operator>.</operator><name>closeAllAndPropagate</name></name><argument_list>(<argument><expr><name>scanners</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ConcurrentModificationException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
        <return>return <expr><operator>new</operator> <call><name><name>AbstractCompactionStrategy</name><operator>.</operator><name>ScannerList</name></name><argument_list>(<argument><expr><name>scanners</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractCompactionStrategy</name><operator>.</operator><name>ScannerList</name></name></type> <name>getScanners</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>,  <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <return>return <expr><call><name>maybeGetScanners</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>ConcurrentModificationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"SSTable repairedAt/pendingRepaired values changed while getting scanners"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractCompactionStrategy</name><operator>.</operator><name>ScannerList</name></name></type> <name>getScanners</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getScanners</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>groupSSTablesForAntiCompaction</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstablesToGroup</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>unrepaired</name><operator>.</operator><name>groupForAnticompaction</name></name><argument_list>(<argument><expr><name>sstablesToGroup</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getMaxSSTableBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>maxSSTableSizeBytes</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>AbstractCompactionTask</name></type> <name>getCompactionTask</name><parameter_list>(<parameter><decl><type><name>LifecycleTransaction</name></type> <name>txn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gcBefore</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxSSTableBytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>validateForCompaction</name><argument_list>(<argument><expr><call><name><name>txn</name><operator>.</operator><name>originals</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>compactionStrategyFor</name><argument_list>(<argument><expr><call><name><name>txn</name><operator>.</operator><name>originals</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCompactionTask</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>gcBefore</name></expr></argument>, <argument><expr><name>maxSSTableBytes</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validateForCompaction</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>input</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>SSTableReader</name></type> <name>firstSSTable</name> <init>= <expr><call><name><name>Iterables</name><operator>.</operator><name>getFirst</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><name>firstSSTable</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
            <decl_stmt><decl><type><name>boolean</name></type> <name>repaired</name> <init>= <expr><call><name><name>firstSSTable</name><operator>.</operator><name>isRepaired</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>firstIndex</name> <init>= <expr><call><name>compactionStrategyIndexFor</name><argument_list>(<argument><expr><name>firstSSTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isPending</name> <init>= <expr><call><name><name>firstSSTable</name><operator>.</operator><name>isPendingRepair</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UUID</name></type> <name>pendingRepair</name> <init>= <expr><call><name><name>firstSSTable</name><operator>.</operator><name>getSSTableMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>pendingRepair</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>input</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>sstable</name><operator>.</operator><name>isRepaired</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>repaired</name></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"You can't mix repaired and unrepaired data in a compaction"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>firstIndex</name> <operator>!=</operator> <call><name>compactionStrategyIndexFor</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"You can't mix sstables from different directories in a compaction"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>isPending</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>pendingRepair</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>sstable</name><operator>.</operator><name>getSSTableMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>pendingRepair</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"You can't compact sstables from different pending repair sessions"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CompactionTasks</name></type> <name>getMaximalTasks</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>gcBefore</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>splitOutput</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// runWithCompactionsDisabled cancels active compactions and disables them, then we are able</comment>
        <comment type="line">// to make the repaired/unrepaired strategies mark their own sstables as compacting. Once the</comment>
        <comment type="line">// sstables are marked the compactions are re-enabled</comment>
        <return>return <expr><call><name><name>cfs</name><operator>.</operator><name>runWithCompactionsDisabled</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractCompactionTask</name></argument>&gt;</argument_list></name></type> <name>tasks</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>AbstractStrategyHolder</name></type> <name>holder</name> <range>: <expr><name>holders</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>tasks</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>holder</name><operator>.</operator><name>getMaximalTasks</name></name><argument_list>(<argument><expr><name>gcBefore</name></expr></argument>, <argument><expr><name>splitOutput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block>
            <finally>finally
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
            <return>return <expr><call><name><name>CompactionTasks</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>tasks</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return a list of compaction tasks corresponding to the sstables requested. Split the sstables according
     * to whether they are repaired or not, and by disk location. Return a task per disk location and repair status
     * group.
     *
     * @param sstables the sstables to compact
     * @param gcBefore gc grace period, throw away tombstones older than this
     * @return a list of compaction tasks corresponding to the sstables requested
     */</comment>
    <function><type><specifier>public</specifier> <name>CompactionTasks</name></type> <name>getUserDefinedTasks</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gcBefore</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractCompactionTask</name></argument>&gt;</argument_list></name></type> <name>ret</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GroupedSSTableContainer</name></argument>&gt;</argument_list></name></type> <name>groupedSSTables</name> <init>= <expr><call><name>groupSSTables</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>holders</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>holders</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getUserDefinedTasks</name><argument_list>(<argument><expr><call><name><name>groupedSSTables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><call><name><name>CompactionTasks</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getEstimatedRemainingTasks</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>AbstractCompactionStrategy</name></type> <name>strategy</name> <range>: <expr><call><name>getAllStrategies</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name>tasks</name> <operator>+=</operator> <call><name><name>strategy</name><operator>.</operator><name>getEstimatedRemainingTasks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
        <return>return <expr><name>tasks</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>shouldBeEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>params</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AbstractCompactionStrategy</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getStrategies</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><call><name><name>repaired</name><operator>.</operator><name>allStrategies</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><call><name><name>unrepaired</name><operator>.</operator><name>allStrategies</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><call><name><name>pendingRepairs</name><operator>.</operator><name>allStrategies</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNewLocalCompactionStrategy</name><parameter_list>(<parameter><decl><type><name>CompactionParams</name></type> <name>params</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Switching local compaction strategy from {} to {}}"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>setStrategy</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>shouldBeEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>enable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>disable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><call><name>startup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>getNumTokenPartitions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>partitionSSTablesByTokenRange</name></expr> ?</condition><then> <expr><call><name><name>currentBoundaries</name><operator>.</operator><name>directories</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setStrategy</name><parameter_list>(<parameter><decl><type><name>CompactionParams</name></type> <name>params</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>numPartitions</name> <init>= <expr><call><name>getNumTokenPartitions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>AbstractStrategyHolder</name></type> <name>holder</name> <range>: <expr><name>holders</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>setStrategy</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>numPartitions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>params</name></name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CompactionParams</name></type> <name>getCompactionParams</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>params</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>onlyPurgeRepairedTombstones</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>options</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>AbstractCompactionStrategy</name><operator>.</operator><name>ONLY_PURGE_REPAIRED_TOMBSTONES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SSTableMultiWriter</name></type> <name>createSSTableMultiWriter</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                                                       <parameter><decl><type><name>long</name></type> <name>keyCount</name></decl></parameter>,
                                                       <parameter><decl><type><name>long</name></type> <name>repairedAt</name></decl></parameter>,
                                                       <parameter><decl><type><name>UUID</name></type> <name>pendingRepair</name></decl></parameter>,
                                                       <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>,
                                                       <parameter><decl><type><name>MetadataCollector</name></type> <name>collector</name></decl></parameter>,
                                                       <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>,
                                                       <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name></decl></parameter>,
                                                       <parameter><decl><type><name>LifecycleNewTracker</name></type> <name>lifecycleNewTracker</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SSTable</name><operator>.</operator><name>validateRepairedMetadata</name></name><argument_list>(<argument><expr><name>repairedAt</name></expr></argument>, <argument><expr><name>pendingRepair</name></expr></argument>, <argument><expr><name>isTransient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name>getHolder</name><argument_list>(<argument><expr><name>repairedAt</name></expr></argument>, <argument><expr><name>pendingRepair</name></expr></argument>, <argument><expr><name>isTransient</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>createSSTableMultiWriter</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>,
                                                                                              <argument><expr><name>keyCount</name></expr></argument>,
                                                                                              <argument><expr><name>repairedAt</name></expr></argument>,
                                                                                              <argument><expr><name>pendingRepair</name></expr></argument>,
                                                                                              <argument><expr><name>isTransient</name></expr></argument>,
                                                                                              <argument><expr><name>collector</name></expr></argument>,
                                                                                              <argument><expr><name>header</name></expr></argument>,
                                                                                              <argument><expr><name>indexes</name></expr></argument>,
                                                                                              <argument><expr><name>lifecycleNewTracker</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRepaired</name><parameter_list>(<parameter><decl><type><name>AbstractCompactionStrategy</name></type> <name>strategy</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>repaired</name><operator>.</operator><name>getStrategyIndex</name></name><argument_list>(<argument><expr><name>strategy</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getStrategyFolders</name><parameter_list>(<parameter><decl><type><name>AbstractCompactionStrategy</name></type> <name>strategy</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Directories</name><operator>.</operator><name>DataDirectory</name><index>[]</index></name></type> <name>locations</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>getDirectories</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWriteableLocations</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>partitionSSTablesByTokenRange</name></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>AbstractStrategyHolder</name></type> <name>holder</name> <range>: <expr><name>holders</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>holder</name><operator>.</operator><name>getStrategyIndex</name></name><argument_list>(<argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name><name>locations</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name><name>location</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>folders</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>locations</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Directories</name><operator>.</operator><name>DataDirectory</name></name></type> <name>location</name> <range>: <expr><name>locations</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>location</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>folders</name></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>supportsEarlyOpen</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>supportsEarlyOpen</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PendingRepairManager</name></argument>&gt;</argument_list></name></type> <name>getPendingRepairManagers</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeReloadDiskBoundaries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><call><name><name>pendingRepairs</name><operator>.</operator><name>getManagers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Mutates sstable repairedAt times and notifies listeners of the change with the writeLock held. Prevents races
     * with other processes between when the metadata is changed and when sstables are moved between strategies.
      */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mutateRepaired</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>repairedAt</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>pendingRepair</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>changed</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name><range>: <expr><name>sstables</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>sstable</name><operator>.</operator><name>mutateRepairedAndReload</name></name><argument_list>(<argument><expr><name>repairedAt</name></expr></argument>, <argument><expr><name>pendingRepair</name></expr></argument>, <argument><expr><name>isTransient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>verifyMetadata</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>repairedAt</name></expr></argument>, <argument><expr><name>pendingRepair</name></expr></argument>, <argument><expr><name>isTransient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>changed</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <comment type="line">// if there was an exception mutating repairedAt, we should still notify for the</comment>
                <comment type="line">// sstables that we were able to modify successfully before releasing the lock</comment>
                <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notifySSTableRepairedStatusChanged</name><argument_list>(<argument><expr><name>changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <finally>finally
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>writeLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>verifyMetadata</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>repairedAt</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>pendingRepair</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>pendingRepair</name></expr></argument>, <argument><expr><call><name><name>sstable</name><operator>.</operator><name>getPendingRepair</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Failed setting pending repair to %s on %s (pending repair is %s)"</literal></expr></argument>, <argument><expr><name>pendingRepair</name></expr></argument>, <argument><expr><name>sstable</name></expr></argument>, <argument><expr><call><name><name>sstable</name><operator>.</operator><name>getPendingRepair</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>repairedAt</name> <operator>!=</operator> <call><name><name>sstable</name><operator>.</operator><name>getRepairedAt</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Failed setting repairedAt to %d on %s (repairedAt is %d)"</literal></expr></argument>, <argument><expr><name>repairedAt</name></expr></argument>, <argument><expr><name>sstable</name></expr></argument>, <argument><expr><call><name><name>sstable</name><operator>.</operator><name>getRepairedAt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>isTransient</name> <operator>!=</operator> <call><name><name>sstable</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Failed setting isTransient to %b on %s (isTransient is %b)"</literal></expr></argument>, <argument><expr><name>isTransient</name></expr></argument>, <argument><expr><name>sstable</name></expr></argument>, <argument><expr><call><name><name>sstable</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CleanupSummary</name></type> <name>releaseRepairData</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>sessions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CleanupTask</name></argument>&gt;</argument_list></name></type> <name>cleanupTasks</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>PendingRepairManager</name></type> <name>prm</name> <range>: <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>pendingRepairs</name><operator>.</operator><name>getManagers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>transientRepairs</name><operator>.</operator><name>getManagers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>cleanupTasks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>prm</name><operator>.</operator><name>releaseSessionData</name></name><argument_list>(<argument><expr><name>sessions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>

        <decl_stmt><decl><type><name>CleanupSummary</name></type> <name>summary</name> <init>= <expr><operator>new</operator> <call><name>CleanupSummary</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>CleanupTask</name></type> <name>task</name> <range>: <expr><name>cleanupTasks</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>summary</name> <operator>=</operator> <call><name><name>CleanupSummary</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>summary</name></expr></argument>, <argument><expr><call><name><name>task</name><operator>.</operator><name>cleanup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><name>summary</name></expr>;</return>
    </block_content>}</block></function>
}
</unit>
