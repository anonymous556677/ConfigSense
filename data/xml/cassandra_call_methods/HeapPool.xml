<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/memory/HeapPool.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>memory</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>OpOrder</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

<class><specifier>public</specifier> class <name>HeapPool</name> <super_list><extends>extends <super><name>MemtablePool</name></super></extends></super_list>
<block>{
    <constructor><specifier>public</specifier> <name>HeapPool</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>maxOnHeapMemory</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cleanupThreshold</name></decl></parameter>, <parameter><decl><type><name>MemtableCleaner</name></type> <name>cleaner</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>maxOnHeapMemory</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cleanupThreshold</name></expr></argument>, <argument><expr><name>cleaner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>MemtableAllocator</name></type> <name>newAllocator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Allocator</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><annotation>@<name>VisibleForTesting</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> class <name>Allocator</name> <super_list><extends>extends <super><name>MemtableBufferAllocator</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>EnsureOnHeap</name></type> <name>ENSURE_NOOP</name> <init>= <expr><operator>new</operator> <call><name><name>EnsureOnHeap</name><operator>.</operator><name>NoOp</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><annotation>@<name>VisibleForTesting</name></annotation>
        <specifier>public</specifier> <name>Allocator</name><parameter_list>(<parameter><decl><type><name>HeapPool</name></type> <name>pool</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>onHeap</name><operator>.</operator><name>newAllocator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pool</name><operator>.</operator><name>offHeap</name><operator>.</operator><name>newAllocator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>allocate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>OpOrder</name><operator>.</operator><name>Group</name></name></type> <name>opGroup</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onHeap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>allocate</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>opGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>EnsureOnHeap</name></type> <name>ensureOnHeap</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>ENSURE_NOOP</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Cloner</name></type> <name>cloner</name><parameter_list>(<parameter><decl><type><name><name>OpOrder</name><operator>.</operator><name>Group</name></name></type> <name>opGroup</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>allocator</name><argument_list>(<argument><expr><name>opGroup</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
