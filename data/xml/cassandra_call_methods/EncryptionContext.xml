<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/security/EncryptionContext.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>security</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>TransparentDataEncryptionOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>compress</name><operator>.</operator><name>ICompressor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>compress</name><operator>.</operator><name>LZ4Compressor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Hex</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A (largely) immutable wrapper for the application-wide file-level encryption settings.
 */</comment>
<class><specifier>public</specifier> class <name>EncryptionContext</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ENCRYPTION_CIPHER</name> <init>= <expr><literal type="string">"encCipher"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ENCRYPTION_KEY_ALIAS</name> <init>= <expr><literal type="string">"encKeyAlias"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ENCRYPTION_IV</name> <init>= <expr><literal type="string">"encIV"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TransparentDataEncryptionOptions</name></type> <name>tdeOptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ICompressor</name></type> <name>compressor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CipherFactory</name></type> <name>cipherFactory</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>iv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>chunkLength</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>EncryptionContext</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TransparentDataEncryptionOptions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>EncryptionContext</name><parameter_list>(<parameter><decl><type><name>TransparentDataEncryptionOptions</name></type> <name>tdeOptions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>tdeOptions</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><annotation>@<name>VisibleForTesting</name></annotation>
    <specifier>public</specifier> <name>EncryptionContext</name><parameter_list>(<parameter><decl><type><name>TransparentDataEncryptionOptions</name></type> <name>tdeOptions</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>iv</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>init</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tdeOptions</name></name> <operator>=</operator> <name>tdeOptions</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>compressor</name> <operator>=</operator> <call><name><name>LZ4Compressor</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>, <argument><expr><name>String</name><operator>&gt;</operator><call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chunkLength</name> <operator>=</operator> <name><name>tdeOptions</name><operator>.</operator><name>chunk_length_kb</name></name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>

        <comment type="line">// always attempt to load the cipher factory, as we could be in the situation where the user has disabled encryption,</comment>
        <comment type="line">// but has existing commitlogs and sstables on disk that are still encrypted (and still need to be read)</comment>
        <decl_stmt><decl><type><name>CipherFactory</name></type> <name>factory</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>tdeOptions</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator> <name>init</name></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>factory</name> <operator>=</operator> <operator>new</operator> <call><name>CipherFactory</name><argument_list>(<argument><expr><name>tdeOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"failed to load key provider for transparent data encryption"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>cipherFactory</name> <operator>=</operator> <name>factory</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>ICompressor</name></type> <name>getCompressor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>compressor</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Cipher</name></type> <name>getEncryptor</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name><name>cipherFactory</name><operator>.</operator><name>getEncryptor</name></name><argument_list>(<argument><expr><name><name>tdeOptions</name><operator>.</operator><name>cipher</name></name></expr></argument>, <argument><expr><name><name>tdeOptions</name><operator>.</operator><name>key_alias</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Cipher</name></type> <name>getDecryptor</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>iv</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>iv</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"no initialization vector (IV) found in this context"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>cipherFactory</name><operator>.</operator><name>getDecryptor</name></name><argument_list>(<argument><expr><name><name>tdeOptions</name><operator>.</operator><name>cipher</name></name></expr></argument>, <argument><expr><name><name>tdeOptions</name><operator>.</operator><name>key_alias</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>tdeOptions</name><operator>.</operator><name>enabled</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getChunkLength</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>chunkLength</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getIV</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>iv</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TransparentDataEncryptionOptions</name></type> <name>getTransparentDataEncryptionOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>tdeOptions</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>o</name> <operator>instanceof</operator> <name>EncryptionContext</name> <operator>&amp;&amp;</operator> <call><name>equals</name><argument_list>(<argument><expr><operator>(</operator><name>EncryptionContext</name><operator>)</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>EncryptionContext</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name>tdeOptions</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>tdeOptions</name></name></expr></argument>)</argument_list></call>
               <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>compressor</name></name></expr></argument>)</argument_list></call>
               <operator>&amp;&amp;</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>iv</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toHeaderParameters</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// add compression options, someday ...</comment>
        <if_stmt><if>if <condition>(<expr><name><name>tdeOptions</name><operator>.</operator><name>enabled</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ENCRYPTION_CIPHER</name></expr></argument>, <argument><expr><name><name>tdeOptions</name><operator>.</operator><name>cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ENCRYPTION_KEY_ALIAS</name></expr></argument>, <argument><expr><name><name>tdeOptions</name><operator>.</operator><name>key_alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>iv</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>iv</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ENCRYPTION_IV</name></expr></argument>, <argument><expr><call><name><name>Hex</name><operator>.</operator><name>bytesToHex</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>map</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * If encryption headers are found in the {@code parameters},
     * those headers are merged with the application-wide {@code encryptionContext}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>EncryptionContext</name></type> <name>createFromMap</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>EncryptionContext</name></type> <name>encryptionContext</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>parameters</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>parameters</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>EncryptionContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TransparentDataEncryptionOptions</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>keyAlias</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>parameters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ENCRYPTION_KEY_ALIAS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cipher</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>parameters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ENCRYPTION_CIPHER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>ivString</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>parameters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ENCRYPTION_IV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>keyAlias</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>cipher</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>EncryptionContext</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TransparentDataEncryptionOptions</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>TransparentDataEncryptionOptions</name></type> <name>tdeOptions</name> <init>= <expr><operator>new</operator> <call><name>TransparentDataEncryptionOptions</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>, <argument><expr><name>keyAlias</name></expr></argument>, <argument><expr><call><name><name>encryptionContext</name><operator>.</operator><name>getTransparentDataEncryptionOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><name>key_provider</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>iv</name> <init>= <expr><ternary><condition><expr><name>ivString</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>Hex</name><operator>.</operator><name>hexToBytes</name></name><argument_list>(<argument><expr><name>ivString</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>EncryptionContext</name><argument_list>(<argument><expr><name>tdeOptions</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
