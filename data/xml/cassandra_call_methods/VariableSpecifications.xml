<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/VariableSpecifications.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ColumnMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>

<class><specifier>public</specifier> class <name>VariableSpecifications</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>variableNames</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>specs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ColumnMetadata</name><index>[]</index></name></type> <name>targetColumns</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>VariableSpecifications</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>variableNames</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>variableNames</name></name> <operator>=</operator> <name>variableNames</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>specs</name></name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>ColumnSpecification</name><index>[<expr><call><name><name>variableNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>targetColumns</name></name> <operator>=</operator> <operator>new</operator> <name><name>ColumnMetadata</name><index>[<expr><call><name><name>variableNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns an empty instance of &lt;code&gt;VariableSpecifications&lt;/code&gt;.
     * @return an empty instance of &lt;code&gt;VariableSpecifications&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>VariableSpecifications</name></type> <name>empty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>VariableSpecifications</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>variableNames</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>getBindVariables</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>specs</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns an array with the same length as the number of partition key columns for the table corresponding
     * to table.  Each short in the array represents the bind index of the marker that holds the value for that
     * partition key column.  If there are no bind markers for any of the partition key columns, null is returned.
     *
     * Callers of this method should ensure that all statements operate on the same table.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>short</name><index>[]</index></name></type> <name>getPartitionKeyBindVariableIndexes</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>short</name><index>[]</index></name></type> <name>partitionKeyPositions</name> <init>= <expr><operator>new</operator> <name><name>short</name><index>[<expr><call><name><name>metadata</name><operator>.</operator><name>partitionKeyColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>set</name> <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name><name>partitionKeyPositions</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>targetColumns</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>targetColumn</name> <init>= <expr><name><name>targetColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>targetColumn</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>targetColumn</name><operator>.</operator><name>isPartitionKey</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <assert>assert <expr><call><name><name>targetColumn</name><operator>.</operator><name>ksName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>targetColumn</name><operator>.</operator><name>cfName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</assert>
                <expr_stmt><expr><name><name>partitionKeyPositions</name><index>[<expr><call><name><name>targetColumn</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>set</name><index>[<expr><call><name><name>targetColumn</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>boolean</name></type> <name>b</name> <range>: <expr><name>set</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

        <return>return <expr><name>partitionKeyPositions</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bindIndex</name></decl></parameter>, <parameter><decl><type><name>ColumnSpecification</name></type> <name>spec</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>spec</name> <operator>instanceof</operator> <name>ColumnMetadata</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>targetColumns</name><index>[<expr><name>bindIndex</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ColumnMetadata</name><operator>)</operator> <name>spec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>ColumnIdentifier</name></type> <name>bindMarkerName</name> <init>= <expr><call><name><name>variableNames</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>bindIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Use the user name, if there is one</comment>
        <if_stmt><if>if <condition>(<expr><name>bindMarkerName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>spec</name> <operator>=</operator> <operator>new</operator> <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name><name>spec</name><operator>.</operator><name>ksName</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>cfName</name></name></expr></argument>, <argument><expr><name>bindMarkerName</name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>specs</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>bindIndex</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>specs</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
