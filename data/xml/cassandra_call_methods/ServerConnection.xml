<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/transport/ServerConnection.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLPeerUnverifiedException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>security</name><operator>.</operator><name>cert</name><operator>.</operator><name>X509Certificate</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>Channel</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>Counter</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>handler</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SslHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>IAuthenticator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ClientState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>QueryState</name></name>;</import>

<class><specifier>public</specifier> class <name>ServerConnection</name> <super_list><extends>extends <super><name>Connection</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ServerConnection</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name><name>IAuthenticator</name><operator>.</operator><name>SaslNegotiator</name></name></type> <name>saslNegotiator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ClientState</name></type> <name>clientState</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>ConnectionStage</name></type> <name>stage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>requests</name> <init>= <expr><operator>new</operator> <call><name>Counter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><name>ServerConnection</name><parameter_list>(<parameter><decl><type><name>Channel</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>Connection</name><operator>.</operator><name>Tracker</name></name></type> <name>tracker</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>tracker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>clientState</name> <operator>=</operator> <call><name><name>ClientState</name><operator>.</operator><name>forExternalCalls</name></name><argument_list>(<argument><expr><call><name><name>channel</name><operator>.</operator><name>remoteAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stage</name> <operator>=</operator> <name><name>ConnectionStage</name><operator>.</operator><name>ESTABLISHED</name></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>ClientState</name></type> <name>getClientState</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>clientState</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>ConnectionStage</name></type> <name>stage</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>stage</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>QueryState</name></type> <name>validateNewMessage</name><parameter_list>(<parameter><decl><type><name><name>Message</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>stage</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>ESTABLISHED</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>STARTUP</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>OPTIONS</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unexpected message %s, expecting STARTUP or OPTIONS"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>AUTHENTICATING</name></expr>:</case>
                <comment type="line">// Support both SASL auth from protocol v2 and the older style Credentials auth from v1</comment>
                <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>AUTH_RESPONSE</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>CREDENTIALS</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unexpected message %s, expecting %s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><ternary><condition><expr><name>version</name> <operator>==</operator> <name><name>ProtocolVersion</name><operator>.</operator><name>V1</name></name></expr> ?</condition><then> <expr><literal type="string">"CREDENTIALS"</literal></expr> </then><else>: <expr><literal type="string">"SASL_RESPONSE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>READY</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>STARTUP</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ProtocolException</name><argument_list>(<argument><expr><literal type="string">"Unexpected message STARTUP, the connection is already initialized"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <break>break;</break>
            <default>default:</default>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>

        <return>return <expr><operator>new</operator> <call><name>QueryState</name><argument_list>(<argument><expr><name>clientState</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>applyStateTransition</name><parameter_list>(<parameter><decl><type><name><name>Message</name><operator>.</operator><name>Type</name></name></type> <name>requestType</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><operator>.</operator><name>Type</name></name></type> <name>responseType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>stage</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>ESTABLISHED</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>requestType</name> <operator>==</operator> <name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>STARTUP</name></name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>responseType</name> <operator>==</operator> <name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>AUTHENTICATE</name></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>stage</name> <operator>=</operator> <name><name>ConnectionStage</name><operator>.</operator><name>AUTHENTICATING</name></name></expr>;</expr_stmt></block_content></block></if>
                    <if type="elseif">else if <condition>(<expr><name>responseType</name> <operator>==</operator> <name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>READY</name></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>stage</name> <operator>=</operator> <name><name>ConnectionStage</name><operator>.</operator><name>READY</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>AUTHENTICATING</name></expr>:</case>
                <comment type="line">// Support both SASL auth from protocol v2 and the older style Credentials auth from v1</comment>
                <assert>assert <expr><name>requestType</name> <operator>==</operator> <name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>AUTH_RESPONSE</name></name> <operator>||</operator> <name>requestType</name> <operator>==</operator> <name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>CREDENTIALS</name></name></expr>;</assert>

                <if_stmt><if>if <condition>(<expr><name>responseType</name> <operator>==</operator> <name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>READY</name></name> <operator>||</operator> <name>responseType</name> <operator>==</operator> <name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>AUTH_SUCCESS</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>stage</name> <operator>=</operator> <name><name>ConnectionStage</name><operator>.</operator><name>READY</name></name></expr>;</expr_stmt>
                    <comment type="line">// we won't use the authenticator again, null it so that it can be GC'd</comment>
                    <expr_stmt><expr><name>saslNegotiator</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>READY</name></expr>:</case>
                <break>break;</break>
            <default>default:</default>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>IAuthenticator</name><operator>.</operator><name>SaslNegotiator</name></name></type> <name>getSaslNegotiator</name><parameter_list>(<parameter><decl><type><name>QueryState</name></type> <name>queryState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>saslNegotiator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>saslNegotiator</name> <operator>=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthenticator</name></name><argument_list>()</argument_list></call>
                                               <operator>.</operator><call><name>newSaslNegotiator</name><argument_list>(<argument><expr><call><name><name>queryState</name><operator>.</operator><name>getClientAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>certificates</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>saslNegotiator</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>X509Certificate</name><index>[]</index></name></type> <name>certificates</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SslHandler</name></type> <name>sslHandler</name> <init>= <expr><operator>(</operator><name>SslHandler</name><operator>)</operator> <call><name>channel</name><argument_list>()</argument_list></call><operator>.</operator><call><name>pipeline</name><argument_list>()</argument_list></call>
                                                      <operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"ssl"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>X509Certificate</name><index>[]</index></name></type> <name>certificates</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>sslHandler</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>certificates</name> <operator>=</operator> <call><name><name>sslHandler</name><operator>.</operator><name>engine</name></name><argument_list>()</argument_list></call>
                                         <operator>.</operator><call><name>getSession</name><argument_list>()</argument_list></call>
                                         <operator>.</operator><call><name>getPeerCertificateChain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>SSLPeerUnverifiedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Failed to get peer certificates for peer {}"</literal></expr></argument>, <argument><expr><call><name>channel</name><argument_list>()</argument_list></call><operator>.</operator><call><name>remoteAddress</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>certificates</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
