<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/locator/ReplicationFactor.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Predicates</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>Gossiper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<class><specifier>public</specifier> class <name>ReplicationFactor</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ReplicationFactor</name></type> <name>ZERO</name> <init>= <expr><operator>new</operator> <call><name>ReplicationFactor</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>allReplicas</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>fullReplicas</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ReplicationFactor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>allReplicas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>transientReplicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>validate</name><argument_list>(<argument><expr><name>allReplicas</name></expr></argument>, <argument><expr><name>transientReplicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allReplicas</name></name> <operator>=</operator> <name>allReplicas</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fullReplicas</name></name> <operator>=</operator> <name>allReplicas</name> <operator>-</operator> <name>transientReplicas</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>transientReplicas</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>allReplicas</name> <operator>-</operator> <name>fullReplicas</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasTransientReplicas</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>allReplicas</name> <operator>!=</operator> <name>fullReplicas</name></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>private</specifier> <name>ReplicationFactor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>allReplicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>allReplicas</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>totalRF</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>transientRF</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>transientRF</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isTransientReplicationEnabled</name></name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><literal type="string">"Transient replication is not enabled on this node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>totalRF</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>,
                                    <argument><expr><literal type="string">"Replication factor must be non-negative, found %s"</literal></expr></argument>, <argument><expr><name>totalRF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>transientRF</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>transientRF</name> <operator>&lt;</operator> <name>totalRF</name></expr></argument>,
                                    <argument><expr><literal type="string">"Transient replicas must be zero, or less than total replication factor. For %s/%s"</literal></expr></argument>, <argument><expr><name>totalRF</name></expr></argument>, <argument><expr><name>transientRF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>transientRF</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNumTokens</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>,
                                        <argument><expr><literal type="string">"Transient nodes are not allowed with multiple tokens"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Stream</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpoints</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLiveMembers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getUnreachableMembers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>badVersionEndpoints</name> <init>= <expr><call><name><name>endpoints</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><call><name><name>Predicates</name><operator>.</operator><name>not</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call><operator>::</operator><name>equals</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                                    <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>endpoint</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getReleaseVersion</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getReleaseVersion</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call><operator>.</operator><name>major</name> <operator>&lt;</operator> <literal type="number">4</literal></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                                                    <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>badVersionEndpoints</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Transient replication is not supported in mixed version clusters with nodes &lt; 4.0. Bad nodes: "</literal> <operator>+</operator> <name>badVersionEndpoints</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>transientRF</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Amount of transient nodes should be strictly positive, but was: '%d'"</literal></expr></argument>, <argument><expr><name>transientRF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>ReplicationFactor</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>ReplicationFactor</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>allReplicas</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>allReplicas</name></name> <operator>&amp;&amp;</operator> <name>fullReplicas</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>fullReplicas</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>allReplicas</name></expr></argument>, <argument><expr><name>fullReplicas</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ReplicationFactor</name></type> <name>fullOnly</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>totalReplicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ReplicationFactor</name><argument_list>(<argument><expr><name>totalReplicas</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ReplicationFactor</name></type> <name>withTransient</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>totalReplicas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>transientReplicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ReplicationFactor</name><argument_list>(<argument><expr><name>totalReplicas</name></expr></argument>, <argument><expr><name>transientReplicas</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ReplicationFactor</name></type> <name>fromString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>parts</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name><name>parts</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>,
                                        <argument><expr><literal type="string">"Replication factor format is &lt;replicas&gt; or &lt;replicas&gt;/&lt;transient&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>ReplicationFactor</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ReplicationFactor</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toParseableString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>allReplicas</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name>hasTransientReplicas</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"/"</literal> <operator>+</operator> <call><name>transientReplicas</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="string">"rf("</literal> <operator>+</operator> <call><name>toParseableString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">')'</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
