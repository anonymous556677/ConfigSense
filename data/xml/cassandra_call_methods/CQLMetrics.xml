<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/metrics/CQLMetrics.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>Counter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>Gauge</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>RatioGauge</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>CassandraMetricsRegistry</name><operator>.</operator><name>Metrics</name></name>;</import>

<class><specifier>public</specifier> class <name>CQLMetrics</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>MetricNameFactory</name></type> <name>factory</name> <init>= <expr><operator>new</operator> <call><name>DefaultNameFactory</name><argument_list>(<argument><expr><literal type="string">"CQL"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>regularStatementsExecuted</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>preparedStatementsExecuted</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>preparedStatementsEvicted</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>preparedStatementsCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>preparedStatementsRatio</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CQLMetrics</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>regularStatementsExecuted</name> <operator>=</operator> <call><name><name>Metrics</name><operator>.</operator><name>counter</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><literal type="string">"RegularStatementsExecuted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>preparedStatementsExecuted</name> <operator>=</operator> <call><name><name>Metrics</name><operator>.</operator><name>counter</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><literal type="string">"PreparedStatementsExecuted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>preparedStatementsEvicted</name> <operator>=</operator> <call><name><name>Metrics</name><operator>.</operator><name>counter</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><literal type="string">"PreparedStatementsEvicted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>preparedStatementsCount</name> <operator>=</operator> <call><name><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><literal type="string">"PreparedStatementsCount"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Integer</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>QueryProcessor</name><operator>.</operator><name>preparedStatementsCount</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>preparedStatementsRatio</name> <operator>=</operator> <call><name><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><literal type="string">"PreparedStatementsRatio"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>RatioGauge</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Ratio</name></type> <name>getRatio</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>Ratio</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>getNumerator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDenominator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>double</name></type> <name>getNumerator</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>preparedStatementsExecuted</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>double</name></type> <name>getDenominator</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>regularStatementsExecuted</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>preparedStatementsExecuted</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
}</block></class>
</unit>
