<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/audit/AuditLogManager.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>AuthEvents</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>ParameterizedClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>CQLStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>PasswordObfuscator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryEvents</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>BatchStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>AuthenticationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>PreparedQueryNotFoundException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>SyntaxException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>UnauthorizedException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>QueryState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>messages</name><operator>.</operator><name>ResultMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Central location for managing the logging of client/user-initated actions (like queries, log in commands, and so on).
 *
 */</comment>
<class><specifier>public</specifier> class <name>AuditLogManager</name> <super_list><implements>implements <super><name><name>QueryEvents</name><operator>.</operator><name>Listener</name></name></super>, <super><name><name>AuthEvents</name><operator>.</operator><name>Listener</name></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AuditLogManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>AuditLogManager</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>AuditLogManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// auditLogger can write anywhere, as it's pluggable (logback, BinLog, DiagnosticEvents, etc ...)</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>IAuditLogger</name></type> <name>auditLogger</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>AuditLogFilter</name></type> <name>filter</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>AuditLogManager</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>AuditLogOptions</name></type> <name>auditLogOptions</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuditLoggingOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>auditLogOptions</name><operator>.</operator><name>enabled</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Audit logging is enabled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>auditLogger</name> <operator>=</operator> <call><name>getAuditLogger</name><argument_list>(<argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>logger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Audit logging is disabled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>auditLogger</name> <operator>=</operator> <operator>new</operator> <call><name>NoOpAuditLogger</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name><name>AuditLogFilter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>auditLogOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuditLoggingOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><name>enabled</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>registerAsListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>IAuditLogger</name></type> <name>getAuditLogger</name><parameter_list>(<parameter><decl><type><name>ParameterizedClass</name></type> <name>logger</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>logger</name><operator>.</operator><name>class_name</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name><name>FBUtilities</name><operator>.</operator><name>newAuditLogger</name></name><argument_list>(<argument><expr><name><name>logger</name><operator>.</operator><name>class_name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>logger</name><operator>.</operator><name>parameters</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>logger</name><operator>.</operator><name>parameters</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>FBUtilities</name><operator>.</operator><name>newAuditLogger</name></name><argument_list>(<argument><expr><call><name><name>BinAuditLogger</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>IAuditLogger</name></type> <name>getLogger</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>auditLogger</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>auditLogger</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Logs AudigLogEntry to standard audit logger
     * @param logEntry AuditLogEntry to be logged
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>AuditLogEntry</name></type> <name>logEntry</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>isFiltered</name></name><argument_list>(<argument><expr><name>logEntry</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>auditLogger</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>logEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>AuditLogEntry</name></type> <name>logEntry</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>logEntry</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>AuditLogEntry</name></type> <name>logEntry</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>queries</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>logEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>UnauthorizedException</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>UNAUTHORIZED_ATTEMPT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>AuthenticationException</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>LOGIN_ERROR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>REQUEST_FAILURE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>appendToOperation</name></name><argument_list>(<argument><expr><call><name>obfuscatePasswordInformation</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>queries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Disables AuditLog, designed to be invoked only via JMX/ Nodetool, not from anywhere else in the codepath.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>disableAuditLog</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>unregisterAsListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>IAuditLogger</name></type> <name>oldLogger</name> <init>= <expr><name>auditLogger</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>auditLogger</name> <operator>=</operator> <operator>new</operator> <call><name>NoOpAuditLogger</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>oldLogger</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Enables AuditLog, designed to be invoked only via JMX/ Nodetool, not from anywhere else in the codepath.
     * @param auditLogOptions AuditLogOptions to be used for enabling AuditLog
     * @throws ConfigurationException It can throw configuration exception when provided logger class does not exist in the classpath
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>enable</name><parameter_list>(<parameter><decl><type><name>AuditLogOptions</name></type> <name>auditLogOptions</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// always reload the filters</comment>
        <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name><name>AuditLogFilter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>auditLogOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// next, check to see if we're changing the logging implementation; if not, keep the same instance and bail.</comment>
        <comment type="line">// note: auditLogger should never be null</comment>
        <decl_stmt><decl><type><name>IAuditLogger</name></type> <name>oldLogger</name> <init>= <expr><name>auditLogger</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>oldLogger</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>logger</name><operator>.</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>auditLogger</name> <operator>=</operator> <call><name>getAuditLogger</name><argument_list>(<argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>logger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// note that we might already be registered here and we rely on the fact that Query/AuthEvents have a Set of listeners</comment>
        <expr_stmt><expr><call><name>registerAsListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ensure oldLogger's stop() is called after we swap it with new logger,</comment>
        <comment type="line">// otherwise, we might be calling log() on the stopped logger.</comment>
        <expr_stmt><expr><call><name><name>oldLogger</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>registerAsListener</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>QueryEvents</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>AuthEvents</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>unregisterAsListener</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>QueryEvents</name><operator>.</operator><name>instance</name><operator>.</operator><name>unregisterListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>AuthEvents</name><operator>.</operator><name>instance</name><operator>.</operator><name>unregisterListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>querySuccess</name><parameter_list>(<parameter><decl><type><name>CQLStatement</name></type> <name>statement</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>QueryOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryTime</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><operator>.</operator><name>Response</name></name></type> <name>response</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditLogEntry</name></type> <name>entry</name> <init>= <expr><operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><call><name><name>statement</name><operator>.</operator><name>getAuditLogContext</name></name><argument_list>()</argument_list></call><operator>.</operator><name>auditLogEntryType</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setOperation</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setTimestamp</name><argument_list>(<argument><expr><name>queryTime</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setScope</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setKeyspace</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>queryFailure</name><parameter_list>(<parameter><decl><type><name>CQLStatement</name></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>QueryOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>cause</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditLogEntry</name></type> <name>entry</name> <init>= <expr><operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOperation</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><ternary><condition><expr><name>query</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeSuccess</name><parameter_list>(<parameter><decl><type><name>CQLStatement</name></type> <name>statement</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>QueryOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryTime</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><operator>.</operator><name>Response</name></name></type> <name>response</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditLogEntry</name></type> <name>entry</name> <init>= <expr><operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><call><name><name>statement</name><operator>.</operator><name>getAuditLogContext</name></name><argument_list>()</argument_list></call><operator>.</operator><name>auditLogEntryType</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setOperation</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setTimestamp</name><argument_list>(<argument><expr><name>queryTime</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setScope</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setKeyspace</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeFailure</name><parameter_list>(<parameter><decl><type><name>CQLStatement</name></type> <name>statement</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>QueryOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>cause</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditLogEntry</name></type> <name>entry</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cause</name> <operator>instanceof</operator> <name>PreparedQueryNotFoundException</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOperation</name><argument_list>(<argument><expr><ternary><condition><expr><name>query</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><name>query</name></expr></else></ternary></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>statement</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOperation</name><argument_list>(<argument><expr><ternary><condition><expr><name>query</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>statement</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>query</name></expr></else></ternary></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><call><name><name>statement</name><operator>.</operator><name>getAuditLogContext</name></name><argument_list>()</argument_list></call><operator>.</operator><name>auditLogEntryType</name></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>setScope</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>setKeyspace</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><ternary><condition><expr><name>query</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>batchSuccess</name><parameter_list>(<parameter><decl><type><name><name>BatchStatement</name><operator>.</operator><name>Type</name></name></type> <name>batchType</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>CQLStatement</name></extends></argument>&gt;</argument_list></name></type> <name>statements</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>queries</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>values</name></decl></parameter>, <parameter><decl><type><name>QueryOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryTime</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><operator>.</operator><name>Response</name></name></type> <name>response</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AuditLogEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name>buildEntriesForBatch</name><argument_list>(<argument><expr><name>statements</name></expr></argument>, <argument><expr><name>queries</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>queryTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>AuditLogEntry</name></type> <name>auditLogEntry</name> <range>: <expr><name>entries</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>auditLogEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>batchFailure</name><parameter_list>(<parameter><decl><type><name><name>BatchStatement</name><operator>.</operator><name>Type</name></name></type> <name>batchType</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>CQLStatement</name></extends></argument>&gt;</argument_list></name></type> <name>statements</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>queries</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>values</name></decl></parameter>, <parameter><decl><type><name>QueryOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>cause</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>auditMessage</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"BATCH of %d statements at consistency %s"</literal></expr></argument>, <argument><expr><call><name><name>statements</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>options</name><operator>.</operator><name>getConsistency</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditLogEntry</name></type> <name>entry</name> <init>= <expr><operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOperation</name><argument_list>(<argument><expr><name>auditMessage</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>BATCH</name></name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>queries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AuditLogEntry</name></argument>&gt;</argument_list></name></type> <name>buildEntriesForBatch</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>CQLStatement</name></extends></argument>&gt;</argument_list></name></type> <name>statements</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>queries</name></decl></parameter>, <parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>QueryOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartTimeMillis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AuditLogEntry</name></argument>&gt;</argument_list></name></type> <name>auditLogEntries</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>statements</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UUID</name></type> <name>batchId</name> <init>= <expr><call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>queryString</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"BatchId:[%s] - BATCH of [%d] statements"</literal></expr></argument>, <argument><expr><name>batchId</name></expr></argument>, <argument><expr><call><name><name>statements</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditLogEntry</name></type> <name>entry</name> <init>= <expr><operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>setOperation</name><argument_list>(<argument><expr><name>queryString</name></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>setTimestamp</name><argument_list>(<argument><expr><name>queryStartTimeMillis</name></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>setBatch</name><argument_list>(<argument><expr><name>batchId</name></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>BATCH</name></name></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>auditLogEntries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>statements</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CQLStatement</name></type> <name>statement</name> <init>= <expr><call><name><name>statements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><call><name><name>statement</name><operator>.</operator><name>getAuditLogContext</name></name><argument_list>()</argument_list></call><operator>.</operator><name>auditLogEntryType</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setOperation</name><argument_list>(<argument><expr><call><name><name>queries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setTimestamp</name><argument_list>(<argument><expr><name>queryStartTimeMillis</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setScope</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setKeyspace</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setBatch</name><argument_list>(<argument><expr><name>batchId</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>auditLogEntries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>auditLogEntries</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareSuccess</name><parameter_list>(<parameter><decl><type><name>CQLStatement</name></type> <name>statement</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryTime</name></decl></parameter>, <parameter><decl><type><name><name>ResultMessage</name><operator>.</operator><name>Prepared</name></name></type> <name>response</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditLogEntry</name></type> <name>entry</name> <init>= <expr><operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOperation</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>PREPARE_STATEMENT</name></name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setScope</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setKeyspace</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareFailure</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>CQLStatement</name></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>cause</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditLogEntry</name></type> <name>entry</name> <init>= <expr><operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOperation</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call>
<comment type="line">//                                                              .setKeyspace(keyspace) // todo: do we need this? very much special case compared to the others</comment>
                                                              <operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>PREPARE_STATEMENT</name></name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>authSuccess</name><parameter_list>(<parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditLogEntry</name></type> <name>entry</name> <init>= <expr><operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOperation</name><argument_list>(<argument><expr><literal type="string">"LOGIN SUCCESSFUL"</literal></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>LOGIN_SUCCESS</name></name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>authFailure</name><parameter_list>(<parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>cause</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditLogEntry</name></type> <name>entry</name> <init>= <expr><operator>new</operator> <call><name><name>AuditLogEntry</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOperation</name><argument_list>(<argument><expr><literal type="string">"LOGIN FAILURE"</literal></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>LOGIN_ERROR</name></name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>obfuscatePasswordInformation</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>queries</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// A syntax error may reveal the password in the form of 'line 1:33 mismatched input 'secret_password''</comment>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>SyntaxException</name> <operator>&amp;&amp;</operator> <name>queries</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>queries</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>query</name> <range>: <expr><name>queries</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>query</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>PasswordObfuscator</name><operator>.</operator><name>PASSWORD_TOKEN</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="string">"Syntax Exception. Obscured for security reasons."</literal></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>PasswordObfuscator</name><operator>.</operator><name>obfuscate</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
