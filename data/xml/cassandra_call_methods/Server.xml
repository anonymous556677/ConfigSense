<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/transport/Server.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>Channel</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>ChannelFuture</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>EventLoopGroup</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>epoll</name><operator>.</operator><name>EpollEventLoopGroup</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>group</name><operator>.</operator><name>ChannelGroup</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>group</name><operator>.</operator><name>ChannelMatcher</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>group</name><operator>.</operator><name>DefaultChannelGroup</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>nio</name><operator>.</operator><name>NioEventLoopGroup</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>GlobalEventExecutor</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>internal</name><operator>.</operator><name>logging</name><operator>.</operator><name>InternalLoggerFactory</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>internal</name><operator>.</operator><name>logging</name><operator>.</operator><name>Slf4JLoggerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>AuthenticatedUser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>EncryptionOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaChangeListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>messages</name><operator>.</operator><name>EventMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<class><specifier>public</specifier> class <name>Server</name> <super_list><implements>implements <super><name><name>CassandraDaemon</name><operator>.</operator><name>Server</name></name></super></implements></super_list>
<block>{
    <static>static
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>InternalLoggerFactory</name><operator>.</operator><name>setDefaultFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Slf4JLoggerFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Server</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>useEpoll</name> <init>= <expr><call><name><name>NativeTransportService</name><operator>.</operator><name>useEpoll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ConnectionTracker</name></type> <name>connectionTracker</name> <init>= <expr><operator>new</operator> <call><name>ConnectionTracker</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Connection</name><operator>.</operator><name>Factory</name></name></type> <name>connectionFactory</name> <init>= <expr><operator>new</operator> <class><super><name><name>Connection</name><operator>.</operator><name>Factory</name></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>Connection</name></type> <name>newConnection</name><parameter_list>(<parameter><decl><type><name>Channel</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerConnection</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>connectionTracker</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>InetSocketAddress</name></type> <name>socket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>EncryptionOptions</name><operator>.</operator><name>TlsEncryptionPolicy</name></name></type> <name>tlsEncryptionPolicy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicBoolean</name></type> <name>isRunning</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PipelineConfigurator</name></type> <name>pipelineConfigurator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>EventLoopGroup</name></type> <name>workerGroup</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Server</name> <parameter_list>(<parameter><decl><type><name>Builder</name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>socket</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getSocket</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tlsEncryptionPolicy</name></name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>tlsEncryptionPolicy</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>builder</name><operator>.</operator><name>workerGroup</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>workerGroup</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>workerGroup</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>useEpoll</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>workerGroup</name> <operator>=</operator> <operator>new</operator> <call><name>EpollEventLoopGroup</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>workerGroup</name> <operator>=</operator> <operator>new</operator> <call><name>NioEventLoopGroup</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>pipelineConfigurator</name> <operator>=</operator> <ternary><condition><expr><name><name>builder</name><operator>.</operator><name>pipelineConfigurator</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>
                               ?</condition><then> <expr><name><name>builder</name><operator>.</operator><name>pipelineConfigurator</name></name></expr>
                               </then><else>: <expr><operator>new</operator> <call><name>PipelineConfigurator</name><argument_list>(<argument><expr><name>useEpoll</name></expr></argument>,
                                                          <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRpcKeepAlive</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                          <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>useNativeTransportLegacyFlusher</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                          <argument><expr><name><name>builder</name><operator>.</operator><name>tlsEncryptionPolicy</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>EventNotifier</name></type> <name>notifier</name> <init>= <expr><ternary><condition><expr><name><name>builder</name><operator>.</operator><name>eventNotifier</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>builder</name><operator>.</operator><name>eventNotifier</name></name></expr> </then><else>: <expr><operator>new</operator> <call><name>EventNotifier</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>notifier</name><operator>.</operator><name>registerConnectionTracker</name></name><argument_list>(<argument><expr><name>connectionTracker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name>notifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerListener</name></name><argument_list>(<argument><expr><name>notifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>isRunning</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRunning</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>isRunning</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>isRunning</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// Configure the server.</comment>
        <decl_stmt><decl><type><name>ChannelFuture</name></type> <name>bindFuture</name> <init>= <expr><call><name><name>pipelineConfigurator</name><operator>.</operator><name>initializeChannel</name></name><argument_list>(<argument><expr><name>workerGroup</name></expr></argument>, <argument><expr><name>socket</name></expr></argument>, <argument><expr><name>connectionFactory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bindFuture</name><operator>.</operator><name>awaitUninterruptibly</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSuccess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Failed to bind port %d on %s."</literal></expr></argument>, <argument><expr><call><name><name>socket</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>socket</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>bindFuture</name><operator>.</operator><name>cause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>connectionTracker</name><operator>.</operator><name>allChannels</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>bindFuture</name><operator>.</operator><name>channel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>isRunning</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>countConnectedClients</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>connectionTracker</name><operator>.</operator><name>countConnectedClients</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>countConnectedClientsByUser</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>connectionTracker</name><operator>.</operator><name>countConnectedClientsByUser</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ConnectedClient</name></argument>&gt;</argument_list></name></type> <name>getConnectedClients</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ConnectedClient</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Channel</name></type> <name>c</name> <range>: <expr><name><name>connectionTracker</name><operator>.</operator><name>allChannels</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Connection</name></type> <name>conn</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>attr</name></name><argument_list>(<argument><expr><name><name>Connection</name><operator>.</operator><name>attributeKey</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>instanceof</operator> <name>ServerConnection</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ConnectedClient</name><argument_list>(<argument><expr><operator>(</operator><name>ServerConnection</name><operator>)</operator> <name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ClientStat</name></argument>&gt;</argument_list></name></type> <name>recentClientStats</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>connectionTracker</name><operator>.</operator><name>protocolVersionTracker</name><operator>.</operator><name>getAll</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>clearConnectionHistory</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>connectionTracker</name><operator>.</operator><name>protocolVersionTracker</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// Close opened connections</comment>
        <expr_stmt><expr><call><name><name>connectionTracker</name><operator>.</operator><name>closeAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Stop listening for CQL clients"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Builder</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>EventLoopGroup</name></type> <name>workerGroup</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>EncryptionOptions</name><operator>.</operator><name>TlsEncryptionPolicy</name></name></type> <name>tlsEncryptionPolicy</name> <init>= <expr><name><name>EncryptionOptions</name><operator>.</operator><name>TlsEncryptionPolicy</name><operator>.</operator><name>UNENCRYPTED</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>InetAddress</name></type> <name>hostAddr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>port</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>InetSocketAddress</name></type> <name>socket</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>PipelineConfigurator</name></type> <name>pipelineConfigurator</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>EventNotifier</name></type> <name>eventNotifier</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>withTlsEncryptionPolicy</name><parameter_list>(<parameter><decl><type><name><name>EncryptionOptions</name><operator>.</operator><name>TlsEncryptionPolicy</name></name></type> <name>tlsEncryptionPolicy</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tlsEncryptionPolicy</name></name> <operator>=</operator> <name>tlsEncryptionPolicy</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>withEventLoopGroup</name><parameter_list>(<parameter><decl><type><name>EventLoopGroup</name></type> <name>eventLoopGroup</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>workerGroup</name></name> <operator>=</operator> <name>eventLoopGroup</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>withHost</name><parameter_list>(<parameter><decl><type><name>InetAddress</name></type> <name>host</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hostAddr</name></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>socket</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>withPort</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>socket</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>withPipelineConfigurator</name><parameter_list>(<parameter><decl><type><name>PipelineConfigurator</name></type> <name>configurator</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pipelineConfigurator</name></name> <operator>=</operator> <name>configurator</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>withEventNotifier</name><parameter_list>(<parameter><decl><type><name>EventNotifier</name></type> <name>eventNotifier</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>eventNotifier</name></name> <operator>=</operator> <name>eventNotifier</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Server</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Server</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>InetSocketAddress</name></type> <name>getSocket</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>socket</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name><name>this</name><operator>.</operator><name>socket</name></name></expr>;</return></block_content></block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>port</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Missing port number"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>hostAddr</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>socket</name></name> <operator>=</operator> <operator>new</operator> <call><name>InetSocketAddress</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>hostAddr</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Missing host"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
                <return>return <expr><name><name>this</name><operator>.</operator><name>socket</name></name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ConnectionTracker</name> <super_list><implements>implements <super><name><name>Connection</name><operator>.</operator><name>Tracker</name></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ChannelMatcher</name></type> <name>PRE_V5_CHANNEL</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>channel</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>channel</name><operator>.</operator><name>attr</name></name><argument_list>(<argument><expr><name><name>Connection</name><operator>.</operator><name>attributeKey</name></name></expr></argument>)</argument_list></call>
                                                                               <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call>
                                                                               <operator>.</operator><call><name>getVersion</name><argument_list>()</argument_list></call>
                                                                               <operator>.</operator><call><name>isSmallerThan</name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V5</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>

        <comment type="line">// TODO: should we be using the GlobalEventExecutor or defining our own?</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ChannelGroup</name></type> <name>allChannels</name> <init>= <expr><operator>new</operator> <call><name>DefaultChannelGroup</name><argument_list>(<argument><expr><name><name>GlobalEventExecutor</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name><name>Event</name><operator>.</operator><name>Type</name></name></argument>, <argument><name>ChannelGroup</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>Type</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ProtocolVersionTracker</name></type> <name>protocolVersionTracker</name> <init>= <expr><operator>new</operator> <call><name>ProtocolVersionTracker</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ConnectionTracker</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Event</name><operator>.</operator><name>Type</name></name></type> <name>type</name> <range>: <expr><call><name><name>Event</name><operator>.</operator><name>Type</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>groups</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DefaultChannelGroup</name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>GlobalEventExecutor</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>addConnection</name><parameter_list>(<parameter><decl><type><name>Channel</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>Connection</name></type> <name>connection</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>allChannels</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>ch</name><operator>.</operator><name>remoteAddress</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>InetSocketAddress</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>protocolVersionTracker</name><operator>.</operator><name>addConnection</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>InetSocketAddress</name><operator>)</operator> <call><name><name>ch</name><operator>.</operator><name>remoteAddress</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>connection</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name><name>Event</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Channel</name></type> <name>ch</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>groups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>send</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ChannelGroup</name></type> <name>registered</name> <init>= <expr><call><name><name>groups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>EventMessage</name></type> <name>message</name> <init>= <expr><operator>new</operator> <call><name>EventMessage</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Deliver event to pre-v5 channels</comment>
            <expr_stmt><expr><call><name><name>registered</name><operator>.</operator><name>writeAndFlush</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>PRE_V5_CHANNEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Deliver event to post-v5 channels</comment>
            <for>for <control>(<init><decl><type><name>Channel</name></type> <name>c</name> <range>: <expr><name>registered</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>PRE_V5_CHANNEL</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>attr</name></name><argument_list>(<argument><expr><name><name>Dispatcher</name><operator>.</operator><name>EVENT_DISPATCHER</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call><operator>.</operator><call><name>accept</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>closeAll</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>allChannels</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>awaitUninterruptibly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><name>int</name></type> <name>countConnectedClients</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <comment type="block">/*
              - When server is running: allChannels contains all clients' connections (channels)
                plus one additional channel used for the server's own bootstrap.
               - When server is stopped: the size is 0
            */</comment>
            <return>return <expr><ternary><condition><expr><call><name><name>allChannels</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>allChannels</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>countConnectedClientsByUser</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Channel</name></type> <name>c</name> <range>: <expr><name>allChannels</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Connection</name></type> <name>connection</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>attr</name></name><argument_list>(<argument><expr><name><name>Connection</name><operator>.</operator><name>attributeKey</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>connection</name> <operator>instanceof</operator> <name>ServerConnection</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ServerConnection</name></type> <name>conn</name> <init>= <expr><operator>(</operator><name>ServerConnection</name><operator>)</operator> <name>connection</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>AuthenticatedUser</name></type> <name>user</name> <init>= <expr><call><name><name>conn</name><operator>.</operator><name>getClientState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><ternary><condition><expr><operator>(</operator><literal type="null">null</literal> <operator>!=</operator> <name>user</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>user</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>

    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>LatestEvent</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Event</name><operator>.</operator><name>StatusChange</name><operator>.</operator><name>Status</name></name></type> <name>status</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Event</name><operator>.</operator><name>TopologyChange</name><operator>.</operator><name>Change</name></name></type> <name>topology</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>LatestEvent</name><parameter_list>(<parameter><decl><type><name><name>Event</name><operator>.</operator><name>StatusChange</name><operator>.</operator><name>Status</name></name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name><name>Event</name><operator>.</operator><name>TopologyChange</name><operator>.</operator><name>Change</name></name></type> <name>topology</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>topology</name></name> <operator>=</operator> <name>topology</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Status %s, Topology %s"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>topology</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>LatestEvent</name></type> <name>forStatusChange</name><parameter_list>(<parameter><decl><type><name><name>Event</name><operator>.</operator><name>StatusChange</name><operator>.</operator><name>Status</name></name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>LatestEvent</name></type> <name>prev</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>LatestEvent</name><argument_list>(<argument><expr><name>status</name></expr></argument>,
                                   <argument><expr><ternary><condition><expr><name>prev</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then>
                                           <expr><literal type="null">null</literal></expr> </then><else>:
                                           <expr><name><name>prev</name><operator>.</operator><name>topology</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>LatestEvent</name></type> <name>forTopologyChange</name><parameter_list>(<parameter><decl><type><name><name>Event</name><operator>.</operator><name>TopologyChange</name><operator>.</operator><name>Change</name></name></type> <name>change</name></decl></parameter>, <parameter><decl><type><name>LatestEvent</name></type> <name>prev</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>LatestEvent</name><argument_list>(<argument><expr><ternary><condition><expr><name>prev</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then>
                                           <expr><literal type="null">null</literal></expr> </then><else>:
                                           <expr><name><name>prev</name><operator>.</operator><name>status</name></name></expr></else></ternary></expr></argument>,
                                           <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>EventNotifier</name> <super_list><extends>extends <super><name>SchemaChangeListener</name></super></extends> <implements>implements <super><name>IEndpointLifecycleSubscriber</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>ConnectionTracker</name></type> <name>connectionTracker</name></decl>;</decl_stmt>

        <comment type="line">// We keep track of the latest status change events we have sent to avoid sending duplicates</comment>
        <comment type="line">// since StorageService may send duplicate notifications (CASSANDRA-7816, CASSANDRA-8236, CASSANDRA-9156)</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>LatestEvent</name></argument>&gt;</argument_list></name></type> <name>latestEvents</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// We also want to delay delivering a NEW_NODE notification until the new node has set its RPC ready</comment>
        <comment type="line">// state. This tracks the endpoints which have joined, but not yet signalled they're ready for clients</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpointsPendingJoinedNotification</name> <init>= <expr><call><name><name>ConcurrentHashMap</name><operator>.</operator><name>newKeySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>registerConnectionTracker</name><parameter_list>(<parameter><decl><type><name>ConnectionTracker</name></type> <name>connectionTracker</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>connectionTracker</name></name> <operator>=</operator> <name>connectionTracker</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>InetAddressAndPort</name></type> <name>getNativeAddress</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <return>return <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNativeaddress</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <comment type="line">// That should not happen, so log an error, but return the</comment>
                <comment type="line">// endpoint address since there's a good change this is right</comment>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Problem retrieving RPC address for {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(<argument><expr><name><name>endpoint</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNativeTransportPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>send</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name><name>Event</name><operator>.</operator><name>NodeEvent</name></name></type> <name>event</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Sending event for endpoint {}, rpc address {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>nodeAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// If the endpoint is not the local node, extract the node address</comment>
            <comment type="line">// and if it is the same as our own RPC broadcast address (which defaults to the rcp address)</comment>
            <comment type="line">// then don't send the notification. This covers the case of rpc_address set to "localhost",</comment>
            <comment type="line">// which is not useful to any driver and in fact may cauase serious problems to some drivers,</comment>
            <comment type="line">// see CASSANDRA-10052</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>endpoint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name><name>event</name><operator>.</operator><name>nodeAddressAndPort</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastNativeAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>send</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>connectionTracker</name><operator>.</operator><name>send</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onJoinCluster</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isRpcReady</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>endpointsPendingJoinedNotification</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>onTopologyChange</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>Event</name><operator>.</operator><name>TopologyChange</name><operator>.</operator><name>newNode</name></name><argument_list>(<argument><expr><call><name>getNativeAddress</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onLeaveCluster</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>onTopologyChange</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>Event</name><operator>.</operator><name>TopologyChange</name><operator>.</operator><name>removedNode</name></name><argument_list>(<argument><expr><call><name>getNativeAddress</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onMove</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>onTopologyChange</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>Event</name><operator>.</operator><name>TopologyChange</name><operator>.</operator><name>movedNode</name></name><argument_list>(<argument><expr><call><name>getNativeAddress</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onUp</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>endpointsPendingJoinedNotification</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>onJoinCluster</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>onStatusChange</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>Event</name><operator>.</operator><name>StatusChange</name><operator>.</operator><name>nodeUp</name></name><argument_list>(<argument><expr><call><name>getNativeAddress</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onDown</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>onStatusChange</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>Event</name><operator>.</operator><name>StatusChange</name><operator>.</operator><name>nodeDown</name></name><argument_list>(<argument><expr><call><name>getNativeAddress</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>onTopologyChange</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name><name>Event</name><operator>.</operator><name>TopologyChange</name></name></type> <name>event</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Topology changed event : {}, {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>change</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>LatestEvent</name></type> <name>prev</name> <init>= <expr><call><name><name>latestEvents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>prev</name><operator>.</operator><name>topology</name></name> <operator>!=</operator> <name><name>event</name><operator>.</operator><name>change</name></name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>LatestEvent</name></type> <name>ret</name> <init>= <expr><call><name><name>latestEvents</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>LatestEvent</name><operator>.</operator><name>forTopologyChange</name></name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>change</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>prev</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>onStatusChange</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name><name>Event</name><operator>.</operator><name>StatusChange</name></name></type> <name>event</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Status changed event : {}, {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>LatestEvent</name></type> <name>prev</name> <init>= <expr><call><name><name>latestEvents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>prev</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name><name>event</name><operator>.</operator><name>status</name></name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>LatestEvent</name></type> <name>ret</name> <init>= <expr><call><name><name>latestEvents</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>LatestEvent</name><operator>.</operator><name>forStatusChange</name></name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>prev</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onCreateKeyspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>CREATED</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onCreateTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cfName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>CREATED</name></name></expr></argument>, <argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name><operator>.</operator><name>TABLE</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onCreateType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>typeName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>CREATED</name></name></expr></argument>, <argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onCreateFunction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>functionName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>CREATED</name></name></expr></argument>, <argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name><operator>.</operator><name>FUNCTION</name></name></expr></argument>,
                                        <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><call><name><name>AbstractType</name><operator>.</operator><name>asCQLTypeStringList</name></name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onCreateAggregate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>aggregateName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>CREATED</name></name></expr></argument>, <argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name><operator>.</operator><name>AGGREGATE</name></name></expr></argument>,
                                        <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>aggregateName</name></expr></argument>, <argument><expr><call><name><name>AbstractType</name><operator>.</operator><name>asCQLTypeStringList</name></name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onAlterKeyspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>UPDATED</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onAlterTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cfName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>affectsStatements</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>UPDATED</name></name></expr></argument>, <argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name><operator>.</operator><name>TABLE</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onAlterType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>typeName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>UPDATED</name></name></expr></argument>, <argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onAlterFunction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>functionName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>UPDATED</name></name></expr></argument>, <argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name><operator>.</operator><name>FUNCTION</name></name></expr></argument>,
                                        <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><call><name><name>AbstractType</name><operator>.</operator><name>asCQLTypeStringList</name></name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onAlterAggregate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>aggregateName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>UPDATED</name></name></expr></argument>, <argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name><operator>.</operator><name>AGGREGATE</name></name></expr></argument>,
                                        <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>aggregateName</name></expr></argument>, <argument><expr><call><name><name>AbstractType</name><operator>.</operator><name>asCQLTypeStringList</name></name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onDropKeyspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>DROPPED</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onDropTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cfName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>DROPPED</name></name></expr></argument>, <argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name><operator>.</operator><name>TABLE</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onDropType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>typeName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>DROPPED</name></name></expr></argument>, <argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onDropFunction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>functionName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>DROPPED</name></name></expr></argument>, <argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name><operator>.</operator><name>FUNCTION</name></name></expr></argument>,
                                        <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><call><name><name>AbstractType</name><operator>.</operator><name>asCQLTypeStringList</name></name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onDropAggregate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>aggregateName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name><argument_list>(<argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name><operator>.</operator><name>DROPPED</name></name></expr></argument>, <argument><expr><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name><operator>.</operator><name>AGGREGATE</name></name></expr></argument>,
                                        <argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>aggregateName</name></expr></argument>, <argument><expr><call><name><name>AbstractType</name><operator>.</operator><name>asCQLTypeStringList</name></name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
