<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/commitlog/PeriodicCommitLogService.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>

<class>class <name>PeriodicCommitLogService</name> <super_list><extends>extends <super><name>AbstractCommitLogService</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>blockWhenSyncLagsNanos</name> <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getPeriodicCommitLogSyncBlock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PeriodicCommitLogService</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CommitLog</name></type> <name>commitLog</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>commitLog</name></expr></argument>, <argument><expr><literal type="string">"PERIODIC-COMMIT-LOG-SYNCER"</literal></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCommitLogSyncPeriod</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><operator>!</operator><operator>(</operator><call><name><name>commitLog</name><operator>.</operator><name>configuration</name><operator>.</operator><name>useCompression</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>commitLog</name><operator>.</operator><name>configuration</name><operator>.</operator><name>useEncryption</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>maybeWaitForSync</name><parameter_list>(<parameter><decl><type><name><name>CommitLogSegment</name><operator>.</operator><name>Allocation</name></name></type> <name>alloc</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>expectedSyncTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>blockWhenSyncLagsNanos</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastSyncedAt</name> <operator>&lt;</operator> <name>expectedSyncTime</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>awaitSyncAt</name><argument_list>(<argument><expr><name>expectedSyncTime</name></expr></argument>, <argument><expr><call><name><name>commitLog</name><operator>.</operator><name>metrics</name><operator>.</operator><name>waitingOnCommit</name><operator>.</operator><name>time</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>decrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
}</block></class></unit>
