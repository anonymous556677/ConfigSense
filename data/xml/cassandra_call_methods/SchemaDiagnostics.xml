<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/schema/SchemaDiagnostics.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>MapDifference</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>diag</name><operator>.</operator><name>DiagnosticEventService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaEvent</name><operator>.</operator><name>SchemaEventType</name></name>;</import>

<class><specifier>final</specifier> class <name>SchemaDiagnostics</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DiagnosticEventService</name></type> <name>service</name> <init>= <expr><call><name><name>DiagnosticEventService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>SchemaDiagnostics</name><parameter_list>()</parameter_list>
    <block>{<block_content>
    </block_content>}</block></constructor>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>metadataInitialized</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>ksmUpdate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_METADATA_LOADED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_METADATA_LOADED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>ksmUpdate</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>metadataReloaded</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>ksmUpdate</name></decl></parameter>, <parameter><decl><type><name><name>Tables</name><operator>.</operator><name>TablesDiff</name></name></type> <name>tablesDiff</name></decl></parameter>, <parameter><decl><type><name><name>Views</name><operator>.</operator><name>ViewsDiff</name></name></type> <name>viewsDiff</name></decl></parameter>, <parameter><decl><type><name><name>MapDifference</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>indexesDiff</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_METADATA_RELOADED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_METADATA_RELOADED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>ksmUpdate</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>tablesDiff</name></expr></argument>, <argument><expr><name>viewsDiff</name></expr></argument>, <argument><expr><name>indexesDiff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>metadataRemoved</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>ksmUpdate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_METADATA_REMOVED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_METADATA_REMOVED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>ksmUpdate</name></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>versionUpdated</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>VERSION_UPDATED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>VERSION_UPDATED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>keyspaceCreating</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_CREATING</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_CREATING</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>keyspaceCreated</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_CREATED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_CREATED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>keyspaceAltering</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name><name>KeyspaceMetadata</name><operator>.</operator><name>KeyspaceDiff</name></name></type> <name>delta</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_ALTERING</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_ALTERING</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name><name>delta</name><operator>.</operator><name>after</name></name></expr></argument>,
                                            <argument><expr><name><name>delta</name><operator>.</operator><name>before</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>keyspaceAltered</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name><name>KeyspaceMetadata</name><operator>.</operator><name>KeyspaceDiff</name></name></type> <name>delta</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_ALTERED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_ALTERED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name><name>delta</name><operator>.</operator><name>after</name></name></expr></argument>,
                                            <argument><expr><name><name>delta</name><operator>.</operator><name>before</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>keyspaceDroping</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_DROPPING</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_DROPPING</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>keyspaceDroped</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_DROPPED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>KS_DROPPED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>schemataLoading</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>SCHEMATA_LOADING</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>SCHEMATA_LOADING</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>schemataLoaded</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>SCHEMATA_LOADED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>SCHEMATA_LOADED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>versionAnnounced</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>VERSION_ANOUNCED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>VERSION_ANOUNCED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>schemataCleared</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>SCHEMATA_CLEARED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>SCHEMATA_CLEARED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>tableCreating</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>TABLE_CREATING</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>TABLE_CREATING</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>tableCreated</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>TABLE_CREATED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>TABLE_CREATED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>tableAltering</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>TABLE_ALTERING</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>TABLE_ALTERING</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>tableAltered</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>TABLE_ALTERED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>TABLE_ALTERED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>tableDropping</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>TABLE_DROPPING</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>TABLE_DROPPING</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>tableDropped</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>TABLE_DROPPED</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>service</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SchemaEvent</name><argument_list>(<argument><expr><name><name>SchemaEventType</name><operator>.</operator><name>TABLE_DROPPED</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isEnabled</name><parameter_list>(<parameter><decl><type><name>SchemaEventType</name></type> <name>type</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>service</name><operator>.</operator><name>isEnabled</name></name><argument_list>(<argument><expr><name><name>SchemaEvent</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
