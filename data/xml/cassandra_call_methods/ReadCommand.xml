<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/ReadCommand.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>BiFunction</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>LongPredicate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Function</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>filter</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessageFlag</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>transform</name><operator>.</operator><name>RTBoundCloser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>transform</name><operator>.</operator><name>RTBoundValidator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>transform</name><operator>.</operator><name>RTBoundValidator</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>transform</name><operator>.</operator><name>StoppingTransformation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>transform</name><operator>.</operator><name>Transformation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>UnknownIndexException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexNotAvailableException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replica</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>TableMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ActiveRepairService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ClientWarn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>any</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>filter</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonotonicClock</name><operator>.</operator><name>approxTime</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>UnfilteredPartitionIterators</name><operator>.</operator><name>MergeListener</name><operator>.</operator><name>NOOP</name></name>;</import>

<comment type="block" format="javadoc">/**
 * General interface for storage-engine read commands (common to both range and
 * single partition commands).
 * &lt;p&gt;
 * This contains all the informations needed to do a local read.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ReadCommand</name> <super_list><extends>extends <super><name>AbstractReadQuery</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TEST_ITERATION_DELAY_MILLIS</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.test.read_iteration_delay_ms"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ReadCommand</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>IVersionedSerializer</name><argument_list type="generic">&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></type> <name>serializer</name> <init>= <expr><operator>new</operator> <call><name>Serializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isDigestQuery</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>acceptsTransient</name></decl>;</decl_stmt>
    <comment type="line">// if a digest query, the version for which the digest is expected. Ignored if not a digest.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>digestVersion</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <type><specifier>private</specifier> <specifier>final</specifier> <name>IndexMetadata</name></type> <name>index</name></decl>;</decl_stmt>

    <class><specifier>protected</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>SelectionDeserializer</name>
    <block>{
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ReadCommand</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>,
                                                <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>,
                                                <parameter><decl><type><name>boolean</name></type> <name>isDigest</name></decl></parameter>,
                                                <parameter><decl><type><name>int</name></type> <name>digestVersion</name></decl></parameter>,
                                                <parameter><decl><type><name>boolean</name></type> <name>acceptsTransient</name></decl></parameter>,
                                                <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>,
                                                <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>,
                                                <parameter><decl><type><name>ColumnFilter</name></type> <name>columnFilter</name></decl></parameter>,
                                                <parameter><decl><type><name>RowFilter</name></type> <name>rowFilter</name></decl></parameter>,
                                                <parameter><decl><type><name>DataLimits</name></type> <name>limits</name></decl></parameter>,
                                                <parameter><decl><type><name>IndexMetadata</name></type> <name>index</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
    }</block></class>

    <enum><specifier>protected</specifier> enum <name>Kind</name>
    <block>{
        <decl><name>SINGLE_PARTITION</name> <argument_list>(<argument><expr><name><name>SinglePartitionReadCommand</name><operator>.</operator><name>selectionDeserializer</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>PARTITION_RANGE</name>  <argument_list>(<argument><expr><name><name>PartitionRangeReadCommand</name><operator>.</operator><name>selectionDeserializer</name></name></expr></argument>)</argument_list></decl>;

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SelectionDeserializer</name></type> <name>selectionDeserializer</name></decl>;</decl_stmt>

        <constructor><name>Kind</name><parameter_list>(<parameter><decl><type><name>SelectionDeserializer</name></type> <name>selectionDeserializer</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>selectionDeserializer</name></name> <operator>=</operator> <name>selectionDeserializer</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></enum>

    <constructor><specifier>protected</specifier> <name>ReadCommand</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>kind</name></decl></parameter>,
                          <parameter><decl><type><name>boolean</name></type> <name>isDigestQuery</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>digestVersion</name></decl></parameter>,
                          <parameter><decl><type><name>boolean</name></type> <name>acceptsTransient</name></decl></parameter>,
                          <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>,
                          <parameter><decl><type><name>ColumnFilter</name></type> <name>columnFilter</name></decl></parameter>,
                          <parameter><decl><type><name>RowFilter</name></type> <name>rowFilter</name></decl></parameter>,
                          <parameter><decl><type><name>DataLimits</name></type> <name>limits</name></decl></parameter>,
                          <parameter><decl><type><name>IndexMetadata</name></type> <name>index</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>, <argument><expr><name>columnFilter</name></expr></argument>, <argument><expr><name>rowFilter</name></expr></argument>, <argument><expr><name>limits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>acceptsTransient</name> <operator>&amp;&amp;</operator> <name>isDigestQuery</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Attempted to issue a digest response to transient replica"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDigestQuery</name></name> <operator>=</operator> <name>isDigestQuery</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>digestVersion</name></name> <operator>=</operator> <name>digestVersion</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>acceptsTransient</name></name> <operator>=</operator> <name>acceptsTransient</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>serializeSelection</name><parameter_list>(<parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>selectionSerializedSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isLimitedToOnePartition</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isRangeRequest</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Creates a new &lt;code&gt;ReadCommand&lt;/code&gt; instance with new limits.
     *
     * @param newLimits the new limits
     * @return a new &lt;code&gt;ReadCommand&lt;/code&gt; with the updated limits
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ReadCommand</name></type> <name>withUpdatedLimit</name><parameter_list>(<parameter><decl><type><name>DataLimits</name></type> <name>newLimits</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * The configured timeout for this command.
     *
     * @return the configured timeout for this command.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>getTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Whether this query is a digest one or not.
     *
     * @return Whether this query is a digest query.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDigestQuery</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>isDigestQuery</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * If the query is a digest one, the requested digest version.
     *
     * @return the requested digest version if the query is a digest. Otherwise, this can return
     * anything.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>digestVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>digestVersion</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the digest version, for when digest for that command is requested.
     * &lt;p&gt;
     * Note that we allow setting this independently of setting the command as a digest query as
     * this allows us to use the command as a carrier of the digest version even if we only call
     * setIsDigestQuery on some copy of it.
     *
     * @param digestVersion the version for the digest is this command is used for digest query..
     * @return this read command.
     */</comment>
    <function><type><specifier>public</specifier> <name>ReadCommand</name></type> <name>setDigestVersion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>digestVersion</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>digestVersion</name></name> <operator>=</operator> <name>digestVersion</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return Whether this query expects only a transient data response, or a full response
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>acceptsTransient</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>acceptsTransient</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Index (metadata) chosen for this query. Can be null.
     *
     * @return index (metadata) chosen for this query
     */</comment>
    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>IndexMetadata</name></type> <name>indexMetadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>index</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The clustering index filter this command to use for the provided key.
     * &lt;p&gt;
     * Note that that method should only be called on a key actually queried by this command
     * and in practice, this will almost always return the same filter, but for the sake of
     * paging, the filter on the first key of a range command might be slightly different.
     *
     * @param key a partition key queried by this command.
     *
     * @return the {@code ClusteringIndexFilter} to use for the partition of key {@code key}.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ClusteringIndexFilter</name></type> <name>clusteringIndexFilter</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a copy of this command.
     *
     * @return a copy of this command.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ReadCommand</name></type> <name>copy</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a copy of this command with acceptsTransient set to true.
     */</comment>
    <function><type><specifier>public</specifier> <name>ReadCommand</name></type> <name>copyAsTransientQuery</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><literal type="string">"Can't make a transient request on a full replica: "</literal> <operator>+</operator> <name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>copyAsTransientQuery</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a copy of this command with acceptsTransient set to true.
     */</comment>
    <function><type><specifier>public</specifier> <name>ReadCommand</name></type> <name>copyAsTransientQuery</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>any</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>, <argument><expr><name>Replica</name><operator>::</operator><name>isFull</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Can't make a transient request on full replicas: "</literal> <operator>+</operator> <call><name><name>Iterables</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name>filter</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>, <argument><expr><name>Replica</name><operator>::</operator><name>isFull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><call><name>copyAsTransientQuery</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>ReadCommand</name></type> <name>copyAsTransientQuery</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a copy of this command with isDigestQuery set to true.
     */</comment>
    <function><type><specifier>public</specifier> <name>ReadCommand</name></type> <name>copyAsDigestQuery</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><literal type="string">"Can't make a digest request on a transient replica "</literal> <operator>+</operator> <name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>copyAsDigestQuery</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a copy of this command with isDigestQuery set to true.
     */</comment>
    <function><type><specifier>public</specifier> <name>ReadCommand</name></type> <name>copyAsDigestQuery</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>any</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>, <argument><expr><name>Replica</name><operator>::</operator><name>isTransient</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Can't make a digest request on a transient replica "</literal> <operator>+</operator> <call><name><name>Iterables</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name>filter</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>, <argument><expr><name>Replica</name><operator>::</operator><name>isTransient</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <return>return <expr><call><name>copyAsDigestQuery</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>ReadCommand</name></type> <name>copyAsDigestQuery</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>UnfilteredPartitionIterator</name></type> <name>queryStorage</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>, <parameter><decl><type><name>ReadExecutionController</name></type> <name>executionController</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Whether the underlying {@code ClusteringIndexFilter} is reversed or not.
     *
     * @return whether the underlying {@code ClusteringIndexFilter} is reversed or not.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isReversed</name><parameter_list>()</parameter_list>;</function_decl>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>ReadResponse</name></type> <name>createResponse</name><parameter_list>(<parameter><decl><type><name>UnfilteredPartitionIterator</name></type> <name>iterator</name></decl></parameter>, <parameter><decl><type><name>RepairedDataInfo</name></type> <name>rdi</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// validate that the sequence of RT markers is correct: open is followed by close, deletion times for both</comment>
        <comment type="line">// ends equal, and there are no dangling RT bound in any partition.</comment>
        <expr_stmt><expr><name>iterator</name> <operator>=</operator> <call><name><name>RTBoundValidator</name><operator>.</operator><name>validate</name></name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name><name>Stage</name><operator>.</operator><name>PROCESSED</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><ternary><condition><expr><call><name>isDigestQuery</name><argument_list>()</argument_list></call></expr>
               ?</condition><then> <expr><call><name><name>ReadResponse</name><operator>.</operator><name>createDigestResponse</name></name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>
               </then><else>: <expr><call><name><name>ReadResponse</name><operator>.</operator><name>createDataResponse</name></name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>rdi</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>long</name></type> <name>indexSerializedSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><literal type="null">null</literal> <operator>!=</operator> <name>index</name></expr>
             ?</condition><then> <expr><call><name><name>IndexMetadata</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>
             </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Index</name></type> <name>getIndex</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><literal type="null">null</literal> <operator>!=</operator> <name>index</name></expr>
             ?</condition><then> <expr><call><name><name>cfs</name><operator>.</operator><name>indexManager</name><operator>.</operator><name>getIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>
             </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>IndexMetadata</name></type> <name>findIndex</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>RowFilter</name></type> <name>rowFilter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>indexes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>rowFilter</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>openAndGetStore</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>indexManager</name><operator>.</operator><name>getBestIndexFor</name></name><argument_list>(<argument><expr><name>rowFilter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><ternary><condition><expr><literal type="null">null</literal> <operator>!=</operator> <name>index</name></expr>
             ?</condition><then> <expr><call><name><name>index</name><operator>.</operator><name>getIndexMetadata</name></name><argument_list>()</argument_list></call></expr>
             </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * If the index manager for the CFS determines that there's an applicable
     * 2i that can be used to execute this command, call its (optional)
     * validation method to check that nothing in this command's parameters
     * violates the implementation specific validation rules.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>maybeValidateIndex</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>IndexRegistry</name><operator>.</operator><name>obtain</name></name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>validate</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Executes this command on the local host.
     *
     * @param executionController the execution controller spanning this command
     *
     * @return an iterator over the result of executing this command locally.
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation> <comment type="line">// The result iterator is closed upon exceptions (we know it's fine to potentially not close the intermediary</comment>
                                  <comment type="line">// iterators created inside the try as long as we do close the original resultIterator), or by closing the result.</comment>
    <type><specifier>public</specifier> <name>UnfilteredPartitionIterator</name></type> <name>executeLocally</name><parameter_list>(<parameter><decl><type><name>ReadExecutionController</name></type> <name>executionController</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>startTimeNanos</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>openAndGetStore</name></name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Index</name><operator>.</operator><name>Searcher</name></name></type> <name>searcher</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>cfs</name><operator>.</operator><name>indexManager</name><operator>.</operator><name>isIndexQueryable</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IndexNotAvailableException</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>searcher</name> <operator>=</operator> <call><name><name>index</name><operator>.</operator><name>searcherFor</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Executing read on {}.{} using index {}"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name><name>index</name><operator>.</operator><name>getIndexMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>UnfilteredPartitionIterator</name></type> <name>iterator</name> <init>= <expr><ternary><condition><expr><operator>(</operator><literal type="null">null</literal> <operator>==</operator> <name>searcher</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>queryStorage</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>executionController</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>searcher</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>executionController</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>iterator</name> <operator>=</operator> <call><name><name>RTBoundValidator</name><operator>.</operator><name>validate</name></name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name><name>Stage</name><operator>.</operator><name>MERGED</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>iterator</name> <operator>=</operator> <call><name>withStateTracking</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>iterator</name> <operator>=</operator> <call><name><name>RTBoundValidator</name><operator>.</operator><name>validate</name></name><argument_list>(<argument><expr><call><name>withoutPurgeableTombstones</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>executionController</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Stage</name><operator>.</operator><name>PURGED</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>iterator</name> <operator>=</operator> <call><name>withMetricsRecording</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>metric</name></name></expr></argument>, <argument><expr><name>startTimeNanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If we've used a 2ndary index, we know the result already satisfy the primary expression used, so</comment>
            <comment type="line">// no point in checking it again.</comment>
            <decl_stmt><decl><type><name>RowFilter</name></type> <name>filter</name> <init>= <expr><ternary><condition><expr><operator>(</operator><literal type="null">null</literal> <operator>==</operator> <name>searcher</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>rowFilter</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>index</name><operator>.</operator><name>getPostIndexQueryFilter</name></name><argument_list>(<argument><expr><call><name>rowFilter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <comment type="block">/*
             * TODO: We'll currently do filtering by the rowFilter here because it's convenient. However,
             * we'll probably want to optimize by pushing it down the layer (like for dropped columns) as it
             * would be more efficient (the sooner we discard stuff we know we don't care, the less useless
             * processing we do on it).
             */</comment>
            <expr_stmt><expr><name>iterator</name> <operator>=</operator> <call><name><name>filter</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// apply the limits/row counter; this transformation is stopping and would close the iterator as soon</comment>
            <comment type="line">// as the count is observed; if that happens in the middle of an open RT, its end bound will not be included.</comment>
            <comment type="line">// If tracking repaired data, the counter is needed for overreading repaired data, otherwise we can</comment>
            <comment type="line">// optimise the case where this.limit = DataLimits.NONE which skips an unnecessary transform</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>executionController</name><operator>.</operator><name>isTrackingRepairedStatus</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>DataLimits</name><operator>.</operator><name>Counter</name></name></type> <name>limit</name> <init>=
                    <expr><call><name>limits</name><argument_list>()</argument_list></call><operator>.</operator><call><name>newCounter</name><argument_list>(<argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name>selectsFullPartition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>enforceStrictLiveness</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>iterator</name> <operator>=</operator> <call><name><name>limit</name><operator>.</operator><name>applyTo</name></name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// ensure that a consistent amount of repaired data is read on each replica. This causes silent</comment>
                <comment type="line">// overreading from the repaired data set, up to limits(). The extra data is not visible to</comment>
                <comment type="line">// the caller, only iterated to produce the repaired data digest.</comment>
                <expr_stmt><expr><name>iterator</name> <operator>=</operator> <call><name><name>executionController</name><operator>.</operator><name>getRepairedDataInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>extend</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>iterator</name> <operator>=</operator> <call><name>limits</name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>selectsFullPartition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// because of the above, we need to append an aritifical end bound if the source iterator was stopped short by a counter.</comment>
            <return>return <expr><call><name><name>RTBoundCloser</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> | <type><name>Error</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>iterator</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>recordLatency</name><parameter_list>(<parameter><decl><type><name>TableMetrics</name></type> <name>metric</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>latencyNanos</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>ReadExecutionController</name></type> <name>executionController</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>trackRepairedStatus</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ReadExecutionController</name><operator>.</operator><name>forCommand</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>trackRepairedStatus</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ReadExecutionController</name></type> <name>executionController</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ReadExecutionController</name><operator>.</operator><name>forCommand</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wraps the provided iterator so that metrics on what is scanned by the command are recorded.
     * This also log warning/trow TombstoneOverwhelmingException if appropriate.
     */</comment>
    <function><type><specifier>private</specifier> <name>UnfilteredPartitionIterator</name></type> <name>withMetricsRecording</name><parameter_list>(<parameter><decl><type><name>UnfilteredPartitionIterator</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>TableMetrics</name></type> <name>metric</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>startTimeNanos</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <class>class <name>MetricRecording</name> <super_list><extends>extends <super><name><name>Transformation</name><argument_list type="generic">&lt;<argument><name>UnfilteredRowIterator</name></argument>&gt;</argument_list></name></super></extends></super_list>
        <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>failureThreshold</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getTombstoneFailureThreshold</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>warningThreshold</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getTombstoneWarnThreshold</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>respectTombstoneThresholds</name> <init>= <expr><operator>!</operator><call><name><name>SchemaConstants</name><operator>.</operator><name>isLocalSystemKeyspace</name></name><argument_list>(<argument><expr><call><name><name>ReadCommand</name><operator>.</operator><name>this</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>enforceStrictLiveness</name> <init>= <expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>enforceStrictLiveness</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>liveRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>tombstones</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>private</specifier> <name>DecoratedKey</name></type> <name>currentKey</name></decl>;</decl_stmt>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>UnfilteredRowIterator</name></type> <name>applyToPartition</name><parameter_list>(<parameter><decl><type><name>UnfilteredRowIterator</name></type> <name>iter</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>currentKey</name> <operator>=</operator> <call><name><name>iter</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>Transformation</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>Row</name></type> <name>applyToStatic</name><parameter_list>(<parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name>applyToRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>Row</name></type> <name>applyToRow</name><parameter_list>(<parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>hasTombstones</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>cell</name> <range>: <expr><call><name><name>row</name><operator>.</operator><name>cells</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>cell</name><operator>.</operator><name>isLive</name></name><argument_list>(<argument><expr><call><name><name>ReadCommand</name><operator>.</operator><name>this</name><operator>.</operator><name>nowInSec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>countTombstone</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>clustering</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>hasTombstones</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> <comment type="line">// allows to avoid counting an extra tombstone if the whole row expired</comment>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <if_stmt><if>if <condition>(<expr><call><name><name>row</name><operator>.</operator><name>hasLiveData</name></name><argument_list>(<argument><expr><call><name><name>ReadCommand</name><operator>.</operator><name>this</name><operator>.</operator><name>nowInSec</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>enforceStrictLiveness</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>++</operator><name>liveRows</name></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>row</name><operator>.</operator><name>primaryKeyLivenessInfo</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isLive</name><argument_list>(<argument><expr><call><name><name>ReadCommand</name><operator>.</operator><name>this</name><operator>.</operator><name>nowInSec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>&amp;&amp;</operator> <call><name><name>row</name><operator>.</operator><name>hasDeletion</name></name><argument_list>(<argument><expr><call><name><name>ReadCommand</name><operator>.</operator><name>this</name><operator>.</operator><name>nowInSec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>&amp;&amp;</operator> <operator>!</operator><name>hasTombstones</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// We're counting primary key deletions only here.</comment>
                    <expr_stmt><expr><call><name>countTombstone</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>clustering</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <return>return <expr><name>row</name></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>RangeTombstoneMarker</name></type> <name>applyToMarker</name><parameter_list>(<parameter><decl><type><name>RangeTombstoneMarker</name></type> <name>marker</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name>countTombstone</name><argument_list>(<argument><expr><call><name><name>marker</name><operator>.</operator><name>clustering</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>marker</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>void</name></type> <name>countTombstone</name><parameter_list>(<parameter><decl><type><name><name>ClusteringPrefix</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clustering</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><operator>++</operator><name>tombstones</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>tombstones</name> <operator>&gt;</operator> <name>failureThreshold</name> <operator>&amp;&amp;</operator> <name>respectTombstoneThresholds</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>ReadCommand</name><operator>.</operator><name>this</name><operator>.</operator><name>toCQLString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Scanned over {} tombstones for query {}; query aborted (see tombstone_failure_threshold)"</literal></expr></argument>, <argument><expr><name>failureThreshold</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>metric</name><operator>.</operator><name>tombstoneFailures</name><operator>.</operator><name>inc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><operator>new</operator> <call><name>TombstoneOverwhelmingException</name><argument_list>(<argument><expr><name>tombstones</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><call><name><name>ReadCommand</name><operator>.</operator><name>this</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>currentKey</name></expr></argument>, <argument><expr><name>clustering</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onClose</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name>recordLatency</name><argument_list>(<argument><expr><name>metric</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTimeNanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>metric</name><operator>.</operator><name>tombstoneScannedHistogram</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>tombstones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>metric</name><operator>.</operator><name>liveScannedHistogram</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>liveRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>boolean</name></type> <name>warnTombstones</name> <init>= <expr><name>tombstones</name> <operator>&gt;</operator> <name>warningThreshold</name> <operator>&amp;&amp;</operator> <name>respectTombstoneThresholds</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>warnTombstones</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(
                            <argument><expr><literal type="string">"Read %d live rows and %d tombstone cells for query %1.512s; token %s (see tombstone_warn_threshold)"</literal></expr></argument>,
                            <argument><expr><name>liveRows</name></expr></argument>, <argument><expr><name>tombstones</name></expr></argument>, <argument><expr><call><name><name>ReadCommand</name><operator>.</operator><name>this</name><operator>.</operator><name>toCQLString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>currentKey</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ClientWarn</name><operator>.</operator><name>instance</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>tombstones</name> <operator>&lt;</operator> <name>failureThreshold</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>metric</name><operator>.</operator><name>tombstoneWarnings</name><operator>.</operator><name>inc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Read {} live rows and {} tombstone cells{}"</literal></expr></argument>,
                        <argument><expr><name>liveRows</name></expr></argument>, <argument><expr><name>tombstones</name></expr></argument>,
                        <argument><expr><operator>(</operator><ternary><condition><expr><name>warnTombstones</name></expr> ?</condition><then> <expr><literal type="string">" (see tombstone_warn_threshold)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class>

        <return>return <expr><call><name><name>Transformation</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MetricRecording</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>protected</specifier> class <name>CheckForAbort</name> <super_list><extends>extends <super><name><name>StoppingTransformation</name><argument_list type="generic">&lt;<argument><name>UnfilteredRowIterator</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>lastChecked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier>protected</specifier> <name>UnfilteredRowIterator</name></type> <name>applyToPartition</name><parameter_list>(<parameter><decl><type><name>UnfilteredRowIterator</name></type> <name>partition</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>maybeAbort</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>partition</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name><name>Transformation</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>partition</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>protected</specifier> <name>Row</name></type> <name>applyToRow</name><parameter_list>(<parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>TEST_ITERATION_DELAY_MILLIS</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>maybeDelayForTesting</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return <expr><ternary><condition><expr><call><name>maybeAbort</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>row</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>maybeAbort</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <comment type="block" format="javadoc">/**
             * TODO: this is not a great way to abort early; why not expressly limit checks to 10ms intervals?
             * The value returned by approxTime.now() is updated only every
             * {@link org.apache.cassandra.utils.MonotonicClock.SampledClock.CHECK_INTERVAL_MS}, by default 2 millis. Since MonitorableImpl
             * relies on approxTime, we don't need to check unless the approximate time has elapsed.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>lastChecked</name> <operator>==</operator> <call><name><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>lastChecked</name> <operator>=</operator> <call><name><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>isAborted</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>maybeDelayForTesting</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>keyspace</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"system"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>FBUtilities</name><operator>.</operator><name>sleepQuietly</name></name><argument_list>(<argument><expr><name>TEST_ITERATION_DELAY_MILLIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>protected</specifier> <name>UnfilteredPartitionIterator</name></type> <name>withStateTracking</name><parameter_list>(<parameter><decl><type><name>UnfilteredPartitionIterator</name></type> <name>iter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Transformation</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CheckForAbort</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a message for this command.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></type> <name>createMessage</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>trackRepairedData</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>trackRepairedData</name></expr>
             ?</condition><then> <expr><call><name><name>Message</name><operator>.</operator><name>outWithFlags</name></name><argument_list>(<argument><expr><call><name>verb</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>MessageFlag</name><operator>.</operator><name>CALL_BACK_ON_FAILURE</name></name></expr></argument>, <argument><expr><name><name>MessageFlag</name><operator>.</operator><name>TRACK_REPAIRED_DATA</name></name></expr></argument>)</argument_list></call></expr>
             </then><else>: <expr><call><name><name>Message</name><operator>.</operator><name>outWithFlag</name></name> <argument_list>(<argument><expr><call><name>verb</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>MessageFlag</name><operator>.</operator><name>CALL_BACK_ON_FAILURE</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Verb</name></type> <name>verb</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>appendCQLWhereClause</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Skip purgeable tombstones. We do this because it's safe to do (post-merge of the memtable and sstable at least), it</comment>
    <comment type="line">// can save us some bandwith, and avoid making us throw a TombstoneOverwhelmingException for purgeable tombstones (which</comment>
    <comment type="line">// are to some extend an artefact of compaction lagging behind and hence counting them is somewhat unintuitive).</comment>
    <function><type><specifier>protected</specifier> <name>UnfilteredPartitionIterator</name></type> <name>withoutPurgeableTombstones</name><parameter_list>(<parameter><decl><type><name>UnfilteredPartitionIterator</name></type> <name>iterator</name></decl></parameter>, 
                                                                     <parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>,
                                                                     <parameter><decl><type><name>ReadExecutionController</name></type> <name>controller</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <class>class <name>WithoutPurgeableTombstones</name> <super_list><extends>extends <super><name>PurgeFunction</name></super></extends></super_list>
        <block>{
            <constructor><specifier>public</specifier> <name>WithoutPurgeableTombstones</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>gcBefore</name></name><argument_list>(<argument><expr><call><name>nowInSec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>controller</name><operator>.</operator><name>oldestUnrepairedTombstone</name></name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name>cfs</name><operator>.</operator><name>getCompactionStrategyManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>onlyPurgeRepairedTombstones</name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name>iterator</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>enforceStrictLiveness</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>protected</specifier> <name>LongPredicate</name></type> <name>getPurgeEvaluator</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>time</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="boolean">true</literal></expr></block_content></block></lambda></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
        <return>return <expr><call><name><name>Transformation</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>WithoutPurgeableTombstones</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Recreate the CQL string corresponding to this query.
     * &lt;p&gt;
     * Note that in general the returned string will not be exactly the original user string, first
     * because there isn't always a single syntax for a given query,  but also because we don't have
     * all the information needed (we know the non-PK columns queried but not the PK ones as internally
     * we query them all). So this shouldn't be relied too strongly, but this should be good enough for
     * debugging purpose which is what this is for.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toCQLString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"SELECT "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>columnFilter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toCQLString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" FROM "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendCQLWhereClause</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>limits</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>DataLimits</name><operator>.</operator><name>NONE</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>limits</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Monitorable interface</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>name</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>toCQLString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation> <comment type="line">// resultant iterators are closed by their callers</comment>
    <type><name><name>InputCollector</name><argument_list type="generic">&lt;<argument><name>UnfilteredRowIterator</name></argument>&gt;</argument_list></name></type> <name>iteratorsForPartition</name><parameter_list>(<parameter><decl><type><name><name>ColumnFamilyStore</name><operator>.</operator><name>ViewFragment</name></name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>ReadExecutionController</name></type> <name>controller</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>BiFunction</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>UnfilteredRowIterator</name></argument>&gt;</argument_list></name></argument>, <argument><name>RepairedDataInfo</name></argument>, <argument><name>UnfilteredRowIterator</name></argument>&gt;</argument_list></name></type> <name>merge</name> <init>=
            <expr><lambda><parameter_list>(<parameter><decl><name>unfilteredRowIterators</name></decl></parameter>, <parameter><decl><name>repairedDataInfo</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
                <decl_stmt><decl><type><name>UnfilteredRowIterator</name></type> <name>repaired</name> <init>= <expr><call><name><name>UnfilteredRowIterators</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>unfilteredRowIterators</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>repairedDataInfo</name><operator>.</operator><name>withRepairedDataInfo</name></name><argument_list>(<argument><expr><name>repaired</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

        <comment type="line">// For single partition reads, after reading up to the command's DataLimit nothing extra is required.</comment>
        <comment type="line">// The merged &amp; repaired row iterator will be consumed until it's exhausted or the RepairedDataInfo's</comment>
        <comment type="line">// internal counter is satisfied</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Function</name><argument_list type="generic">&lt;<argument><name>UnfilteredRowIterator</name></argument>, <argument><name>UnfilteredPartitionIterator</name></argument>&gt;</argument_list></name></type> <name>postLimitPartitions</name> <init>=
            <expr><lambda><parameter_list>(<parameter><decl><name>rows</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>EmptyIterators</name><operator>.</operator><name>unfilteredPartition</name></name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name><name>InputCollector</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>controller</name></expr></argument>, <argument><expr><name>merge</name></expr></argument>, <argument><expr><name>postLimitPartitions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation> <comment type="line">// resultant iterators are closed by their callers</comment>
    <type><name><name>InputCollector</name><argument_list type="generic">&lt;<argument><name>UnfilteredPartitionIterator</name></argument>&gt;</argument_list></name></type> <name>iteratorsForRange</name><parameter_list>(<parameter><decl><type><name><name>ColumnFamilyStore</name><operator>.</operator><name>ViewFragment</name></name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>ReadExecutionController</name></type> <name>controller</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>BiFunction</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>UnfilteredPartitionIterator</name></argument>&gt;</argument_list></name></argument>, <argument><name>RepairedDataInfo</name></argument>, <argument><name>UnfilteredPartitionIterator</name></argument>&gt;</argument_list></name></type> <name>merge</name> <init>=
            <expr><lambda><parameter_list>(<parameter><decl><name>unfilteredPartitionIterators</name></decl></parameter>, <parameter><decl><name>repairedDataInfo</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
                <decl_stmt><decl><type><name>UnfilteredPartitionIterator</name></type> <name>repaired</name> <init>= <expr><call><name><name>UnfilteredPartitionIterators</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>unfilteredPartitionIterators</name></expr></argument>,
                                                                                          <argument><expr><name>NOOP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>repairedDataInfo</name><operator>.</operator><name>withRepairedDataInfo</name></name><argument_list>(<argument><expr><name>repaired</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

        <comment type="line">// Uses identity function to provide additional partitions to be consumed after the command's</comment>
        <comment type="line">// DataLimits are satisfied. The input to the function will be the iterator of merged, repaired partitions</comment>
        <comment type="line">// which we'll keep reading until the RepairedDataInfo's internal counter is satisfied.</comment>
        <return>return <expr><operator>new</operator> <call><name><name>InputCollector</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>controller</name></expr></argument>, <argument><expr><name>merge</name></expr></argument>, <argument><expr><call><name><name>Function</name><operator>.</operator><name>identity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handles the collation of unfiltered row or partition iterators that comprise the
     * input for a query. Separates them according to repaired status and of repaired
     * status is being tracked, handles the merge and wrapping in a digest generator of
     * the repaired iterators.
     *
     * Intentionally not AutoCloseable so we don't mistakenly use this in ARM blocks
     * as this prematurely closes the underlying iterators
     */</comment>
    <class><specifier>static</specifier> class <name><name>InputCollector</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name>AutoCloseable</name></extends></parameter>&gt;</parameter_list></name>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>RepairedDataInfo</name></type> <name>repairedDataInfo</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isTrackingRepairedStatus</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>repairedSSTables</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>BiFunction</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>, <argument><name>RepairedDataInfo</name></argument>, <argument><name>T</name></argument>&gt;</argument_list></name></type> <name>repairedMerger</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>UnfilteredPartitionIterator</name></argument>&gt;</argument_list></name></type> <name>postLimitAdditionalPartitions</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>repairedIters</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>unrepairedIters</name></decl>;</decl_stmt>

        <constructor><name>InputCollector</name><parameter_list>(<parameter><decl><type><name><name>ColumnFamilyStore</name><operator>.</operator><name>ViewFragment</name></name></type> <name>view</name></decl></parameter>,
                       <parameter><decl><type><name>ReadExecutionController</name></type> <name>controller</name></decl></parameter>,
                       <parameter><decl><type><name><name>BiFunction</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>, <argument><name>RepairedDataInfo</name></argument>, <argument><name>T</name></argument>&gt;</argument_list></name></type> <name>repairedMerger</name></decl></parameter>,
                       <parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>UnfilteredPartitionIterator</name></argument>&gt;</argument_list></name></type> <name>postLimitAdditionalPartitions</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repairedDataInfo</name></name> <operator>=</operator> <call><name><name>controller</name><operator>.</operator><name>getRepairedDataInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isTrackingRepairedStatus</name></name> <operator>=</operator> <call><name><name>controller</name><operator>.</operator><name>isTrackingRepairedStatus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>isTrackingRepairedStatus</name></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name><name>view</name><operator>.</operator><name>sstables</name></name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>considerRepairedForTracking</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>repairedSSTables</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>repairedSSTables</name> <operator>=</operator> <call><name><name>Sets</name><operator>.</operator><name>newHashSetWithExpectedSize</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>sstables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>repairedSSTables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>repairedSSTables</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>repairedIters</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>unrepairedIters</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>sstables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>repairedIters</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>repairedSSTables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// when we're done collating, we'll merge the repaired iters and add the</comment>
                <comment type="line">// result to the unrepaired list, so size that list accordingly</comment>
                <expr_stmt><expr><name>unrepairedIters</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>view</name><operator>.</operator><name>sstables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>repairedSSTables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>+</operator> <call><name><name>Iterables</name><operator>.</operator><name>size</name></name><argument_list>(<argument><expr><name><name>view</name><operator>.</operator><name>memtables</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repairedMerger</name></name> <operator>=</operator> <name>repairedMerger</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>postLimitAdditionalPartitions</name></name> <operator>=</operator> <name>postLimitAdditionalPartitions</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>void</name></type> <name>addMemtableIterator</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>iter</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>unrepairedIters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>addSSTableIterator</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>iter</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>repairedSSTables</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>repairedSSTables</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>repairedIters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>unrepairedIters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></function>

        <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation> <comment type="line">// the returned iterators are closed by the caller</comment>
        <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>finalizeIterators</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldestUnrepairedTombstone</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>repairedIters</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>unrepairedIters</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="line">// merge the repaired data before returning, wrapping in a digest generator</comment>
            <expr_stmt><expr><call><name><name>repairedDataInfo</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>, <argument><expr><name>oldestUnrepairedTombstone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>T</name></type> <name>repairedIter</name> <init>= <expr><call><name><name>repairedMerger</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>repairedIters</name></expr></argument>, <argument><expr><name>repairedDataInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>repairedDataInfo</name><operator>.</operator><name>finalize</name></name><argument_list>(<argument><expr><call><name><name>postLimitAdditionalPartitions</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>repairedIter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>unrepairedIters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>repairedIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>unrepairedIters</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>repairedIters</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>unrepairedIters</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// For tracking purposes we consider data repaired if the sstable is either:</comment>
        <comment type="line">// * marked repaired</comment>
        <comment type="line">// * marked pending, but the local session has been committed. This reduces the window</comment>
        <comment type="line">//   whereby the tracking is affected by compaction backlog causing repaired sstables to</comment>
        <comment type="line">//   remain in the pending state</comment>
        <comment type="line">// If an sstable is involved in a pending repair which is not yet committed, we mark the</comment>
        <comment type="line">// repaired data info inconclusive, as the same data on other replicas may be in a</comment>
        <comment type="line">// slightly different state.</comment>
        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>considerRepairedForTracking</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isTrackingRepairedStatus</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>UUID</name></type> <name>pendingRepair</name> <init>= <expr><call><name><name>sstable</name><operator>.</operator><name>getPendingRepair</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pendingRepair</name> <operator>!=</operator> <name><name>ActiveRepairService</name><operator>.</operator><name>NO_PENDING_REPAIR</name></name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>ActiveRepairService</name><operator>.</operator><name>instance</name><operator>.</operator><name>consistent</name><operator>.</operator><name>local</name><operator>.</operator><name>isSessionFinalized</name></name><argument_list>(<argument><expr><name>pendingRepair</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

                <comment type="line">// In the edge case where compaction is backed up long enough for the session to</comment>
                <comment type="line">// timeout and be purged by LocalSessions::cleanup, consider the sstable unrepaired</comment>
                <comment type="line">// as it will be marked unrepaired when compaction catches up</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ActiveRepairService</name><operator>.</operator><name>instance</name><operator>.</operator><name>consistent</name><operator>.</operator><name>local</name><operator>.</operator><name>sessionExists</name></name><argument_list>(<argument><expr><name>pendingRepair</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name><name>repairedDataInfo</name><operator>.</operator><name>markInconclusive</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name><name>sstable</name><operator>.</operator><name>isRepaired</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>markInconclusive</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>repairedDataInfo</name><operator>.</operator><name>markInconclusive</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>FBUtilities</name><operator>.</operator><name>closeAll</name></name><argument_list>(<argument><expr><name>unrepairedIters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FBUtilities</name><operator>.</operator><name>closeAll</name></name><argument_list>(<argument><expr><name>repairedIters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><annotation>@<name>VisibleForTesting</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> class <name>Serializer</name> <super_list><implements>implements <super><name><name>IVersionedSerializer</name><argument_list type="generic">&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SchemaProvider</name></type> <name>schema</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Serializer</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>Schema</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><annotation>@<name>VisibleForTesting</name></annotation>
        <specifier>public</specifier> <name>Serializer</name><parameter_list>(<parameter><decl><type><name>SchemaProvider</name></type> <name>schema</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <call><name><name>Objects</name><operator>.</operator><name>requireNonNull</name></name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"schema"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>digestFlag</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isDigest</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>isDigest</name></expr> ?</condition><then> <expr><literal type="number">0x01</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isDigest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>acceptsTransient</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>acceptsTransientFlag</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>acceptsTransient</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>acceptsTransient</name></expr> ?</condition><then> <expr><literal type="number">0x08</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// We don't set this flag anymore, but still look if we receive a</comment>
        <comment type="line">// command with it set in case someone is using thrift a mixed 3.0/4.0+</comment>
        <comment type="line">// cluster (which is unsupported). This is also a reminder for not</comment>
        <comment type="line">// re-using this flag until we drop 3.0/3.X compatibility (since it's</comment>
        <comment type="line">// used by these release for thrift and would thus confuse things)</comment>
        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isForThrift</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>indexFlag</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>hasIndex</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>hasIndex</name></expr> ?</condition><then> <expr><literal type="number">0x04</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>kind</name><operator>.</operator><name>ordinal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeByte</name></name><argument_list>(
                    <argument><expr><call><name>digestFlag</name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>isDigestQuery</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>|</operator> <call><name>indexFlag</name><argument_list>(<argument><expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>command</name><operator>.</operator><name>indexMetadata</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>|</operator> <call><name>acceptsTransientFlag</name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>acceptsTransient</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>isDigestQuery</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>digestVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>id</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>nowInSec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ColumnFilter</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>columnFilter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>RowFilter</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>rowFilter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>DataLimits</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>limits</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name><name>command</name><operator>.</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>IndexMetadata</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>command</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>serializeSelection</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ReadCommand</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Kind</name></type> <name>kind</name> <init>= <expr><call><name><name>Kind</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><index>[<expr><call><name><name>in</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr>]</index></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isDigest</name> <init>= <expr><call><name>isDigest</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>acceptsTransient</name> <init>= <expr><call><name>acceptsTransient</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Shouldn't happen or it's a user error (see comment above) but</comment>
            <comment type="line">// better complain loudly than doing the wrong thing.</comment>
            <if_stmt><if>if <condition>(<expr><call><name>isForThrift</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Received a command with the thrift flag set. "</literal>
                                              <operator>+</operator> <literal type="string">"This means thrift is in use in a mixed 3.0/3.X and 4.0+ cluster, "</literal>
                                              <operator>+</operator> <literal type="string">"which is unsupported. Make sure to stop using thrift before "</literal>
                                              <operator>+</operator> <literal type="string">"upgrading to 4.0"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>hasIndex</name> <init>= <expr><call><name>hasIndex</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>digestVersion</name> <init>= <expr><ternary><condition><expr><name>isDigest</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TableMetadata</name></type> <name>metadata</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getExistingTableMetadata</name></name><argument_list>(<argument><expr><call><name><name>TableId</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nowInSec</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ColumnFilter</name></type> <name>columnFilter</name> <init>= <expr><call><name><name>ColumnFilter</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RowFilter</name></type> <name>rowFilter</name> <init>= <expr><call><name><name>RowFilter</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DataLimits</name></type> <name>limits</name> <init>= <expr><call><name><name>DataLimits</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>,  <argument><expr><name><name>metadata</name><operator>.</operator><name>comparator</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>IndexMetadata</name></type> <name>index</name> <init>= <expr><ternary><condition><expr><name>hasIndex</name></expr> ?</condition><then> <expr><call><name>deserializeIndexMetadata</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>kind</name><operator>.</operator><name>selectionDeserializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>isDigest</name></expr></argument>, <argument><expr><name>digestVersion</name></expr></argument>, <argument><expr><name>acceptsTransient</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>, <argument><expr><name>columnFilter</name></expr></argument>, <argument><expr><name>rowFilter</name></expr></argument>, <argument><expr><name>limits</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>IndexMetadata</name></type> <name>deserializeIndexMetadata</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <return>return <expr><call><name><name>IndexMetadata</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownIndexException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Couldn't find a defined index on {}.{} with the id {}. "</literal> <operator>+</operator>
                            <literal type="string">"If an index was just created, this is likely due to the schema not "</literal> <operator>+</operator>
                            <literal type="string">"being fully propagated. Local read will proceed without using the "</literal> <operator>+</operator>
                            <literal type="string">"index. Please wait for schema agreement after index creation."</literal></expr></argument>,
                            <argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>indexId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="number">2</literal> <comment type="line">// kind + flags</comment>
                   <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>command</name><operator>.</operator><name>isDigestQuery</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeofUnsignedVInt</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>digestVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
                   <operator>+</operator> <call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>id</name><operator>.</operator><name>serializedSize</name></name><argument_list>()</argument_list></call>
                   <operator>+</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>nowInSec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                   <operator>+</operator> <call><name><name>ColumnFilter</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>columnFilter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call>
                   <operator>+</operator> <call><name><name>RowFilter</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>rowFilter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call>
                   <operator>+</operator> <call><name><name>DataLimits</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>limits</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>comparator</name></expr></argument>)</argument_list></call>
                   <operator>+</operator> <call><name><name>command</name><operator>.</operator><name>selectionSerializedSize</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call>
                   <operator>+</operator> <call><name><name>command</name><operator>.</operator><name>indexSerializedSize</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
