<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/memory/BufferPools.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>memory</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeoutException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name><operator>.</operator><name>prettyPrintMemory</name></name>;</import>

<class><specifier>public</specifier> class <name>BufferPools</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>BufferPools</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Used by chunk cache to store decompressed data and buffers may be held by chunk cache for arbitrary period.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>FILE_MEMORY_USAGE_THRESHOLD</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getFileCacheSizeInMB</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1024L</literal> <operator>*</operator> <literal type="number">1024L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BufferPool</name></type> <name>CHUNK_CACHE_POOL</name> <init>= <expr><operator>new</operator> <call><name>BufferPool</name><argument_list>(<argument><expr><literal type="string">"chunk-cache"</literal></expr></argument>, <argument><expr><name>FILE_MEMORY_USAGE_THRESHOLD</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Used by client-server or inter-node requests, buffers should be released immediately after use.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>NETWORKING_MEMORY_USAGE_THRESHOLD</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNetworkingCacheSizeInMB</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1024L</literal> <operator>*</operator> <literal type="number">1024L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BufferPool</name></type> <name>NETWORKING_POOL</name> <init>= <expr><operator>new</operator> <call><name>BufferPool</name><argument_list>(<argument><expr><literal type="string">"networking"</literal></expr></argument>, <argument><expr><name>NETWORKING_MEMORY_USAGE_THRESHOLD</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Global buffer pool limit is {} for {} and {} for {}"</literal></expr></argument>,
                    <argument><expr><call><name>prettyPrintMemory</name><argument_list>(<argument><expr><name>FILE_MEMORY_USAGE_THRESHOLD</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>CHUNK_CACHE_POOL</name><operator>.</operator><name>name</name></name></expr></argument>,
                    <argument><expr><call><name>prettyPrintMemory</name><argument_list>(<argument><expr><name>NETWORKING_MEMORY_USAGE_THRESHOLD</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>NETWORKING_POOL</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>CHUNK_CACHE_POOL</name><operator>.</operator><name>metrics</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>register3xAlias</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>
    <comment type="block" format="javadoc">/**
     * Long-lived buffers used for chunk cache and other disk access
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BufferPool</name></type> <name>forChunkCache</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>CHUNK_CACHE_POOL</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Short-lived buffers used for internode messaging or client-server connections.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BufferPool</name></type> <name>forNetworking</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>NETWORKING_POOL</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>shutdownLocalCleaner</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TimeoutException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>CHUNK_CACHE_POOL</name><operator>.</operator><name>shutdownLocalCleaner</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>NETWORKING_POOL</name><operator>.</operator><name>shutdownLocalCleaner</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>
