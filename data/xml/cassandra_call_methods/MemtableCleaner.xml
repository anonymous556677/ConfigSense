<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/memory/MemtableCleaner.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>memory</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CompletableFuture</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The cleaner is used by {@link MemtableCleanerThread} in order to reclaim space from memtables, normally
 * by flushing the largest memtable.
 */</comment>
<interface><specifier>public</specifier> interface <name>MemtableCleaner</name>
<block>{
    <comment type="block" format="javadoc">/**
     * This is a function that schedules a cleaning task, normally flushing of the largest sstable.
     * The future will complete once the operation has completed and it will have a value set to true if
     * the cleaner was able to execute the cleaning operation or if another thread concurrently executed
     * the same clean operation. If no operation was even attempted, for example because no memtable was
     * found, then the value will be false.
     *
     * The future will complete with an error if the cleaning operation encounters an error.
     *
     */</comment>
    <function_decl><type><name><name>CompletableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>clean</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface></unit>
