<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/io/sstable/Descriptor.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOError</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Splitter</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Directories</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableFormat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>Version</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>IMetadataSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>UUIDGen</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Component</name><operator>.</operator><name>separator</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A SSTable is described by the keyspace and column family it contains data
 * for, a generation (where higher generations contain more recent data) and
 * an alphabetic version string.
 *
 * A descriptor can be marked as temporary, which influences generated filenames.
 */</comment>
<class><specifier>public</specifier> class <name>Descriptor</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>LEGACY_TMP_REGEX_STR</name> <init>= <expr><literal type="string">"^((.*)\\-(.*)\\-)?tmp(link)?\\-((?:l|k).)\\-(\\d)*\\-(.*)$"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Pattern</name></type> <name>LEGACY_TMP_REGEX</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><name>LEGACY_TMP_REGEX_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>TMP_EXT</name> <init>= <expr><literal type="string">".tmp"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Splitter</name></type> <name>filenameSplitter</name> <init>= <expr><call><name><name>Splitter</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** canonicalized path to the directory where SSTable resides */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>File</name></type> <name>directory</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** version has the following format: &lt;code&gt;[a-z]+&lt;/code&gt; */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Version</name></type> <name>version</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>ksname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>cfname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>generation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>SSTableFormat</name><operator>.</operator><name>Type</name></name></type> <name>formatType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * A descriptor that assumes CURRENT_VERSION.
     */</comment>
    <constructor><annotation>@<name>VisibleForTesting</name></annotation>
    <specifier>public</specifier> <name>Descriptor</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ksname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cfname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>generation</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>SSTableFormat</name><operator>.</operator><name>Type</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>info</name><operator>.</operator><name>getLatestVersion</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>directory</name></expr></argument>, <argument><expr><name>ksname</name></expr></argument>, <argument><expr><name>cfname</name></expr></argument>, <argument><expr><name>generation</name></expr></argument>, <argument><expr><call><name><name>SSTableFormat</name><operator>.</operator><name>Type</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructor for sstable writers only.
     */</comment>
    <constructor><specifier>public</specifier> <name>Descriptor</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ksname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cfname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>generation</name></decl></parameter>, <parameter><decl><type><name><name>SSTableFormat</name><operator>.</operator><name>Type</name></name></type> <name>formatType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>formatType</name><operator>.</operator><name>info</name><operator>.</operator><name>getLatestVersion</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>directory</name></expr></argument>, <argument><expr><name>ksname</name></expr></argument>, <argument><expr><name>cfname</name></expr></argument>, <argument><expr><name>generation</name></expr></argument>, <argument><expr><name>formatType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><annotation>@<name>VisibleForTesting</name></annotation>
    <specifier>public</specifier> <name>Descriptor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ksname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cfname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>generation</name></decl></parameter>, <parameter><decl><type><name><name>SSTableFormat</name><operator>.</operator><name>Type</name></name></type> <name>formatType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>formatType</name><operator>.</operator><name>info</name><operator>.</operator><name>getVersion</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>directory</name></expr></argument>, <argument><expr><name>ksname</name></expr></argument>, <argument><expr><name>cfname</name></expr></argument>, <argument><expr><name>generation</name></expr></argument>, <argument><expr><name>formatType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Descriptor</name><parameter_list>(<parameter><decl><type><name>Version</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ksname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cfname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>generation</name></decl></parameter>, <parameter><decl><type><name><name>SSTableFormat</name><operator>.</operator><name>Type</name></name></type> <name>formatType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>version</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>directory</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>ksname</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>cfname</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>formatType</name><operator>.</operator><name>info</name><operator>.</operator><name>getLatestVersion</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>version</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</assert>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>directory</name></name> <operator>=</operator> <call><name><name>directory</name><operator>.</operator><name>getCanonicalFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ksname</name></name> <operator>=</operator> <name>ksname</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfname</name></name> <operator>=</operator> <name>cfname</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>generation</name></name> <operator>=</operator> <name>generation</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>formatType</name></name> <operator>=</operator> <name>formatType</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>hashCode</name> <operator>=</operator> <call><name><name>Objects</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>directory</name></name></expr></argument>, <argument><expr><name>generation</name></expr></argument>, <argument><expr><name>ksname</name></expr></argument>, <argument><expr><name>cfname</name></expr></argument>, <argument><expr><name>formatType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>Descriptor</name></type> <name>withGeneration</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newGeneration</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Descriptor</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>directory</name></expr></argument>, <argument><expr><name>ksname</name></expr></argument>, <argument><expr><name>cfname</name></expr></argument>, <argument><expr><name>newGeneration</name></expr></argument>, <argument><expr><name>formatType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Descriptor</name></type> <name>withFormatType</name><parameter_list>(<parameter><decl><type><name><name>SSTableFormat</name><operator>.</operator><name>Type</name></name></type> <name>newType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Descriptor</name><argument_list>(<argument><expr><call><name><name>newType</name><operator>.</operator><name>info</name><operator>.</operator><name>getLatestVersion</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>directory</name></expr></argument>, <argument><expr><name>ksname</name></expr></argument>, <argument><expr><name>cfname</name></expr></argument>, <argument><expr><name>generation</name></expr></argument>, <argument><expr><name>newType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>tmpFilenameFor</name><parameter_list>(<parameter><decl><type><name>Component</name></type> <name>component</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>filenameFor</name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>TMP_EXT</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return a unique temporary file name for given component during entire-sstable-streaming.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>tmpFilenameForStreaming</name><parameter_list>(<parameter><decl><type><name>Component</name></type> <name>component</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Use UUID to handle concurrent streamings on the same sstable.</comment>
        <comment type="line">// TMP_EXT allows temp file to be removed by {@link ColumnFamilyStore#scrubDataDirectories}</comment>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s.%s%s"</literal></expr></argument>, <argument><expr><call><name>filenameFor</name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>UUIDGen</name><operator>.</operator><name>getTimeUUID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TMP_EXT</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>filenameFor</name><parameter_list>(<parameter><decl><type><name>Component</name></type> <name>component</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>baseFilename</name><argument_list>()</argument_list></call> <operator>+</operator> <name>separator</name> <operator>+</operator> <call><name><name>component</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>baseFilename</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buff</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>File</name><operator>.</operator><name>separatorChar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendFileName</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>buff</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>appendFileName</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>buff</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>formatType</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>relativeFilenameFor</name><parameter_list>(<parameter><decl><type><name>Component</name></type> <name>component</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>buff</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Directories</name><operator>.</operator><name>isSecondaryIndexFolder</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>directory</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>File</name><operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>appendFileName</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>component</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>buff</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SSTableFormat</name></type> <name>getFormat</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>formatType</name><operator>.</operator><name>info</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Return any temporary files found in the directory */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>getTemporaryFiles</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>tmpFiles</name> <init>= <expr><call><name><name>directory</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>dir</name></decl></parameter>, <parameter><decl><name>name</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content>
                                              <expr><call><name><name>name</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name><name>Descriptor</name><operator>.</operator><name>TMP_EXT</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>ret</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>tmpFiles</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>tmpFile</name> <range>: <expr><name>tmpFiles</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tmpFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>filename</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".db"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>LEGACY_TMP_REGEX</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse a sstable filename into a Descriptor.
     * &lt;p&gt;
     * This is a shortcut for {@code fromFilename(new File(filename))}.
     *
     * @param filename the filename to a sstable component.
     * @return the descriptor for the parsed file.
     *
     * @throws IllegalArgumentException if the provided {@code file} does point to a valid sstable filename. This could
     * mean either that the filename doesn't look like a sstable file, or that it is for an old and unsupported
     * versions.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Descriptor</name></type> <name>fromFilename</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>fromFilename</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse a sstable filename into a Descriptor.
     * &lt;p&gt;
     * SSTables files are all located within subdirectories of the form {@code &lt;keyspace&gt;/&lt;table&gt;/}. Normal sstables are
     * are directly within that subdirectory structure while 2ndary index, backups and snapshot are each inside an
     * additional subdirectory. The file themselves have the form:
     *   {@code &lt;version&gt;-&lt;gen&gt;-&lt;format&gt;-&lt;component&gt;}.
     * &lt;p&gt;
     * Note that this method will only sucessfully parse sstable files of supported versions.
     *
     * @param file the {@code File} object for the filename to parse.
     * @return the descriptor for the parsed file.
     *
     * @throws IllegalArgumentException if the provided {@code file} does point to a valid sstable filename. This could
     * mean either that the filename doesn't look like a sstable file, or that it is for an old and unsupported
     * versions.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Descriptor</name></type> <name>fromFilename</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>fromFilenameWithComponent</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>.</operator><name>left</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse a sstable filename, extracting both the {@code Descriptor} and {@code Component} part.
     *
     * @param file the {@code File} object for the filename to parse.
     * @return a pair of the descriptor and component corresponding to the provided {@code file}.
     *
     * @throws IllegalArgumentException if the provided {@code file} does point to a valid sstable filename. This could
     * mean either that the filename doesn't look like a sstable file, or that it is for an old and unsupported
     * versions.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Descriptor</name></argument>, <argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>fromFilenameWithComponent</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// We need to extract the keyspace and table names from the parent directories, so make sure we deal with the</comment>
        <comment type="line">// absolute path.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>file</name><operator>.</operator><name>isAbsolute</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>getAbsoluteFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>filenameSplitter</name><operator>.</operator><name>splitToList</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// This is an invalid sstable file for this version. But to provide a more helpful error message, we detect</comment>
            <comment type="line">// old format sstable, which had the format:</comment>
            <comment type="line">//   &lt;keyspace&gt;-&lt;table&gt;-(tmp-)?&lt;version&gt;-&lt;gen&gt;-&lt;component&gt;</comment>
            <comment type="line">// Note that we assume it's an old format sstable if it has the right number of tokens: this is not perfect</comment>
            <comment type="line">// but we're just trying to be helpful, not perfect.</comment>
            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">5</literal> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s is of version %s which is now unsupported and cannot be read."</literal></expr></argument>,
                                                                 <argument><expr><name>name</name></expr></argument>,
                                                                 <argument><expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Invalid sstable file %s: the name doesn't look like a supported sstable file name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>versionString</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Version</name><operator>.</operator><name>validate</name></name><argument_list>(<argument><expr><name>versionString</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>invalidSSTable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"invalid version %s"</literal></expr></argument>, <argument><expr><name>versionString</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>generation</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>generation</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><call><name>invalidSSTable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"the 'generation' part of the name doesn't parse as a number"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name>String</name></type> <name>formatString</name> <init>= <expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SSTableFormat</name><operator>.</operator><name>Type</name></name></type> <name>format</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>format</name> <operator>=</operator> <call><name><name>SSTableFormat</name><operator>.</operator><name>Type</name><operator>.</operator><name>validate</name></name><argument_list>(<argument><expr><name>formatString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><call><name>invalidSSTable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"unknown 'format' part (%s)"</literal></expr></argument>, <argument><expr><name>formatString</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name>Component</name></type> <name>component</name> <init>= <expr><call><name><name>Component</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>tokens</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Version</name></type> <name>version</name> <init>= <expr><call><name><name>format</name><operator>.</operator><name>info</name><operator>.</operator><name>getVersion</name></name><argument_list>(<argument><expr><name>versionString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>version</name><operator>.</operator><name>isCompatible</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>invalidSSTable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"incompatible sstable version (%s); you should have run upgradesstables before upgrading"</literal></expr></argument>, <argument><expr><name>versionString</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>directory</name> <init>= <expr><call><name>parentOf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>tableDir</name> <init>= <expr><name>directory</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Check if it's a 2ndary index directory (not that it doesn't exclude it to be also a backup or snapshot)</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>indexName</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Directories</name><operator>.</operator><name>isSecondaryIndexFolder</name></name><argument_list>(<argument><expr><name>tableDir</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>indexName</name> <operator>=</operator> <call><name><name>tableDir</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tableDir</name> <operator>=</operator> <call><name>parentOf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>tableDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Then it can be a backup or a snapshot</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>tableDir</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>Directories</name><operator>.</operator><name>BACKUPS_SUBDIR</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>tableDir</name> <operator>=</operator> <call><name><name>tableDir</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>parentOf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>tableDir</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>Directories</name><operator>.</operator><name>SNAPSHOT_SUBDIR</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>tableDir</name> <operator>=</operator> <call><name>parentOf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>parentOf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>tableDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>table</name> <init>= <expr><call><name><name>tableDir</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>+</operator> <name>indexName</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name>parentOf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>tableDir</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Descriptor</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>directory</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>generation</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>parentOf</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>parent</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>invalidSSTable</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"cannot extract keyspace and table name; make sure the sstable is in the proper sub-directories"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>parent</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>IllegalArgumentException</name></type> <name>invalidSSTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>msgFormat</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>parameters</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Invalid sstable file "</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <name>msgFormat</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>IMetadataSerializer</name></type> <name>getMetadataSerializer</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>MetadataSerializer</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if the current Cassandra version can read the given sstable version
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCompatible</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>version</name><operator>.</operator><name>isCompatible</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>baseFilename</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>Descriptor</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>Descriptor</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>Descriptor</name><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>that</name><operator>.</operator><name>directory</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>directory</name></name></expr></argument>)</argument_list></call>
                       <operator>&amp;&amp;</operator> <name><name>that</name><operator>.</operator><name>generation</name></name> <operator>==</operator> <name><name>this</name><operator>.</operator><name>generation</name></name>
                       <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>ksname</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>ksname</name></name></expr></argument>)</argument_list></call>
                       <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>cfname</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>cfname</name></name></expr></argument>)</argument_list></call>
                       <operator>&amp;&amp;</operator> <call><name><name>that</name><operator>.</operator><name>version</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call>
                       <operator>&amp;&amp;</operator> <name><name>that</name><operator>.</operator><name>formatType</name></name> <operator>==</operator> <name><name>this</name><operator>.</operator><name>formatType</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>hashCode</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
