<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/locator/IEndpointSnitch.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This interface helps determine location of node in the datacenter relative to another node.
 * Give a node A and another node B it can tell if A and B are on the same rack or in the same
 * datacenter.
 */</comment>

<interface><specifier>public</specifier> interface <name>IEndpointSnitch</name>
<block>{
    <comment type="block" format="javadoc">/**
     * returns a String representing the rack the given endpoint belongs to
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getRack</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * returns a String representing the rack current endpoint belongs to
     */</comment>
    <function><type><specifier>default</specifier> <specifier>public</specifier> <name>String</name></type> <name>getLocalRack</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getRack</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * returns a String representing the datacenter the given endpoint belongs to
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getDatacenter</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * returns a String representing the datacenter current endpoint belongs to
     */</comment>
    <function><type><specifier>default</specifier> <specifier>public</specifier> <name>String</name></type> <name>getLocalDatacenter</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getDatacenter</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>default</specifier> <specifier>public</specifier> <name>String</name></type> <name>getDatacenter</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getDatacenter</name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * returns a new &lt;tt&gt;List&lt;/tt&gt; sorted by proximity to the given endpoint
     */</comment>
    <function_decl><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>C</name> <extends>extends <name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>C</name></extends></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>C</name></type> <name>sortedByProximity</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>addresses</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * compares two endpoints in relation to the target endpoint, returning as Comparator.compare would
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>compareEndpoints</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>Replica</name></type> <name>r1</name></decl></parameter>, <parameter><decl><type><name>Replica</name></type> <name>r2</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * called after Gossiper instance exists immediately before it starts gossiping
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>gossiperStarting</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns whether for a range query doing a query against merged is likely
     * to be faster than 2 sequential queries, one against l1 followed by one against l2.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isWorthMergingForRangeQuery</name><parameter_list>(<parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>merged</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>l2</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Determine if the datacenter or rack values in the current node's snitch conflict with those passed in parameters.
     */</comment>
    <function><type><specifier>default</specifier> <name>boolean</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>datacenters</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>racks</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
}</block></interface>
</unit>
