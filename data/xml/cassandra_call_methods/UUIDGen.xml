<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/UUIDGen.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>NetworkInterface</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>SocketException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Enumeration</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>Hasher</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>hash</name><operator>.</operator><name>Hashing</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>primitives</name><operator>.</operator><name>Ints</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The goods are here: www.ietf.org/rfc/rfc4122.txt.
 */</comment>
<class><specifier>public</specifier> class <name>UUIDGen</name>
<block>{
    <comment type="line">// A grand day! millis at 00:00:00.000 15 Oct 1582.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>START_EPOCH</name> <init>= <expr><operator>-</operator><literal type="number">12219292800000L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>clockSeqAndNode</name> <init>= <expr><call><name>makeClockSeqAndNode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>UUID_LEN</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * The min and max possible lsb for a UUID.
     * Note that his is not 0 and all 1's because Cassandra TimeUUIDType
     * compares the lsb parts as a signed byte array comparison. So the min
     * value is 8 times -128 and the max is 8 times +127.
     *
     * Note that we ignore the uuid variant (namely, MIN_CLOCK_SEQ_AND_NODE
     * have variant 2 as it should, but MAX_CLOCK_SEQ_AND_NODE have variant 0).
     * I don't think that has any practical consequence and is more robust in
     * case someone provides a UUID with a broken variant.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MIN_CLOCK_SEQ_AND_NODE</name> <init>= <expr><literal type="number">0x8080808080808080L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MAX_CLOCK_SEQ_AND_NODE</name> <init>= <expr><literal type="number">0x7f7f7f7f7f7f7f7fL</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SecureRandom</name></type> <name>secureRandom</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// placement of this singleton is important.  It needs to be instantiated *AFTER* the other statics.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UUIDGen</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>UUIDGen</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>AtomicLong</name></type> <name>lastNanos</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>UUIDGen</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// make sure someone didn't whack the clockSeqAndNode by changing the order of instantiation.</comment>
        <if_stmt><if>if <condition>(<expr><name>clockSeqAndNode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"singleton instantiation is misplaced."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a type 1 UUID (time-based UUID).
     *
     * @return a UUID instance
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>getTimeUUID</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>UUID</name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>createTimeSafe</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>clockSeqAndNode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a type 1 UUID (time-based UUID) with the timestamp of @param when, in milliseconds.
     *
     * @return a UUID instance
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>getTimeUUID</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>when</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>UUID</name><argument_list>(<argument><expr><call><name>createTime</name><argument_list>(<argument><expr><call><name>fromUnixTimestamp</name><argument_list>(<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clockSeqAndNode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a version 1 UUID using the provided timestamp and the local clock and sequence.
     * &lt;p&gt;
     * Note that this method is generally only safe to use if you can guarantee that the provided
     * parameter is unique across calls (otherwise the returned UUID won't be unique accross calls).
     *
     * @param whenInMicros a unix time in microseconds.
     * @return a new UUID {@code id} such that {@code microsTimestamp(id) == whenInMicros}. Please not that
     * multiple calls to this method with the same value of {@code whenInMicros} will return the &lt;b&gt;same&lt;/b&gt;
     * UUID.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>getTimeUUIDFromMicros</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>whenInMicros</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>whenInMillis</name> <init>= <expr><name>whenInMicros</name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>nanos</name> <init>= <expr><operator>(</operator><name>whenInMicros</name> <operator>-</operator> <operator>(</operator><name>whenInMillis</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getTimeUUID</name><argument_list>(<argument><expr><name>whenInMillis</name></expr></argument>, <argument><expr><name>nanos</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Similar to {@link #getTimeUUIDFromMicros}, but randomize (using SecureRandom) the clock and sequence.
     * &lt;p&gt;
     * If you can guarantee that the {@code whenInMicros} argument is unique (for this JVM instance) for
     * every call, then you should prefer {@link #getTimeUUIDFromMicros} which is faster. If you can't
     * guarantee this however, this method will ensure the returned UUID are still unique (accross calls)
     * through randomization.
     *
     * @param whenInMicros a unix time in microseconds.
     * @return a new UUID {@code id} such that {@code microsTimestamp(id) == whenInMicros}. The UUID returned
     * by different calls will be unique even if {@code whenInMicros} is not.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>getRandomTimeUUIDFromMicros</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>whenInMicros</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>whenInMillis</name> <init>= <expr><name>whenInMicros</name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>nanos</name> <init>= <expr><operator>(</operator><name>whenInMicros</name> <operator>-</operator> <operator>(</operator><name>whenInMillis</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>UUID</name><argument_list>(<argument><expr><call><name>createTime</name><argument_list>(<argument><expr><call><name>fromUnixTimestamp</name><argument_list>(<argument><expr><name>whenInMillis</name></expr></argument>, <argument><expr><name>nanos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>secureRandom</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>getTimeUUID</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>when</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nanos</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>UUID</name><argument_list>(<argument><expr><call><name>createTime</name><argument_list>(<argument><expr><call><name>fromUnixTimestamp</name><argument_list>(<argument><expr><name>when</name></expr></argument>, <argument><expr><name>nanos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clockSeqAndNode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>getTimeUUID</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>when</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nanos</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>clockSeqAndNode</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>UUID</name><argument_list>(<argument><expr><call><name>createTime</name><argument_list>(<argument><expr><call><name>fromUnixTimestamp</name><argument_list>(<argument><expr><name>when</name></expr></argument>, <argument><expr><name>nanos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clockSeqAndNode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** creates a type 1 uuid from raw bytes. */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>getUUID</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>raw</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>UUID</name><argument_list>(<argument><expr><call><name><name>raw</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>raw</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>raw</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>raw</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>toByteBuffer</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buffer</name> <init>= <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>UUID_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><call><name><name>uuid</name><operator>.</operator><name>getMostSignificantBits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><call><name><name>uuid</name><operator>.</operator><name>getLeastSignificantBits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>flip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>buffer</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** decomposes a uuid into raw bytes. */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>decompose</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>most</name> <init>= <expr><call><name><name>uuid</name><operator>.</operator><name>getMostSignificantBits</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>least</name> <init>= <expr><call><name><name>uuid</name><operator>.</operator><name>getLeastSignificantBits</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>most</name> <operator>&gt;&gt;&gt;</operator> <operator>(</operator><operator>(</operator><literal type="number">7</literal><operator>-</operator><name>i</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">8</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>least</name> <operator>&gt;&gt;&gt;</operator> <operator>(</operator><operator>(</operator><literal type="number">7</literal><operator>-</operator><name>i</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>b</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a 16 byte representation of a type 1 UUID (a time-based UUID),
     * based on the current system time.
     *
     * @return a type 1 UUID represented as a byte[]
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getTimeUUIDBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>createTimeUUIDBytes</name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>createTimeSafe</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the smaller possible type 1 UUID having the provided timestamp.
     *
     * &lt;b&gt;Warning:&lt;/b&gt; this method should only be used for querying as this
     * doesn't at all guarantee the uniqueness of the resulting UUID.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>minTimeUUID</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>UUID</name><argument_list>(<argument><expr><call><name>createTime</name><argument_list>(<argument><expr><call><name>fromUnixTimestamp</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MIN_CLOCK_SEQ_AND_NODE</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the biggest possible type 1 UUID having the provided timestamp.
     *
     * &lt;b&gt;Warning:&lt;/b&gt; this method should only be used for querying as this
     * doesn't at all guarantee the uniqueness of the resulting UUID.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>maxTimeUUID</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// unix timestamp are milliseconds precision, uuid timestamp are 100's</comment>
        <comment type="line">// nanoseconds precision. If we ask for the biggest uuid have unix</comment>
        <comment type="line">// timestamp 1ms, then we should not extend 100's nanoseconds</comment>
        <comment type="line">// precision by taking 10000, but rather 19999.</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>uuidTstamp</name> <init>= <expr><call><name>fromUnixTimestamp</name><argument_list>(<argument><expr><name>timestamp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>UUID</name><argument_list>(<argument><expr><call><name>createTime</name><argument_list>(<argument><expr><name>uuidTstamp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAX_CLOCK_SEQ_AND_NODE</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param uuid
     * @return milliseconds since Unix epoch
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>unixTimestamp</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><call><name><name>uuid</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">10000</literal><operator>)</operator> <operator>+</operator> <name>START_EPOCH</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param uuid
     * @return seconds since Unix epoch
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>unixTimestampInSec</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><call><name>unixTimestamp</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param uuid
     * @return microseconds since Unix epoch
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>microsTimestamp</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><call><name><name>uuid</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <name>START_EPOCH</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param timestamp milliseconds since Unix epoch
     * @return
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>fromUnixTimestamp</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>fromUnixTimestamp</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>fromUnixTimestamp</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nanos</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>timestamp</name> <operator>-</operator> <name>START_EPOCH</name><operator>)</operator> <operator>*</operator> <literal type="number">10000</literal><operator>)</operator> <operator>+</operator> <name>nanos</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts a 100-nanoseconds precision timestamp into the 16 byte representation
     * of a type 1 UUID (a time-based UUID).
     *
     * To specify a 100-nanoseconds precision timestamp, one should provide a milliseconds timestamp and
     * a number {@code 0 &lt;= n &lt; 10000} such that n*100 is the number of nanoseconds within that millisecond.
     *
     * &lt;p&gt;&lt;i&gt;&lt;b&gt;Warning:&lt;/b&gt; This method is not guaranteed to return unique UUIDs; Multiple
     * invocations using identical timestamps will result in identical UUIDs.&lt;/i&gt;&lt;/p&gt;
     *
     * @return a type 1 UUID represented as a byte[]
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getTimeUUIDBytes</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeMillis</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nanos</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nanos</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><call><name>createTimeUUIDBytes</name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>createTimeUnsafe</name></name><argument_list>(<argument><expr><name>timeMillis</name></expr></argument>, <argument><expr><name>nanos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>createTimeUUIDBytes</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>msb</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>lsb</name> <init>= <expr><name>clockSeqAndNode</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>uuidBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>uuidBytes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>msb</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>uuidBytes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>lsb</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><name>uuidBytes</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a milliseconds-since-epoch value for a type-1 UUID.
     *
     * @param uuid a type-1 (time-based) UUID
     * @return the number of milliseconds since the unix epoch
     * @throws IllegalArgumentException if the UUID is not version 1
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getAdjustedTimestamp</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>uuid</name><operator>.</operator><name>version</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"incompatible with uuid version: "</literal><operator>+</operator><call><name><name>uuid</name><operator>.</operator><name>version</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><call><name><name>uuid</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">10000</literal><operator>)</operator> <operator>+</operator> <name>START_EPOCH</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>makeClockSeqAndNode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>clock</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>lsb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>lsb</name> <operator>|=</operator> <literal type="number">0x8000000000000000L</literal></expr>;</expr_stmt>                 <comment type="line">// variant (2 bits)</comment>
        <expr_stmt><expr><name>lsb</name> <operator>|=</operator> <operator>(</operator><name>clock</name> <operator>&amp;</operator> <literal type="number">0x0000000000003FFFL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt> <comment type="line">// clock sequence (14 bits)</comment>
        <expr_stmt><expr><name>lsb</name> <operator>|=</operator> <call><name>makeNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>                          <comment type="line">// 6 bytes</comment>
        <return>return <expr><name>lsb</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// needs to return two different values for the same when.</comment>
    <comment type="line">// we can generate at most 10k UUIDs per ms.</comment>
    <function><type><specifier>private</specifier> <name>long</name></type> <name>createTimeSafe</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>newLastNanos</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">//Generate a candidate value for new lastNanos</comment>
            <expr_stmt><expr><name>newLastNanos</name> <operator>=</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>START_EPOCH</name><operator>)</operator> <operator>*</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>originalLastNanos</name> <init>= <expr><call><name><name>lastNanos</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>newLastNanos</name> <operator>&gt;</operator> <name>originalLastNanos</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">//Slow path once per millisecond do a CAS</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>lastNanos</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>originalLastNanos</name></expr></argument>, <argument><expr><name>newLastNanos</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">//Fast path do an atomic increment</comment>
                <comment type="line">//Or when falling behind this will move time forward past the clock if necessary</comment>
                <expr_stmt><expr><name>newLastNanos</name> <operator>=</operator> <call><name><name>lastNanos</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <return>return <expr><call><name>createTime</name><argument_list>(<argument><expr><name>newLastNanos</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>createTimeUnsafe</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>when</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nanos</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>nanosSince</name> <init>= <expr><operator>(</operator><operator>(</operator><name>when</name> <operator>-</operator> <name>START_EPOCH</name><operator>)</operator> <operator>*</operator> <literal type="number">10000</literal><operator>)</operator> <operator>+</operator> <name>nanos</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>createTime</name><argument_list>(<argument><expr><name>nanosSince</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>createTime</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>nanosSince</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>msb</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>msb</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x00000000ffffffffL</literal> <operator>&amp;</operator> <name>nanosSince</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>msb</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x0000ffff00000000L</literal> <operator>&amp;</operator> <name>nanosSince</name><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>msb</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xffff000000000000L</literal> <operator>&amp;</operator> <name>nanosSince</name><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>msb</name> <operator>|=</operator> <literal type="number">0x0000000000001000L</literal></expr>;</expr_stmt> <comment type="line">// sets the version to 1.</comment>
        <return>return <expr><name>msb</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>makeNode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
       <comment type="block">/*
        * We don't have access to the MAC address but need to generate a node part
        * that identify this host as uniquely as possible.
        * The spec says that one option is to take as many source that identify
        * this node as possible and hash them together. That's what we do here by
        * gathering all the ip of this host.
        * Note that FBUtilities.getJustBroadcastAddress() should be enough to uniquely
        * identify the node *in the cluster* but it triggers DatabaseDescriptor
        * instanciation and the UUID generator is used in Stress for instance,
        * where we don't want to require the yaml.
        */</comment>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>localAddresses</name> <init>= <expr><call><name>getAllLocalAddresses</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>localAddresses</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Cannot generate the node component of the UUID because cannot retrieve any IP addresses."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <comment type="line">// ideally, we'd use the MAC address, but java doesn't expose that.</comment>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name> <init>= <expr><call><name>hash</name><argument_list>(<argument><expr><name>localAddresses</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>node</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>hash</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>node</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x00000000000000ff</literal> <operator>&amp;</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt></block_content></block></for>
        <assert>assert <expr><operator>(</operator><literal type="number">0xff00000000000000L</literal> <operator>&amp;</operator> <name>node</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</assert>

        <comment type="line">// Since we don't use the mac address, the spec says that multicast</comment>
        <comment type="line">// bit (least significant bit of the first octet of the node ID) must be 1.</comment>
        <return>return <expr><name>node</name> <operator>|</operator> <literal type="number">0x0000010000000000L</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hash</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Identify the host.</comment>
        <decl_stmt><decl><type><name>Hasher</name></type> <name>hasher</name> <init>= <expr><call><name><name>Hashing</name><operator>.</operator><name>md5</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>newHasher</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>addr</name> <range>: <expr><name>data</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putBytes</name></name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>addressBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// Identify the process on the load: we use both the PID and class loader hash.</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>pid</name> <init>= <expr><call><name><name>NativeLibrary</name><operator>.</operator><name>getProcessID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>pid</name> <operator>=</operator> <operator>new</operator> <call><name>Random</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>nextLong</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>updateWithLong</name><argument_list>(<argument><expr><name>hasher</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>loader</name> <init>= <expr><call><name><name>UUIDGen</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>loaderId</name> <init>= <expr><ternary><condition><expr><name>loader</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>System</name><operator>.</operator><name>identityHashCode</name></name><argument_list>(<argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>updateWithInt</name><argument_list>(<argument><expr><name>hasher</name></expr></argument>, <argument><expr><name>loaderId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>hasher</name><operator>.</operator><name>hash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>asBytes</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateWithInt</name><parameter_list>(<parameter><decl><type><name>Hasher</name></type> <name>hasher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateWithLong</name><parameter_list>(<parameter><decl><type><name>Hasher</name></type> <name>hasher</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>putByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator>  <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Helper function used exclusively by UUIDGen to create
     **/</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>getAllLocalAddresses</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>localAddresses</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Enumeration</name><argument_list type="generic">&lt;<argument><name>NetworkInterface</name></argument>&gt;</argument_list></name></type> <name>nets</name> <init>= <expr><call><name><name>NetworkInterface</name><operator>.</operator><name>getNetworkInterfaces</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>nets</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <while>while <condition>(<expr><call><name><name>nets</name><operator>.</operator><name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>, <argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>converter</name> <init>=
                    <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>address</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>addresses</name> <init>=
                    <expr><call><name><name>Collections</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><call><name><name>nets</name><operator>.</operator><name>nextElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInetAddresses</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>converter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>localAddresses</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>SocketException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isDaemonInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>localAddresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>localAddresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastNativeAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>localAddresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getLocalAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>localAddresses</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>

<comment type="line">// for the curious, here is how I generated START_EPOCH</comment>
<comment type="line">//        Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT-0"));</comment>
<comment type="line">//        c.set(Calendar.YEAR, 1582);</comment>
<comment type="line">//        c.set(Calendar.MONTH, Calendar.OCTOBER);</comment>
<comment type="line">//        c.set(Calendar.DAY_OF_MONTH, 15);</comment>
<comment type="line">//        c.set(Calendar.HOUR_OF_DAY, 0);</comment>
<comment type="line">//        c.set(Calendar.MINUTE, 0);</comment>
<comment type="line">//        c.set(Calendar.SECOND, 0);</comment>
<comment type="line">//        c.set(Calendar.MILLISECOND, 0);</comment>
<comment type="line">//        long START_EPOCH = c.getTimeInMillis();</comment>
</unit>
