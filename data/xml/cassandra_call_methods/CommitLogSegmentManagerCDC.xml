<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentManagerCDC.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>FileVisitResult</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Files</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>attribute</name><operator>.</operator><name>BasicFileAttributes</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>RateLimiter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Mutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>CommitLogSegment</name><operator>.</operator><name>CDCState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>CDCWriteException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>DirectorySizeCalculator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NoSpamLogger</name></name>;</import>

<class><specifier>public</specifier> class <name>CommitLogSegmentManagerCDC</name> <super_list><extends>extends <super><name>AbstractCommitLogSegmentManager</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>CommitLogSegmentManagerCDC</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CDCSizeTracker</name></type> <name>cdcSizeTracker</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CommitLogSegmentManagerCDC</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CommitLog</name></type> <name>commitLog</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>storageDirectory</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>commitLog</name></expr></argument>, <argument><expr><name>storageDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cdcSizeTracker</name> <operator>=</operator> <operator>new</operator> <call><name>CDCSizeTracker</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCDCLogLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><name>void</name></type> <name>start</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>cdcSizeTracker</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>discard</name><parameter_list>(<parameter><decl><type><name>CommitLogSegment</name></type> <name>segment</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>delete</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>segment</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addSize</name><argument_list>(<argument><expr><operator>-</operator><call><name><name>segment</name><operator>.</operator><name>onDiskSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cdcSizeTracker</name><operator>.</operator><name>processDiscardedSegment</name></name><argument_list>(<argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>delete</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteWithConfirm</name></name><argument_list>(<argument><expr><name><name>segment</name><operator>.</operator><name>logFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>segment</name><operator>.</operator><name>getCDCState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>CDCState</name><operator>.</operator><name>CONTAINS</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Always delete hard-link from cdc folder if this segment didn't contain CDC data. Note: File may not exist</comment>
            <comment type="line">// if processing discard during startup.</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>cdcLink</name> <init>= <expr><call><name><name>segment</name><operator>.</operator><name>getCDCFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>cdcLink</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteWithConfirm</name></name><argument_list>(<argument><expr><name>cdcLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>File</name></type> <name>cdcIndexFile</name> <init>= <expr><call><name><name>segment</name><operator>.</operator><name>getCDCIndexFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>cdcIndexFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteWithConfirm</name></name><argument_list>(<argument><expr><name>cdcIndexFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Initiates the shutdown process for the management thread. Also stops the cdc on-disk size calculator executor.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>shutdown</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>cdcSizeTracker</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Reserve space in the current segment for the provided mutation or, if there isn't space available,
     * create a new segment. For CDC mutations, allocation is expected to throw WTE if the segment disallows CDC mutations.
     *
     * @param mutation Mutation to allocate in segment manager
     * @param size total size (overhead + serialized) of mutation
     * @return the created Allocation object
     * @throws CDCWriteException If segment disallows CDC mutations, we throw
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>CommitLogSegment</name><operator>.</operator><name>Allocation</name></name></type> <name>allocate</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CDCWriteException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CommitLogSegment</name></type> <name>segment</name> <init>= <expr><call><name>allocatingFrom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>CommitLogSegment</name><operator>.</operator><name>Allocation</name></name></type> <name>alloc</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>throwIfForbidden</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>( <expr><literal type="null">null</literal> <operator>==</operator> <operator>(</operator><name>alloc</name> <operator>=</operator> <call><name><name>segment</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <comment type="line">// Failed to allocate, so move to a new segment with enough room if possible.</comment>
            <expr_stmt><expr><call><name>advanceAllocatingFrom</name><argument_list>(<argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>segment</name> <operator>=</operator> <call><name>allocatingFrom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>throwIfForbidden</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><call><name><name>mutation</name><operator>.</operator><name>trackedByCDC</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>segment</name><operator>.</operator><name>setCDCState</name></name><argument_list>(<argument><expr><name><name>CDCState</name><operator>.</operator><name>CONTAINS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><name>alloc</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>throwIfForbidden</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>, <parameter><decl><type><name>CommitLogSegment</name></type> <name>segment</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CDCWriteException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>mutation</name><operator>.</operator><name>trackedByCDC</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>segment</name><operator>.</operator><name>getCDCState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>CDCState</name><operator>.</operator><name>FORBIDDEN</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>cdcSizeTracker</name><operator>.</operator><name>submitOverflowSizeRecalculation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>logMsg</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Rejecting mutation to keyspace %s. Free up space in %s by processing CDC logs."</literal></expr></argument>,
                <argument><expr><call><name><name>mutation</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCDCLogLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>NoSpamLogger</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>,
                             <argument><expr><name><name>NoSpamLogger</name><operator>.</operator><name>Level</name><operator>.</operator><name>WARN</name></name></expr></argument>,
                             <argument><expr><literal type="number">10</literal></expr></argument>,
                             <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>,
                             <argument><expr><name>logMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>CDCWriteException</name><argument_list>(<argument><expr><name>logMsg</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * On segment creation, flag whether the segment should accept CDC mutations or not based on the total currently
     * allocated unflushed CDC segments and the contents of cdc_raw
     */</comment>
    <function><type><specifier>public</specifier> <name>CommitLogSegment</name></type> <name>createSegment</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CommitLogSegment</name></type> <name>segment</name> <init>= <expr><call><name><name>CommitLogSegment</name><operator>.</operator><name>createSegment</name></name><argument_list>(<argument><expr><name>commitLog</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Hard link file in cdc folder for realtime tracking</comment>
        <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createHardLink</name></name><argument_list>(<argument><expr><name><name>segment</name><operator>.</operator><name>logFile</name></name></expr></argument>, <argument><expr><call><name><name>segment</name><operator>.</operator><name>getCDCFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cdcSizeTracker</name><operator>.</operator><name>processNewSegment</name></name><argument_list>(<argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>segment</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Delete untracked segment files after replay
     *
     * @param file segment file that is no longer in use.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><name>void</name></type> <name>handleReplayedSegment</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>handleReplayedSegment</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// delete untracked cdc segment hard link files if their index files do not exist</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>cdcFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCDCLogLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>cdcIndexFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCDCLogLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>CommitLogDescriptor</name><operator>.</operator><name>fromFileName</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>cdcIndexFileName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>cdcFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>cdcIndexFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"(Unopened) CDC segment {} is no longer needed and will be deleted now"</literal></expr></argument>, <argument><expr><name>cdcFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteWithConfirm</name></name><argument_list>(<argument><expr><name>cdcFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * For use after replay when replayer hard-links / adds tracking of replayed segments
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCDCSize</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>cdcSizeTracker</name><operator>.</operator><name>addSize</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tracks total disk usage of CDC subsystem, defined by the summation of all unflushed CommitLogSegments with CDC
     * data in them and all segments archived into cdc_raw.
     *
     * Allows atomic increment/decrement of unflushed size, however only allows increment on flushed and requires a full
     * directory walk to determine any potential deletions by CDC consumer.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>CDCSizeTracker</name> <super_list><extends>extends <super><name>DirectorySizeCalculator</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RateLimiter</name></type> <name>rateLimiter</name> <init>= <expr><call><name><name>RateLimiter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="number">1000.0</literal> <operator>/</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCDCDiskCheckInterval</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>ExecutorService</name></type> <name>cdcSizeCalculationExecutor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>CommitLogSegmentManagerCDC</name></type> <name>segmentManager</name></decl>;</decl_stmt>

        <comment type="line">// Used instead of size during walk to remove chance of over-allocation</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>sizeInProgress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <constructor><name>CDCSizeTracker</name><parameter_list>(<parameter><decl><type><name>CommitLogSegmentManagerCDC</name></type> <name>segmentManager</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>path</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>segmentManager</name></name> <operator>=</operator> <name>segmentManager</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Needed for stop/restart during unit tests
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cdcSizeCalculationExecutor</name> <operator>=</operator> <operator>new</operator> <call><name>ThreadPoolExecutor</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>SynchronousQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ThreadPoolExecutor</name><operator>.</operator><name>DiscardPolicy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Synchronous size recalculation on each segment creation/deletion call could lead to very long delays in new
         * segment allocation, thus long delays in thread signaling to wake waiting allocation / writer threads.
         *
         * This can be reached either from the segment management thread in ABstractCommitLogSegmentManager or from the
         * size recalculation executor, so we synchronize on this object to reduce the race overlap window available for
         * size to get off.
         *
         * Reference DirectorySizerBench for more information about performance of the directory size recalc.
         */</comment>
        <function><type><name>void</name></type> <name>processNewSegment</name><parameter_list>(<parameter><decl><type><name>CommitLogSegment</name></type> <name>segment</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// See synchronization in CommitLogSegment.setCDCState</comment>
            <synchronized>synchronized<init>(<expr><name><name>segment</name><operator>.</operator><name>cdcStateLock</name></name></expr>)</init>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>segment</name><operator>.</operator><name>setCDCState</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name>defaultSegmentSize</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>totalCDCSizeOnDisk</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name>allowableCDCBytes</name><argument_list>()</argument_list></call></expr>
                                    ?</condition><then> <expr><name><name>CDCState</name><operator>.</operator><name>FORBIDDEN</name></name></expr>
                                    </then><else>: <expr><name><name>CDCState</name><operator>.</operator><name>PERMITTED</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>segment</name><operator>.</operator><name>getCDCState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>CDCState</name><operator>.</operator><name>PERMITTED</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>defaultSegmentSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></synchronized>

            <comment type="line">// Take this opportunity to kick off a recalc to pick up any consumer file deletion.</comment>
            <expr_stmt><expr><call><name>submitOverflowSizeRecalculation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>processDiscardedSegment</name><parameter_list>(<parameter><decl><type><name>CommitLogSegment</name></type> <name>segment</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// See synchronization in CommitLogSegment.setCDCState</comment>
            <synchronized>synchronized<init>(<expr><name><name>segment</name><operator>.</operator><name>cdcStateLock</name></name></expr>)</init>
            <block>{<block_content>
                <comment type="line">// Add to flushed size before decrementing unflushed so we don't have a window of false generosity</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>segment</name><operator>.</operator><name>getCDCState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>CDCState</name><operator>.</operator><name>CONTAINS</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>segment</name><operator>.</operator><name>onDiskSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>segment</name><operator>.</operator><name>getCDCState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>CDCState</name><operator>.</operator><name>FORBIDDEN</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>-=</operator> <call><name>defaultSegmentSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></synchronized>

            <comment type="line">// Take this opportunity to kick off a recalc to pick up any consumer file deletion.</comment>
            <expr_stmt><expr><call><name>submitOverflowSizeRecalculation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>long</name></type> <name>allowableCDCBytes</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>long</name><operator>)</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCDCSpaceInMB</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>submitOverflowSizeRecalculation</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>cdcSizeCalculationExecutor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>recalculateOverflowSize</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>RejectedExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <comment type="line">// Do nothing. Means we have one in flight so this req. should be satisfied when it completes.</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>recalculateOverflowSize</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>rateLimiter</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>calculateSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CommitLogSegment</name></type> <name>allocatingFrom</name> <init>= <expr><call><name><name>segmentManager</name><operator>.</operator><name>allocatingFrom</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>allocatingFrom</name><operator>.</operator><name>getCDCState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>CDCState</name><operator>.</operator><name>FORBIDDEN</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>processNewSegment</name><argument_list>(<argument><expr><name>allocatingFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>defaultSegmentSize</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCommitLogSegmentSize</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>calculateSize</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <comment type="line">// The Arrays.stream approach is considerably slower on Windows than linux</comment>
                <expr_stmt><expr><name>sizeInProgress</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>walkFileTree</name></name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name> <operator>=</operator> <name>sizeInProgress</name></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ie</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>CommitLog</name><operator>.</operator><name>instance</name><operator>.</operator><name>handleCommitError</name></name><argument_list>(<argument><expr><literal type="string">"Failed CDC Size Calculation"</literal></expr></argument>, <argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>FileVisitResult</name></type> <name>visitFile</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>BasicFileAttributes</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><name>sizeInProgress</name> <operator>+=</operator> <call><name><name>attrs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name><name>FileVisitResult</name><operator>.</operator><name>CONTINUE</name></name></expr>;</return>
        </block_content>}</block></function>


        <function><type><specifier>public</specifier> <name>void</name></type> <name>shutdown</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>cdcSizeCalculationExecutor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>cdcSizeCalculationExecutor</name><operator>.</operator><name>isShutdown</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>cdcSizeCalculationExecutor</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>addSize</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>toAdd</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <name>toAdd</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>long</name></type> <name>totalCDCSizeOnDisk</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Only use for testing / validation that size tracker is working. Not for production use.
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>updateCDCTotalSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>cdcSizeTracker</name><operator>.</operator><name>submitOverflowSizeRecalculation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Give the update time to run</comment>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCDCDiskCheckInterval</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></catch></try>

        <return>return <expr><call><name><name>cdcSizeTracker</name><operator>.</operator><name>totalCDCSizeOnDisk</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
