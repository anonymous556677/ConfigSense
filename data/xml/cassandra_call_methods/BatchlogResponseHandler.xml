<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/BatchlogResponseHandler.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicIntegerFieldUpdater</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestFailureReason</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>WriteFailureException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>WriteTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>

<class><specifier>public</specifier> class <name><name>BatchlogResponseHandler</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>wrapped</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BatchlogCleanup</name></type> <name>cleanup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>requiredBeforeFinish</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>AtomicIntegerFieldUpdater</name><argument_list type="generic">&lt;<argument><name>BatchlogResponseHandler</name></argument>&gt;</argument_list></name></type> <name>requiredBeforeFinishUpdater</name>
            <init>= <expr><call><name><name>AtomicIntegerFieldUpdater</name><operator>.</operator><name>newUpdater</name></name><argument_list>(<argument><expr><name><name>BatchlogResponseHandler</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"requiredBeforeFinish"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BatchlogResponseHandler</name><parameter_list>(<parameter><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>wrapped</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requiredBeforeFinish</name></decl></parameter>, <parameter><decl><type><name>BatchlogCleanup</name></type> <name>cleanup</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>wrapped</name><operator>.</operator><name>replicaPlan</name></name></expr></argument>, <argument><expr><name><name>wrapped</name><operator>.</operator><name>callback</name></name></expr></argument>, <argument><expr><name><name>wrapped</name><operator>.</operator><name>writeType</name></name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wrapped</name></name> <operator>=</operator> <name>wrapped</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>requiredBeforeFinish</name></name> <operator>=</operator> <name>requiredBeforeFinish</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cleanup</name></name> <operator>=</operator> <name>cleanup</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>protected</specifier> <name>int</name></type> <name>ackCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>ackCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>onResponse</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>msg</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>onResponse</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>requiredBeforeFinishUpdater</name><operator>.</operator><name>decrementAndGet</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>cleanup</name><operator>.</operator><name>ackMutation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>RequestFailureReason</name></type> <name>failureReason</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>onFailure</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>failureReason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>invokeOnFailure</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>invokeOnFailure</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>get</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>WriteTimeoutException</name></expr></argument>, <argument><expr><name>WriteFailureException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>int</name></type> <name>blockFor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>blockFor</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>int</name></type> <name>candidateReplicaCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>candidateReplicaCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>waitingFor</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>waitingFor</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>signal</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>signal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>BatchlogCleanup</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BatchlogCleanupCallback</name></type> <name>callback</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>mutationsWaitingFor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>AtomicIntegerFieldUpdater</name><argument_list type="generic">&lt;<argument><name>BatchlogCleanup</name></argument>&gt;</argument_list></name></type> <name>mutationsWaitingForUpdater</name>
            <init>= <expr><call><name><name>AtomicIntegerFieldUpdater</name><operator>.</operator><name>newUpdater</name></name><argument_list>(<argument><expr><name><name>BatchlogCleanup</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"mutationsWaitingFor"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>BatchlogCleanup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mutationsWaitingFor</name></decl></parameter>, <parameter><decl><type><name>BatchlogCleanupCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mutationsWaitingFor</name></name> <operator>=</operator> <name>mutationsWaitingFor</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>decrement</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>mutationsWaitingForUpdater</name><operator>.</operator><name>decrementAndGet</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>ackMutation</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>decrement</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>invoke</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <interface><specifier>public</specifier> interface <name>BatchlogCleanupCallback</name>
    <block>{
        <function_decl><type><name>void</name></type> <name>invoke</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>
}</block></class>
</unit>
