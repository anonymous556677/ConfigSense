<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/DecoratedKey.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name><operator>.</operator><name>KeyBound</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MurmurHash</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>IFilter</name><operator>.</operator><name>FilterKey</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a decorated key, handy for certain operations
 * where just working with strings gets slow.
 *
 * We do a lot of sorting of DecoratedKeys, so for speed, we assume that tokens correspond one-to-one with keys.
 * This is not quite correct in the case of RandomPartitioner (which uses MD5 to hash keys to tokens);
 * if this matters, you can subclass RP to use a stronger hash, or use a non-lossy tokenization scheme (as in the
 * OrderPreservingPartitioner classes).
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DecoratedKey</name> <super_list><implements>implements <super><name>PartitionPosition</name></super>, <super><name>FilterKey</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>DecoratedKey</name></type> <name>o2</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>o1</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Token</name></type> <name>token</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DecoratedKey</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>token</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>token</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>token</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return> <comment type="line">// hash of key is enough</comment>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>obj</name> <operator>instanceof</operator> <name>DecoratedKey</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>DecoratedKey</name><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>compareUnsigned</name></name><argument_list>(<argument><expr><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>other</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return> <comment type="line">// we compare faster than BB.equals for array backed BB</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>PartitionPosition</name></type> <name>pos</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// delegate to Token.KeyBound if needed</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pos</name> <operator>instanceof</operator> <name>DecoratedKey</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><call><name><name>pos</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>otherKey</name> <init>= <expr><operator>(</operator><name>DecoratedKey</name><operator>)</operator> <name>pos</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>getToken</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>otherKey</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>compareUnsigned</name></name><argument_list>(<argument><expr><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>otherKey</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>cmp</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>PartitionPosition</name></type> <name>position</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// delegate to Token.KeyBound if needed</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>position</name> <operator>instanceof</operator> <name>DecoratedKey</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><call><name><name>position</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><call><name><name>partitioner</name><operator>.</operator><name>decorateKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>otherKey</name> <init>= <expr><operator>(</operator><name>DecoratedKey</name><operator>)</operator> <name>position</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>partitioner</name><operator>.</operator><name>getToken</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>otherKey</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>compareUnsigned</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>otherKey</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>cmp</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>IPartitioner</name></type> <name>getPartitioner</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getToken</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPartitioner</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>KeyBound</name></type> <name>minValue</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getPartitioner</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMinimumToken</name><argument_list>()</argument_list></call><operator>.</operator><call><name>minKeyBound</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMinimum</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// A DecoratedKey can never be the minimum position on the ring</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>PartitionPosition</name><operator>.</operator><name>Kind</name></name></type> <name>kind</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>PartitionPosition</name><operator>.</operator><name>Kind</name><operator>.</operator><name>ROW_KEY</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>keystring</name> <init>= <expr><ternary><condition><expr><call><name>getKey</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>bytesToHex</name></name><argument_list>(<argument><expr><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><literal type="string">"DecoratedKey("</literal> <operator>+</operator> <call><name>getToken</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>keystring</name> <operator>+</operator> <literal type="string">")"</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Token</name></type> <name>getToken</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>token</name></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ByteBuffer</name></type> <name>getKey</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>filterHash</name><parameter_list>(<parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>dest</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>key</name> <init>= <expr><call><name>getKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>MurmurHash</name><operator>.</operator><name>hash3_x64_128</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
