<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/CounterMutation.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>Lock</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterators</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>PeekingIterator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Striped</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>ByteBufferAccessor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>filter</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>context</name><operator>.</operator><name>CounterContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>WriteTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>AbstractReplicationStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>CacheService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>btree</name><operator>.</operator><name>BTreeSet</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>*</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name><operator>.</operator><name>VERSION_30</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name><operator>.</operator><name>VERSION_3014</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name><operator>.</operator><name>VERSION_40</name></name>;</import>

<class><specifier>public</specifier> class <name>CounterMutation</name> <super_list><implements>implements <super><name>IMutation</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CounterMutationSerializer</name></type> <name>serializer</name> <init>= <expr><operator>new</operator> <call><name>CounterMutationSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Striped</name><argument_list type="generic">&lt;<argument><name>Lock</name></argument>&gt;</argument_list></name></type> <name>LOCKS</name> <init>= <expr><call><name><name>Striped</name><operator>.</operator><name>lazyWeakLock</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getConcurrentCounterWriters</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Mutation</name></type> <name>mutation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ConsistencyLevel</name></type> <name>consistency</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CounterMutation</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistency</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mutation</name></name> <operator>=</operator> <name>mutation</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>consistency</name></name> <operator>=</operator> <name>consistency</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeyspaceName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>mutation</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>&gt;</argument_list></name></type> <name>getTableIds</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>mutation</name><operator>.</operator><name>getTableIds</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>PartitionUpdate</name></argument>&gt;</argument_list></name></type> <name>getPartitionUpdates</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>mutation</name><operator>.</operator><name>getPartitionUpdates</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>overhead</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>totalSize</name> <init>= <expr><call><name>serializedSize</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>overhead</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>totalSize</name> <operator>&gt;</operator> <name>MAX_MUTATION_SIZE</name></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>MutationExceededMaxSizeException</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>totalSize</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Mutation</name></type> <name>getMutation</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>mutation</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>key</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ConsistencyLevel</name></type> <name>consistency</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>consistency</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Applies the counter mutation, returns the result Mutation (for replication to other nodes).
     *
     * 1. Grabs the striped cell-level locks in the proper order
     * 2. Gets the current values of the counters-to-be-modified from the counter cache
     * 3. Reads the rest of the current values (cache misses) from the CF
     * 4. Writes the updated counter values
     * 5. Updates the counter cache
     * 6. Releases the lock(s)
     *
     * See CASSANDRA-4775 and CASSANDRA-6504 for further details.
     *
     * @return the applied resulting Mutation
     */</comment>
    <function><type><specifier>public</specifier> <name>Mutation</name></type> <name>applyCounterMutation</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>WriteTimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Mutation</name><operator>.</operator><name>PartitionUpdateCollector</name></name></type> <name>resultBuilder</name> <init>= <expr><operator>new</operator> <call><name><name>Mutation</name><operator>.</operator><name>PartitionUpdateCollector</name></name><argument_list>(<argument><expr><call><name>getKeyspaceName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>key</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name>getKeyspaceName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Lock</name></argument>&gt;</argument_list></name></type> <name>locks</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Acquiring counter locks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>grabCounterLocks</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>locks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>PartitionUpdate</name></type> <name>upd</name> <range>: <expr><call><name>getPartitionUpdates</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>resultBuilder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>processModifications</name><argument_list>(<argument><expr><name>upd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <decl_stmt><decl><type><name>Mutation</name></type> <name>result</name> <init>= <expr><call><name><name>resultBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Lock</name></type> <name>lock</name> <range>: <expr><name>locks</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>applyCounterMutation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>grabCounterLocks</name><parameter_list>(<parameter><decl><type><name>Keyspace</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Lock</name></argument>&gt;</argument_list></name></type> <name>locks</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>WriteTimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Lock</name></type> <name>lock</name> <range>: <expr><call><name><name>LOCKS</name><operator>.</operator><name>bulkGet</name></name><argument_list>(<argument><expr><call><name>getCounterLockKeys</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><call><name>getTimeout</name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>lock</name><operator>.</operator><name>tryLock</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>WriteTimeoutException</name><argument_list>(<argument><expr><name><name>WriteType</name><operator>.</operator><name>COUNTER</name></name></expr></argument>, <argument><expr><call><name>consistency</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>consistency</name><argument_list>()</argument_list></call><operator>.</operator><call><name>blockFor</name><argument_list>(<argument><expr><name>replicationStrategy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>locks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>WriteTimeoutException</name><argument_list>(<argument><expr><name><name>WriteType</name><operator>.</operator><name>COUNTER</name></name></expr></argument>, <argument><expr><call><name>consistency</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>consistency</name><argument_list>()</argument_list></call><operator>.</operator><call><name>blockFor</name><argument_list>(<argument><expr><name>replicationStrategy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a wrapper for the Striped#bulkGet() call (via Keyspace#counterLocksFor())
     * Striped#bulkGet() depends on Object#hashCode(), so here we make sure that the cf id and the partition key
     * all get to be part of the hashCode() calculation.
     */</comment>
    <function><type><specifier>private</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getCounterLockKeys</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><call><name>getPartitionUpdates</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Function</name><argument_list type="generic">&lt;<argument><name>PartitionUpdate</name></argument>, <argument><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PartitionUpdate</name></type> <name>update</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Function</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>, <argument><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
                <block>{
                    <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Function</name><argument_list type="generic">&lt;<argument><name>ColumnData</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
                        <block>{
                            <function><type><specifier>public</specifier> <name>Object</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ColumnData</name></type> <name>data</name></decl></parameter>)</parameter_list>
                            <block>{<block_content>
                                <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><call><name><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>, <argument><expr><call><name>key</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>clustering</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>data</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                            </block_content>}</block></function>
                        }</block></class></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>PartitionUpdate</name></type> <name>processModifications</name><parameter_list>(<parameter><decl><type><name>PartitionUpdate</name></type> <name>changes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name>getKeyspaceName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><call><name><name>changes</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>PartitionUpdate</name><operator>.</operator><name>CounterMark</name></name></argument>&gt;</argument_list></name></type> <name>marks</name> <init>= <expr><call><name><name>changes</name><operator>.</operator><name>collectCounterMarks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>CacheService</name><operator>.</operator><name>instance</name><operator>.</operator><name>counterCache</name><operator>.</operator><name>getCapacity</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Fetching {} counter values from cache"</literal></expr></argument>, <argument><expr><call><name><name>marks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateWithCurrentValuesFromCache</name><argument_list>(<argument><expr><name>marks</name></expr></argument>, <argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>marks</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>changes</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Reading {} counter values from the CF"</literal></expr></argument>, <argument><expr><call><name><name>marks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateWithCurrentValuesFromCFS</name><argument_list>(<argument><expr><name>marks</name></expr></argument>, <argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// What's remain is new counters</comment>
        <for>for <control>(<init><decl><type><name><name>PartitionUpdate</name><operator>.</operator><name>CounterMark</name></name></type> <name>mark</name> <range>: <expr><name>marks</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>updateWithCurrentValue</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><name><name>ClockAndCount</name><operator>.</operator><name>BLANK</name></name></expr></argument>, <argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><name>changes</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateWithCurrentValue</name><parameter_list>(<parameter><decl><type><name><name>PartitionUpdate</name><operator>.</operator><name>CounterMark</name></name></type> <name>mark</name></decl></parameter>, <parameter><decl><type><name>ClockAndCount</name></type> <name>currentValue</name></decl></parameter>, <parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>clock</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>currentValue</name><operator>.</operator><name>clock</name></name> <operator>+</operator> <literal type="number">1L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><name><name>currentValue</name><operator>.</operator><name>count</name></name> <operator>+</operator> <call><name><name>CounterContext</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>total</name><argument_list>(<argument><expr><call><name><name>mark</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ByteBufferAccessor</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>mark</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>CounterContext</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createGlobal</name><argument_list>(<argument><expr><call><name><name>CounterId</name><operator>.</operator><name>getLocalId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>clock</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Cache the newly updated value</comment>
        <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>putCachedCounter</name></name><argument_list>(<argument><expr><call><name>key</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mark</name><operator>.</operator><name>clustering</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mark</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mark</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ClockAndCount</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// Returns the count of cache misses.</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateWithCurrentValuesFromCache</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>PartitionUpdate</name><operator>.</operator><name>CounterMark</name></name></argument>&gt;</argument_list></name></type> <name>marks</name></decl></parameter>, <parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>PartitionUpdate</name><operator>.</operator><name>CounterMark</name></name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>marks</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>PartitionUpdate</name><operator>.</operator><name>CounterMark</name></name></type> <name>mark</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ClockAndCount</name></type> <name>cached</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>getCachedCounter</name></name><argument_list>(<argument><expr><call><name>key</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mark</name><operator>.</operator><name>clustering</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mark</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mark</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cached</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>updateWithCurrentValue</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><name>cached</name></expr></argument>, <argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="line">// Reads the missing current values from the CFS.</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateWithCurrentValuesFromCFS</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>PartitionUpdate</name><operator>.</operator><name>CounterMark</name></name></argument>&gt;</argument_list></name></type> <name>marks</name></decl></parameter>, <parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>ColumnFilter</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>ColumnFilter</name><operator>.</operator><name>selectionBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>BTreeSet</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name><name>Clustering</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>names</name> <init>= <expr><call><name><name>BTreeSet</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>comparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>PartitionUpdate</name><operator>.</operator><name>CounterMark</name></name></type> <name>mark</name> <range>: <expr><name>marks</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>mark</name><operator>.</operator><name>clustering</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Clustering</name><operator>.</operator><name>STATIC_CLUSTERING</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>names</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>mark</name><operator>.</operator><name>clustering</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>mark</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>mark</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>select</name></name><argument_list>(<argument><expr><call><name><name>mark</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mark</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>nowInSec</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ClusteringIndexNamesFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>ClusteringIndexNamesFilter</name><argument_list>(<argument><expr><call><name><name>names</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SinglePartitionReadCommand</name></type> <name>cmd</name> <init>= <expr><call><name><name>SinglePartitionReadCommand</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>, <argument><expr><call><name>key</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>PeekingIterator</name><argument_list type="generic">&lt;<argument><name><name>PartitionUpdate</name><operator>.</operator><name>CounterMark</name></name></argument>&gt;</argument_list></name></type> <name>markIter</name> <init>= <expr><call><name><name>Iterators</name><operator>.</operator><name>peekingIterator</name></name><argument_list>(<argument><expr><call><name><name>marks</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>ReadExecutionController</name></type> <name>controller</name> <init>= <expr><call><name><name>cmd</name><operator>.</operator><name>executionController</name></name><argument_list>()</argument_list></call></expr></init></decl>;
             <decl><type><name>RowIterator</name></type> <name>partition</name> <init>= <expr><call><name><name>UnfilteredRowIterators</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><call><name><name>cmd</name><operator>.</operator><name>queryMemtableAndDisk</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>controller</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name>updateForRow</name><argument_list>(<argument><expr><name>markIter</name></expr></argument>, <argument><expr><call><name><name>partition</name><operator>.</operator><name>staticRow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while>while <condition>(<expr><call><name><name>partition</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>markIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>updateForRow</name><argument_list>(<argument><expr><name>markIter</name></expr></argument>, <argument><expr><call><name><name>partition</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name><name>Clustering</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name><name>Clustering</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name><name>Clustering</name><operator>.</operator><name>STATIC_CLUSTERING</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><ternary><condition><expr><name>c2</name> <operator>==</operator> <name><name>Clustering</name><operator>.</operator><name>STATIC_CLUSTERING</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name><name>Clustering</name><operator>.</operator><name>STATIC_CLUSTERING</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>cfs</name><operator>.</operator><name>getComparator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compare</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateForRow</name><parameter_list>(<parameter><decl><type><name><name>PeekingIterator</name><argument_list type="generic">&lt;<argument><name><name>PartitionUpdate</name><operator>.</operator><name>CounterMark</name></name></argument>&gt;</argument_list></name></type> <name>markIter</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// If the mark is before the row, we have no value for this mark, just consume it</comment>
        <while>while <condition>(<expr><call><name><name>markIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>cmp</name> <operator>=</operator> <call><name>compare</name><argument_list>(<argument><expr><call><name><name>markIter</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clustering</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>clustering</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>markIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>markIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <while>while <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>PartitionUpdate</name><operator>.</operator><name>CounterMark</name></name></type> <name>mark</name> <init>= <expr><call><name><name>markIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>cell</name> <init>= <expr><ternary><condition><expr><call><name><name>mark</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getCell</name></name><argument_list>(<argument><expr><call><name><name>mark</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>row</name><operator>.</operator><name>getCell</name></name><argument_list>(<argument><expr><call><name><name>mark</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mark</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cell</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>updateWithCurrentValue</name><argument_list>(<argument><expr><name>mark</name></expr></argument>, <argument><expr><call><name><name>CounterContext</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocalClockAndCount</name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>buffer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>markIter</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>markIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>compare</name><argument_list>(<argument><expr><call><name><name>markIter</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clustering</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>clustering</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCounterWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>serializedSize30</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>serializedSize3014</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>serializedSize40</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>version</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>VERSION_30</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>serializedSize30</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>serializedSize30</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>VERSION_30</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>serializedSize30</name></expr>;</return>
            <case>case <expr><name>VERSION_3014</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>serializedSize3014</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>serializedSize3014</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>VERSION_3014</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>serializedSize3014</name></expr>;</return>
            <case>case <expr><name>VERSION_40</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>serializedSize40</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>serializedSize40</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>VERSION_40</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>serializedSize40</name></expr>;</return>
            <default>default:</default>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Unknown serialization version: "</literal> <operator>+</operator> <name>version</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>toString</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>shallow</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"CounterMutation(%s, %s)"</literal></expr></argument>, <argument><expr><call><name><name>mutation</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>shallow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>consistency</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>CounterMutationSerializer</name> <super_list><implements>implements <super><name><name>IVersionedSerializer</name><argument_list type="generic">&lt;<argument><name>CounterMutation</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>CounterMutation</name></type> <name>cm</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Mutation</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>cm</name><operator>.</operator><name>mutation</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>cm</name><operator>.</operator><name>consistency</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>CounterMutation</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Mutation</name></type> <name>m</name> <init>= <expr><call><name><name>Mutation</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ConsistencyLevel</name></type> <name>consistency</name> <init>= <expr><call><name><name>Enum</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>ConsistencyLevel</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><call><name><name>in</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>CounterMutation</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>consistency</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>CounterMutation</name></type> <name>cm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>cm</name><operator>.</operator><name>mutation</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call>
                 <operator>+</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>cm</name><operator>.</operator><name>consistency</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
