<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/schema/CachingParams.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>

<comment type="line">// CQL: {'keys' : 'ALL'|'NONE', 'rows_per_partition': '200'|'NONE'|'ALL'}</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>CachingParams</name>
<block>{
    <enum><specifier>public</specifier> enum <name>Option</name>
    <block>{
        <decl><name>KEYS</name></decl>,
        <decl><name>ROWS_PER_PARTITION</name></decl>;

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>name</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ALL</name> <init>= <expr><literal type="string">"ALL"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NONE</name> <init>= <expr><literal type="string">"NONE"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_CACHE_KEYS</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_ROWS_PER_PARTITION_TO_CACHE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CachingParams</name></type> <name>CACHE_NOTHING</name> <init>= <expr><operator>new</operator> <call><name>CachingParams</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CachingParams</name></type> <name>CACHE_KEYS</name> <init>= <expr><operator>new</operator> <call><name>CachingParams</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CachingParams</name></type> <name>CACHE_EVERYTHING</name> <init>= <expr><operator>new</operator> <call><name>CachingParams</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>CachingParams</name></type> <name>DEFAULT</name> <init>= <expr><operator>new</operator> <call><name>CachingParams</name><argument_list>(<argument><expr><name>DEFAULT_CACHE_KEYS</name></expr></argument>, <argument><expr><name>DEFAULT_ROWS_PER_PARTITION_TO_CACHE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>cacheKeys</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>rowsPerPartitionToCache</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CachingParams</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>cacheKeys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsPerPartitionToCache</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cacheKeys</name></name> <operator>=</operator> <name>cacheKeys</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rowsPerPartitionToCache</name></name> <operator>=</operator> <name>rowsPerPartitionToCache</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>cacheKeys</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>cacheKeys</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>cacheRows</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>rowsPerPartitionToCache</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>cacheAllRows</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>rowsPerPartitionToCache</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>rowsPerPartitionToCache</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>rowsPerPartitionToCache</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CachingParams</name></type> <name>fromMap</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>keys</name> <init>= <expr><call><name><name>copy</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>KEYS</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>cacheKeys</name> <init>= <expr><name>keys</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>keysFromString</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>rows</name> <init>= <expr><call><name><name>copy</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>ROWS_PER_PARTITION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rowsPerPartitionToCache</name> <init>= <expr><ternary><condition><expr><name>rows</name> <operator>==</operator> <literal type="null">null</literal></expr>
                                    ?</condition><then> <expr><literal type="number">0</literal></expr>
                                    </then><else>: <expr><call><name>rowsPerPartitionFromString</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>copy</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Invalid caching sub-options %s: only '%s' and '%s' are allowed"</literal></expr></argument>,
                                                    <argument><expr><call><name><name>copy</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                    <argument><expr><name><name>Option</name><operator>.</operator><name>KEYS</name></name></expr></argument>,
                                                    <argument><expr><name><name>Option</name><operator>.</operator><name>ROWS_PER_PARTITION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><operator>new</operator> <call><name>CachingParams</name><argument_list>(<argument><expr><name>cacheKeys</name></expr></argument>, <argument><expr><name>rowsPerPartitionToCache</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>asMap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>KEYS</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name>keysAsString</name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>Option</name><operator>.</operator><name>ROWS_PER_PARTITION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name>rowsPerPartitionAsString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>keysFromString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ALL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Invalid value '%s' for caching sub-option '%s': only '%s' and '%s' are allowed"</literal></expr></argument>,
                                                <argument><expr><name>value</name></expr></argument>,
                                                <argument><expr><name><name>Option</name><operator>.</operator><name>KEYS</name></name></expr></argument>,
                                                <argument><expr><name>ALL</name></expr></argument>,
                                                <argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><name>String</name></type> <name>keysAsString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>cacheKeys</name></expr> ?</condition><then> <expr><name>ALL</name></expr> </then><else>: <expr><name>NONE</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>rowsPerPartitionFromString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ALL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isNumeric</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Invalid value '%s' for caching sub-option '%s':"</literal>
                                                <operator>+</operator> <literal type="string">" only '%s', '%s', and integer values are allowed"</literal></expr></argument>,
                                                <argument><expr><name>value</name></expr></argument>,
                                                <argument><expr><name><name>Option</name><operator>.</operator><name>ROWS_PER_PARTITION</name></name></expr></argument>,
                                                <argument><expr><name>ALL</name></expr></argument>,
                                                <argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><name>String</name></type> <name>rowsPerPartitionAsString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rowsPerPartitionToCache</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NONE</name></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>rowsPerPartitionToCache</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>ALL</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>rowsPerPartitionToCache</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"{'%s' : '%s', '%s' : '%s'}"</literal></expr></argument>,
                      <argument><expr><name><name>Option</name><operator>.</operator><name>KEYS</name></name></expr></argument>,
                      <argument><expr><call><name>keysAsString</name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><name><name>Option</name><operator>.</operator><name>ROWS_PER_PARTITION</name></name></expr></argument>,
                      <argument><expr><call><name>rowsPerPartitionAsString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>CachingParams</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>CachingParams</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>CachingParams</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>cacheKeys</name> <operator>==</operator> <name><name>c</name><operator>.</operator><name>cacheKeys</name></name> <operator>&amp;&amp;</operator> <name>rowsPerPartitionToCache</name> <operator>==</operator> <name><name>c</name><operator>.</operator><name>rowsPerPartitionToCache</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>cacheKeys</name></expr></argument>, <argument><expr><name>rowsPerPartitionToCache</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
