<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/LivenessInfo.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cache</name><operator>.</operator><name>IMeasurableMemory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>Cell</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>serializers</name><operator>.</operator><name>MarshalException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ObjectSizes</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Stores the information relating to the liveness of the primary key columns of a row.
 * &lt;p&gt;
 * A {@code LivenessInfo} can first be empty. If it isn't, it contains at least a timestamp,
 * which is the timestamp for the row primary key columns. On top of that, the info can be
 * ttl'ed, in which case the {@code LivenessInfo} also has both a ttl and a local expiration time.
 * &lt;p&gt;
 * Please note that if a liveness info is ttl'ed, that expiration is &lt;b&gt;only&lt;/b&gt; an expiration
 * of the liveness info itself (so, of the timestamp), and once the info expires it becomes
 * {@code EMPTY}. But if a row has a liveness info which expires, the rest of the row data is
 * unaffected (of course, the rest of said row data might be ttl'ed on its own but this is
 * separate).
 */</comment>
<class><specifier>public</specifier> class <name>LivenessInfo</name> <super_list><implements>implements <super><name>IMeasurableMemory</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>NO_TIMESTAMP</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NO_TTL</name> <init>= <expr><name><name>Cell</name><operator>.</operator><name>NO_TTL</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Used as flag for representing an expired liveness.
     *
     * TTL per request is at most 20 yrs, so this shouldn't conflict
     * (See {@link org.apache.cassandra.cql3.Attributes#MAX_TTL})
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EXPIRED_LIVENESS_TTL</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NO_EXPIRATION_TIME</name> <init>= <expr><name><name>Cell</name><operator>.</operator><name>NO_DELETION_TIME</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>LivenessInfo</name></type> <name>EMPTY</name> <init>= <expr><operator>new</operator> <call><name>LivenessInfo</name><argument_list>(<argument><expr><name>NO_TIMESTAMP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>UNSHARED_HEAP_SIZE</name> <init>= <expr><call><name><name>ObjectSizes</name><operator>.</operator><name>measure</name></name><argument_list>(<argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>long</name></type> <name>timestamp</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>LivenessInfo</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>LivenessInfo</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>LivenessInfo</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>LivenessInfo</name></type> <name>expiring</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>ttl</name> <operator>!=</operator> <name>EXPIRED_LIVENESS_TTL</name></expr>;</assert>
        <return>return <expr><operator>new</operator> <call><name>ExpiringLivenessInfo</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><call><name><name>ExpirationDateOverflowHandling</name><operator>.</operator><name>computeLocalExpirationTime</name></name><argument_list>(<argument><expr><name>nowInSec</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>LivenessInfo</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>ttl</name> <operator>==</operator> <name>NO_TTL</name></expr>
             ?</condition><then> <expr><call><name>create</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>)</argument_list></call></expr>
             </then><else>: <expr><call><name>expiring</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Note that this ctor takes the expiration time, not the current time.</comment>
    <comment type="line">// Use when you know that's what you want.</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>LivenessInfo</name></type> <name>withExpirationTime</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>localExpirationTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>==</operator> <name>EXPIRED_LIVENESS_TTL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>ExpiredLivenessInfo</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>localExpirationTime</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><ternary><condition><expr><name>ttl</name> <operator>==</operator> <name>NO_TTL</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name>LivenessInfo</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name>ExpiringLivenessInfo</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>localExpirationTime</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether this liveness info is empty (has no timestamp).
     *
     * @return whether this liveness info is empty or not.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>timestamp</name> <operator>==</operator> <name>NO_TIMESTAMP</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The timestamp for this liveness info.
     *
     * @return the liveness info timestamp (or {@link #NO_TIMESTAMP} if the info is empty).
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>timestamp</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>timestamp</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether the info has a ttl.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isExpiring</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The ttl (if any) on the row primary key columns or {@link #NO_TTL} if it is not
     * expiring.
     *
     * Please note that this value is the TTL that was set originally and is thus not
     * changing.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>ttl</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>NO_TTL</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The expiration time (in seconds) if the info is expiring ({@link #NO_EXPIRATION_TIME} otherwise).
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>localExpirationTime</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>NO_EXPIRATION_TIME</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether that info is still live.
     *
     * A {@code LivenessInfo} is live if it is either not expiring, or if its expiration time if after
     * {@code nowInSec}.
     *
     * @param nowInSec the current time in seconds.
     * @return whether this liveness info is live or not.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Adds this liveness information to the provided digest.
     *
     * @param digest the digest to add this liveness information to.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>digest</name><parameter_list>(<parameter><decl><type><name>Digest</name></type> <name>digest</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>digest</name><operator>.</operator><name>updateWithLong</name></name><argument_list>(<argument><expr><call><name>timestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Validate the data contained by this liveness information.
     *
     * @throws MarshalException if some of the data is corrupted.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The size of the (useful) data this liveness information contains.
     *
     * @return the size of the data this liveness information contains.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>dataSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name>timestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether this liveness information supersedes another one (that is
     * whether is has a greater timestamp than the other or not).
     *
     * &lt;/br&gt;
     *
     * If timestamps are the same and none of them are expired livenessInfo,
     * livenessInfo with greater TTL supersedes another. It also means, if timestamps are the same,
     * ttl superseders no-ttl. This is the same rule as {@link Conflicts#resolveRegular}
     *
     * If timestamps are the same and one of them is expired livenessInfo. Expired livenessInfo
     * supersedes, ie. tombstone supersedes.
     *
     * If timestamps are the same and both of them are expired livenessInfo(Ideally it shouldn't happen),
     * greater localDeletionTime wins.
     *
     * @param other
     *            the {@code LivenessInfo} to compare this info to.
     *
     * @return whether this {@code LivenessInfo} supersedes {@code other}.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>supersedes</name><parameter_list>(<parameter><decl><type><name>LivenessInfo</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>timestamp</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>timestamp</name> <operator>&gt;</operator> <name><name>other</name><operator>.</operator><name>timestamp</name></name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isExpired</name><argument_list>()</argument_list></call> <operator>^</operator> <call><name><name>other</name><operator>.</operator><name>isExpired</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>isExpired</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isExpiring</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>other</name><operator>.</operator><name>isExpiring</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>localExpirationTime</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>other</name><operator>.</operator><name>localExpirationTime</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name>isExpiring</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isExpired</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a copy of this liveness info updated with the provided timestamp.
     *
     * @param newTimestamp the timestamp for the returned info.
     * @return if this liveness info has a timestamp, a copy of it with {@code newTimestamp}
     * as timestamp. If it has no timestamp however, this liveness info is returned
     * unchanged.
     */</comment>
    <function><type><specifier>public</specifier> <name>LivenessInfo</name></type> <name>withUpdatedTimestamp</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>newTimestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>LivenessInfo</name><argument_list>(<argument><expr><name>newTimestamp</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>LivenessInfo</name></type> <name>withUpdatedTimestampAndLocalDeletionTime</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>newTimestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newLocalDeletionTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>LivenessInfo</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>newTimestamp</name></expr></argument>, <argument><expr><call><name>ttl</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newLocalDeletionTime</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"[ts=%d]"</literal></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>other</name> <operator>instanceof</operator> <name>LivenessInfo</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>LivenessInfo</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>LivenessInfo</name><operator>)</operator><name>other</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>that</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>ttl</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>that</name><operator>.</operator><name>ttl</name></name><argument_list>()</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>localExpirationTime</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>that</name><operator>.</operator><name>localExpirationTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><call><name>timestamp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ttl</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>localExpirationTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>unsharedHeapSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>this</name> <operator>==</operator> <name>EMPTY</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>UNSHARED_HEAP_SIZE</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Effectively acts as a PK tombstone. This is used for Materialized Views to shadow
     * updated entries while co-existing with row tombstones.
     *
     * See {@link org.apache.cassandra.db.view.ViewUpdateGenerator#deleteOldEntryInternal}.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ExpiredLivenessInfo</name> <super_list><extends>extends <super><name>ExpiringLivenessInfo</name></super></extends></super_list>
    <block>{
        <constructor><specifier>private</specifier> <name>ExpiredLivenessInfo</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>localExpirationTime</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>localExpirationTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <assert>assert <expr><name>ttl</name> <operator>==</operator> <name>EXPIRED_LIVENESS_TTL</name></expr>;</assert>
            <assert>assert <expr><name>timestamp</name> <operator>!=</operator> <name>NO_TIMESTAMP</name></expr>;</assert>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>isExpired</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>isLive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// used as tombstone to shadow entire PK</comment>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>LivenessInfo</name></type> <name>withUpdatedTimestamp</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>newTimestamp</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ExpiredLivenessInfo</name><argument_list>(<argument><expr><name>newTimestamp</name></expr></argument>, <argument><expr><call><name>ttl</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>localExpirationTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ExpiringLivenessInfo</name> <super_list><extends>extends <super><name>LivenessInfo</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>ttl</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>localExpirationTime</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>UNSHARED_HEAP_SIZE</name> <init>= <expr><call><name><name>ObjectSizes</name><operator>.</operator><name>measure</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ExpiringLivenessInfo</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>ExpiringLivenessInfo</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>localExpirationTime</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <assert>assert <expr><name>ttl</name> <operator>!=</operator> <name>NO_TTL</name> <operator>&amp;&amp;</operator> <name>localExpirationTime</name> <operator>!=</operator> <name>NO_EXPIRATION_TIME</name></expr>;</assert>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localExpirationTime</name></name> <operator>=</operator> <name>localExpirationTime</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>ttl</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>ttl</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>localExpirationTime</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>localExpirationTime</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>isExpiring</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>isLive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>nowInSec</name> <operator>&lt;</operator> <name>localExpirationTime</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>digest</name><parameter_list>(<parameter><decl><type><name>Digest</name></type> <name>digest</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>digest</name></name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>digest</name><operator>.</operator><name>updateWithInt</name></name><argument_list>(<argument><expr><name>localExpirationTime</name></expr></argument>)</argument_list></call>
                  <operator>.</operator><call><name>updateWithInt</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>MarshalException</name><argument_list>(<argument><expr><literal type="string">"A TTL should not be negative"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>localExpirationTime</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>MarshalException</name><argument_list>(<argument><expr><literal type="string">"A local expiration time should not be negative"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>dataSize</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>dataSize</name></name><argument_list>()</argument_list></call>
                 <operator>+</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><name>ttl</name></expr></argument>)</argument_list></call>
                 <operator>+</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><name>localExpirationTime</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>LivenessInfo</name></type> <name>withUpdatedTimestamp</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>newTimestamp</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ExpiringLivenessInfo</name><argument_list>(<argument><expr><name>newTimestamp</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>localExpirationTime</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"[ts=%d ttl=%d, let=%d]"</literal></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>localExpirationTime</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>unsharedHeapSize</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>UNSHARED_HEAP_SIZE</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
