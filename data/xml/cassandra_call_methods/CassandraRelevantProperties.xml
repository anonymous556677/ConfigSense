<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/config/CassandraRelevantProperties.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>

<comment type="block" format="javadoc">/** A class that extracts system properties for the cassandra node it runs within. */</comment>
<enum><specifier>public</specifier> enum <name>CassandraRelevantProperties</name>
<block>{
    <comment type="line">//base JVM properties</comment>
    <decl><name>JAVA_HOME</name><argument_list>(<argument><expr><literal type="string">"java.home"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>CASSANDRA_PID_FILE</name> <argument_list>(<argument><expr><literal type="string">"cassandra-pidfile"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * Indicates the temporary directory used by the Java Virtual Machine (JVM)
     * to create and store temporary files.
     */</comment>
    <decl><name>JAVA_IO_TMPDIR</name> <argument_list>(<argument><expr><literal type="string">"java.io.tmpdir"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * Path from which to load native libraries.
     * Default is absolute path to lib directory.
     */</comment>
    <decl><name>JAVA_LIBRARY_PATH</name> <argument_list>(<argument><expr><literal type="string">"java.library.path"</literal></expr></argument>)</argument_list></decl>,

    <decl><name>JAVA_SECURITY_EGD</name> <argument_list>(<argument><expr><literal type="string">"java.security.egd"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** Java Runtime Environment version */</comment>
    <decl><name>JAVA_VERSION</name> <argument_list>(<argument><expr><literal type="string">"java.version"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** Java Virtual Machine implementation name */</comment>
    <decl><name>JAVA_VM_NAME</name> <argument_list>(<argument><expr><literal type="string">"java.vm.name"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** Line separator ("\n" on UNIX). */</comment>
    <decl><name>LINE_SEPARATOR</name> <argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** Java class path. */</comment>
    <decl><name>JAVA_CLASS_PATH</name> <argument_list>(<argument><expr><literal type="string">"java.class.path"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** Operating system architecture. */</comment>
    <decl><name>OS_ARCH</name> <argument_list>(<argument><expr><literal type="string">"os.arch"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** Operating system name. */</comment>
    <decl><name>OS_NAME</name> <argument_list>(<argument><expr><literal type="string">"os.name"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** User's home directory. */</comment>
    <decl><name>USER_HOME</name> <argument_list>(<argument><expr><literal type="string">"user.home"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** Platform word size sun.arch.data.model. Examples: "32", "64", "unknown"*/</comment>
    <decl><name>SUN_ARCH_DATA_MODEL</name> <argument_list>(<argument><expr><literal type="string">"sun.arch.data.model"</literal></expr></argument>)</argument_list></decl>,

    <comment type="line">//JMX properties</comment>
    <comment type="block" format="javadoc">/**
     * The value of this property represents the host name string
     * that should be associated with remote stubs for locally created remote objects,
     * in order to allow clients to invoke methods on the remote object.
     */</comment>
    <decl><name>JAVA_RMI_SERVER_HOSTNAME</name> <argument_list>(<argument><expr><literal type="string">"java.rmi.server.hostname"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * If this value is true, object identifiers for remote objects exported by this VM will be generated by using
     * a cryptographically secure random number generator. The default value is false.
     */</comment>
    <decl><name>JAVA_RMI_SERVER_RANDOM_ID</name> <argument_list>(<argument><expr><literal type="string">"java.rmi.server.randomIDs"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * This property indicates whether password authentication for remote monitoring is
     * enabled. By default it is disabled - com.sun.management.jmxremote.authenticate
     */</comment>
    <decl><name>COM_SUN_MANAGEMENT_JMXREMOTE_AUTHENTICATE</name> <argument_list>(<argument><expr><literal type="string">"com.sun.management.jmxremote.authenticate"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * The port number to which the RMI connector will be bound - com.sun.management.jmxremote.rmi.port.
     * An Integer object that represents the value of the second argument is returned
     * if there is no port specified, if the port does not have the correct numeric format,
     * or if the specified name is empty or null.
     */</comment>
    <decl><name>COM_SUN_MANAGEMENT_JMXREMOTE_RMI_PORT</name> <argument_list>(<argument><expr><literal type="string">"com.sun.management.jmxremote.rmi.port"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** Cassandra jmx remote port */</comment>
    <decl><name>CASSANDRA_JMX_REMOTE_PORT</name><argument_list>(<argument><expr><literal type="string">"cassandra.jmx.remote.port"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** This property  indicates whether SSL is enabled for monitoring remotely. Default is set to false. */</comment>
    <decl><name>COM_SUN_MANAGEMENT_JMXREMOTE_SSL</name> <argument_list>(<argument><expr><literal type="string">"com.sun.management.jmxremote.ssl"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * This property indicates whether SSL client authentication is enabled - com.sun.management.jmxremote.ssl.need.client.auth.
     * Default is set to false.
     */</comment>
    <decl><name>COM_SUN_MANAGEMENT_JMXREMOTE_SSL_NEED_CLIENT_AUTH</name> <argument_list>(<argument><expr><literal type="string">"com.sun.management.jmxremote.ssl.need.client.auth"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * This property indicates the location for the access file. If com.sun.management.jmxremote.authenticate is false,
     * then this property and the password and access files, are ignored. Otherwise, the access file must exist and
     * be in the valid format. If the access file is empty or nonexistent, then no access is allowed.
     */</comment>
    <decl><name>COM_SUN_MANAGEMENT_JMXREMOTE_ACCESS_FILE</name> <argument_list>(<argument><expr><literal type="string">"com.sun.management.jmxremote.access.file"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** This property indicates the path to the password file - com.sun.management.jmxremote.password.file */</comment>
    <decl><name>COM_SUN_MANAGEMENT_JMXREMOTE_PASSWORD_FILE</name> <argument_list>(<argument><expr><literal type="string">"com.sun.management.jmxremote.password.file"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** Port number to enable JMX RMI connections - com.sun.management.jmxremote.port */</comment>
    <decl><name>COM_SUN_MANAGEMENT_JMXREMOTE_PORT</name> <argument_list>(<argument><expr><literal type="string">"com.sun.management.jmxremote.port"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * A comma-delimited list of SSL/TLS protocol versions to enable.
     * Used in conjunction with com.sun.management.jmxremote.ssl - com.sun.management.jmxremote.ssl.enabled.protocols
     */</comment>
    <decl><name>COM_SUN_MANAGEMENT_JMXREMOTE_SSL_ENABLED_PROTOCOLS</name> <argument_list>(<argument><expr><literal type="string">"com.sun.management.jmxremote.ssl.enabled.protocols"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * A comma-delimited list of SSL/TLS cipher suites to enable.
     * Used in conjunction with com.sun.management.jmxremote.ssl - com.sun.management.jmxremote.ssl.enabled.cipher.suites
     */</comment>
    <decl><name>COM_SUN_MANAGEMENT_JMXREMOTE_SSL_ENABLED_CIPHER_SUITES</name> <argument_list>(<argument><expr><literal type="string">"com.sun.management.jmxremote.ssl.enabled.cipher.suites"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** mx4jaddress */</comment>
    <decl><name>MX4JADDRESS</name> <argument_list>(<argument><expr><literal type="string">"mx4jaddress"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** mx4jport */</comment>
    <decl><name>MX4JPORT</name> <argument_list>(<argument><expr><literal type="string">"mx4jport"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * When bootstraping we wait for all schema versions found in gossip to be seen, and if not seen in time we fail
     * the bootstrap; this property will avoid failing and allow bootstrap to continue if set to true.
     */</comment>
    <decl><name>BOOTSTRAP_SKIP_SCHEMA_CHECK</name><argument_list>(<argument><expr><literal type="string">"cassandra.skip_schema_check"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * When bootstraping how long to wait for schema versions to be seen.
     */</comment>
    <decl><name>BOOTSTRAP_SCHEMA_DELAY_MS</name><argument_list>(<argument><expr><literal type="string">"cassandra.schema_delay_ms"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * When draining, how long to wait for mutating executors to shutdown.
     */</comment>
    <decl><name>DRAIN_EXECUTOR_TIMEOUT_MS</name><argument_list>(<argument><expr><literal type="string">"cassandra.drain_executor_timeout_ms"</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * Gossip quarantine delay is used while evaluating membership changes and should only be changed with extreme care.
     */</comment>
    <decl><name>GOSSIPER_QUARANTINE_DELAY</name><argument_list>(<argument><expr><literal type="string">"cassandra.gossip_quarantine_delay_ms"</literal></expr></argument>)</argument_list></decl>,

    <decl><name>IGNORED_SCHEMA_CHECK_VERSIONS</name><argument_list>(<argument><expr><literal type="string">"cassandra.skip_schema_check_for_versions"</literal></expr></argument>)</argument_list></decl>,

    <decl><name>IGNORED_SCHEMA_CHECK_ENDPOINTS</name><argument_list>(<argument><expr><literal type="string">"cassandra.skip_schema_check_for_endpoints"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * When doing a host replacement its possible that the gossip state is "empty" meaning that the endpoint is known
     * but the current state isn't known.  If the host replacement is needed to repair this state, this property must
     * be true.
     */</comment>
    <decl><name>REPLACEMENT_ALLOW_EMPTY</name><argument_list>(<argument><expr><literal type="string">"cassandra.allow_empty_replace_address"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * Whether {@link org.apache.cassandra.db.ConsistencyLevel#NODE_LOCAL} should be allowed.
     */</comment>
    <decl><name>ENABLE_NODELOCAL_QUERIES</name><argument_list>(<argument><expr><literal type="string">"cassandra.enable_nodelocal_queries"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></decl>,

    <comment type="line">//cassandra properties (without the "cassandra." prefix)</comment>

    <comment type="block" format="javadoc">/**
     * The cassandra-foreground option will tell CassandraDaemon whether
     * to close stdout/stderr, but it's up to us not to background.
     * yes/null
     */</comment>
    <decl><name>CASSANDRA_FOREGROUND</name> <argument_list>(<argument><expr><literal type="string">"cassandra-foreground"</literal></expr></argument>)</argument_list></decl>,

    <decl><name>DEFAULT_PROVIDE_OVERLAPPING_TOMBSTONES</name> <argument_list>(<argument><expr><literal type="string">"default.provide.overlapping.tombstones"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>ORG_APACHE_CASSANDRA_DISABLE_MBEAN_REGISTRATION</name> <argument_list>(<argument><expr><literal type="string">"org.apache.cassandra.disable_mbean_registration"</literal></expr></argument>)</argument_list></decl>,
    <comment type="line">//only for testing</comment>
    <decl><name>ORG_APACHE_CASSANDRA_CONF_CASSANDRA_RELEVANT_PROPERTIES_TEST</name><argument_list>(<argument><expr><literal type="string">"org.apache.cassandra.conf.CassandraRelevantPropertiesTest"</literal></expr></argument>)</argument_list></decl>,
    <decl><name>ORG_APACHE_CASSANDRA_DB_VIRTUAL_SYSTEM_PROPERTIES_TABLE_TEST</name><argument_list>(<argument><expr><literal type="string">"org.apache.cassandra.db.virtual.SystemPropertiesTableTest"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** This property indicates whether disable_mbean_registration is true */</comment>
    <decl><name>IS_DISABLED_MBEAN_REGISTRATION</name><argument_list>(<argument><expr><literal type="string">"org.apache.cassandra.disable_mbean_registration"</literal></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/** what class to use for mbean registeration */</comment>
    <decl><name>MBEAN_REGISTRATION_CLASS</name><argument_list>(<argument><expr><literal type="string">"org.apache.cassandra.mbean_registration_class"</literal></expr></argument>)</argument_list></decl>;

    <constructor><name>CassandraRelevantProperties</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultVal</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultVal</name></name> <operator>=</operator> <name>defaultVal</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><name>CassandraRelevantProperties</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultVal</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>defaultVal</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKey</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>key</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the value of the indicated system property.
     * @return system property value if it exists, defaultValue otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>defaultVal</name></expr> </then><else>: <expr><call><name><name>STRING_CONVERTER</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the value of a system property as a String.
     * @return system property String value if it exists, overrideDefaultValue otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>overrideDefaultValue</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>overrideDefaultValue</name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>STRING_CONVERTER</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the value into system properties.
     * @param value to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the value of a system property as a boolean.
     * @return system property boolean value if it exists, false otherwise().
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>BOOLEAN_CONVERTER</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>defaultVal</name></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the value of a system property as a boolean.
     * @return system property boolean value if it exists, overrideDefaultValue otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>overrideDefaultValue</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>overrideDefaultValue</name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>BOOLEAN_CONVERTER</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the value into system properties.
     * @param value to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBoolean</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the value of a system property as a int.
     * @return system property int value if it exists, defaultValue otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>INTEGER_CONVERTER</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>defaultVal</name></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the value of a system property as a int.
     * @return system property int value if it exists, overrideDefaultValue otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>overrideDefaultValue</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>overrideDefaultValue</name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>INTEGER_CONVERTER</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the value into system properties.
     * @param value to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <interface><specifier>private</specifier> interface <name><name>PropertyConverter</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name>
    <block>{
        <function_decl><type><name>T</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>PropertyConverter</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>STRING_CONVERTER</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>value</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name>value</name></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>PropertyConverter</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>BOOLEAN_CONVERTER</name> <init>= <expr><name>Boolean</name><operator>::</operator><name>parseBoolean</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>PropertyConverter</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>INTEGER_CONVERTER</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>value</name></decl></parameter></parameter_list> -&gt;
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Invalid value for system property: "</literal> <operator>+</operator>
                                                           <literal type="string">"expected integer value but got '%s'"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @return whether a system property is present or not.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPresent</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>System</name><operator>.</operator><name>getProperties</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>containsKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></enum>

</unit>
