<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/binlog/BinLog.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>binlog</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Paths</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Strings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>openhft</name><operator>.</operator><name>chronicle</name><operator>.</operator><name>queue</name><operator>.</operator><name>ChronicleQueue</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>openhft</name><operator>.</operator><name>chronicle</name><operator>.</operator><name>queue</name><operator>.</operator><name>impl</name><operator>.</operator><name>single</name><operator>.</operator><name>SingleChronicleQueueBuilder</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>openhft</name><operator>.</operator><name>chronicle</name><operator>.</operator><name>queue</name><operator>.</operator><name>ExcerptAppender</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>openhft</name><operator>.</operator><name>chronicle</name><operator>.</operator><name>queue</name><operator>.</operator><name>RollCycles</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>openhft</name><operator>.</operator><name>chronicle</name><operator>.</operator><name>wire</name><operator>.</operator><name>WireOut</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>openhft</name><operator>.</operator><name>chronicle</name><operator>.</operator><name>wire</name><operator>.</operator><name>WriteMarshallable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>NamedThreadFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>fql</name><operator>.</operator><name>FullQueryLoggerOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JVMStabilityInspector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NoSpamLogger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Throwables</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>WeightedQueue</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Bin log is a is quick and dirty binary log that is kind of a NIH version of binary logging with a traditional logging
 * framework. It's goal is good enough performance, predictable footprint, simplicity in terms of implementation and configuration
 * and most importantly minimal impact on producers of log records.
 *
 * Performance safety is accomplished by feeding items to the binary log using a weighted queue and dropping records if the binary log falls
 * sufficiently far behind.
 *
 * Simplicity and good enough perforamance is achieved by using a single log writing thread as well as Chronicle Queue
 * to handle writing the log, making it available for readers, as well as log rolling.
 *
 */</comment>
<class><specifier>public</specifier> class <name>BinLog</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>BinLog</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NoSpamLogger</name></type> <name>noSpamLogger</name> <init>= <expr><call><name><name>NoSpamLogger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>NoSpamLogger</name><operator>.</operator><name>NoSpamLogStatement</name></name></type> <name>droppedSamplesStatement</name> <init>= <expr><call><name><name>noSpamLogger</name><operator>.</operator><name>getStatement</name></name><argument_list>(<argument><expr><literal type="string">"Dropped {} binary log samples"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Path</name></type> <name>path</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VERSION</name> <init>= <expr><literal type="string">"version"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TYPE</name> <init>= <expr><literal type="string">"type"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ChronicleQueue</name></type> <name>queue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ExcerptAppender</name></type> <name>appender</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>Thread</name></type> <name>binLogThread</name> <init>= <expr><operator>new</operator> <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><literal type="string">"Binary Log thread"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>newThread</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>WeightedQueue</name><argument_list type="generic">&lt;<argument><name>ReleaseableWriteMarshallable</name></argument>&gt;</argument_list></name></type> <name>sampleQueue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BinLogArchiver</name></type> <name>archiver</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>blocking</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>droppedSamplesSinceLastLog</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>BinLogOptions</name></type> <name>options</name></decl>;</decl_stmt>

    <comment type="block">/*
    This set contains all the paths we are currently logging to, it is used to make sure
    we don't start writing audit and full query logs to the same path.
    */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type> <name>currentPaths</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>synchronizedSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ReleaseableWriteMarshallable</name></type> <name>NO_OP</name> <init>= <expr><operator>new</operator> <class><super><name>ReleaseableWriteMarshallable</name></super><argument_list>()</argument_list>
    <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name>long</name></type> <name>version</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name>String</name></type> <name>type</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"no-op"</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>writeMarshallablePayload</name><parameter_list>(<parameter><decl><type><name>WireOut</name></type> <name>wire</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>release</name><parameter_list>()</parameter_list>
        <block>{<block_content>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>shouldContinue</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>BinLog</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>BinLogOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>BinLogArchiver</name></type> <name>archiver</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"path was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>roll_cycle</name></name></expr></argument>, <argument><expr><literal type="string">"roll_cycle was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>max_queue_weight</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"max_queue_weight must be &gt; 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SingleChronicleQueueBuilder</name></type> <name>builder</name> <init>= <expr><call><name><name>SingleChronicleQueueBuilder</name><operator>.</operator><name>single</name></name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>rollCycle</name></name><argument_list>(<argument><expr><call><name><name>RollCycles</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>roll_cycle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>sampleQueue</name> <operator>=</operator> <operator>new</operator> <call><name><name>WeightedQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>max_queue_weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>archiver</name></name> <operator>=</operator> <name>archiver</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>storeFileListener</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>archiver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>appender</name> <operator>=</operator> <call><name><name>queue</name><operator>.</operator><name>acquireAppender</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blocking</name></name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>block</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>BinLogOptions</name></type> <name>getBinLogOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>options</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Start the consumer thread that writes log records. Can only be done once.
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>void</name></type> <name>start</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>shouldContinue</name></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Can't reuse stopped BinLog"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>binLogThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Stop the consumer thread that writes log records. Can be called multiple times.
     * @throws InterruptedException
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>shouldContinue</name></expr>)</condition>
        <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>shouldContinue</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sampleQueue</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>NO_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>binLogThread</name><operator>.</operator><name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appender</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>appender</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>queue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>archiver</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>currentPaths</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Offer a record to the log. If the in memory queue is full the record will be dropped and offer will return false.
     * @param record The record to write to the log
     * @return true if the record was queued and false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>offer</name><parameter_list>(<parameter><decl><type><name>ReleaseableWriteMarshallable</name></type> <name>record</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>shouldContinue</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>sampleQueue</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Put a record into the log. If the in memory queue is full the putting thread will be blocked until there is space or it is interrupted.
     * @param record The record to write to the log
     * @throws InterruptedException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>ReleaseableWriteMarshallable</name></type> <name>record</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>shouldContinue</name></expr>)</condition>
        <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//Resolve potential deadlock at shutdown when queue is full</comment>
        <while>while <condition>(<expr><name>shouldContinue</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>sampleQueue</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>processTasks</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ReleaseableWriteMarshallable</name></argument>&gt;</argument_list></name></type> <name>tasks</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <call><name><name>tasks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>WriteMarshallable</name></type> <name>t</name> <init>= <expr><call><name><name>tasks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//Don't write an empty document</comment>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NO_OP</name></expr>)</condition>
            <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>appender</name><operator>.</operator><name>writeDocument</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ReleaseableWriteMarshallable</name></argument>&gt;</argument_list></name></type> <name>tasks</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>shouldContinue</name></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>tasks</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>ReleaseableWriteMarshallable</name></type> <name>task</name> <init>= <expr><call><name><name>sampleQueue</name><operator>.</operator><name>take</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>tasks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sampleQueue</name><operator>.</operator><name>drainTo</name></name><argument_list>(<argument><expr><name>tasks</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>processTasks</name><argument_list>(<argument><expr><name>tasks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Unexpected exception in binary log thread"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch>
            <finally>finally
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <call><name><name>tasks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>tasks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ii</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></finally></try>
        </block_content>}</block></while>

        <comment type="line">//Clean up the buffers on thread exit, finalization will check again once this</comment>
        <comment type="line">//is no longer reachable ensuring there are no stragglers in the queue.</comment>
        <expr_stmt><expr><call><name>finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * There is a race where we might not release a buffer, going to let finalization
     * catch it since it shouldn't happen to a lot of buffers. Only test code would run
     * into it anyways.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>finalize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ReleaseableWriteMarshallable</name></type> <name>toRelease</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>(</operator><operator>(</operator><name>toRelease</name> <operator>=</operator> <call><name><name>sampleQueue</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>toRelease</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="line">// todo: refactor to helper class?</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>logRecord</name><parameter_list>(<parameter><decl><type><name>ReleaseableWriteMarshallable</name></type> <name>record</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>putInQueue</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>blocking</name></expr>)</condition>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>putInQueue</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>offer</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>logDroppedSample</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>putInQueue</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>putInQueue</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>record</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This is potentially lossy, but it's not super critical as we will always generally know
     * when this is happening and roughly how bad it is.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>logDroppedSample</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>droppedSamplesSinceLastLog</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>droppedSamplesStatement</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name></expr></argument></argument_list></call></expr></condition> <block>{<block_content><expr><call><name><name>droppedSamplesSinceLastLog</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></block_content>}</block></if></if_stmt>)</block_content></block></function>)</block>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>droppedSamplesSinceLastLog</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></class>
    }


    public <class><specifier>abstract</specifier> <specifier>static</specifier> class <name>ReleaseableWriteMarshallable</name> <super_list><implements>implements <super><name>WriteMarshallable</name></super></implements></super_list>
    <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>writeMarshallable</name><parameter_list>(<parameter><decl><type><name>WireOut</name></type> <name>wire</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>int16</name><argument_list>(<argument><expr><call><name>version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>text</name><argument_list>(<argument><expr><call><name>type</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>writeMarshallablePayload</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>version</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>type</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>writeMarshallablePayload</name><parameter_list>(<parameter><decl><type><name>WireOut</name></type> <name>wire</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>release</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Builder</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>path</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>rollCycle</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxQueueWeight</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>maxLogSize</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>archiveCommand</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxArchiveRetries</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>blocking</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>path</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"path was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>pathAsFile</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//Exists and is a directory or can be created</comment>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pathAsFile</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"you might have forgotten to specify a directory to save logs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>pathAsFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>pathAsFile</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name><name>pathAsFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>pathAsFile</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"path exists and is not a directory or couldn't be created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><call><name><name>pathAsFile</name><operator>.</operator><name>canRead</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>pathAsFile</name><operator>.</operator><name>canWrite</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>pathAsFile</name><operator>.</operator><name>canExecute</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"path is not readable, writable, and executable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>rollCycle</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>rollCycle</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>rollCycle</name></expr></argument>, <argument><expr><literal type="string">"rollCycle was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rollCycle</name> <operator>=</operator> <call><name><name>rollCycle</name><operator>.</operator><name>toUpperCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><call><name><name>RollCycles</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>rollCycle</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"unrecognized roll cycle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rollCycle</name></name> <operator>=</operator> <name>rollCycle</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>maxQueueWeight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxQueueWeight</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>maxQueueWeight</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"maxQueueWeight must be &gt; 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxQueueWeight</name></name> <operator>=</operator> <name>maxQueueWeight</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>maxLogSize</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>maxLogSize</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>maxLogSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"maxLogSize must be &gt; 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxLogSize</name></name> <operator>=</operator> <name>maxLogSize</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>archiveCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>archiveCommand</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>archiveCommand</name></name> <operator>=</operator> <name>archiveCommand</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>maxArchiveRetries</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxArchiveRetries</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxArchiveRetries</name></name> <operator>=</operator> <name>maxArchiveRetries</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>blocking</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>blocking</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blocking</name></name> <operator>=</operator> <name>blocking</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>


        <function><type><specifier>public</specifier> <name>BinLog</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>cleanDirectory</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Attempting to configure bin log: Path: {} Roll cycle: {} Blocking: {} Max queue weight: {} Max log size:{} Archive command: {}"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rollCycle</name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>, <argument><expr><name>maxQueueWeight</name></expr></argument>, <argument><expr><name>maxLogSize</name></expr></argument>, <argument><expr><name>archiveCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <synchronized>synchronized <init>(<expr><name>currentPaths</name></expr>)</init>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>currentPaths</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Already logging to "</literal> <operator>+</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>currentPaths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></synchronized>
            <try>try
            <block>{<block_content>
                <comment type="line">// create the archiver before cleaning directories - ExternalArchiver will try to archive any existing file.</comment>
                <decl_stmt><decl><type><name>BinLogArchiver</name></type> <name>archiver</name> <init>= <expr><ternary><condition><expr><call><name><name>Strings</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>archiveCommand</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>new</operator> <call><name>DeletingArchiver</name><argument_list>(<argument><expr><name>maxLogSize</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name>ExternalArchiver</name><argument_list>(<argument><expr><name>archiveCommand</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>maxArchiveRetries</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>cleanDirectory</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Cleaning directory: {} as requested"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>path</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>Throwable</name></type> <name>error</name> <init>= <expr><call><name>cleanDirectory</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                        <block>{<block_content>
                            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>BinLogOptions</name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name>BinLogOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>max_log_size</name></name> <operator>=</operator> <name>maxLogSize</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>max_queue_weight</name></name> <operator>=</operator> <name>maxQueueWeight</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>block</name></name> <operator>=</operator> <name>blocking</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>roll_cycle</name></name> <operator>=</operator> <name>rollCycle</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>archive_command</name></name> <operator>=</operator> <name>archiveCommand</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>max_archive_retries</name></name> <operator>=</operator> <name>maxArchiveRetries</name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>BinLog</name></type> <name>binlog</name> <init>= <expr><operator>new</operator> <call><name>BinLog</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>archiver</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>binlog</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>binlog</name></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>currentPaths</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Throwable</name></type> <name>cleanDirectory</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>directory</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name><name>Throwables</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s does not exists"</literal></expr></argument>, <argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>directory</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name><name>Throwables</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s is not a directory"</literal></expr></argument>, <argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>f</name> <range>: <expr><call><name><name>directory</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>deleteRecursively</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>accumulate</name> <operator>instanceof</operator> <name>FSError</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>accumulate</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Throwable</name></type> <name>deleteRecursively</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>fileOrDirectory</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>fileOrDirectory</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>File</name></type> <name>f</name> <range>: <expr><call><name><name>fileOrDirectory</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name><name>FileUtils</name><operator>.</operator><name>deleteWithConfirm</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteWithConfirm</name></name><argument_list>(<argument><expr><name>fileOrDirectory</name></expr></argument>, <argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}
</unit>
