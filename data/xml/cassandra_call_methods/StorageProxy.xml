<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/StorageProxy.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CountDownLatch</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Future</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadLocalRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeoutException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Supplier</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>cache</name><operator>.</operator><name>CacheLoader</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>primitives</name><operator>.</operator><name>Ints</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Uninterruptibles</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>batchlog</name><operator>.</operator><name>Batch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>batchlog</name><operator>.</operator><name>BatchlogManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>CounterMutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>IMutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Keyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Mutation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>PartitionRangeReadCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadExecutionController</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SinglePartitionReadCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TruncateRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>WriteType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>filter</name><operator>.</operator><name>TombstoneOverwhelmingException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>FilteredPartition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionIterators</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionUpdate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>UnfilteredPartitionIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>RowIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>CasWriteTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>CasWriteUnknownResultException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>IsBootstrappingException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>OverloadedException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ReadFailureException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ReadTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestFailureException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestFailureReason</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>UnavailableException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>WriteFailureException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>WriteTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>FailureDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>Gossiper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>hints</name><operator>.</operator><name>Hint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>hints</name><operator>.</operator><name>HintsService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>AbstractReplicationStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>EndpointsForToken</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>IEndpointSnitch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replica</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaPlans</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replicas</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>CASClientRequestMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>ReadRepairMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>StorageMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>ForwardingInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessageFlag</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>RequestCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>Commit</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>PaxosState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>PrepareCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>ProposeCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>AbstractReadExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>ReadCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>range</name><operator>.</operator><name>RangeCommands</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>repair</name><operator>.</operator><name>ReadRepair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>triggers</name><operator>.</operator><name>TriggerExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MBeanWrapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonotonicClock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>UUIDGen</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>ClientRequestsMetricsHolder</name><operator>.</operator><name>casReadMetrics</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>ClientRequestsMetricsHolder</name><operator>.</operator><name>casWriteMetrics</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>ClientRequestsMetricsHolder</name><operator>.</operator><name>readMetrics</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>ClientRequestsMetricsHolder</name><operator>.</operator><name>readMetricsForLevel</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>ClientRequestsMetricsHolder</name><operator>.</operator><name>viewWriteMetrics</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>ClientRequestsMetricsHolder</name><operator>.</operator><name>writeMetrics</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>ClientRequestsMetricsHolder</name><operator>.</operator><name>writeMetricsForLevel</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>NoPayload</name><operator>.</operator><name>noPayload</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>BATCH_STORE_REQ</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>MUTATION_REQ</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>PAXOS_COMMIT_REQ</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>PAXOS_PREPARE_REQ</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>PAXOS_PROPOSE_REQ</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>TRUNCATE_REQ</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>BatchlogResponseHandler</name><operator>.</operator><name>BatchlogCleanup</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>PrepareVerbHandler</name><operator>.</operator><name>doPrepare</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>ProposeVerbHandler</name><operator>.</operator><name>doPropose</name></name>;</import>

<class><specifier>public</specifier> class <name>StorageProxy</name> <super_list><implements>implements <super><name>StorageProxyMBean</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MBEAN_NAME</name> <init>= <expr><literal type="string">"org.apache.cassandra.db:type=StorageProxy"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>StorageProxy</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNREACHABLE</name> <init>= <expr><literal type="string">"UNREACHABLE"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>WritePerformer</name></type> <name>standardWritePerformer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>WritePerformer</name></type> <name>counterWritePerformer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>WritePerformer</name></type> <name>counterWriteOnCoordinatorPerformer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StorageProxy</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>StorageProxy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>maxHintsInProgress</name> <init>= <expr><literal type="number">128</literal> <operator>*</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>getAvailableProcessors</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>CacheLoader</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>AtomicInteger</name></argument>&gt;</argument_list></name></type> <name>hintsInProgress</name> <init>= <expr><operator>new</operator> <class><super><name><name>CacheLoader</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>AtomicInteger</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>AtomicInteger</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>inetAddress</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DISABLE_SERIAL_READ_LINEARIZABILITY_KEY</name> <init>= <expr><literal type="string">"cassandra.unsafe.disable-serial-reads-linearizability"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>disableSerialReadLinearizability</name> <init>=
        <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>DISABLE_SERIAL_READ_LINEARIZABILITY_KEY</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>StorageProxy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
    </block_content>}</block></constructor>

    <static>static
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>MBeanWrapper</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerMBean</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>MBEAN_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>HintsService</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerMBean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>standardWritePerformer</name> <operator>=</operator> <lambda><parameter_list>(<parameter><decl><name>mutation</name></decl></parameter>, <parameter><decl><name>targets</name></decl></parameter>, <parameter><decl><name>responseHandler</name></decl></parameter>, <parameter><decl><name>localDataCenter</name></decl></parameter>)</parameter_list> -&gt;
        <block>{<block_content>
            <assert>assert <expr><name>mutation</name> <operator>instanceof</operator> <name>Mutation</name></expr>;</assert>
            <expr_stmt><expr><call><name>sendToHintedReplicas</name><argument_list>(<argument><expr><operator>(</operator><name>Mutation</name><operator>)</operator> <name>mutation</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>, <argument><expr><name><name>Stage</name><operator>.</operator><name>MUTATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr>;</expr_stmt>

        <comment type="block">/*
         * We execute counter writes in 2 places: either directly in the coordinator node if it is a replica, or
         * in CounterMutationVerbHandler on a replica othewise. The write must be executed on the COUNTER_MUTATION stage
         * but on the latter case, the verb handler already run on the COUNTER_MUTATION stage, so we must not execute the
         * underlying on the stage otherwise we risk a deadlock. Hence two different performer.
         */</comment>
        <expr_stmt><expr><name>counterWritePerformer</name> <operator>=</operator> <lambda><parameter_list>(<parameter><decl><name>mutation</name></decl></parameter>, <parameter><decl><name>targets</name></decl></parameter>, <parameter><decl><name>responseHandler</name></decl></parameter>, <parameter><decl><name>localDataCenter</name></decl></parameter>)</parameter_list> -&gt;
        <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointsForToken</name></type> <name>selected</name> <init>= <expr><call><name><name>targets</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>withoutSelf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Replicas</name><operator>.</operator><name>temporaryAssertFull</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO CASSANDRA-14548</comment>
            <expr_stmt><expr><call><name>counterWriteTask</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><call><name><name>targets</name><operator>.</operator><name>withContact</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr>;</expr_stmt>

        <expr_stmt><expr><name>counterWriteOnCoordinatorPerformer</name> <operator>=</operator> <lambda><parameter_list>(<parameter><decl><name>mutation</name></decl></parameter>, <parameter><decl><name>targets</name></decl></parameter>, <parameter><decl><name>responseHandler</name></decl></parameter>, <parameter><decl><name>localDataCenter</name></decl></parameter>)</parameter_list> -&gt;
        <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointsForToken</name></type> <name>selected</name> <init>= <expr><call><name><name>targets</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>withoutSelf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Replicas</name><operator>.</operator><name>temporaryAssertFull</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO CASSANDRA-14548</comment>
            <expr_stmt><expr><call><name><name>Stage</name><operator>.</operator><name>COUNTER_MUTATION</name><operator>.</operator><name>executor</name></name><argument_list>()</argument_list></call>
                                  <operator>.</operator><call><name>execute</name><argument_list>(<argument><expr><call><name>counterWriteTask</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><call><name><name>targets</name><operator>.</operator><name>withContact</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr>;</expr_stmt>


        <expr_stmt><expr><call><name><name>ReadRepairMetrics</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>disableSerialReadLinearizability</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"This node was started with -D{}. SERIAL (and LOCAL_SERIAL) reads coordinated by this node "</literal> <operator>+</operator>
                        <literal type="string">"will not offer linearizability (see CASSANDRA-12126 for details on what this mean) with "</literal> <operator>+</operator>
                        <literal type="string">"respect to other SERIAL operations. Please note that, with this flag, SERIAL reads will be "</literal> <operator>+</operator>
                        <literal type="string">"slower than QUORUM reads, yet offer no more guarantee. This flag should only be used in "</literal> <operator>+</operator>
                        <literal type="string">"the restricted case of upgrading from a pre-CASSANDRA-12126 version, and only if you "</literal> <operator>+</operator>
                        <literal type="string">"understand the tradeoff."</literal></expr></argument>, <argument><expr><name>DISABLE_SERIAL_READ_LINEARIZABILITY_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Apply @param updates if and only if the current values in the row for @param key
     * match the provided @param conditions.  The algorithm is "raw" Paxos: that is, Paxos
     * minus leader election -- any node in the cluster may propose changes for any row,
     * which (that is, the row) is the unit of values being proposed, not single columns.
     *
     * The Paxos cohort is only the replicas for the given key, not the entire cluster.
     * So we expect performance to be reasonable, but CAS is still intended to be used
     * "when you really need it," not for all your updates.
     *
     * There are three phases to Paxos:
     *  1. Prepare: the coordinator generates a ballot (timeUUID in our case) and asks replicas to (a) promise
     *     not to accept updates from older ballots and (b) tell us about the most recent update it has already
     *     accepted.
     *  2. Accept: if a majority of replicas respond, the coordinator asks replicas to accept the value of the
     *     highest proposal ballot it heard about, or a new value if no in-progress proposals were reported.
     *  3. Commit (Learn): if a majority of replicas acknowledge the accept request, we can commit the new
     *     value.
     *
     *  Commit procedure is not covered in "Paxos Made Simple," and only briefly mentioned in "Paxos Made Live,"
     *  so here is our approach:
     *   3a. The coordinator sends a commit message to all replicas with the ballot and value.
     *   3b. Because of 1-2, this will be the highest-seen commit ballot.  The replicas will note that,
     *       and send it with subsequent promise replies.  This allows us to discard acceptance records
     *       for successfully committed replicas, without allowing incomplete proposals to commit erroneously
     *       later on.
     *
     *  Note that since we are performing a CAS rather than a simple update, we perform a read (of committed
     *  values) between the prepare and accept phases.  This gives us a slightly longer window for another
     *  coordinator to come along and trump our own promise with a newer one but is otherwise safe.
     *
     * @param keyspaceName the keyspace for the CAS
     * @param cfName the column family for the CAS
     * @param key the row key for the row to CAS
     * @param request the conditions for the CAS to apply as well as the update to perform if the conditions hold.
     * @param consistencyForPaxos the consistency for the paxos prepare and propose round. This can only be either SERIAL or LOCAL_SERIAL.
     * @param consistencyForCommit the consistency for write done during the commit phase. This can be anything, except SERIAL or LOCAL_SERIAL.
     *
     * @return null if the operation succeeds in updating the row, or the current values corresponding to conditions.
     * (since, if the CAS doesn't succeed, it means the current value do not match the conditions).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RowIterator</name></type> <name>cas</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>,
                                  <parameter><decl><type><name>String</name></type> <name>cfName</name></decl></parameter>,
                                  <parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>,
                                  <parameter><decl><type><name>CASRequest</name></type> <name>request</name></decl></parameter>,
                                  <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyForPaxos</name></decl></parameter>,
                                  <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyForCommit</name></decl></parameter>,
                                  <parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>,
                                  <parameter><decl><type><name>int</name></type> <name>nowInSeconds</name></decl></parameter>,
                                  <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>IsBootstrappingException</name></expr></argument>, <argument><expr><name>RequestFailureException</name></expr></argument>, <argument><expr><name>RequestTimeoutException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>CasWriteUnknownResultException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>startTimeForMetrics</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>TableMetadata</name></type> <name>metadata</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>validateTable</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>PartitionUpdate</name></argument>, <argument><name>RowIterator</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>updateProposer</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt;
            <block>{<block_content>
                <comment type="line">// read the current values and check they validate the conditions</comment>
                <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Reading existing values for CAS precondition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>SinglePartitionReadCommand</name></type> <name>readCommand</name> <init>= <expr><operator>(</operator><name>SinglePartitionReadCommand</name><operator>)</operator> <call><name><name>request</name><operator>.</operator><name>readCommand</name></name><argument_list>(<argument><expr><name>nowInSeconds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ConsistencyLevel</name></type> <name>readConsistency</name> <init>= <expr><ternary><condition><expr><name>consistencyForPaxos</name> <operator>==</operator> <name><name>ConsistencyLevel</name><operator>.</operator><name>LOCAL_SERIAL</name></name></expr> ?</condition><then> <expr><name><name>ConsistencyLevel</name><operator>.</operator><name>LOCAL_QUORUM</name></name></expr> </then><else>: <expr><name><name>ConsistencyLevel</name><operator>.</operator><name>QUORUM</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>FilteredPartition</name></type> <name>current</name></decl>;</decl_stmt>
                <try>try <init>(<decl><type><name>RowIterator</name></type> <name>rowIter</name> <init>= <expr><call><name>readOne</name><argument_list>(<argument><expr><name>readCommand</name></expr></argument>, <argument><expr><name>readConsistency</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
                <block>{<block_content>
                    <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>FilteredPartition</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>rowIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></try>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>request</name><operator>.</operator><name>appliesTo</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"CAS precondition does not match current values {}"</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>casWriteMetrics</name><operator>.</operator><name>conditionNotMet</name><operator>.</operator><name>inc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>PartitionUpdate</name><operator>.</operator><name>emptyUpdate</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>current</name><operator>.</operator><name>rowIterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Create the desired updates</comment>
                <decl_stmt><decl><type><name>PartitionUpdate</name></type> <name>updates</name> <init>= <expr><call><name><name>request</name><operator>.</operator><name>makeUpdates</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>updates</name><operator>.</operator><name>dataSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>casWriteMetrics</name><operator>.</operator><name>mutationSize</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyForPaxos</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>mutationSize</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Apply triggers to cas updates. A consideration here is that</comment>
                <comment type="line">// triggers emit Mutations, and so a given trigger implementation</comment>
                <comment type="line">// may generate mutations for partitions other than the one this</comment>
                <comment type="line">// paxos round is scoped for. In this case, TriggerExecutor will</comment>
                <comment type="line">// validate that the generated mutations are targetted at the same</comment>
                <comment type="line">// partition as the initial updates and reject (via an</comment>
                <comment type="line">// InvalidRequestException) any which aren't.</comment>
                <expr_stmt><expr><name>updates</name> <operator>=</operator> <call><name><name>TriggerExecutor</name><operator>.</operator><name>instance</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>updates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>updates</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name>doPaxos</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>,
                           <argument><expr><name>key</name></expr></argument>,
                           <argument><expr><name>consistencyForPaxos</name></expr></argument>,
                           <argument><expr><name>consistencyForCommit</name></expr></argument>,
                           <argument><expr><name>consistencyForCommit</name></expr></argument>,
                           <argument><expr><name>state</name></expr></argument>,
                           <argument><expr><name>queryStartNanoTime</name></expr></argument>,
                           <argument><expr><name>casWriteMetrics</name></expr></argument>,
                           <argument><expr><name>updateProposer</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>CasWriteUnknownResultException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>casWriteMetrics</name><operator>.</operator><name>unknownResult</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>CasWriteTimeoutException</name></type> <name>wte</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>casWriteMetrics</name><operator>.</operator><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyForPaxos</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>CasWriteTimeoutException</name><argument_list>(<argument><expr><name><name>wte</name><operator>.</operator><name>writeType</name></name></expr></argument>, <argument><expr><name><name>wte</name><operator>.</operator><name>consistency</name></name></expr></argument>, <argument><expr><name><name>wte</name><operator>.</operator><name>received</name></name></expr></argument>, <argument><expr><name><name>wte</name><operator>.</operator><name>blockFor</name></name></expr></argument>, <argument><expr><name><name>wte</name><operator>.</operator><name>contentions</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ReadTimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>casWriteMetrics</name><operator>.</operator><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyForPaxos</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>WriteFailureException</name></type> | <type><name>ReadFailureException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>casWriteMetrics</name><operator>.</operator><name>failures</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyForPaxos</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>failures</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnavailableException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>casWriteMetrics</name><operator>.</operator><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyForPaxos</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>latency</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTimeForMetrics</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>casWriteMetrics</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyForPaxos</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addNano</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>recordCasContention</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>,
                                            <parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>,
                                            <parameter><decl><type><name>CASClientRequestMetrics</name></type> <name>casMetrics</name></decl></parameter>,
                                            <parameter><decl><type><name>int</name></type> <name>contentions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>contentions</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>casMetrics</name><operator>.</operator><name>contention</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>contentions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name><name>metric</name>
                <operator>.</operator><name>topCasPartitionContention</name>
                <operator>.</operator><name>addSample</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>contentions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Performs the Paxos rounds for a given proposal, retrying when preempted until the timeout.
     *
     * &lt;p&gt;The main 'configurable' of this method is the {@code createUpdateProposal} method: it is called by the method
     * once a ballot has been successfully 'prepared' to generate the update to 'propose' (and commit if the proposal is
     * successful). That method also generates the result that the whole method will return. Note that due to retrying,
     * this method may be called multiple times and does not have to return the same results.
     *
     * @param metadata the table to update with Paxos.
     * @param key the partition updated.
     * @param consistencyForPaxos the serial consistency of the operation (either {@link ConsistencyLevel#SERIAL} or
     *     {@link ConsistencyLevel#LOCAL_SERIAL}).
     * @param consistencyForReplayCommits the consistency for the commit phase of "replayed" in-progress operations.
     * @param consistencyForCommit the consistency for the commit phase of _this_ operation update.
     * @param state the client state.
     * @param queryStartNanoTime the nano time for the start of the query this is part of. This is the base time for
     *     timeouts.
     * @param casMetrics the metrics to update for this operation.
     * @param createUpdateProposal method called after a successful 'prepare' phase to obtain 1) the actual update of
     *     this operation and 2) the result that the whole method should return. This can return {@code null} in the
     *     special where, after having "prepared" (and thus potentially replayed in-progress upgdates), we don't want
     *     to propose anything (the whole method then return {@code null}).
     * @return the second element of the pair returned by {@code createUpdateProposal} (for the last call of that method
     *     if that method is called multiple times due to retries).
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>RowIterator</name></type> <name>doPaxos</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>,
                                       <parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>,
                                       <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyForPaxos</name></decl></parameter>,
                                       <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyForReplayCommits</name></decl></parameter>,
                                       <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyForCommit</name></decl></parameter>,
                                       <parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>,
                                       <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>,
                                       <parameter><decl><type><name>CASClientRequestMetrics</name></type> <name>casMetrics</name></decl></parameter>,
                                       <parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>PartitionUpdate</name></argument>, <argument><name>RowIterator</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>createUpdateProposal</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>IsBootstrappingException</name></expr></argument>, <argument><expr><name>RequestFailureException</name></expr></argument>, <argument><expr><name>RequestTimeoutException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>contentions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>latestRs</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>consistencyForPaxos</name><operator>.</operator><name>validateForCas</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>consistencyForReplayCommits</name><operator>.</operator><name>validateForCasCommit</name></name><argument_list>(<argument><expr><name>latestRs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>consistencyForCommit</name><operator>.</operator><name>validateForCasCommit</name></name><argument_list>(<argument><expr><name>latestRs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>timeoutNanos</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCasContentionTimeout</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>queryStartNanoTime</name> <operator>&lt;</operator> <name>timeoutNanos</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// for simplicity, we'll do a single liveness check at the start of each attempt</comment>
                <decl_stmt><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForPaxosWrite</name></name></type> <name>replicaPlan</name> <init>= <expr><call><name><name>ReplicaPlans</name><operator>.</operator><name>forPaxos</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>consistencyForPaxos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>latestRs</name> <operator>=</operator> <call><name><name>replicaPlan</name><operator>.</operator><name>replicationStrategy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>PaxosBallotAndContention</name></type> <name>pair</name> <init>= <expr><call><name>beginAndRepairPaxos</name><argument_list>(<argument><expr><name>queryStartNanoTime</name></expr></argument>,
                                                                    <argument><expr><name>key</name></expr></argument>,
                                                                    <argument><expr><name>metadata</name></expr></argument>,
                                                                    <argument><expr><name>replicaPlan</name></expr></argument>,
                                                                    <argument><expr><name>consistencyForPaxos</name></expr></argument>,
                                                                    <argument><expr><name>consistencyForReplayCommits</name></expr></argument>,
                                                                    <argument><expr><name>casMetrics</name></expr></argument>,
                                                                    <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>UUID</name></type> <name>ballot</name> <init>= <expr><name><name>pair</name><operator>.</operator><name>ballot</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>contentions</name> <operator>+=</operator> <name><name>pair</name><operator>.</operator><name>contentions</name></name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>PartitionUpdate</name></argument>, <argument><name>RowIterator</name></argument>&gt;</argument_list></name></type> <name>proposalPair</name> <init>= <expr><call><name><name>createUpdateProposal</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// See method javadoc: null here is code for "stop here and return null".</comment>
                <if_stmt><if>if <condition>(<expr><name>proposalPair</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name>Commit</name></type> <name>proposal</name> <init>= <expr><call><name><name>Commit</name><operator>.</operator><name>newProposal</name></name><argument_list>(<argument><expr><name>ballot</name></expr></argument>, <argument><expr><name><name>proposalPair</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"CAS precondition is met; proposing client-requested updates for {}"</literal></expr></argument>, <argument><expr><name>ballot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>proposePaxos</name><argument_list>(<argument><expr><name>proposal</name></expr></argument>, <argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// We skip committing accepted updates when they are empty. This is an optimization which works</comment>
                    <comment type="line">// because we also skip replaying those same empty update in beginAndRepairPaxos (see the longer</comment>
                    <comment type="line">// comment there). As empty update are somewhat common (serial reads and non-applying CAS propose</comment>
                    <comment type="line">// them), this is worth bothering.</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>commitPaxos</name><argument_list>(<argument><expr><name>proposal</name></expr></argument>, <argument><expr><name>consistencyForCommit</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><name>RowIterator</name></type> <name>result</name> <init>= <expr><name><name>proposalPair</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"CAS did not apply"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"CAS applied successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                    <return>return <expr><name>result</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Paxos proposal not accepted (pre-empted by a higher ballot)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>contentions</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><call><name><name>ThreadLocalRandom</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// continue to retry</comment>
            </block_content>}</block></while>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>CasWriteTimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// Might be thrown by beginRepairAndPaxos. In that case, any contention that happened within the method and</comment>
            <comment type="line">// led up to the timeout was not accounted in our local 'contentions' variable and we add it now so it the</comment>
            <comment type="line">// contention recorded in the finally is correct.</comment>
            <expr_stmt><expr><name>contentions</name> <operator>+=</operator> <name><name>e</name><operator>.</operator><name>contentions</name></name></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>WriteTimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// Might be thrown by proposePaxos or commitPaxos</comment>
            <throw>throw <expr><operator>new</operator> <call><name>CasWriteTimeoutException</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>writeType</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>consistency</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>received</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>blockFor</name></name></expr></argument>, <argument><expr><name>contentions</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name>recordCasContention</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>casMetrics</name></expr></argument>, <argument><expr><name>contentions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>

        <throw>throw <expr><operator>new</operator> <call><name>CasWriteTimeoutException</name><argument_list>(<argument><expr><name><name>WriteType</name><operator>.</operator><name>CAS</name></name></expr></argument>, <argument><expr><name>consistencyForPaxos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>consistencyForPaxos</name><operator>.</operator><name>blockFor</name></name><argument_list>(<argument><expr><name>latestRs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>contentions</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * begin a Paxos session by sending a prepare request and completing any in-progress requests seen in the replies
     *
     * @return the Paxos ballot promised by the replicas if no in-progress requests were seen and a quorum of
     * nodes have seen the mostRecentCommit.  Otherwise, return null.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>PaxosBallotAndContention</name></type> <name>beginAndRepairPaxos</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>,
                                                                <parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>,
                                                                <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>,
                                                                <parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForPaxosWrite</name></name></type> <name>paxosPlan</name></decl></parameter>,
                                                                <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyForPaxos</name></decl></parameter>,
                                                                <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyForCommit</name></decl></parameter>,
                                                                <parameter><decl><type><name>CASClientRequestMetrics</name></type> <name>casMetrics</name></decl></parameter>,
                                                                <parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>WriteTimeoutException</name></expr></argument>, <argument><expr><name>WriteFailureException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>timeoutNanos</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCasContentionTimeout</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>PrepareCallback</name></type> <name>summary</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>contentions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>queryStartNanoTime</name> <operator>&lt;</operator> <name>timeoutNanos</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// We want a timestamp that is guaranteed to be unique for that node (so that the ballot is globally unique), but if we've got a prepare rejected</comment>
            <comment type="line">// already we also want to make sure we pick a timestamp that has a chance to be promised, i.e. one that is greater that the most recently known</comment>
            <comment type="line">// in progress (#5667). Lastly, we don't want to use a timestamp that is older than the last one assigned by ClientState or operations may appear</comment>
            <comment type="line">// out-of-order (#7801).</comment>
            <decl_stmt><decl><type><name>long</name></type> <name>minTimestampMicrosToUse</name> <init>= <expr><ternary><condition><expr><name>summary</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr> </then><else>: <expr><literal type="number">1</literal> <operator>+</operator> <call><name><name>UUIDGen</name><operator>.</operator><name>microsTimestamp</name></name><argument_list>(<argument><expr><name><name>summary</name><operator>.</operator><name>mostRecentInProgressCommit</name><operator>.</operator><name>ballot</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>ballotMicros</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getTimestampForPaxos</name></name><argument_list>(<argument><expr><name>minTimestampMicrosToUse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Note that ballotMicros is not guaranteed to be unique if two proposal are being handled concurrently by the same coordinator. But we still</comment>
            <comment type="line">// need ballots to be unique for each proposal so we have to use getRandomTimeUUIDFromMicros.</comment>
            <decl_stmt><decl><type><name>UUID</name></type> <name>ballot</name> <init>= <expr><call><name><name>UUIDGen</name><operator>.</operator><name>getRandomTimeUUIDFromMicros</name></name><argument_list>(<argument><expr><name>ballotMicros</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// prepare</comment>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Preparing {}"</literal></expr></argument>, <argument><expr><name>ballot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Commit</name></type> <name>toPrepare</name> <init>= <expr><call><name><name>Commit</name><operator>.</operator><name>newPrepare</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>ballot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>summary</name> <operator>=</operator> <call><name>preparePaxos</name><argument_list>(<argument><expr><name>toPrepare</name></expr></argument>, <argument><expr><name>paxosPlan</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>summary</name><operator>.</operator><name>promised</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Some replicas have already promised a higher ballot than ours; aborting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>contentions</name><operator>++</operator></expr>;</expr_stmt>
                    <comment type="line">// sleep a random amount to give the other proposer a chance to finish</comment>
                    <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><call><name><name>ThreadLocalRandom</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>Commit</name></type> <name>inProgress</name> <init>= <expr><name><name>summary</name><operator>.</operator><name>mostRecentInProgressCommit</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Commit</name></type> <name>mostRecent</name> <init>= <expr><name><name>summary</name><operator>.</operator><name>mostRecentCommit</name></name></expr></init></decl>;</decl_stmt>

                <comment type="line">// If we have an in-progress ballot greater than the MRC we know, then it's an in-progress round that</comment>
                <comment type="line">// needs to be completed, so do it.</comment>
                <comment type="line">// One special case we make is for update that are empty (which are proposed by serial reads and</comment>
                <comment type="line">// non-applying CAS). While we could handle those as any other updates, we can optimize this somewhat by</comment>
                <comment type="line">// neither committing those empty updates, nor replaying in-progress ones. The reasoning is this: as the</comment>
                <comment type="line">// update is empty, we have nothing to apply to storage in the commit phase, so the only reason to commit</comment>
                <comment type="line">// would be to update the MRC. However, if we skip replaying those empty updates, then we don't need to</comment>
                <comment type="line">// update the MRC for following updates to make progress (that is, if we didn't had the empty update skip</comment>
                <comment type="line">// below _but_ skipped updating the MRC on empty updates, then we'd be stuck always proposing that same</comment>
                <comment type="line">// empty update). And the reason skipping that replay is safe is that when an operation tries to propose</comment>
                <comment type="line">// an empty value, there can be only 2 cases:</comment>
                <comment type="line">//  1) the propose succeed, meaning a quorum of nodes accept it, in which case we are guaranteed no earlier</comment>
                <comment type="line">//     pending operation can ever be replayed (which is what we want to guarantee with the empty update).</comment>
                <comment type="line">//  2) the propose does not succeed. But then the operation proposing the empty update will not succeed</comment>
                <comment type="line">//     either (it will retry or ultimately timeout), and we're actually ok if earlier pending operation gets</comment>
                <comment type="line">//     replayed in that case.</comment>
                <comment type="line">// Tl;dr, it is safe to skip committing empty updates _as long as_ we also skip replying them below. And</comment>
                <comment type="line">// doing is more efficient, so we do so.</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>inProgress</name><operator>.</operator><name>update</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>inProgress</name><operator>.</operator><name>isAfter</name></name><argument_list>(<argument><expr><name>mostRecent</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Finishing incomplete paxos round {}"</literal></expr></argument>, <argument><expr><name>inProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>casMetrics</name><operator>.</operator><name>unfinishedCommit</name><operator>.</operator><name>inc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Commit</name></type> <name>refreshedInProgress</name> <init>= <expr><call><name><name>Commit</name><operator>.</operator><name>newProposal</name></name><argument_list>(<argument><expr><name>ballot</name></expr></argument>, <argument><expr><name><name>inProgress</name><operator>.</operator><name>update</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>proposePaxos</name><argument_list>(<argument><expr><name>refreshedInProgress</name></expr></argument>, <argument><expr><name>paxosPlan</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>commitPaxos</name><argument_list>(<argument><expr><name>refreshedInProgress</name></expr></argument>, <argument><expr><name>consistencyForCommit</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Some replicas have already promised a higher ballot than ours; aborting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// sleep a random amount to give the other proposer a chance to finish</comment>
                        <expr_stmt><expr><name>contentions</name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><call><name><name>ThreadLocalRandom</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// To be able to propose our value on a new round, we need a quorum of replica to have learn the previous one. Why is explained at:</comment>
                <comment type="line">// https://issues.apache.org/jira/browse/CASSANDRA-5062?focusedCommentId=13619810&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13619810)</comment>
                <comment type="line">// Since we waited for quorum nodes, if some of them haven't seen the last commit (which may just be a timing issue, but may also</comment>
                <comment type="line">// mean we lost messages), we pro-actively "repair" those nodes, and retry.</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>nowInSec</name> <init>= <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>MICROSECONDS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><name>ballotMicros</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>missingMRC</name> <init>= <expr><call><name><name>summary</name><operator>.</operator><name>replicasMissingMostRecentCommit</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>Iterables</name><operator>.</operator><name>size</name></name><argument_list>(<argument><expr><name>missingMRC</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Repairing replicas that missed the most recent commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>sendCommit</name><argument_list>(<argument><expr><name>mostRecent</name></expr></argument>, <argument><expr><name>missingMRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// TODO: provided commits don't invalid the prepare we just did above (which they don't), we could just wait</comment>
                    <comment type="line">// for all the missingMRC to acknowledge this commit and then move on with proposing our value. But that means</comment>
                    <comment type="line">// adding the ability to have commitPaxos block, which is exactly CASSANDRA-5442 will do. So once we have that</comment>
                    <comment type="line">// latter ticket, we can pass CL.ALL to the commit above and remove the 'continue'.</comment>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <return>return <expr><operator>new</operator> <call><name>PaxosBallotAndContention</name><argument_list>(<argument><expr><name>ballot</name></expr></argument>, <argument><expr><name>contentions</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>WriteTimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <comment type="line">// We're still doing preparation for the paxos rounds, so we want to use the CAS (see CASSANDRA-8672)</comment>
                <throw>throw <expr><operator>new</operator> <call><name>CasWriteTimeoutException</name><argument_list>(<argument><expr><name><name>WriteType</name><operator>.</operator><name>CAS</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>consistency</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>received</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>blockFor</name></name></expr></argument>, <argument><expr><name>contentions</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>

        <throw>throw <expr><operator>new</operator> <call><name>CasWriteTimeoutException</name><argument_list>(<argument><expr><name><name>WriteType</name><operator>.</operator><name>CAS</name></name></expr></argument>, <argument><expr><name>consistencyForPaxos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>consistencyForPaxos</name><operator>.</operator><name>blockFor</name></name><argument_list>(<argument><expr><call><name><name>paxosPlan</name><operator>.</operator><name>replicationStrategy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>contentions</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Unlike commitPaxos, this does not wait for replies
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>sendCommit</name><parameter_list>(<parameter><decl><type><name>Commit</name></type> <name>commit</name></decl></parameter>, <parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>Commit</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>PAXOS_COMMIT_REQ</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>target</name> <range>: <expr><name>replicas</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>send</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>PrepareCallback</name></type> <name>preparePaxos</name><parameter_list>(<parameter><decl><type><name>Commit</name></type> <name>toPrepare</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForPaxosWrite</name></name></type> <name>replicaPlan</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>WriteTimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PrepareCallback</name></type> <name>callback</name> <init>= <expr><operator>new</operator> <call><name>PrepareCallback</name><argument_list>(<argument><expr><call><name><name>toPrepare</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>toPrepare</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>requiredParticipants</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>Commit</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>PAXOS_PREPARE_REQ</name></expr></argument>, <argument><expr><name>toPrepare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name><range>: <expr><call><name><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>PAXOS_PREPARE_REQ</name><operator>.</operator><name>stage</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
                    <try>try
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onResponse</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>responseWith</name></name><argument_list>(<argument><expr><call><name>doPrepare</name><argument_list>(<argument><expr><name>toPrepare</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed paxos prepare locally"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch></try>
                </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWithCallback</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>await</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>callback</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Propose the {@param proposal} accoding to the {@param replicaPlan}.
     * When {@param backoffIfPartial} is true, the proposer backs off when seeing the proposal being accepted by some but not a quorum.
     * The result of the cooresponding CAS in uncertain as the accepted proposal may or may not be spread to other nodes in later rounds.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>proposePaxos</name><parameter_list>(<parameter><decl><type><name>Commit</name></type> <name>proposal</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForPaxosWrite</name></name></type> <name>replicaPlan</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>backoffIfPartial</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>WriteTimeoutException</name></expr></argument>, <argument><expr><name>CasWriteUnknownResultException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ProposeCallback</name></type> <name>callback</name> <init>= <expr><operator>new</operator> <call><name>ProposeCallback</name><argument_list>(<argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>requiredParticipants</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><name>backoffIfPartial</name></expr></argument>, <argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>Commit</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>PAXOS_PROPOSE_REQ</name></expr></argument>, <argument><expr><name>proposal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><call><name><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>PAXOS_PROPOSE_REQ</name><operator>.</operator><name>stage</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
                    <try>try
                    <block>{<block_content>
                        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>response</name> <init>= <expr><call><name><name>message</name><operator>.</operator><name>responseWith</name></name><argument_list>(<argument><expr><call><name>doPropose</name><argument_list>(<argument><expr><name>proposal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onResponse</name></name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed paxos propose locally"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch></try>
                </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWithCallback</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>await</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>callback</name><operator>.</operator><name>isSuccessful</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>backoffIfPartial</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>callback</name><operator>.</operator><name>isFullyRefused</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>CasWriteUnknownResultException</name><argument_list>(<argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>callback</name><operator>.</operator><name>getAcceptCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>requiredParticipants</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>commitPaxos</name><parameter_list>(<parameter><decl><type><name>Commit</name></type> <name>proposal</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowHints</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>WriteTimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>shouldBlock</name> <init>= <expr><name>consistencyLevel</name> <operator>!=</operator> <name><name>ConsistencyLevel</name><operator>.</operator><name>ANY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Token</name></type> <name>tk</name> <init>= <expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>Commit</name></argument>&gt;</argument_list></name></type> <name>responseHandler</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// NOTE: this ReplicaPlan is a lie, this usage of ReplicaPlan could do with being clarified - the selected() collection is essentially (I think) never used</comment>
        <decl_stmt><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name> <init>= <expr><call><name><name>ReplicaPlans</name><operator>.</operator><name>forWrite</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name><name>ReplicaPlans</name><operator>.</operator><name>writeAll</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>shouldBlock</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>rs</name> <init>= <expr><call><name><name>replicaPlan</name><operator>.</operator><name>replicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>responseHandler</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getWriteResponseHandler</name></name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>WriteType</name><operator>.</operator><name>SIMPLE</name></name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>Commit</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>outWithFlag</name></name><argument_list>(<argument><expr><name>PAXOS_COMMIT_REQ</name></expr></argument>, <argument><expr><name>proposal</name></expr></argument>, <argument><expr><name><name>MessageFlag</name><operator>.</operator><name>CALL_BACK_ON_FAILURE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><call><name><name>replicaPlan</name><operator>.</operator><name>liveAndDown</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>destination</name> <init>= <expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>checkHintOverload</name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>replicaPlan</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>shouldBlock</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>commitPaxosLocal</name><argument_list>(<argument><expr><name>replica</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWriteWithCallback</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>replica</name></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>, <argument><expr><name>allowHints</name> <operator>&amp;&amp;</operator> <call><name>shouldHint</name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>send</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>responseHandler</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>responseHandler</name><operator>.</operator><name>expired</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>allowHints</name> <operator>&amp;&amp;</operator> <call><name>shouldHint</name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>submitHint</name><argument_list>(<argument><expr><call><name><name>proposal</name><operator>.</operator><name>makeMutation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>replica</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>shouldBlock</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>responseHandler</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Commit a PAXOS task locally, and if the task times out rather then submitting a real hint
     * submit a fake one that executes immediately on the mutation stage, but generates the necessary backpressure
     * signal for hints
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>commitPaxosLocal</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>localReplica</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>Commit</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>responseHandler</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>PAXOS_COMMIT_REQ</name><operator>.</operator><name>stage</name><operator>.</operator><name>maybeExecuteImmediately</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>LocalMutationRunnable</name></super><argument_list>(<argument><expr><name>localReplica</name></expr></argument>)</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>PaxosState</name><operator>.</operator><name>commit</name></name><argument_list>(<argument><expr><name><name>message</name><operator>.</operator><name>payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>responseHandler</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>responseHandler</name><operator>.</operator><name>onResponse</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ex</name> <operator>instanceof</operator> <name>WriteTimeoutException</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to apply paxos commit locally : "</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>responseHandler</name><operator>.</operator><name>onFailure</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>RequestFailureReason</name><operator>.</operator><name>forException</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name>Verb</name></type> <name>verb</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><name>PAXOS_COMMIT_REQ</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Use this method to have these Mutations applied
     * across all replicas. This method will take care
     * of the possibility of a replica being down and hint
     * the data across to some other replica.
     *
     * @param mutations the mutations to be applied across the replicas
     * @param consistencyLevel the consistency level for the operation
     * @param queryStartNanoTime the value of System.nanoTime() when the query started to be processed
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>mutate</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IMutation</name></extends></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>OverloadedException</name></expr></argument>, <argument><expr><name>WriteTimeoutException</name></expr></argument>, <argument><expr><name>WriteFailureException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Determining replicas for mutation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>localDataCenter</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocalDatacenter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>responseHandlers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WriteType</name></type> <name>plainWriteType</name> <init>= <expr><ternary><condition><expr><call><name><name>mutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>WriteType</name><operator>.</operator><name>SIMPLE</name></name></expr> </then><else>: <expr><name><name>WriteType</name><operator>.</operator><name>UNLOGGED_BATCH</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>IMutation</name></type> <name>mutation</name> <range>: <expr><name>mutations</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>mutation</name> <operator>instanceof</operator> <name>CounterMutation</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>responseHandlers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>mutateCounter</name><argument_list>(<argument><expr><operator>(</operator><name>CounterMutation</name><operator>)</operator><name>mutation</name></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>responseHandlers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>performWrite</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>, <argument><expr><name>standardWritePerformer</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>plainWriteType</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// upgrade to full quorum any failed cheap quorums</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>mutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>mutations</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>CounterMutation</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// at the moment, only non-counter writes support cheap quorums</comment>
                    <expr_stmt><expr><call><name><name>responseHandlers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>maybeTryAdditionalReplicas</name><argument_list>(<argument><expr><call><name><name>mutations</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>standardWritePerformer</name></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// wait for writes.  throws TimeoutException if necessary</comment>
            <for>for <control>(<init><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>responseHandler</name> <range>: <expr><name>responseHandlers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>responseHandler</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>WriteTimeoutException</name></type>|<type><name>WriteFailureException</name></type> <name>ex</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>consistencyLevel</name> <operator>==</operator> <name><name>ConsistencyLevel</name><operator>.</operator><name>ANY</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>hintMutations</name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>ex</name> <operator>instanceof</operator> <name>WriteFailureException</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>writeMetrics</name><operator>.</operator><name>failures</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>failures</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>WriteFailureException</name></type> <name>fe</name> <init>= <expr><operator>(</operator><name>WriteFailureException</name><operator>)</operator><name>ex</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Write failure; received {} of {} required replies, failed {} requests"</literal></expr></argument>,
                                  <argument><expr><name><name>fe</name><operator>.</operator><name>received</name></name></expr></argument>, <argument><expr><name><name>fe</name><operator>.</operator><name>blockFor</name></name></expr></argument>, <argument><expr><call><name><name>fe</name><operator>.</operator><name>failureReasonByEndpoint</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>writeMetrics</name><operator>.</operator><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>WriteTimeoutException</name></type> <name>te</name> <init>= <expr><operator>(</operator><name>WriteTimeoutException</name><operator>)</operator><name>ex</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Write timeout; received {} of {} required replies"</literal></expr></argument>, <argument><expr><name><name>te</name><operator>.</operator><name>received</name></name></expr></argument>, <argument><expr><name><name>te</name><operator>.</operator><name>blockFor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <throw>throw <expr><name>ex</name></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnavailableException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeMetrics</name><operator>.</operator><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>OverloadedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeMetrics</name><operator>.</operator><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Overloaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>latency</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>writeMetrics</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addNano</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateCoordinatorWriteLatencyTableMetric</name><argument_list>(<argument><expr><name>mutations</name></expr></argument>, <argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Hint all the mutations (except counters, which can't be safely retried).  This means
     * we'll re-hint any successful ones; doesn't seem worth it to track individual success
     * just for this unusual case.
     *
     * Only used for CL.ANY
     *
     * @param mutations the mutations that require hints
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>hintMutations</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IMutation</name></extends></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>IMutation</name></type> <name>mutation</name> <range>: <expr><name>mutations</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mutation</name> <operator>instanceof</operator> <name>CounterMutation</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>hintMutation</name><argument_list>(<argument><expr><operator>(</operator><name>Mutation</name><operator>)</operator> <name>mutation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Wrote hints to satisfy CL.ANY after no replicas acknowledged the write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>hintMutation</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Token</name></type> <name>token</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// local writes can timeout, but cannot be dropped (see LocalMutationRunnable and CASSANDRA-6510),</comment>
        <comment type="line">// so there is no need to hint or retry.</comment>
        <decl_stmt><decl><type><name>EndpointsForToken</name></type> <name>replicasToHint</name> <init>= <expr><call><name><name>ReplicaLayout</name><operator>.</operator><name>forTokenWriteLiveAndDown</name></name><argument_list>(<argument><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>all</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>StorageProxy</name><operator>::</operator><name>shouldHint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>submitHint</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>replicasToHint</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>appliesLocally</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Token</name></type> <name>token</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>local</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>ReplicaLayout</name><operator>.</operator><name>forTokenWriteLiveAndDown</name></name><argument_list>(<argument><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>all</name><argument_list>()</argument_list></call><operator>.</operator><call><name>endpoints</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Use this method to have these Mutations applied
     * across all replicas.
     *
     * @param mutations the mutations to be applied across the replicas
     * @param writeCommitLog if commitlog should be written
     * @param baseComplete time from epoch in ms that the local base mutation was(or will be) completed
     * @param queryStartNanoTime the value of System.nanoTime() when the query started to be processed
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>mutateMV</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>dataKey</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>writeCommitLog</name></decl></parameter>, <parameter><decl><type><name>AtomicLong</name></type> <name>baseComplete</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>OverloadedException</name></expr></argument>, <argument><expr><name>WriteTimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Determining replicas for mutation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>localDataCenter</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocalDatacenter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


        <try>try
        <block>{<block_content>
            <comment type="line">// if we haven't joined the ring, write everything to batchlog because paired replicas may be stale</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>UUID</name></type> <name>batchUUID</name> <init>= <expr><call><name><name>UUIDGen</name><operator>.</operator><name>getTimeUUID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isStarting</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isJoining</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isMoving</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>BatchlogManager</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><call><name><name>Batch</name><operator>.</operator><name>createLocal</name></name><argument_list>(<argument><expr><name>batchUUID</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                        <argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>writeCommitLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WriteResponseHandlerWrapper</name></argument>&gt;</argument_list></name></type> <name>wrappers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">//non-local mutations rely on the base mutation commit-log entry for eventual consistency</comment>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>nonLocalMutations</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Token</name></type> <name>baseToken</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>partitioner</name><operator>.</operator><name>getToken</name></name><argument_list>(<argument><expr><name>dataKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name> <init>= <expr><name><name>ConsistencyLevel</name><operator>.</operator><name>ONE</name></name></expr></init></decl>;</decl_stmt>

                <comment type="line">//Since the base -&gt; view replication is 1:1 we only need to store the BL locally</comment>
                <decl_stmt><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name> <init>= <expr><call><name><name>ReplicaPlans</name><operator>.</operator><name>forLocalBatchlogWrite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>BatchlogCleanup</name></type> <name>cleanup</name> <init>= <expr><operator>new</operator> <call><name>BatchlogCleanup</name><argument_list>(<argument><expr><call><name><name>mutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                              <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>asyncRemoveFromBatchlog</name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>batchUUID</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// add a handler for each mutation - includes checking availability, but doesn't initiate any writes, yet</comment>
                <for>for <control>(<init><decl><type><name>Mutation</name></type> <name>mutation</name> <range>: <expr><name>mutations</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Token</name></type> <name>tk</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>pairedEndpoint</name> <init>= <expr><call><name><name>ViewUtils</name><operator>.</operator><name>getViewNaturalEndpoint</name></name><argument_list>(<argument><expr><name>replicationStrategy</name></expr></argument>, <argument><expr><name>baseToken</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>EndpointsForToken</name></type> <name>pendingReplicas</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>pendingEndpointsForToken</name><argument_list>(<argument><expr><name>tk</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// if there are no paired endpoints there are probably range movements going on, so we write to the local batchlog to replay later</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pairedEndpoint</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>pendingReplicas</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Received base materialized view mutation for key {} that does not belong "</literal> <operator>+</operator>
                                        <literal type="string">"to this node. There is probably a range movement happening (move or decommission),"</literal> <operator>+</operator>
                                        <literal type="string">"but this node hasn't updated its ring metadata yet. Adding mutation to "</literal> <operator>+</operator>
                                        <literal type="string">"local batchlog to be replayed later."</literal></expr></argument>,
                                        <argument><expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>

                    <comment type="line">// When local node is the endpoint we can just apply the mutation locally,</comment>
                    <comment type="line">// unless there are pending endpoints, in which case we want to do an ordinary</comment>
                    <comment type="line">// write so the view mutation is sent to the pending endpoint</comment>
                    <if_stmt><if>if <condition>(<expr><call><name><name>pairedEndpoint</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSelf</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isJoined</name></name><argument_list>()</argument_list></call>
                        <operator>&amp;&amp;</operator> <call><name><name>pendingReplicas</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <try>try
                        <block>{<block_content>
                            <expr_stmt><expr><call><name><name>mutation</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>writeCommitLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>nonLocalMutations</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>mutation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// won't trigger cleanup</comment>
                            <expr_stmt><expr><call><name><name>cleanup</name><operator>.</operator><name>decrement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exc</name></decl></parameter>)</parameter_list>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error applying local view update: Mutation (keyspace {}, tables {}, partition key {})"</literal></expr></argument>,
                                         <argument><expr><call><name><name>mutation</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mutation</name><operator>.</operator><name>getTableIds</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <throw>throw <expr><name>exc</name></expr>;</throw>
                        </block_content>}</block></catch></try>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <decl_stmt><decl><type><name><name>ReplicaLayout</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>liveAndDown</name> <init>= <expr><call><name><name>ReplicaLayout</name><operator>.</operator><name>forTokenWrite</name></name><argument_list>(<argument><expr><name>replicationStrategy</name></expr></argument>,
                                                                                              <argument><expr><call><name><name>EndpointsForToken</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>tk</name></expr></argument>, <argument><expr><call><name><name>pairedEndpoint</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                                                              <argument><expr><name>pendingReplicas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>wrappers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>wrapViewBatchResponseHandler</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>,
                                                                  <argument><expr><name>consistencyLevel</name></expr></argument>,
                                                                  <argument><expr><name>consistencyLevel</name></expr></argument>,
                                                                  <argument><expr><name>liveAndDown</name></expr></argument>,
                                                                  <argument><expr><name>baseComplete</name></expr></argument>,
                                                                  <argument><expr><name><name>WriteType</name><operator>.</operator><name>BATCH</name></name></expr></argument>,
                                                                  <argument><expr><name>cleanup</name></expr></argument>,
                                                                  <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>

                <comment type="line">// Apply to local batchlog memtable in this thread</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>nonLocalMutations</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>BatchlogManager</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><call><name><name>Batch</name><operator>.</operator><name>createLocal</name></name><argument_list>(<argument><expr><name>batchUUID</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nonLocalMutations</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>writeCommitLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Perform remote writes</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>wrappers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>asyncWriteBatchedMutations</name><argument_list>(<argument><expr><name>wrappers</name></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>, <argument><expr><name><name>Stage</name><operator>.</operator><name>VIEW_MUTATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>viewWriteMetrics</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>mutateWithTriggers</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IMutation</name></extends></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>,
                                          <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>,
                                          <parameter><decl><type><name>boolean</name></type> <name>mutateAtomically</name></decl></parameter>,
                                          <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>WriteTimeoutException</name></expr></argument>, <argument><expr><name>WriteFailureException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>OverloadedException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>augmented</name> <init>= <expr><call><name><name>TriggerExecutor</name><operator>.</operator><name>instance</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>updatesView</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>mutations</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKeyspaceName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name><name>viewManager</name>
                              <operator>.</operator><name>updatesAffectView</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>IMutation</name><operator>.</operator><name>dataSize</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>writeMetrics</name><operator>.</operator><name>mutationSize</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>mutationSize</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>augmented</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mutateAtomically</name><argument_list>(<argument><expr><name>augmented</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>updatesView</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mutateAtomically</name> <operator>||</operator> <name>updatesView</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mutateAtomically</name><argument_list>(<argument><expr><operator>(</operator><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name><operator>)</operator> <name>mutations</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>updatesView</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mutate</name><argument_list>(<argument><expr><name>mutations</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * See mutate. Adds additional steps before and after writing a batch.
     * Before writing the batch (but after doing availability check against the FD for the row replicas):
     *      write the entire batch to a batchlog elsewhere in the cluster.
     * After: remove the batchlog entry (after writing hints for the batch rows, if necessary).
     *
     * @param mutations the Mutations to be applied across the replicas
     * @param consistency_level the consistency level for the operation
     * @param requireQuorumForRemove at least a quorum of nodes will see update before deleting batchlog
     * @param queryStartNanoTime the value of System.nanoTime() when the query started to be processed
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>mutateAtomically</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>,
                                        <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistency_level</name></decl></parameter>,
                                        <parameter><decl><type><name>boolean</name></type> <name>requireQuorumForRemove</name></decl></parameter>,
                                        <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>OverloadedException</name></expr></argument>, <argument><expr><name>WriteTimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Determining replicas for atomic batch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WriteResponseHandlerWrapper</name></argument>&gt;</argument_list></name></type> <name>wrappers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>mutations</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>anyMatch</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>mutation</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>mutation</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasTransientReplicas</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Logged batches are unsupported with transient replication"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>

            <comment type="line">// If we are requiring quorum nodes for removal, we upgrade consistency level to QUORUM unless we already</comment>
            <comment type="line">// require ALL, or EACH_QUORUM. This is so that *at least* QUORUM nodes see the update.</comment>
            <decl_stmt><decl><type><name>ConsistencyLevel</name></type> <name>batchConsistencyLevel</name> <init>= <expr><ternary><condition><expr><name>requireQuorumForRemove</name></expr>
                                                     ?</condition><then> <expr><name><name>ConsistencyLevel</name><operator>.</operator><name>QUORUM</name></name></expr>
                                                     </then><else>: <expr><name>consistency_level</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <switch>switch <condition>(<expr><name>consistency_level</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>ALL</name></expr>:</case>
                <case>case <expr><name>EACH_QUORUM</name></expr>:</case>
                    <expr_stmt><expr><name>batchConsistencyLevel</name> <operator>=</operator> <name>consistency_level</name></expr>;</expr_stmt>
            </block_content>}</block></switch>

            <decl_stmt><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name> <init>= <expr><call><name><name>ReplicaPlans</name><operator>.</operator><name>forBatchlogWrite</name></name><argument_list>(<argument><expr><name>batchConsistencyLevel</name> <operator>==</operator> <name><name>ConsistencyLevel</name><operator>.</operator><name>ANY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>UUID</name></type> <name>batchUUID</name> <init>= <expr><call><name><name>UUIDGen</name><operator>.</operator><name>getTimeUUID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BatchlogCleanup</name></type> <name>cleanup</name> <init>= <expr><operator>new</operator> <call><name>BatchlogCleanup</name><argument_list>(<argument><expr><call><name><name>mutations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                          <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>asyncRemoveFromBatchlog</name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>batchUUID</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// add a handler for each mutation - includes checking availability, but doesn't initiate any writes, yet</comment>
            <for>for <control>(<init><decl><type><name>Mutation</name></type> <name>mutation</name> <range>: <expr><name>mutations</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>WriteResponseHandlerWrapper</name></type> <name>wrapper</name> <init>= <expr><call><name>wrapBatchResponseHandler</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>,
                                                                               <argument><expr><name>consistency_level</name></expr></argument>,
                                                                               <argument><expr><name>batchConsistencyLevel</name></expr></argument>,
                                                                               <argument><expr><name><name>WriteType</name><operator>.</operator><name>BATCH</name></name></expr></argument>,
                                                                               <argument><expr><name>cleanup</name></expr></argument>,
                                                                               <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// exit early if we can't fulfill the CL at this time.</comment>
                <expr_stmt><expr><call><name><name>wrappers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>wrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="line">// write to the batchlog</comment>
            <expr_stmt><expr><call><name>syncWriteToBatchlog</name><argument_list>(<argument><expr><name>mutations</name></expr></argument>, <argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>batchUUID</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// now actually perform the writes and wait for them to complete</comment>
            <expr_stmt><expr><call><name>syncWriteBatchedMutations</name><argument_list>(<argument><expr><name>wrappers</name></expr></argument>, <argument><expr><name><name>Stage</name><operator>.</operator><name>MUTATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnavailableException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeMetrics</name><operator>.</operator><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Unavailable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>WriteTimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeMetrics</name><operator>.</operator><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Write timeout; received {} of {} required replies"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>received</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>blockFor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>WriteFailureException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>writeMetrics</name><operator>.</operator><name>failures</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>failures</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Write failure; received {} of {} required replies"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>received</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>blockFor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>latency</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>writeMetrics</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeMetricsForLevel</name><argument_list>(<argument><expr><name>consistency_level</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addNano</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateCoordinatorWriteLatencyTableMetric</name><argument_list>(<argument><expr><name>mutations</name></expr></argument>, <argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateCoordinatorWriteLatencyTableMetric</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IMutation</name></extends></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>latency</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>mutations</name></expr>)</condition>
        <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <comment type="line">//We could potentially pass a callback into performWrite. And add callback provision for mutateCounter or mutateAtomically (sendToHintedEndPoints)</comment>
            <comment type="line">//However, Trade off between write metric per CF accuracy vs performance hit due to callbacks. Similar issue exists with CoordinatorReadLatency metric.</comment>
            <expr_stmt><expr><call><name><name>mutations</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                     <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>m</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>m</name><operator>.</operator><name>getTableIds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>tableId</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                     <operator>.</operator><call><name>distinct</name><argument_list>()</argument_list></call>
                     <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>store</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>store</name><operator>.</operator><name>metric</name><operator>.</operator><name>coordinatorWriteLatency</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>latency</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Exception occurred updating coordinatorWriteLatency metric"</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>syncWriteToBatchlog</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>WriteTimeoutException</name></expr></argument>, <argument><expr><name>WriteFailureException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>WriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>WriteResponseHandler</name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>,
                                                                   <argument><expr><name><name>WriteType</name><operator>.</operator><name>BATCH_LOG</name></name></expr></argument>,
                                                                   <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Batch</name></type> <name>batch</name> <init>= <expr><call><name><name>Batch</name><operator>.</operator><name>createLocal</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>Batch</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>BATCH_STORE_REQ</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><call><name><name>replicaPlan</name><operator>.</operator><name>liveAndDown</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Sending batchlog store request {} to {} for {} mutations"</literal></expr></argument>, <argument><expr><name><name>batch</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>replica</name></expr></argument>, <argument><expr><call><name><name>batch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>performLocally</name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>MUTATION</name></name></expr></argument>, <argument><expr><name>replica</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>BatchlogManager</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWithCallback</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>asyncRemoveFromBatchlog</name><parameter_list>(<parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name><name>Verb</name><operator>.</operator><name>BATCH_REMOVE_REQ</name></name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>target</name> <range>: <expr><call><name><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Sending batchlog remove request {} to {}"</literal></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>target</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>performLocally</name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>MUTATION</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>BatchlogManager</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>send</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>target</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>asyncWriteBatchedMutations</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WriteResponseHandlerWrapper</name></argument>&gt;</argument_list></name></type> <name>wrappers</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localDataCenter</name></decl></parameter>, <parameter><decl><type><name>Stage</name></type> <name>stage</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>WriteResponseHandlerWrapper</name></type> <name>wrapper</name> <range>: <expr><name>wrappers</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Replicas</name><operator>.</operator><name>temporaryAssertFull</name></name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>handler</name><operator>.</operator><name>replicaPlan</name><operator>.</operator><name>liveAndDown</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// TODO: CASSANDRA-14549</comment>
            <decl_stmt><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicas</name> <init>= <expr><call><name><name>wrapper</name><operator>.</operator><name>handler</name><operator>.</operator><name>replicaPlan</name><operator>.</operator><name>withContact</name></name><argument_list>(<argument><expr><call><name><name>wrapper</name><operator>.</operator><name>handler</name><operator>.</operator><name>replicaPlan</name><operator>.</operator><name>liveAndDown</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name>sendToHintedReplicas</name><argument_list>(<argument><expr><name><name>wrapper</name><operator>.</operator><name>mutation</name></name></expr></argument>, <argument><expr><name>replicas</name></expr></argument>, <argument><expr><name><name>wrapper</name><operator>.</operator><name>handler</name></name></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>OverloadedException</name></type> | <type><name>WriteTimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>wrapper</name><operator>.</operator><name>handler</name><operator>.</operator><name>onFailure</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>RequestFailureReason</name><operator>.</operator><name>forException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>syncWriteBatchedMutations</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WriteResponseHandlerWrapper</name></argument>&gt;</argument_list></name></type> <name>wrappers</name></decl></parameter>, <parameter><decl><type><name>Stage</name></type> <name>stage</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>WriteTimeoutException</name></expr></argument>, <argument><expr><name>OverloadedException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>localDataCenter</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocalDatacenter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>WriteResponseHandlerWrapper</name></type> <name>wrapper</name> <range>: <expr><name>wrappers</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointsForToken</name></type> <name>sendTo</name> <init>= <expr><call><name><name>wrapper</name><operator>.</operator><name>handler</name><operator>.</operator><name>replicaPlan</name><operator>.</operator><name>liveAndDown</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Replicas</name><operator>.</operator><name>temporaryAssertFull</name></name><argument_list>(<argument><expr><name>sendTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO: CASSANDRA-14549</comment>
            <expr_stmt><expr><call><name>sendToHintedReplicas</name><argument_list>(<argument><expr><name><name>wrapper</name><operator>.</operator><name>mutation</name></name></expr></argument>, <argument><expr><call><name><name>wrapper</name><operator>.</operator><name>handler</name><operator>.</operator><name>replicaPlan</name><operator>.</operator><name>withContact</name></name><argument_list>(<argument><expr><name>sendTo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wrapper</name><operator>.</operator><name>handler</name></name></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>WriteResponseHandlerWrapper</name></type> <name>wrapper</name> <range>: <expr><name>wrappers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>wrapper</name><operator>.</operator><name>handler</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Perform the write of a mutation given a WritePerformer.
     * Gather the list of write endpoints, apply locally and/or forward the mutation to
     * said write endpoint (deletaged to the actual WritePerformer) and wait for the
     * responses based on consistency level.
     *
     * @param mutation the mutation to be applied
     * @param consistencyLevel the consistency level for the write operation
     * @param performer the WritePerformer in charge of appliying the mutation
     * given the list of write endpoints (either standardWritePerformer for
     * standard writes or counterWritePerformer for counter writes).
     * @param callback an optional callback to be run if and when the write is
     * @param queryStartNanoTime the value of System.nanoTime() when the query started to be processed
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>performWrite</name><parameter_list>(<parameter><decl><type><name>IMutation</name></type> <name>mutation</name></decl></parameter>,
                                                                       <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>,
                                                                       <parameter><decl><type><name>String</name></type> <name>localDataCenter</name></decl></parameter>,
                                                                       <parameter><decl><type><name>WritePerformer</name></type> <name>performer</name></decl></parameter>,
                                                                       <parameter><decl><type><name>Runnable</name></type> <name>callback</name></decl></parameter>,
                                                                       <parameter><decl><type><name>WriteType</name></type> <name>writeType</name></decl></parameter>,
                                                                       <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Token</name></type> <name>tk</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name> <init>= <expr><call><name><name>ReplicaPlans</name><operator>.</operator><name>forWrite</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name><name>ReplicaPlans</name><operator>.</operator><name>writeNormal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>rs</name> <init>= <expr><call><name><name>replicaPlan</name><operator>.</operator><name>replicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>responseHandler</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getWriteResponseHandler</name></name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>writeType</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>performer</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>responseHandler</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// same as performWrites except does not initiate writes (but does perform availability checks).</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>WriteResponseHandlerWrapper</name></type> <name>wrapBatchResponseHandler</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>,
                                                                        <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>,
                                                                        <parameter><decl><type><name>ConsistencyLevel</name></type> <name>batchConsistencyLevel</name></decl></parameter>,
                                                                        <parameter><decl><type><name>WriteType</name></type> <name>writeType</name></decl></parameter>,
                                                                        <parameter><decl><type><name><name>BatchlogResponseHandler</name><operator>.</operator><name>BatchlogCleanup</name></name></type> <name>cleanup</name></decl></parameter>,
                                                                        <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>mutation</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Token</name></type> <name>tk</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name> <init>= <expr><call><name><name>ReplicaPlans</name><operator>.</operator><name>forWrite</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name><name>ReplicaPlans</name><operator>.</operator><name>writeNormal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>rs</name> <init>= <expr><call><name><name>replicaPlan</name><operator>.</operator><name>replicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>writeHandler</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getWriteResponseHandler</name></name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>writeType</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>BatchlogResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>batchHandler</name> <init>= <expr><operator>new</operator> <call><name><name>BatchlogResponseHandler</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>writeHandler</name></expr></argument>, <argument><expr><call><name><name>batchConsistencyLevel</name><operator>.</operator><name>blockFor</name></name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cleanup</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>WriteResponseHandlerWrapper</name><argument_list>(<argument><expr><name>batchHandler</name></expr></argument>, <argument><expr><name>mutation</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Same as performWrites except does not initiate writes (but does perform availability checks).
     * Keeps track of ViewWriteMetrics
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>WriteResponseHandlerWrapper</name></type> <name>wrapViewBatchResponseHandler</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>,
                                                                            <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>,
                                                                            <parameter><decl><type><name>ConsistencyLevel</name></type> <name>batchConsistencyLevel</name></decl></parameter>,
                                                                            <parameter><decl><type><name><name>ReplicaLayout</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>liveAndDown</name></decl></parameter>,
                                                                            <parameter><decl><type><name>AtomicLong</name></type> <name>baseComplete</name></decl></parameter>,
                                                                            <parameter><decl><type><name>WriteType</name></type> <name>writeType</name></decl></parameter>,
                                                                            <parameter><decl><type><name><name>BatchlogResponseHandler</name><operator>.</operator><name>BatchlogCleanup</name></name></type> <name>cleanup</name></decl></parameter>,
                                                                            <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>mutation</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name> <init>= <expr><call><name><name>ReplicaPlans</name><operator>.</operator><name>forWrite</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>liveAndDown</name></expr></argument>, <argument><expr><name><name>ReplicaPlans</name><operator>.</operator><name>writeAll</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name> <init>= <expr><call><name><name>replicaPlan</name><operator>.</operator><name>replicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>writeHandler</name> <init>= <expr><call><name><name>replicationStrategy</name><operator>.</operator><name>getWriteResponseHandler</name></name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>delay</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>baseComplete</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>viewWriteMetrics</name><operator>.</operator><name>viewWriteLatency</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>delay</name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>, <argument><expr><name>writeType</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>BatchlogResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>batchHandler</name> <init>= <expr><operator>new</operator> <call><name>ViewWriteMetricsWrapped</name><argument_list>(<argument><expr><name>writeHandler</name></expr></argument>, <argument><expr><call><name><name>batchConsistencyLevel</name><operator>.</operator><name>blockFor</name></name><argument_list>(<argument><expr><name>replicationStrategy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cleanup</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>WriteResponseHandlerWrapper</name><argument_list>(<argument><expr><name>batchHandler</name></expr></argument>, <argument><expr><name>mutation</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// used by atomic_batch_mutate to decouple availability check from the write itself, caches consistency level and endpoints.</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>WriteResponseHandlerWrapper</name>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>BatchlogResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>handler</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Mutation</name></type> <name>mutation</name></decl>;</decl_stmt>

        <constructor><name>WriteResponseHandlerWrapper</name><parameter_list>(<parameter><decl><type><name><name>BatchlogResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mutation</name></name> <operator>=</operator> <name>mutation</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Send the mutations to the right targets, write it locally if it corresponds or writes a hint when the node
     * is not available.
     *
     * Note about hints:
     * &lt;pre&gt;
     * {@code
     * | Hinted Handoff | Consist. Level |
     * | on             |       &gt;=1      | --&gt; wait for hints. We DO NOT notify the handler with handler.response() for hints;
     * | on             |       ANY      | --&gt; wait for hints. Responses count towards consistency.
     * | off            |       &gt;=1      | --&gt; DO NOT fire hints. And DO NOT wait for them to complete.
     * | off            |       ANY      | --&gt; DO NOT fire hints. And DO NOT wait for them to complete.
     * }
     * &lt;/pre&gt;
     *
     * @throws OverloadedException if the hints cannot be written/enqueued
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>sendToHintedReplicas</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Mutation</name></type> <name>mutation</name></decl></parameter>,
                                            <parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>plan</name></decl></parameter>,
                                            <parameter><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>responseHandler</name></decl></parameter>,
                                            <parameter><decl><type><name>String</name></type> <name>localDataCenter</name></decl></parameter>,
                                            <parameter><decl><type><name>Stage</name></type> <name>stage</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>OverloadedException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// this dc replicas:</comment>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>localDc</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// extra-datacenter replicas, grouped by dc</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dcGroups</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// only need to create a Message for non-local writes</comment>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>insertLocal</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Replica</name></type> <name>localReplica</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>endpointsToHint</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>backPressureHosts</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>destination</name> <range>: <expr><call><name><name>plan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>checkHintOverload</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>plan</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>destination</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>insertLocal</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>localReplica</name> <operator>=</operator> <name>destination</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="line">// belongs on a different server</comment>
                    <if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name><name>Message</name><operator>.</operator><name>outWithFlag</name></name><argument_list>(<argument><expr><name>MUTATION_REQ</name></expr></argument>, <argument><expr><name>mutation</name></expr></argument>, <argument><expr><name><name>MessageFlag</name><operator>.</operator><name>CALL_BACK_ON_FAILURE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <decl_stmt><decl><type><name>String</name></type> <name>dc</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenter</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// direct writes to local DC or old Cassandra versions</comment>
                    <comment type="line">// (1.1 knows how to forward old-style String message IDs; updated to int in 2.0)</comment>
                    <if_stmt><if>if <condition>(<expr><call><name><name>localDataCenter</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>localDc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>localDc</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>plan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt><expr><call><name><name>localDc</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>dcGroups</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>dcGroups</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>messages</name> <init>= <expr><call><name><name>dcGroups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>messages</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>messages</name> <operator>=</operator> <call><name><name>dcGroups</name><operator>.</operator><name>computeIfAbsent</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>v</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// most DCs will have &lt;= 3 replicas</comment>

                        <expr_stmt><expr><call><name><name>messages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>backPressureHosts</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>backPressureHosts</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>plan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt><expr><call><name><name>backPressureHosts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>destination</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">//Immediately mark the response as expired since the request will not be sent</comment>
                <expr_stmt><expr><call><name><name>responseHandler</name><operator>.</operator><name>expired</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>shouldHint</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>endpointsToHint</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>endpointsToHint</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt><expr><call><name><name>endpointsToHint</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>endpointsToHint</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>submitHint</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><call><name><name>EndpointsForToken</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>endpointsToHint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>insertLocal</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>localReplica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>performLocally</name><argument_list>(<argument><expr><name>stage</name></expr></argument>, <argument><expr><name>localReplica</name></expr></argument>, <argument><expr><name>mutation</name><operator>::</operator><name>apply</name></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>localDc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>destination</name> <range>: <expr><name>localDc</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWriteWithCallback</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>dcGroups</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// for each datacenter, send the message to one node to relay the write to other replicas</comment>
            <for>for <control>(<init><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>dcTargets</name> <range>: <expr><call><name><name>dcGroups</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>sendMessagesToNonlocalDC</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>EndpointsForToken</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dcTargets</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkHintOverload</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>destination</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// avoid OOMing due to excess hints.  we need to do this check even for "live" nodes, since we can</comment>
        <comment type="line">// still generate hints for those if it's overloaded or simply dead but not yet known-to-be-dead.</comment>
        <comment type="line">// The idea is that if we have over maxHintsInProgress hints in flight, this is probably due to</comment>
        <comment type="line">// a small number of nodes causing problems, so we should avoid shutting down writes completely to</comment>
        <comment type="line">// healthy nodes.  Any node with no hintsInProgress is considered healthy.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>StorageMetrics</name><operator>.</operator><name>totalHintsInProgress</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>maxHintsInProgress</name>
                <operator>&amp;&amp;</operator> <operator>(</operator><call><name>getHintsInProgressFor</name><argument_list>(<argument><expr><call><name><name>destination</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>shouldHint</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>OverloadedException</name><argument_list>(<argument><expr><literal type="string">"Too many in flight hints: "</literal> <operator>+</operator> <call><name><name>StorageMetrics</name><operator>.</operator><name>totalHintsInProgress</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>+</operator>
                                          <literal type="string">" destination: "</literal> <operator>+</operator> <name>destination</name> <operator>+</operator>
                                          <literal type="string">" destination hints: "</literal> <operator>+</operator> <call><name>getHintsInProgressFor</name><argument_list>(<argument><expr><call><name><name>destination</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block">/*
     * Send the message to the first replica of targets, and have it forward the message to others in its DC
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>sendMessagesToNonlocalDC</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IMutation</name></extends></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>,
                                                 <parameter><decl><type><name>EndpointsForToken</name></type> <name>targets</name></decl></parameter>,
                                                 <parameter><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>handler</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Replica</name></type> <name>target</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>targets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>target</name> <operator>=</operator> <call><name><name>targets</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ThreadLocalRandom</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>targets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>EndpointsForToken</name></type> <name>forwardToReplicas</name> <init>= <expr><call><name><name>targets</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name>r</name> <operator>!=</operator> <name>target</name></expr></block_content></block></lambda></expr></argument>, <argument><expr><call><name><name>targets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><name>forwardToReplicas</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>callbacks</name><operator>.</operator><name>addWithExpiration</name></name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>replica</name></expr></argument>, <argument><expr><call><name><name>handler</name><operator>.</operator><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Adding FWD message to {}@{}"</literal></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="line">// starting with 4.0, use the same message id for all replicas</comment>
            <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>messageIds</name> <init>= <expr><operator>new</operator> <name><name>long</name><index>[<expr><call><name><name>forwardToReplicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>messageIds</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name><name>message</name><operator>.</operator><name>withForwardTo</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ForwardingInfo</name><argument_list>(<argument><expr><call><name><name>forwardToReplicas</name><operator>.</operator><name>endpointList</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>messageIds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>target</name> <operator>=</operator> <call><name><name>targets</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWriteWithCallback</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Sending message to {}@{}"</literal></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>performLocally</name><parameter_list>(<parameter><decl><type><name>Stage</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name>Replica</name></type> <name>localReplica</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Runnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>maybeExecuteImmediately</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>LocalMutationRunnable</name></super><argument_list>(<argument><expr><name>localReplica</name></expr></argument>)</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to apply mutation locally : "</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name>Verb</name></type> <name>verb</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><name><name>Verb</name><operator>.</operator><name>MUTATION_REQ</name></name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>performLocally</name><parameter_list>(<parameter><decl><type><name>Stage</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name>Replica</name></type> <name>localReplica</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Runnable</name></type> <name>runnable</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>RequestCallback</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>handler</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>maybeExecuteImmediately</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>LocalMutationRunnable</name></super><argument_list>(<argument><expr><name>localReplica</name></expr></argument>)</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>onResponse</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ex</name> <operator>instanceof</operator> <name>WriteTimeoutException</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to apply mutation locally : "</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>onFailure</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>RequestFailureReason</name><operator>.</operator><name>forException</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name>Verb</name></type> <name>verb</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><name><name>Verb</name><operator>.</operator><name>MUTATION_REQ</name></name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handle counter mutation on the coordinator host.
     *
     * A counter mutation needs to first be applied to a replica (that we'll call the leader for the mutation) before being
     * replicated to the other endpoint. To achieve so, there is two case:
     *   1) the coordinator host is a replica: we proceed to applying the update locally and replicate throug
     *   applyCounterMutationOnCoordinator
     *   2) the coordinator is not a replica: we forward the (counter)mutation to a chosen replica (that will proceed through
     *   applyCounterMutationOnLeader upon receive) and wait for its acknowledgment.
     *
     * Implementation note: We check if we can fulfill the CL on the coordinator host even if he is not a replica to allow
     * quicker response and because the WriteResponseHandlers don't make it easy to send back an error. We also always gather
     * the write latencies at the coordinator node to make gathering point similar to the case of standard writes.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>mutateCounter</name><parameter_list>(<parameter><decl><type><name>CounterMutation</name></type> <name>cm</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localDataCenter</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>OverloadedException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Replica</name></type> <name>replica</name> <init>= <expr><call><name>findSuitableReplica</name><argument_list>(<argument><expr><call><name><name>cm</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cm</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>, <argument><expr><call><name><name>cm</name><operator>.</operator><name>consistency</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name>applyCounterMutationOnCoordinator</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// Exit now if we can't fulfill the CL here instead of forwarding to the leader replica</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><call><name><name>cm</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Token</name></type> <name>tk</name> <init>= <expr><call><name><name>cm</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// we build this ONLY to perform the sufficiency check that happens on construction</comment>
            <expr_stmt><expr><call><name><name>ReplicaPlans</name><operator>.</operator><name>forWrite</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>cm</name><operator>.</operator><name>consistency</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name><name>ReplicaPlans</name><operator>.</operator><name>writeAll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Forward the actual update to the chosen leader replica</comment>
            <decl_stmt><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>responseHandler</name> <init>= <expr><operator>new</operator> <call><name><name>WriteResponseHandler</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ReplicaPlans</name><operator>.</operator><name>forForwardingCounterWrite</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr></argument>,
                                                                                                 <argument><expr><name><name>WriteType</name><operator>.</operator><name>COUNTER</name></name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Enqueuing counter update to {}"</literal></expr></argument>, <argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Message</name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>outWithFlag</name></name><argument_list>(<argument><expr><name><name>Verb</name><operator>.</operator><name>COUNTER_MUTATION_REQ</name></name></expr></argument>, <argument><expr><name>cm</name></expr></argument>, <argument><expr><name><name>MessageFlag</name><operator>.</operator><name>CALL_BACK_ON_FAILURE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWriteWithCallback</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>replica</name></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>responseHandler</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find a suitable replica as leader for counter update.
     * For now, we pick a random replica in the local DC (or ask the snitch if
     * there is no replica alive in the local DC).
     * TODO: if we track the latency of the counter writes (which makes sense
     * contrarily to standard writes since there is a read involved), we could
     * trust the dynamic snitch entirely, which may be a better solution. It
     * is unclear we want to mix those latencies with read latencies, so this
     * may be a bit involved.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Replica</name></type> <name>findSuitableReplica</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localDataCenter</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnavailableException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EndpointsForToken</name></type> <name>replicas</name> <init>= <expr><call><name><name>replicationStrategy</name><operator>.</operator><name>getNaturalReplicasForToken</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// CASSANDRA-13043: filter out those endpoints not accepting clients yet, maybe because still bootstrapping</comment>
        <expr_stmt><expr><name>replicas</name> <operator>=</operator> <call><name><name>replicas</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>replica</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isRpcReady</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// CASSANDRA-17411: filter out endpoints that are not alive</comment>
        <expr_stmt><expr><name>replicas</name> <operator>=</operator> <call><name><name>replicas</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>replica</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>FailureDetector</name><operator>.</operator><name>instance</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// TODO have a way to compute the consistency level</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>replicas</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name><name>UnavailableException</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><call><name><name>cl</name><operator>.</operator><name>blockFor</name></name><argument_list>(<argument><expr><name>replicationStrategy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>localReplicas</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>replicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><name>replicas</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>localDataCenter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>localReplicas</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>localReplicas</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// If the consistency required is local then we should not involve other DCs</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>cl</name><operator>.</operator><name>isDatacenterLocal</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name><name>UnavailableException</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><call><name><name>cl</name><operator>.</operator><name>blockFor</name></name><argument_list>(<argument><expr><name>replicationStrategy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <comment type="line">// No endpoint in local DC, pick the closest endpoint according to the snitch</comment>
            <expr_stmt><expr><name>replicas</name> <operator>=</operator> <call><name><name>snitch</name><operator>.</operator><name>sortedByProximity</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>replicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>replicas</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>localReplicas</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ThreadLocalRandom</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><call><name><name>localReplicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Must be called on a replica of the mutation. This replica becomes the</comment>
    <comment type="line">// leader of this mutation.</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>applyCounterMutationOnLeader</name><parameter_list>(<parameter><decl><type><name>CounterMutation</name></type> <name>cm</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localDataCenter</name></decl></parameter>, <parameter><decl><type><name>Runnable</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>OverloadedException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>performWrite</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><call><name><name>cm</name><operator>.</operator><name>consistency</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>, <argument><expr><name>counterWritePerformer</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name><name>WriteType</name><operator>.</operator><name>COUNTER</name></name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Same as applyCounterMutationOnLeader but must with the difference that it use the MUTATION stage to execute the write (while</comment>
    <comment type="line">// applyCounterMutationOnLeader assumes it is on the MUTATION stage already)</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>applyCounterMutationOnCoordinator</name><parameter_list>(<parameter><decl><type><name>CounterMutation</name></type> <name>cm</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localDataCenter</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>OverloadedException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>performWrite</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><call><name><name>cm</name><operator>.</operator><name>consistency</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>, <argument><expr><name>counterWriteOnCoordinatorPerformer</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>WriteType</name><operator>.</operator><name>COUNTER</name></name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Runnable</name></type> <name>counterWriteTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IMutation</name></type> <name>mutation</name></decl></parameter>,
                                             <parameter><decl><type><specifier>final</specifier> <name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name></decl></parameter>,
                                             <parameter><decl><type><specifier>final</specifier> <name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>responseHandler</name></decl></parameter>,
                                             <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>localDataCenter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <class><super><name>DroppableRunnable</name></super><argument_list>(<argument><expr><name><name>Verb</name><operator>.</operator><name>COUNTER_MUTATION_REQ</name></name></expr></argument>)</argument_list>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>OverloadedException</name></expr></argument>, <argument><expr><name>WriteTimeoutException</name></expr></argument></throws>
            <block>{<block_content>
                <assert>assert <expr><name>mutation</name> <operator>instanceof</operator> <name>CounterMutation</name></expr>;</assert>

                <decl_stmt><decl><type><name>Mutation</name></type> <name>result</name> <init>= <expr><operator>(</operator><operator>(</operator><name>CounterMutation</name><operator>)</operator> <name>mutation</name><operator>)</operator><operator>.</operator><call><name>applyCounterMutation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>responseHandler</name><operator>.</operator><name>onResponse</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sendToHintedReplicas</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>, <argument><expr><name>localDataCenter</name></expr></argument>, <argument><expr><name><name>Stage</name><operator>.</operator><name>COUNTER_MUTATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>systemKeyspaceQuery</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>ReadCommand</name></extends></argument>&gt;</argument_list></name></type> <name>cmds</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>ReadCommand</name></type> <name>cmd</name> <range>: <expr><name>cmds</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>SchemaConstants</name><operator>.</operator><name>isLocalSystemKeyspace</name></name><argument_list>(<argument><expr><call><name><name>cmd</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RowIterator</name></type> <name>readOne</name><parameter_list>(<parameter><decl><type><name>SinglePartitionReadCommand</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>IsBootstrappingException</name></expr></argument>, <argument><expr><name>ReadFailureException</name></expr></argument>, <argument><expr><name>ReadTimeoutException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>readOne</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RowIterator</name></type> <name>readOne</name><parameter_list>(<parameter><decl><type><name>SinglePartitionReadCommand</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>IsBootstrappingException</name></expr></argument>, <argument><expr><name>ReadFailureException</name></expr></argument>, <argument><expr><name>ReadTimeoutException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name><name>PartitionIterators</name><operator>.</operator><name>getOnlyElement</name></name><argument_list>(<argument><expr><call><name>read</name><argument_list>(<argument><expr><call><name><name>SinglePartitionReadCommand</name><operator>.</operator><name>Group</name><operator>.</operator><name>one</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PartitionIterator</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>SinglePartitionReadCommand</name><operator>.</operator><name>Group</name></name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>IsBootstrappingException</name></expr></argument>, <argument><expr><name>ReadFailureException</name></expr></argument>, <argument><expr><name>ReadTimeoutException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// When using serial CL, the ClientState should be provided</comment>
        <assert>assert <expr><operator>!</operator><call><name><name>consistencyLevel</name><operator>.</operator><name>isSerialConsistency</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <return>return <expr><call><name>read</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Performs the actual reading of a row out of the StorageService, fetching
     * a specific set of column names from a given column family.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PartitionIterator</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>SinglePartitionReadCommand</name><operator>.</operator><name>Group</name></name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>IsBootstrappingException</name></expr></argument>, <argument><expr><name>ReadFailureException</name></expr></argument>, <argument><expr><name>ReadTimeoutException</name></expr></argument>, <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isBootstrapMode</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>systemKeyspaceQuery</name><argument_list>(<argument><expr><name><name>group</name><operator>.</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readMetrics</name><operator>.</operator><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>IsBootstrappingException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><ternary><condition><expr><call><name><name>consistencyLevel</name><operator>.</operator><name>isSerialConsistency</name></name><argument_list>()</argument_list></call></expr>
             ?</condition><then> <expr><call><name>readWithPaxos</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>
             </then><else>: <expr><call><name>readRegular</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>PartitionIterator</name></type> <name>readWithPaxos</name><parameter_list>(<parameter><decl><type><name><name>SinglePartitionReadCommand</name><operator>.</operator><name>Group</name></name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument>, <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>ReadFailureException</name></expr></argument>, <argument><expr><name>ReadTimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <assert>assert <expr><name>state</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <if_stmt><if>if <condition>(<expr><call><name><name>group</name><operator>.</operator><name>queries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"SERIAL/LOCAL_SERIAL consistency may only be requested for one partition at a time"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SinglePartitionReadCommand</name></type> <name>command</name> <init>= <expr><call><name><name>group</name><operator>.</operator><name>queries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>metadata</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>key</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// calculate the blockFor before repair any paxos round to avoid RS being altered in between.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>blockForRead</name> <init>= <expr><call><name><name>consistencyLevel</name><operator>.</operator><name>blockFor</name></name><argument_list>(<argument><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>PartitionIterator</name></type> <name>result</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>ConsistencyLevel</name></type> <name>consistencyForReplayCommitsOrFetch</name> <init>= <expr><ternary><condition><expr><name>consistencyLevel</name> <operator>==</operator> <name><name>ConsistencyLevel</name><operator>.</operator><name>LOCAL_SERIAL</name></name></expr>
                                                                        ?</condition><then> <expr><name><name>ConsistencyLevel</name><operator>.</operator><name>LOCAL_QUORUM</name></name></expr>
                                                                        </then><else>: <expr><name><name>ConsistencyLevel</name><operator>.</operator><name>QUORUM</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <try>try
            <block>{<block_content>
                <comment type="line">// Commit an empty update to make sure all in-progress updates that should be finished first is, _and_</comment>
                <comment type="line">// that no other in-progress can get resurrected.</comment>
                <decl_stmt><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>PartitionUpdate</name></argument>, <argument><name>RowIterator</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>updateProposer</name> <init>=
                    <expr><ternary><condition><expr><name>disableSerialReadLinearizability</name></expr>
                    ?</condition><then> <expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="null">null</literal></expr></block_content></block></lambda></expr>
                    </then><else>: <expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>PartitionUpdate</name><operator>.</operator><name>emptyUpdate</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <comment type="line">// When replaying, we commit at quorum/local quorum, as we want to be sure the following read (done at</comment>
                <comment type="line">// quorum/local_quorum) sees any replayed updates. Our own update is however empty, and those don't even</comment>
                <comment type="line">// get committed due to an optimiation described in doPaxos/beingRepairAndPaxos, so the commit</comment>
                <comment type="line">// consistency is irrelevant (we use ANY just to emphasis that we don't wait on our commit).</comment>
                <expr_stmt><expr><call><name>doPaxos</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>,
                        <argument><expr><name>key</name></expr></argument>,
                        <argument><expr><name>consistencyLevel</name></expr></argument>,
                        <argument><expr><name>consistencyForReplayCommitsOrFetch</name></expr></argument>,
                        <argument><expr><name><name>ConsistencyLevel</name><operator>.</operator><name>ANY</name></name></expr></argument>,
                        <argument><expr><name>state</name></expr></argument>,
                        <argument><expr><name>start</name></expr></argument>,
                        <argument><expr><name>casReadMetrics</name></expr></argument>,
                        <argument><expr><name>updateProposer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>WriteTimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ReadTimeoutException</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>blockForRead</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch>
            <catch>catch <parameter_list>(<parameter><decl><type><name>WriteFailureException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ReadFailureException</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>received</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>blockFor</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>failureReasonByEndpoint</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>

            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fetchRows</name><argument_list>(<argument><expr><name><name>group</name><operator>.</operator><name>queries</name></name></expr></argument>, <argument><expr><name>consistencyForReplayCommitsOrFetch</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnavailableException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readMetrics</name><operator>.</operator><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>casReadMetrics</name><operator>.</operator><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ReadTimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readMetrics</name><operator>.</operator><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>casReadMetrics</name><operator>.</operator><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ReadFailureException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readMetrics</name><operator>.</operator><name>failures</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>casReadMetrics</name><operator>.</operator><name>failures</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>failures</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>latency</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>readMetrics</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>casReadMetrics</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addNano</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>metric</name><operator>.</operator><name>coordinatorReadLatency</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>latency</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>

        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <specifier>static</specifier> <name>PartitionIterator</name></type> <name>readRegular</name><parameter_list>(<parameter><decl><type><name><name>SinglePartitionReadCommand</name><operator>.</operator><name>Group</name></name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>ReadFailureException</name></expr></argument>, <argument><expr><name>ReadTimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>PartitionIterator</name></type> <name>result</name> <init>= <expr><call><name>fetchRows</name><argument_list>(<argument><expr><name><name>group</name><operator>.</operator><name>queries</name></name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Note that the only difference between the command in a group must be the partition key on which</comment>
            <comment type="line">// they applied.</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>enforceStrictLiveness</name> <init>= <expr><call><name><name>group</name><operator>.</operator><name>queries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>enforceStrictLiveness</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// If we have more than one command, then despite each read command honoring the limit, the total result</comment>
            <comment type="line">// might not honor it and so we should enforce it</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>group</name><operator>.</operator><name>queries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>group</name><operator>.</operator><name>limits</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>group</name><operator>.</operator><name>nowInSec</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>group</name><operator>.</operator><name>selectsFullPartition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>enforceStrictLiveness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnavailableException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readMetrics</name><operator>.</operator><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ReadTimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readMetrics</name><operator>.</operator><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ReadFailureException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>readMetrics</name><operator>.</operator><name>failures</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>failures</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>latency</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>readMetrics</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readMetricsForLevel</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addNano</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// TODO avoid giving every command the same latency number.  Can fix this in CASSADRA-5329</comment>
            <for>for <control>(<init><decl><type><name>ReadCommand</name></type> <name>command</name> <range>: <expr><name><name>group</name><operator>.</operator><name>queries</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>openAndGetStore</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>metric</name><operator>.</operator><name>coordinatorReadLatency</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>latency</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PartitionIterator</name></type> <name>concatAndBlockOnRepair</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PartitionIterator</name></argument>&gt;</argument_list></name></type> <name>iterators</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ReadRepair</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>repairs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PartitionIterator</name></type> <name>concatenated</name> <init>= <expr><call><name><name>PartitionIterators</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>repairs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>concatenated</name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><operator>new</operator> <class><super><name>PartitionIterator</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>concatenated</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>repairs</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>ReadRepair</name><operator>::</operator><name>maybeSendAdditionalWrites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>repairs</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>ReadRepair</name><operator>::</operator><name>awaitWrites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>concatenated</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>RowIterator</name></type> <name>next</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>concatenated</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This function executes local and remote reads, and blocks for the results:
     *
     * 1. Get the replica locations, sorted by response time according to the snitch
     * 2. Send a data request to the closest replica, and digest requests to either
     *    a) all the replicas, if read repair is enabled
     *    b) the closest R-1 replicas, where R is the number required to satisfy the ConsistencyLevel
     * 3. Wait for a response from R replicas
     * 4. If the digests (if any) match the data return the data
     * 5. else carry out read repair by getting data from all the nodes.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>PartitionIterator</name></type> <name>fetchRows</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SinglePartitionReadCommand</name></argument>&gt;</argument_list></name></type> <name>commands</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>ReadFailureException</name></expr></argument>, <argument><expr><name>ReadTimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>cmdCount</name> <init>= <expr><call><name><name>commands</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>AbstractReadExecutor</name><index>[]</index></name></type> <name>reads</name> <init>= <expr><operator>new</operator> <name><name>AbstractReadExecutor</name><index>[<expr><name>cmdCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Get the replica locations, sorted by response time according to the snitch, and create a read executor</comment>
        <comment type="line">// for type of speculation we'll use in this read</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>cmdCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>reads</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>AbstractReadExecutor</name><operator>.</operator><name>getReadExecutor</name></name><argument_list>(<argument><expr><call><name><name>commands</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// sends a data request to the closest replica, and a digest request to the others. If we have a speculating</comment>
        <comment type="line">// read executoe, we'll only send read requests to enough replicas to satisfy the consistency level</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>cmdCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>reads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>executeAsync</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// if we have a speculating read executor and it looks like we may not receive a response from the initial</comment>
        <comment type="line">// set of replicas we sent messages to, speculatively send an additional messages to an un-contacted replica</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>cmdCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>reads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>maybeTryAdditionalReplicas</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// wait for enough responses to meet the consistency level. If there's a digest mismatch, begin the read</comment>
        <comment type="line">// repair process by sending full data reads to all replicas we received responses from.</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>cmdCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>reads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>awaitResponses</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// read repair - if it looks like we may not receive enough full data responses to meet CL, send</comment>
        <comment type="line">// an additional request to any remaining replicas we haven't contacted (if there are any)</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>cmdCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>reads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>maybeSendAdditionalDataRequests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// read repair - block on full data responses</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>cmdCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>reads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>awaitReadRepair</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// if we didn't do a read repair, return the contents of the data response, if we did do a read</comment>
        <comment type="line">// repair, merge the full data reads</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PartitionIterator</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>cmdCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ReadRepair</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>repairs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>cmdCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>cmdCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>reads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getResult</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>repairs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>reads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getReadRepair</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// if we did a read repair, assemble repair mutation and block on them</comment>
        <return>return <expr><call><name>concatAndBlockOnRepair</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>repairs</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>LocalReadRunnable</name> <super_list><extends>extends <super><name>DroppableRunnable</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ReadCommand</name></type> <name>command</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ReadCallback</name></type> <name>handler</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>trackRepairedStatus</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>LocalReadRunnable</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>ReadCallback</name></type> <name>handler</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>public</specifier> <name>LocalReadRunnable</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>ReadCallback</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trackRepairedStatus</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Verb</name><operator>.</operator><name>READ_REQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trackRepairedStatus</name></name> <operator>=</operator> <name>trackRepairedStatus</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setMonitoringTime</name></name><argument_list>(<argument><expr><name>approxCreationTimeNanos</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>verb</name><operator>.</operator><name>expiresAfterNanos</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSlowQueryTimeout</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>ReadResponse</name></type> <name>response</name></decl>;</decl_stmt>
                <try>try <init>(<decl><type><name>ReadExecutionController</name></type> <name>controller</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>executionController</name></name><argument_list>(<argument><expr><name>trackRepairedStatus</name></expr></argument>)</argument_list></call></expr></init></decl>;
                     <decl><type><name>UnfilteredPartitionIterator</name></type> <name>iterator</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>executeLocally</name></name><argument_list>(<argument><expr><name>controller</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
                <block>{<block_content>
                    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name><name>command</name><operator>.</operator><name>createResponse</name></name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><call><name><name>controller</name><operator>.</operator><name>getRepairedDataInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></try>

                <if_stmt><if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>complete</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>response</name></name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>metrics</name><operator>.</operator><name>recordSelfDroppedMessage</name></name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><call><name><name>MonotonicClock</name><operator>.</operator><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>approxCreationTimeNanos</name></expr></argument>, <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>onFailure</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RequestFailureReason</name><operator>.</operator><name>UNKNOWN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>latencySubscribers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>MonotonicClock</name><operator>.</operator><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>approxCreationTimeNanos</name></expr></argument>, <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>instanceof</operator> <name>TombstoneOverwhelmingException</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>onFailure</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RequestFailureReason</name><operator>.</operator><name>READ_TOO_MANY_TOMBSTONES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>onFailure</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RequestFailureReason</name><operator>.</operator><name>UNKNOWN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><name>t</name></expr>;</throw>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PartitionIterator</name></type> <name>getRangeSlice</name><parameter_list>(<parameter><decl><type><name>PartitionRangeReadCommand</name></type> <name>command</name></decl></parameter>,
                                                  <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>,
                                                  <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>RangeCommands</name><operator>.</operator><name>partitions</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getSchemaVersions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>describeSchemaVersions</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getSchemaVersionsWithPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>describeSchemaVersions</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * initiate a request/response session with each live node to check whether or not everybody is using the same
     * migration id. This is useful for determining if a schema change has propagated through the cluster. Disagreement
     * is assumed if any node fails to respond.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>describeSchemaVersions</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>withPort</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>myVersion</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>versions</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>liveHosts</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLiveMembers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>CountDownLatch</name></type> <name>latch</name> <init>= <expr><operator>new</operator> <call><name>CountDownLatch</name><argument_list>(<argument><expr><call><name><name>liveHosts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>RequestCallback</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>cb</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>message</name></decl></parameter></parameter_list> -&gt;
        <block>{<block_content>
            <comment type="line">// record the response from the remote node.</comment>
            <expr_stmt><expr><call><name><name>versions</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>message</name><operator>.</operator><name>payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>latch</name><operator>.</operator><name>countDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>
        <comment type="line">// an empty message acts as a request to the SchemaVersionVerbHandler.</comment>
        <decl_stmt><decl><type><name>Message</name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name><name>Verb</name><operator>.</operator><name>SCHEMA_VERSION_REQ</name></name></expr></argument>, <argument><expr><name>noPayload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <range>: <expr><name>liveHosts</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWithCallback</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <try>try
        <block>{<block_content>
            <comment type="line">// wait for as long as possible. timeout-1s if possible.</comment>
            <expr_stmt><expr><call><name><name>latch</name><operator>.</operator><name>await</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRpcTimeout</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ex</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"This latch shouldn't have been interrupted."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <comment type="line">// maps versions to hosts that are on that version.</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>allHosts</name> <init>= <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLiveMembers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getUnreachableMembers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>host</name> <range>: <expr><name>allHosts</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>UUID</name></type> <name>version</name> <init>= <expr><call><name><name>versions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>stringVersion</name> <init>= <expr><ternary><condition><expr><name>version</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>UNREACHABLE</name></expr> </then><else>: <expr><call><name><name>version</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hosts</name> <init>= <expr><call><name><name>results</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>stringVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>hosts</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>hosts</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>stringVersion</name></expr></argument>, <argument><expr><name>hosts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>hosts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>host</name><operator>.</operator><name>getHostAddress</name></name><argument_list>(<argument><expr><name>withPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// we're done: the results map is ready to return to the client.  the rest is just debug logging:</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>results</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>UNREACHABLE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Hosts not in agreement. Didn't get a response from everybody: {}"</literal></expr></argument>, <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><call><name><name>results</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>UNREACHABLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>results</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <comment type="line">// check for version disagreement. log the hosts that don't agree.</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>UNREACHABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>myVersion</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>host</name> <range>: <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"{} disagrees ({})"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><call><name><name>results</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Schemas are in agreement."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><name>results</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getHintedHandoffEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>hintedHandoffEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHintedHandoffEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name><name>StorageService</name><operator>.</operator><name>instance</name></name></expr>)</init>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>checkServiceAllowedToStart</name></name><argument_list>(<argument><expr><literal type="string">"hinted handoff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setHintedHandoffEnabled</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>enableHintsForDC</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dc</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>enableHintsForDC</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>disableHintsForDC</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dc</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>disableHintsForDC</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getHintedHandoffDisabledDCs</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>hintedHandoffDisabledDCs</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxHintWindow</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getMaxHintWindow</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxHintWindow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setMaxHintWindow</name></name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>shouldHint</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>hintedHandoffEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>replica</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>disabledDCs</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>hintedHandoffDisabledDCs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>disabledDCs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>dc</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenter</name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>disabledDCs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Not hinting {} since its data center {} has been disabled {}"</literal></expr></argument>, <argument><expr><name>replica</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>disabledDCs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hintWindowExpired</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointDowntime</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getMaxHintWindow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>hintWindowExpired</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>HintsService</name><operator>.</operator><name>instance</name><operator>.</operator><name>metrics</name><operator>.</operator><name>incrPastWindow</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Not hinting {} which has been down {} ms"</literal></expr></argument>, <argument><expr><name>replica</name></expr></argument>, <argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointDowntime</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>!</operator><name>hintWindowExpired</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Performs the truncate operatoin, which effectively deletes all data from
     * the column family cfname
     * @param keyspace
     * @param cfname
     * @throws UnavailableException If some of the hosts in the ring are down.
     * @throws TimeoutException
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>truncateBlocking</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cfname</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnavailableException</name></expr></argument>, <argument><expr><name>TimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Starting a blocking truncate operation on keyspace {}, CF {}"</literal></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>cfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isAnyStorageHostDown</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Cannot perform truncate, some hosts are down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Since the truncate operation is so aggressive and is typically only</comment>
            <comment type="line">// invoked by an admin, for simplicity we require that all nodes are up</comment>
            <comment type="line">// to perform the operation.</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>liveMembers</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLiveMembers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr><call><name><name>UnavailableException</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ConsistencyLevel</name><operator>.</operator><name>ALL</name></name></expr></argument>, <argument><expr><name>liveMembers</name> <operator>+</operator> <call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getUnreachableMembers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>liveMembers</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>allEndpoints</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLiveRingMembers</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>blockFor</name> <init>= <expr><call><name><name>allEndpoints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TruncateResponseHandler</name></type> <name>responseHandler</name> <init>= <expr><operator>new</operator> <call><name>TruncateResponseHandler</name><argument_list>(<argument><expr><name>blockFor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Send out the truncate calls and track the responses with the callbacks.</comment>
        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Enqueuing truncate messages to hosts {}"</literal></expr></argument>, <argument><expr><name>allEndpoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>TruncateRequest</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>TRUNCATE_REQ</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TruncateRequest</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>cfname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <range>: <expr><name>allEndpoints</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWithCallback</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// Wait for all</comment>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>responseHandler</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>TimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Timed out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Asks the gossiper if there are any nodes that are currently down.
     * @return true if the gossiper thinks all nodes are up.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAnyStorageHostDown</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getUnreachableTokenOwners</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <interface><specifier>public</specifier> interface <name>WritePerformer</name>
    <block>{
        <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>IMutation</name></type> <name>mutation</name></decl></parameter>,
                          <parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>targets</name></decl></parameter>,
                          <parameter><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>responseHandler</name></decl></parameter>,
                          <parameter><decl><type><name>String</name></type> <name>localDataCenter</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>OverloadedException</name></expr></argument></throws>;</function_decl>
    }</block></interface>

    <comment type="block" format="javadoc">/**
     * This class captures metrics for views writes.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ViewWriteMetricsWrapped</name> <super_list><extends>extends <super><name><name>BatchlogResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <constructor><specifier>public</specifier> <name>ViewWriteMetricsWrapped</name><parameter_list>(<parameter><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>writeHandler</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>BatchlogCleanup</name></type> <name>cleanup</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>writeHandler</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>cleanup</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewWriteMetrics</name><operator>.</operator><name>viewReplicasAttempted</name><operator>.</operator><name>inc</name></name><argument_list>(<argument><expr><call><name>candidateReplicaCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onResponse</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>msg</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResponse</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>viewWriteMetrics</name><operator>.</operator><name>viewReplicasSuccess</name><operator>.</operator><name>inc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * A Runnable that aborts if it doesn't start running before it times out
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>DroppableRunnable</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>approxCreationTimeNanos</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Verb</name></type> <name>verb</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>DroppableRunnable</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>approxCreationTimeNanos</name></name> <operator>=</operator> <call><name><name>MonotonicClock</name><operator>.</operator><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verb</name></name> <operator>=</operator> <name>verb</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>approxCurrentTimeNanos</name> <init>= <expr><call><name><name>MonotonicClock</name><operator>.</operator><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>expirationTimeNanos</name> <init>= <expr><call><name><name>verb</name><operator>.</operator><name>expiresAtNanos</name></name><argument_list>(<argument><expr><name>approxCreationTimeNanos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>approxCurrentTimeNanos</name> <operator>&gt;</operator> <name>expirationTimeNanos</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>timeTakenNanos</name> <init>= <expr><name>approxCurrentTimeNanos</name> <operator>-</operator> <name>approxCreationTimeNanos</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>metrics</name><operator>.</operator><name>recordSelfDroppedMessage</name></name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><name>timeTakenNanos</name></expr></argument>, <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name>runMayThrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function_decl><type><specifier>abstract</specifier> <specifier>protected</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>;</function_decl>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Like DroppableRunnable, but if it aborts, it will rerun (on the mutation stage) after
     * marking itself as a hint in progress so that the hint backpressure mechanism can function.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>LocalMutationRunnable</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>approxCreationTimeNanos</name> <init>= <expr><call><name><name>MonotonicClock</name><operator>.</operator><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Replica</name></type> <name>localReplica</name></decl>;</decl_stmt>

        <constructor><name>LocalMutationRunnable</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>localReplica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localReplica</name></name> <operator>=</operator> <name>localReplica</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Verb</name></type> <name>verb</name> <init>= <expr><call><name>verb</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>nowNanos</name> <init>= <expr><call><name><name>MonotonicClock</name><operator>.</operator><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>expirationTimeNanos</name> <init>= <expr><call><name><name>verb</name><operator>.</operator><name>expiresAtNanos</name></name><argument_list>(<argument><expr><name>approxCreationTimeNanos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>nowNanos</name> <operator>&gt;</operator> <name>expirationTimeNanos</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>timeTakenNanos</name> <init>= <expr><name>nowNanos</name> <operator>-</operator> <name>approxCreationTimeNanos</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>metrics</name><operator>.</operator><name>recordSelfDroppedMessage</name></name><argument_list>(<argument><expr><name><name>Verb</name><operator>.</operator><name>MUTATION_REQ</name></name></expr></argument>, <argument><expr><name>timeTakenNanos</name></expr></argument>, <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>HintRunnable</name></type> <name>runnable</name> <init>= <expr><operator>new</operator> <class><super><name>HintRunnable</name></super><argument_list>(<argument><expr><call><name><name>EndpointsForToken</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>localReplica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>localReplica</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
                <block>{
                    <function><type><specifier>protected</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>LocalMutationRunnable</name><operator>.</operator><name>this</name><operator>.</operator><name>runMayThrow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>
                }</block></class></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>submitHint</name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name>runMayThrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function_decl><type><specifier>abstract</specifier> <specifier>protected</specifier> <name>Verb</name></type> <name>verb</name><parameter_list>()</parameter_list>;</function_decl>
        <function_decl><type><specifier>abstract</specifier> <specifier>protected</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>;</function_decl>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * HintRunnable will decrease totalHintsInProgress and targetHints when finished.
     * It is the caller's responsibility to increment them initially.
     */</comment>
    <class><specifier>private</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>HintRunnable</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>EndpointsForToken</name></type> <name>targets</name></decl>;</decl_stmt>

        <constructor><specifier>protected</specifier> <name>HintRunnable</name><parameter_list>(<parameter><decl><type><name>EndpointsForToken</name></type> <name>targets</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>targets</name></name> <operator>=</operator> <name>targets</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name>runMayThrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch>
            <finally>finally
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>StorageMetrics</name><operator>.</operator><name>totalHintsInProgress</name><operator>.</operator><name>dec</name></name><argument_list>(<argument><expr><call><name><name>targets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>target</name> <range>: <expr><call><name><name>targets</name><operator>.</operator><name>endpoints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>getHintsInProgressFor</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>decrementAndGet</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></finally></try>
        </block_content>}</block></function>

        <function_decl><type><specifier>abstract</specifier> <specifier>protected</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>;</function_decl>
    }</block></class>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTotalHints</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>StorageMetrics</name><operator>.</operator><name>totalHints</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxHintsInProgress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>maxHintsInProgress</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxHintsInProgress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>qs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>maxHintsInProgress</name> <operator>=</operator> <name>qs</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getHintsInProgress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>StorageMetrics</name><operator>.</operator><name>totalHintsInProgress</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>verifyNoHintsInProgress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getHintsInProgress</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Some hints were not written before shutdown.  This is not supposed to happen.  You should (a) run repair, and (b) file a bug report"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>AtomicInteger</name></type> <name>getHintsInProgressFor</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>destination</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>hintsInProgress</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Future</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>submitHint</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>, <parameter><decl><type><name>Replica</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>responseHandler</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>submitHint</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><call><name><name>EndpointsForToken</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>target</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Future</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>submitHint</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>,
                                          <parameter><decl><type><name>EndpointsForToken</name></type> <name>targets</name></decl></parameter>,
                                          <parameter><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>IMutation</name></argument>&gt;</argument_list></name></type> <name>responseHandler</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Replicas</name><operator>.</operator><name>assertFull</name></name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// hints should not be written for transient replicas</comment>
        <decl_stmt><decl><type><name>HintRunnable</name></type> <name>runnable</name> <init>= <expr><operator>new</operator> <class><super><name>HintRunnable</name></super><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>runMayThrow</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>validTargets</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>targets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>hostIds</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>targets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>target</name> <range>: <expr><call><name><name>targets</name><operator>.</operator><name>endpoints</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>UUID</name></type> <name>hostId</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getHostIdForEndpoint</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>hostId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>hostIds</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>validTargets</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Discarding hint for endpoint not part of ring: {}"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Adding hints for {}"</literal></expr></argument>, <argument><expr><name>validTargets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>HintsService</name><operator>.</operator><name>instance</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>hostIds</name></expr></argument>, <argument><expr><call><name><name>Hint</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>validTargets</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name><name>HintsService</name><operator>.</operator><name>instance</name><operator>.</operator><name>metrics</name></name><operator>::</operator><name>incrCreatedHints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Notify the handler only for CL == ANY</comment>
                <if_stmt><if>if <condition>(<expr><name>responseHandler</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>responseHandler</name><operator>.</operator><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ConsistencyLevel</name><operator>.</operator><name>ANY</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>responseHandler</name><operator>.</operator><name>onResponse</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>submitHint</name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Future</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>submitHint</name><parameter_list>(<parameter><decl><type><name>HintRunnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>StorageMetrics</name><operator>.</operator><name>totalHintsInProgress</name><operator>.</operator><name>inc</name></name><argument_list>(<argument><expr><call><name><name>runnable</name><operator>.</operator><name>targets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>target</name> <range>: <expr><name><name>runnable</name><operator>.</operator><name>targets</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>getHintsInProgressFor</name><argument_list>(<argument><expr><call><name><name>target</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>incrementAndGet</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><operator>(</operator><name><name>Future</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>Stage</name><operator>.</operator><name>MUTATION</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Long</name></type> <name>getRpcTimeout</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRpcTimeout</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>timeoutInMillis</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setRpcTimeout</name></name><argument_list>(<argument><expr><name>timeoutInMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Long</name></type> <name>getReadRpcTimeout</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReadRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReadRpcTimeout</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>timeoutInMillis</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setReadRpcTimeout</name></name><argument_list>(<argument><expr><name>timeoutInMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Long</name></type> <name>getWriteRpcTimeout</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWriteRpcTimeout</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>timeoutInMillis</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>timeoutInMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Long</name></type> <name>getCounterWriteRpcTimeout</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCounterWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCounterWriteRpcTimeout</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>timeoutInMillis</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setCounterWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>timeoutInMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Long</name></type> <name>getCasContentionTimeout</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCasContentionTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCasContentionTimeout</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>timeoutInMillis</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setCasContentionTimeout</name></name><argument_list>(<argument><expr><name>timeoutInMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Long</name></type> <name>getRangeRpcTimeout</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRangeRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeRpcTimeout</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>timeoutInMillis</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setRangeRpcTimeout</name></name><argument_list>(<argument><expr><name>timeoutInMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Long</name></type> <name>getTruncateRpcTimeout</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getTruncateRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTruncateRpcTimeout</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>timeoutInMillis</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setTruncateRpcTimeout</name></name><argument_list>(<argument><expr><name>timeoutInMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Long</name></type> <name>getNativeTransportMaxConcurrentConnections</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNativeTransportMaxConcurrentConnections</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNativeTransportMaxConcurrentConnections</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>nativeTransportMaxConcurrentConnections</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setNativeTransportMaxConcurrentConnections</name></name><argument_list>(<argument><expr><name>nativeTransportMaxConcurrentConnections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Long</name></type> <name>getNativeTransportMaxConcurrentConnectionsPerIp</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNativeTransportMaxConcurrentConnectionsPerIp</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNativeTransportMaxConcurrentConnectionsPerIp</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>nativeTransportMaxConcurrentConnections</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setNativeTransportMaxConcurrentConnectionsPerIp</name></name><argument_list>(<argument><expr><name>nativeTransportMaxConcurrentConnections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reloadTriggerClasses</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>TriggerExecutor</name><operator>.</operator><name>instance</name><operator>.</operator><name>reloadClasses</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getReadRepairAttempted</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ReadRepairMetrics</name><operator>.</operator><name>attempted</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getReadRepairRepairedBlocking</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ReadRepairMetrics</name><operator>.</operator><name>repairedBlocking</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getReadRepairRepairedBackground</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ReadRepairMetrics</name><operator>.</operator><name>repairedBackground</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumberOfTables</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNumberOfTables</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getIdealConsistencyLevel</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getIdealConsistencyLevel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>setIdealConsistencyLevel</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cl</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ConsistencyLevel</name></type> <name>original</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getIdealConsistencyLevel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ConsistencyLevel</name></type> <name>newCL</name> <init>= <expr><call><name><name>ConsistencyLevel</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>cl</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setIdealConsistencyLevel</name></name><argument_list>(<argument><expr><name>newCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Updating ideal consistency level new value: %s old value %s"</literal></expr></argument>, <argument><expr><name>newCL</name></expr></argument>, <argument><expr><call><name><name>original</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getOtcBacklogExpirationInterval</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setOtcBacklogExpirationInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>intervalInMillis</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>enableRepairedDataTrackingForRangeReads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setRepairedDataTrackingForRangeReadsEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>disableRepairedDataTrackingForRangeReads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setRepairedDataTrackingForRangeReadsEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>getRepairedDataTrackingEnabledForRangeReads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRepairedDataTrackingForRangeReadsEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>enableRepairedDataTrackingForPartitionReads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setRepairedDataTrackingForPartitionReadsEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>disableRepairedDataTrackingForPartitionReads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setRepairedDataTrackingForPartitionReadsEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>getRepairedDataTrackingEnabledForPartitionReads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRepairedDataTrackingForPartitionReadsEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>enableReportingUnconfirmedRepairedDataMismatches</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>reportUnconfirmedRepairedDataMismatches</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>disableReportingUnconfirmedRepairedDataMismatches</name><parameter_list>()</parameter_list>
    <block>{<block_content>
       <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>reportUnconfirmedRepairedDataMismatches</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>getReportingUnconfirmedRepairedDataMismatchesEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>reportUnconfirmedRepairedDataMismatches</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>getSnapshotOnRepairedDataMismatchEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>snapshotOnRepairedDataMismatch</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>enableSnapshotOnRepairedDataMismatch</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setSnapshotOnRepairedDataMismatch</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>disableSnapshotOnRepairedDataMismatch</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setSnapshotOnRepairedDataMismatch</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>static</specifier> class <name>PaxosBallotAndContention</name>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>UUID</name></type> <name>ballot</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>contentions</name></decl>;</decl_stmt>

        <constructor><name>PaxosBallotAndContention</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>ballot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>contentions</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ballot</name></name> <operator>=</operator> <name>ballot</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contentions</name></name> <operator>=</operator> <name>contentions</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>hashCode</name> <init>= <expr><literal type="number">31</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>ballot</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>ballot</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
            <return>return <expr><literal type="number">31</literal> <operator>*</operator> <name>hashCode</name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>contentions</name></name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>PaxosBallotAndContention</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>PaxosBallotAndContention</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>PaxosBallotAndContention</name><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// handles nulls properly</comment>
            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ballot</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>ballot</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>contentions</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>contentions</name></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>getSnapshotOnDuplicateRowDetectionEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>snapshotOnDuplicateRowDetection</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>enableSnapshotOnDuplicateRowDetection</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setSnapshotOnDuplicateRowDetection</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>disableSnapshotOnDuplicateRowDetection</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setSnapshotOnDuplicateRowDetection</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>getCheckForDuplicateRowsDuringReads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>checkForDuplicateRowsDuringReads</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>enableCheckForDuplicateRowsDuringReads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setCheckForDuplicateRowsDuringReads</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>disableCheckForDuplicateRowsDuringReads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setCheckForDuplicateRowsDuringReads</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>getCheckForDuplicateRowsDuringCompaction</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>checkForDuplicateRowsDuringCompaction</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>enableCheckForDuplicateRowsDuringCompaction</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setCheckForDuplicateRowsDuringCompaction</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>disableCheckForDuplicateRowsDuringCompaction</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setCheckForDuplicateRowsDuringCompaction</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
