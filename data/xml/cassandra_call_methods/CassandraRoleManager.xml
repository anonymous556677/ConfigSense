<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/auth/CassandraRoleManager.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Strings</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ScheduledExecutors</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>SelectStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UTF8Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ClientState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>QueryState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>messages</name><operator>.</operator><name>ResultMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mindrot</name><operator>.</operator><name>jbcrypt</name><operator>.</operator><name>BCrypt</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Responsible for the creation, maintenance and deletion of roles
 * for the purposes of authentication and authorization.
 * Role data is stored internally, using the roles and role_members tables
 * in the system_auth keyspace.
 *
 * Additionally, if org.apache.cassandra.auth.PasswordAuthenticator is used,
 * encrypted passwords are also stored in the system_auth.roles table. This
 * coupling between the IAuthenticator and IRoleManager implementations exists
 * because setting a role's password via CQL is done with a CREATE ROLE or
 * ALTER ROLE statement, the processing of which is handled by IRoleManager.
 * As IAuthenticator is concerned only with credentials checking and has no
 * means to modify passwords, PasswordAuthenticator depends on
 * CassandraRoleManager for those functions.
 *
 * Alternative IAuthenticator implementations may be used in conjunction with
 * CassandraRoleManager, but WITH PASSWORD = 'password' will not be supported
 * in CREATE/ALTER ROLE statements.
 *
 * Such a configuration could be implemented using a custom IRoleManager that
 * extends CassandraRoleManager and which includes Option.PASSWORD in the {@code Set&lt;Option&gt;}
 * returned from supportedOptions/alterableOptions. Any additional processing
 * of the password itself (such as storing it in an alternative location) would
 * be added in overridden createRole and alterRole implementations.
 */</comment>
<class><specifier>public</specifier> class <name>CassandraRoleManager</name> <super_list><implements>implements <super><name>IRoleManager</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>CassandraRoleManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_SUPERUSER_NAME</name> <init>= <expr><literal type="string">"cassandra"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_SUPERUSER_PASSWORD</name> <init>= <expr><literal type="string">"cassandra"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Transform a row in the AuthKeyspace.ROLES to a Role instance</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Function</name><argument_list type="generic">&lt;<argument><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></argument>, <argument><name>Role</name></argument>&gt;</argument_list></name></type> <name>ROW_TO_ROLE</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>row</name></decl></parameter></parameter_list> -&gt;
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Role</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"role"</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>row</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"is_superuser"</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>row</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"can_login"</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"member_of"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getSet</name></name><argument_list>(<argument><expr><literal type="string">"member_of"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>
                                                 </then><else>: <expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name><operator>&gt;</operator><call><name>emptySet</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <comment type="line">// Failing to deserialize a boolean in is_superuser or can_login will throw an NPE</comment>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"An invalid value has been detected in the {} table for role {}. If you are "</literal> <operator>+</operator>
                        <literal type="string">"unable to login, you may need to disable authentication and confirm "</literal> <operator>+</operator>
                        <literal type="string">"that values in that table are accurate"</literal></expr></argument>, <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLES</name></name></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"role"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Invalid metadata has been detected for role %s"</literal></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"role"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

    <comment type="line">// 2 ** GENSALT_LOG2_ROUNDS rounds of hashing will be performed.</comment>
    <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GENSALT_LOG2_ROUNDS_PROPERTY</name> <init>= <expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"auth_bcrypt_gensalt_log2_rounds"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>GENSALT_LOG2_ROUNDS</name> <init>= <expr><call><name>getGensaltLogRounds</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>static</specifier> <name>int</name></type> <name>getGensaltLogRounds</name><parameter_list>()</parameter_list>
    <block>{<block_content>
         <decl_stmt><decl><type><name>int</name></type> <name>rounds</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name>GENSALT_LOG2_ROUNDS_PROPERTY</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if <condition>(<expr><name>rounds</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <name>rounds</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
         <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Bad value for system property -D%s."</literal> <operator>+</operator>
                                                        <literal type="string">"Please use a value between 4 and 30 inclusively"</literal></expr></argument>,
                                                        <argument><expr><name>GENSALT_LOG2_ROUNDS_PROPERTY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
         <return>return <expr><name>rounds</name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>SelectStatement</name></type> <name>loadRoleStatement</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Option</name></argument>&gt;</argument_list></name></type> <name>supportedOptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Option</name></argument>&gt;</argument_list></name></type> <name>alterableOptions</name></decl>;</decl_stmt>

    <comment type="line">// Will be set to true when all nodes in the cluster are on a version which supports roles (i.e. 2.2+)</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>isClusterReady</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CassandraRoleManager</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>supportedOptions</name> <operator>=</operator> <ternary><condition><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthenticator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>PasswordAuthenticator</name><operator>.</operator><name>class</name></name></expr>
                         ?</condition><then> <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>LOGIN</name></name></expr></argument>, <argument><expr><name><name>Option</name><operator>.</operator><name>SUPERUSER</name></name></expr></argument>, <argument><expr><name><name>Option</name><operator>.</operator><name>PASSWORD</name></name></expr></argument>)</argument_list></call></expr>
                         </then><else>: <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>LOGIN</name></name></expr></argument>, <argument><expr><name><name>Option</name><operator>.</operator><name>SUPERUSER</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>alterableOptions</name> <operator>=</operator> <ternary><condition><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthenticator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>PasswordAuthenticator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>
                         ?</condition><then> <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>PASSWORD</name></name></expr></argument>)</argument_list></call></expr>
                         </then><else>: <expr><name><name>ImmutableSet</name><operator>.</operator></name>&lt;<name>Option</name><operator>&gt;</operator><call><name>of</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>loadRoleStatement</name> <operator>=</operator> <operator>(</operator><name>SelectStatement</name><operator>)</operator> <call><name>prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT * from %s.%s WHERE role = ?"</literal></expr></argument>,
                                                      <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                                                      <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scheduleSetupTask</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
            <expr_stmt><expr><call><name>setupDefaultRole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Option</name></argument>&gt;</argument_list></name></type> <name>supportedOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>supportedOptions</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Option</name></argument>&gt;</argument_list></name></type> <name>alterableOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>alterableOptions</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>createRole</name><parameter_list>(<parameter><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>RoleOptions</name></type> <name>options</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>insertCql</name> <init>= <expr><ternary><condition><expr><call><name><name>options</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>
                         ?</condition><then> <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO %s.%s (role, is_superuser, can_login, salted_hash) VALUES ('%s', %s, %s, '%s')"</literal></expr></argument>,
                                         <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                                         <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLES</name></name></expr></argument>,
                                         <argument><expr><call><name>escape</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>options</name><operator>.</operator><name>getSuperuser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>options</name><operator>.</operator><name>getLogin</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><call><name>escape</name><argument_list>(<argument><expr><call><name>hashpw</name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                         </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO %s.%s (role, is_superuser, can_login) VALUES ('%s', %s, %s)"</literal></expr></argument>,
                                         <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                                         <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLES</name></name></expr></argument>,
                                         <argument><expr><call><name>escape</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>options</name><operator>.</operator><name>getSuperuser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>options</name><operator>.</operator><name>getLogin</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><name>insertCql</name></expr></argument>, <argument><expr><call><name>consistencyForRole</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>dropRole</name><parameter_list>(<parameter><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"DELETE FROM %s.%s WHERE role = '%s'"</literal></expr></argument>,
                              <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                              <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLES</name></name></expr></argument>,
                              <argument><expr><call><name>escape</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>consistencyForRole</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeAllMembers</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>alterRole</name><parameter_list>(<parameter><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>RoleOptions</name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Unlike most of the other data access methods here, this does not use a</comment>
        <comment type="line">// prepared statement in order to allow the set of assignments to be variable.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>assignments</name> <init>= <expr><call><name>optionsToAssignments</name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Strings</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>assignments</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE %s.%s SET %s WHERE role = '%s'"</literal></expr></argument>,
                                  <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                                  <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLES</name></name></expr></argument>,
                                  <argument><expr><name>assignments</name></expr></argument>,
                                  <argument><expr><call><name>escape</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>consistencyForRole</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>grantRole</name><parameter_list>(<parameter><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>grantee</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getRoles</name><argument_list>(<argument><expr><name>grantee</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s is a member of %s"</literal></expr></argument>,
                                                            <argument><expr><call><name><name>grantee</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                            <argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getRoles</name><argument_list>(<argument><expr><name>role</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>grantee</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s is a member of %s"</literal></expr></argument>,
                                                            <argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                            <argument><expr><call><name><name>grantee</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>modifyRoleMembership</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO %s.%s (role, member) values ('%s', '%s')"</literal></expr></argument>,
                              <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                              <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLE_MEMBERS</name></name></expr></argument>,
                              <argument><expr><call><name>escape</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><call><name>escape</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>consistencyForRole</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>revokeRole</name><parameter_list>(<parameter><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>revokee</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getRoles</name><argument_list>(<argument><expr><name>revokee</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s is not a member of %s"</literal></expr></argument>,
                                                            <argument><expr><call><name><name>revokee</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                            <argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>modifyRoleMembership</name><argument_list>(<argument><expr><call><name><name>revokee</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"DELETE FROM %s.%s WHERE role = '%s' and member = '%s'"</literal></expr></argument>,
                              <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                              <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLE_MEMBERS</name></name></expr></argument>,
                              <argument><expr><call><name>escape</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><call><name>escape</name><argument_list>(<argument><expr><call><name><name>revokee</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>consistencyForRole</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>RoleResource</name></argument>&gt;</argument_list></name></type> <name>getRoles</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>grantee</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeInherited</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>collectRoles</name><argument_list>(<argument><expr><call><name>getRole</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>includeInherited</name></expr></argument>,
                            <argument><expr><call><name>filter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>r</name><operator>.</operator><name>resource</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Role</name></argument>&gt;</argument_list></name></type> <name>getRoleDetails</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>grantee</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>collectRoles</name><argument_list>(<argument><expr><call><name>getRole</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><literal type="boolean">true</literal></expr></argument>,
                            <argument><expr><call><name>filter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>RoleResource</name></argument>&gt;</argument_list></name></type> <name>getAllRoles</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>ImmutableSet</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>RoleResource</name></argument>&gt;</argument_list></name></name></type> <name>builder</name> <init>= <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rows</name> <init>= <expr><call><name>process</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT role from %s.%s"</literal></expr></argument>,
                                                      <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                                                      <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLES</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name><name>ConsistencyLevel</name><operator>.</operator><name>QUORUM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>row</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>RoleResource</name><operator>.</operator><name>role</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"role"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSuper</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name>getRole</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>isSuper</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RequestExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Failed to authorize {} for super-user permission"</literal></expr></argument>, <argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><literal type="string">"Unable to perform authorization of super-user permission: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canLogin</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name>getRole</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>canLogin</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RequestExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Failed to authorize {} for login permission"</literal></expr></argument>, <argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><literal type="string">"Unable to perform authorization of login permission: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCustomOptions</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isExistingRole</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>Roles</name><operator>.</operator><name>isNullRole</name></name><argument_list>(<argument><expr><call><name>getRole</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IResource</name></extends></argument>&gt;</argument_list></name></type> <name>protectedResources</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>DataResource</name><operator>.</operator><name>table</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLES</name></name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>DataResource</name><operator>.</operator><name>table</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLE_MEMBERS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateConfiguration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
    </block_content>}</block></function>

    <comment type="block">/*
     * Create the default superuser role to bootstrap role creation on a clean system. Preemptively
     * gives the role the default password so PasswordAuthenticator can be used to log in (if
     * configured)
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>setupDefaultRole</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sortedTokens</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"CassandraRoleManager skipped default role setup: no known tokens in ring"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasExistingRoles</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>QueryProcessor</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO %s.%s (role, is_superuser, can_login, salted_hash) "</literal> <operator>+</operator>
                                                     <literal type="string">"VALUES ('%s', true, true, '%s')"</literal></expr></argument>,
                                                     <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                                                     <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLES</name></name></expr></argument>,
                                                     <argument><expr><name>DEFAULT_SUPERUSER_NAME</name></expr></argument>,
                                                     <argument><expr><call><name>escape</name><argument_list>(<argument><expr><call><name>hashpw</name><argument_list>(<argument><expr><name>DEFAULT_SUPERUSER_PASSWORD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name>consistencyForRole</name><argument_list>(<argument><expr><name>DEFAULT_SUPERUSER_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Created default superuser role '{}'"</literal></expr></argument>, <argument><expr><name>DEFAULT_SUPERUSER_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RequestExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"CassandraRoleManager skipped default role setup: some nodes were not ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasExistingRoles</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// Try looking up the 'cassandra' default role first, to avoid the range query if possible.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>defaultSUQuery</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s WHERE role = '%s'"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLES</name></name></expr></argument>, <argument><expr><name>DEFAULT_SUPERUSER_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>allUsersQuery</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s LIMIT 1"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>!</operator><call><name><name>QueryProcessor</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>defaultSUQuery</name></expr></argument>, <argument><expr><name><name>ConsistencyLevel</name><operator>.</operator><name>ONE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call>
               <operator>||</operator> <operator>!</operator><call><name><name>QueryProcessor</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>defaultSUQuery</name></expr></argument>, <argument><expr><name><name>ConsistencyLevel</name><operator>.</operator><name>QUORUM</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call>
               <operator>||</operator> <operator>!</operator><call><name><name>QueryProcessor</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>allUsersQuery</name></expr></argument>, <argument><expr><name><name>ConsistencyLevel</name><operator>.</operator><name>QUORUM</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>scheduleSetupTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>setupTask</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// The delay is to give the node a chance to see its peers before attempting the operation</comment>
        <expr_stmt><expr><call><name><name>ScheduledExecutors</name><operator>.</operator><name>optionalTasks</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
            <expr_stmt><expr><name>isClusterReady</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>setupTask</name><operator>.</operator><name>call</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Setup task failed with error, rescheduling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>scheduleSetupTask</name><argument_list>(<argument><expr><name>setupTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></lambda></expr></argument>, <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>SUPERUSER_SETUP_DELAY</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CQLStatement</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>template</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>QueryProcessor</name><operator>.</operator><name>parseStatement</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>template</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>prepare</name><argument_list>(<argument><expr><call><name><name>ClientState</name><operator>.</operator><name>forInternalCalls</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RequestValidationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw> <comment type="line">// not supposed to happen</comment>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name>Role</name></argument>&gt;</argument_list></name></type> <name>collectRoles</name><parameter_list>(<parameter><decl><type><name>Role</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeInherited</name></decl></parameter>, <parameter><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>distinctFilter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Roles</name><operator>.</operator><name>isNullRole</name></name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>includeInherited</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>role</name><operator>.</operator><name>memberOf</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>getRole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


        <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>role</name><operator>.</operator><name>memberOf</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                                          <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>distinctFilter</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>collectRoles</name><argument_list>(<argument><expr><call><name>getRole</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>distinctFilter</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Used as a stateful filtering function when recursively collecting granted roles</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>filter</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>seen</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>seen</name><operator>::</operator><name>add</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * Get a single Role instance given the role name. This never returns null, instead it
     * uses a null object when a role with the given name cannot be found. So
     * it's always safe to call methods on the returned object without risk of NPE.
     */</comment>
    <function><type><specifier>private</specifier> <name>Role</name></type> <name>getRole</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QueryOptions</name></type> <name>options</name> <init>= <expr><call><name><name>QueryOptions</name><operator>.</operator><name>forInternalCalls</name></name><argument_list>(<argument><expr><call><name>consistencyForRole</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
                                                             <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>bytes</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ResultMessage</name><operator>.</operator><name>Rows</name></name></type> <name>rows</name> <init>= <expr><call><name>select</name><argument_list>(<argument><expr><name>loadRoleStatement</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>rows</name><operator>.</operator><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Roles</name><operator>.</operator><name>nullRole</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>ROW_TO_ROLE</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><call><name><name>UntypedResultSet</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>rows</name><operator>.</operator><name>result</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>one</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * Adds or removes a role name from the membership list of an entry in the roles table table
     * (adds if op is "+", removes if op is "-")
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>modifyRoleMembership</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>grantee</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>op</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE %s.%s SET member_of = member_of %s {'%s'} WHERE role = '%s'"</literal></expr></argument>,
                              <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                              <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLES</name></name></expr></argument>,
                              <argument><expr><name>op</name></expr></argument>,
                              <argument><expr><call><name>escape</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><call><name>escape</name><argument_list>(<argument><expr><name>grantee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>consistencyForRole</name><argument_list>(<argument><expr><name>grantee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block">/*
     * Clear the membership list of the given role
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>removeAllMembers</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>role</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// Get the membership list of the the given role</comment>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rows</name> <init>= <expr><call><name>process</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT member FROM %s.%s WHERE role = '%s'"</literal></expr></argument>,
                                                      <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                                                      <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLE_MEMBERS</name></name></expr></argument>,
                                                      <argument><expr><call><name>escape</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name>consistencyForRole</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>rows</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// Update each member in the list, removing this role from its own list of granted roles</comment>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>modifyRoleMembership</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"member"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>role</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// Finally, remove the membership list for the dropped role</comment>
        <expr_stmt><expr><call><name>process</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"DELETE FROM %s.%s WHERE role = '%s'"</literal></expr></argument>,
                              <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                              <argument><expr><name><name>AuthKeyspace</name><operator>.</operator><name>ROLE_MEMBERS</name></name></expr></argument>,
                              <argument><expr><call><name>escape</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>consistencyForRole</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block">/*
     * Convert a map of Options from a CREATE/ALTER statement into
     * assignment clauses used to construct a CQL UPDATE statement
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>optionsToAssignments</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Option</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>options</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call>
                      <operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                      <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>entry</name></decl></parameter></parameter_list> -&gt;
                           <block>{<block_content>
                               <switch>switch <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>)</condition>
                               <block>{<block_content>
                                   <case>case <expr><name>LOGIN</name></expr>:</case>
                                       <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"can_login = %s"</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                                   <case>case <expr><name>SUPERUSER</name></expr>:</case>
                                       <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"is_superuser = %s"</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                                   <case>case <expr><name>PASSWORD</name></expr>:</case>
                                       <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"salted_hash = '%s'"</literal></expr></argument>, <argument><expr><call><name>escape</name><argument_list>(<argument><expr><call><name>hashpw</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                                   <default>default:</default>
                                       <return>return <expr><literal type="null">null</literal></expr>;</return>
                               </block_content>}</block></switch>
                           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>Objects</name><operator>::</operator><name>nonNull</name></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>joining</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>ConsistencyLevel</name></type> <name>consistencyForRole</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>role</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>role</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>DEFAULT_SUPERUSER_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>ConsistencyLevel</name><operator>.</operator><name>QUORUM</name></name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><name><name>ConsistencyLevel</name><operator>.</operator><name>LOCAL_ONE</name></name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>hashpw</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>BCrypt</name><operator>.</operator><name>hashpw</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><call><name><name>BCrypt</name><operator>.</operator><name>gensalt</name></name><argument_list>(<argument><expr><name>GENSALT_LOG2_ROUNDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>escape</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>StringUtils</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><literal type="string">"''"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Executes the provided query.
     * This shouldn't be used during setup as this will directly return an error if the manager is not setup yet. Setup tasks
     * should use QueryProcessor.process directly.
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>UntypedResultSet</name></type> <name>process</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isClusterReady</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"Cannot process role related query as the role manager isn't yet setup. "</literal>
                                            <operator>+</operator> <literal type="string">"This is likely because some of nodes in the cluster are on version 2.1 or earlier. "</literal>
                                            <operator>+</operator> <literal type="string">"You need to upgrade all nodes to Cassandra 2.2 or more to use roles."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>QueryProcessor</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name><name>ResultMessage</name><operator>.</operator><name>Rows</name></name></type> <name>select</name><parameter_list>(<parameter><decl><type><name>SelectStatement</name></type> <name>statement</name></decl></parameter>, <parameter><decl><type><name>QueryOptions</name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>statement</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><call><name><name>QueryState</name><operator>.</operator><name>forInternalCalls</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
