<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/SortedBiMultiValMap.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>SortedSetMultimap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>TreeMultimap</name></name>;</import>

<class><specifier>public</specifier> class <name><name>SortedBiMultiValMap</name><parameter_list>&lt;<parameter><name>K</name></parameter>, <parameter><name>V</name></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>BiMultiValMap</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></super></extends></super_list>
<block>{
    <constructor><specifier>protected</specifier> <name>SortedBiMultiValMap</name><parameter_list>(<parameter><decl><type><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>forwardMap</name></decl></parameter>, <parameter><decl><type><name><name>SortedSetMultimap</name><argument_list type="generic">&lt;<argument><name>V</name></argument>, <argument><name>K</name></argument>&gt;</argument_list></name></type> <name>reverseMap</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>forwardMap</name></expr></argument>, <argument><expr><name>reverseMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>K</name> <extends>extends <name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>K</name></argument>&gt;</argument_list></name></extends></parameter>, <parameter><name>V</name> <extends>extends <name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name><name>SortedBiMultiValMap</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>SortedBiMultiValMap</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>K</name></argument>,<argument><name>V</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>TreeMultimap</name><operator>.</operator></name>&lt;<name>V</name></expr></argument>, <argument><expr><name>K</name><operator>&gt;</operator><call><name>create</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>K</name> <extends>extends <name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>K</name></argument>&gt;</argument_list></name></extends></parameter>, <parameter><name>V</name> <extends>extends <name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name><name>SortedBiMultiValMap</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>(<parameter><decl><type><name><name>BiMultiValMap</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>SortedBiMultiValMap</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>newMap</name> <init>= <expr><name><name>SortedBiMultiValMap</name><operator>.</operator></name>&lt;<name>K</name></expr></init></decl>,<decl><type ref="prev"/><name>V</name>&gt;<name>create</name><argument_list>()</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newMap</name><operator>.</operator><name>forwardMap</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name><name>map</name><operator>.</operator><name>forwardMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Put each individual TreeSet instead of Multimap#putAll(Multimap) to get linear complexity</comment>
        <comment type="line">// See CASSANDRA-14660</comment>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>V</name></argument>, <argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>K</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>map</name><operator>.</operator><name>inverse</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>asMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>newMap</name><operator>.</operator><name>reverseMap</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>newMap</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
