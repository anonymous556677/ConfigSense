<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/reads/range/SingleRangeResponse.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>range</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>RowIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ReadTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>EndpointsForRange</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>DataResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>ReadCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>repair</name><operator>.</operator><name>ReadRepair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>AbstractIterator</name></name>;</import>

<class>class <name>SingleRangeResponse</name> <super_list><extends>extends <super><name><name>AbstractIterator</name><argument_list type="generic">&lt;<argument><name>RowIterator</name></argument>&gt;</argument_list></name></super></extends> <implements>implements <super><name>PartitionIterator</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>DataResolver</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>, <argument><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></argument>&gt;</argument_list></name></type> <name>resolver</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ReadCallback</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>, <argument><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></argument>&gt;</argument_list></name></type> <name>handler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ReadRepair</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>, <argument><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></argument>&gt;</argument_list></name></type> <name>readRepair</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>PartitionIterator</name></type> <name>result</name></decl>;</decl_stmt>

    <constructor><name>SingleRangeResponse</name><parameter_list>(<parameter><decl><type><name><name>DataResolver</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>, <argument><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></argument>&gt;</argument_list></name></type> <name>resolver</name></decl></parameter>,
                        <parameter><decl><type><name><name>ReadCallback</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>, <argument><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></argument>&gt;</argument_list></name></type> <name>handler</name></decl></parameter>,
                        <parameter><decl><type><name><name>ReadRepair</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>, <argument><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></argument>&gt;</argument_list></name></type> <name>readRepair</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resolver</name></name> <operator>=</operator> <name>resolver</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readRepair</name></name> <operator>=</operator> <name>readRepair</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name><name>ReadRepair</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>, <argument><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></argument>&gt;</argument_list></name></type> <name>getReadRepair</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>readRepair</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>waitForResponse</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ReadTimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>awaitResults</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>resolver</name><operator>.</operator><name>resolve</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>RowIterator</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>waitForResponse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><call><name><name>result</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>result</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
