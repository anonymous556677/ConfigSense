<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/schema/CompactionParams.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>MoreObjects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>AbstractCompactionStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>LeveledCompactionStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>SizeTieredCompactionStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>TimeWindowCompactionStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>CompactionParams</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>CompactionParams</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>Option</name>
    <block>{
        <decl><name>CLASS</name></decl>,
        <decl><name>ENABLED</name></decl>,
        <decl><name>MIN_THRESHOLD</name></decl>,
        <decl><name>MAX_THRESHOLD</name></decl>,
        <decl><name>PROVIDE_OVERLAPPING_TOMBSTONES</name></decl>;

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>name</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>TombstoneOption</name>
    <block>{
        <decl><name>NONE</name></decl>,
        <decl><name>ROW</name></decl>,
        <decl><name>CELL</name></decl>;

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TombstoneOption</name><index>[]</index></name></type> <name>copyOfValues</name> <init>= <expr><call><name>values</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TombstoneOption</name></argument>&gt;</argument_list></name></type> <name>forName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><name>copyOfValues</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>x</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>x</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>findFirst</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_MIN_THRESHOLD</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_MAX_THRESHOLD</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_ENABLED</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TombstoneOption</name></type> <name>DEFAULT_PROVIDE_OVERLAPPING_TOMBSTONES</name> <init>=
            <expr><call><name><name>TombstoneOption</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"default.provide.overlapping.tombstones"</literal></expr></argument>, <argument><expr><call><name><name>TombstoneOption</name><operator>.</operator><name>NONE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>DEFAULT_THRESHOLDS</name> <init>=
        <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>MIN_THRESHOLD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>DEFAULT_MIN_THRESHOLD</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>Option</name><operator>.</operator><name>MAX_THRESHOLD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>DEFAULT_MAX_THRESHOLD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CompactionParams</name></type> <name>DEFAULT</name> <init>=
        <expr><operator>new</operator> <call><name>CompactionParams</name><argument_list>(<argument><expr><name><name>SizeTieredCompactionStrategy</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>DEFAULT_THRESHOLDS</name></expr></argument>, <argument><expr><name>DEFAULT_ENABLED</name></expr></argument>, <argument><expr><name>DEFAULT_PROVIDE_OVERLAPPING_TOMBSTONES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>klass</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isEnabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TombstoneOption</name></type> <name>tombstoneOption</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>CompactionParams</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isEnabled</name></decl></parameter>, <parameter><decl><type><name>TombstoneOption</name></type> <name>tombstoneOption</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>klass</name></name> <operator>=</operator> <name>klass</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isEnabled</name></name> <operator>=</operator> <name>isEnabled</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tombstoneOption</name></name> <operator>=</operator> <name>tombstoneOption</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompactionParams</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isEnabled</name> <init>= <expr><ternary><condition><expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>ENABLED</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                          ?</condition><then> <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>ENABLED</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                          </then><else>: <expr><name>DEFAULT_ENABLED</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>overlappingTombstoneParm</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>PROVIDE_OVERLAPPING_TOMBSTONES</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                               <argument><expr><call><name><name>DEFAULT_PROVIDE_OVERLAPPING_TOMBSTONES</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TombstoneOption</name></argument>&gt;</argument_list></name></type> <name>tombstoneOptional</name> <init>= <expr><call><name><name>TombstoneOption</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>overlappingTombstoneParm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tombstoneOptional</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Invalid value %s for 'provide_overlapping_tombstones' compaction sub-option - must be one of the following [%s]."</literal></expr></argument>,
                                                    <argument><expr><name>overlappingTombstoneParm</name></expr></argument>,
                                                    <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><call><name><name>TombstoneOption</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>TombstoneOption</name></type> <name>tombstoneOption</name> <init>= <expr><call><name><name>tombstoneOptional</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>allOptions</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>supportsThresholdParams</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>allOptions</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>MIN_THRESHOLD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>DEFAULT_MIN_THRESHOLD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>allOptions</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>MAX_THRESHOLD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>DEFAULT_MAX_THRESHOLD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><operator>new</operator> <call><name>CompactionParams</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>allOptions</name></expr></argument>, <argument><expr><name>isEnabled</name></expr></argument>, <argument><expr><name>tombstoneOption</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompactionParams</name></type> <name>stcs</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name><name>SizeTieredCompactionStrategy</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompactionParams</name></type> <name>lcs</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name><name>LeveledCompactionStrategy</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompactionParams</name></type> <name>twcs</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name><name>TimeWindowCompactionStrategy</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>minCompactionThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>threshold</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>MIN_THRESHOLD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>threshold</name> <operator>==</operator> <literal type="null">null</literal></expr>
             ?</condition><then> <expr><name>DEFAULT_MIN_THRESHOLD</name></expr>
             </then><else>: <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>maxCompactionThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>threshold</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>MAX_THRESHOLD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>threshold</name> <operator>==</operator> <literal type="null">null</literal></expr>
             ?</condition><then> <expr><name>DEFAULT_MAX_THRESHOLD</name></expr>
             </then><else>: <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TombstoneOption</name></type> <name>tombstoneOption</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>tombstoneOption</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>unknownOptions</name> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator> <call><name><name>klass</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><literal type="string">"validateOptions"</literal></expr></argument>, <argument><expr><name><name>Map</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>invoke</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>unknownOptions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Properties specified %s are not understood by %s"</literal></expr></argument>,
                                                        <argument><expr><call><name><name>unknownOptions</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                        <argument><expr><call><name><name>klass</name><operator>.</operator><name>getSimpleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Compaction strategy {} does not have a static validateOptions method. Validation ignored"</literal></expr></argument>,
                        <argument><expr><call><name><name>klass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getTargetException</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>ConfigurationException</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>(</operator><name>ConfigurationException</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getTargetException</name></name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>Throwable</name></type> <name>cause</name> <init>= <expr><ternary><condition><expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>
                            ?</condition><then> <expr><name>e</name></expr>
                            </then><else>: <expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"%s.validateOptions() threw an error: %s %s"</literal></expr></argument>,
                                                    <argument><expr><call><name><name>klass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name><name>cause</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name><name>cause</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Cannot access method validateOptions in "</literal> <operator>+</operator> <call><name><name>klass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name>String</name></type> <name>minThreshold</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>MIN_THRESHOLD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>minThreshold</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isNumeric</name></name><argument_list>(<argument><expr><name>minThreshold</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Invalid value %s for '%s' compaction sub-option - must be an integer"</literal></expr></argument>,
                                                    <argument><expr><name>minThreshold</name></expr></argument>,
                                                    <argument><expr><name><name>Option</name><operator>.</operator><name>MIN_THRESHOLD</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>maxThreshold</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>MAX_THRESHOLD</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>maxThreshold</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>StringUtils</name><operator>.</operator><name>isNumeric</name></name><argument_list>(<argument><expr><name>maxThreshold</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Invalid value %s for '%s' compaction sub-option - must be an integer"</literal></expr></argument>,
                                                    <argument><expr><name>maxThreshold</name></expr></argument>,
                                                    <argument><expr><name><name>Option</name><operator>.</operator><name>MAX_THRESHOLD</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>minCompactionThreshold</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>maxCompactionThreshold</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Disabling compaction by setting compaction thresholds to 0 has been removed,"</literal>
                                             <operator>+</operator> <literal type="string">" set the compaction option 'enabled' to false instead."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>minCompactionThreshold</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Min compaction threshold cannot be less than 2 (got %d)"</literal></expr></argument>,
                                                    <argument><expr><call><name>minCompactionThreshold</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>minCompactionThreshold</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name>maxCompactionThreshold</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Min compaction threshold (got %d) cannot be greater than max compaction threshold (got %d)"</literal></expr></argument>,
                                                    <argument><expr><call><name>minCompactionThreshold</name><argument_list>()</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name>maxCompactionThreshold</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>double</name></type> <name>defaultBloomFilterFbChance</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name><name>klass</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>LeveledCompactionStrategy</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0.1</literal></expr> </then><else>: <expr><literal type="number">0.01</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>klass</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>klass</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * All strategy options - excluding 'class'.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>options</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>isEnabled</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompactionParams</name></type> <name>fromMap</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>CLASS</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>className</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Missing sub-option '%s' for the '%s' option"</literal></expr></argument>,
                                                    <argument><expr><name><name>Option</name><operator>.</operator><name>CLASS</name></name></expr></argument>,
                                                    <argument><expr><name><name>TableParams</name><operator>.</operator><name>Option</name><operator>.</operator><name>COMPACTION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><call><name>classFromName</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>classFromName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><ternary><condition><expr><call><name><name>name</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>
                         ?</condition><then> <expr><name>name</name></expr>
                         </then><else>: <expr><literal type="string">"org.apache.cassandra.db.compaction."</literal> <operator>+</operator> <name>name</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>AbstractCompactionStrategy</name></argument>&gt;</argument_list></name></type> <name>strategyClass</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>classForName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><literal type="string">"compaction strategy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>AbstractCompactionStrategy</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>strategyClass</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Compaction strategy class %s is not derived from AbstractReplicationStrategy"</literal></expr></argument>,
                                                    <argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>strategyClass</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * LCS doesn't, STCS and DTCS do
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>supportsThresholdParams</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AbstractCompactionStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>klass</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>unrecognizedOptions</name> <init>=
                <expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>klass</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><literal type="string">"validateOptions"</literal></expr></argument>, <argument><expr><name><name>Map</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>invoke</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>DEFAULT_THRESHOLDS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>unrecognizedOptions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>asMap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>options</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>CLASS</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>klass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>map</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>MoreObjects</name><operator>.</operator><name>toStringHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>, <argument><expr><call><name><name>klass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>CompactionParams</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>CompactionParams</name></type> <name>cp</name> <init>= <expr><operator>(</operator><name>CompactionParams</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>klass</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>cp</name><operator>.</operator><name>klass</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>options</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>cp</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
