<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/io/util/DataInputPlus.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>vint</name><operator>.</operator><name>VIntCoding</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Extension to DataInput that provides support for reading varints
 */</comment>
<interface><specifier>public</specifier> interface <name>DataInputPlus</name> <super_list><extends>extends <super><name>DataInput</name></super></extends></super_list>
<block>{
    <function><type><specifier>default</specifier> <name>long</name></type> <name>readVInt</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name><name>VIntCoding</name><operator>.</operator><name>readVInt</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Think hard before opting for an unsigned encoding. Is this going to bite someone because some day
     * they might need to pass in a sentinel value using negative numbers? Is the risk worth it
     * to save a few bytes?
     *
     * Signed, not a fan of unsigned values in protocols and formats
     */</comment>
    <function><type><specifier>default</specifier> <name>long</name></type> <name>readUnsignedVInt</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name><name>VIntCoding</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Always skips the requested number of bytes, unless EOF is reached
     *
     * @param n number of bytes to skip
     * @return number of bytes skipped
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>skipBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <function><type><specifier>public</specifier> <specifier>default</specifier> <name>void</name></type> <name>skipBytesFully</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>skipped</name> <init>= <expr><call><name>skipBytes</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>skipped</name> <operator>!=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>EOFException</name><argument_list>(<argument><expr><literal type="string">"EOF after "</literal> <operator>+</operator> <name>skipped</name> <operator>+</operator> <literal type="string">" bytes out of "</literal> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wrapper around an InputStream that provides no buffering but can decode varints
     */</comment>
    <class><specifier>public</specifier> class <name>DataInputStreamPlus</name> <super_list><extends>extends <super><name>DataInputStream</name></super></extends> <implements>implements <super><name>DataInputPlus</name></super></implements></super_list>
    <block>{
        <constructor><specifier>public</specifier> <name>DataInputStreamPlus</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>
}</block></interface>
</unit>
