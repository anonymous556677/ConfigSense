<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/transport/messages/ResultMessage.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>messages</name></name>;</package>


<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ByteBuf</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MD5Digest</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ResultMessage</name> <super_list><extends>extends <super><name><name>Message</name><operator>.</operator><name>Response</name></name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>codec</name> <init>= <expr><operator>new</operator> <class><super><name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>ByteBuf</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Kind</name></type> <name>kind</name> <init>= <expr><call><name><name>Kind</name><operator>.</operator><name>fromId</name></name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>kind</name><operator>.</operator><name>subcodec</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ByteBuf</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>kind</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>kind</name><operator>.</operator><name>subcodec</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>encodedSize</name><parameter_list>(<parameter><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="number">4</literal> <operator>+</operator> <call><name><name>msg</name><operator>.</operator><name>kind</name><operator>.</operator><name>subcodec</name><operator>.</operator><name>encodedSize</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>Kind</name>
    <block>{

        <decl><name>VOID</name>               <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Void</name><operator>.</operator><name>subcodec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>ROWS</name>               <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>Rows</name><operator>.</operator><name>subcodec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>SET_KEYSPACE</name>       <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>SetKeyspace</name><operator>.</operator><name>subcodec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>PREPARED</name>           <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>Prepared</name><operator>.</operator><name>subcodec</name></name></expr></argument>)</argument_list></decl>,
        <decl><name>SCHEMA_CHANGE</name>      <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>SchemaChange</name><operator>.</operator><name>subcodec</name></name></expr></argument>)</argument_list></decl>;
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Kind</name><index>[]</index></name></type> <name>ids</name></decl>;</decl_stmt>
        <static>static
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>maxId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Kind</name></type> <name>k</name> <range>: <expr><call><name><name>Kind</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name>maxId</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxId</name></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>ids</name> <operator>=</operator> <operator>new</operator> <name><name>Kind</name><index>[<expr><name>maxId</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Kind</name></type> <name>k</name> <range>: <expr><call><name><name>Kind</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>ids</name><index>[<expr><name><name>k</name><operator>.</operator><name>id</name></name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Duplicate kind id"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>ids</name><index>[<expr><name><name>k</name><operator>.</operator><name>id</name></name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></static>

        <constructor><specifier>private</specifier> <name>Kind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subcodec</name></name> <operator>=</operator> <name>subcodec</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Kind</name></type> <name>fromId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Kind</name></type> <name>k</name> <init>= <expr><name><name>ids</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unknown kind id %d in RESULT message"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <return>return <expr><name>k</name></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>ResultMessage</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>kind</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Message</name><operator>.</operator><name>Type</name><operator>.</operator><name>RESULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Void</name> <super_list><extends>extends <super><name>ResultMessage</name></super></extends></super_list>
    <block>{
        <comment type="line">// Even though we have no specific information here, don't make a</comment>
        <comment type="line">// singleton since as each message it has in fact a streamid and connection.</comment>
        <constructor><specifier>public</specifier> <name>Void</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Kind</name><operator>.</operator><name>VOID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name> <init>= <expr><operator>new</operator> <class><super><name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>ByteBuf</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>Void</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ByteBuf</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <assert>assert <expr><name>msg</name> <operator>instanceof</operator> <name>Void</name></expr>;</assert>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>encodedSize</name><parameter_list>(<parameter><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"EMPTY RESULT"</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SetKeyspace</name> <super_list><extends>extends <super><name>ResultMessage</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SetKeyspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Kind</name><operator>.</operator><name>SET_KEYSPACE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspace</name></name> <operator>=</operator> <name>keyspace</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name> <init>= <expr><operator>new</operator> <class><super><name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>ByteBuf</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>CBUtil</name><operator>.</operator><name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>new</operator> <call><name>SetKeyspace</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ByteBuf</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <assert>assert <expr><name>msg</name> <operator>instanceof</operator> <name>SetKeyspace</name></expr>;</assert>
                <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeAsciiString</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SetKeyspace</name><operator>)</operator><name>msg</name><operator>)</operator><operator>.</operator><name>keyspace</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>encodedSize</name><parameter_list>(<parameter><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <assert>assert <expr><name>msg</name> <operator>instanceof</operator> <name>SetKeyspace</name></expr>;</assert>
                <return>return <expr><call><name><name>CBUtil</name><operator>.</operator><name>sizeOfAsciiString</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SetKeyspace</name><operator>)</operator><name>msg</name><operator>)</operator><operator>.</operator><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"RESULT set keyspace "</literal> <operator>+</operator> <name>keyspace</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Rows</name> <super_list><extends>extends <super><name>ResultMessage</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name> <init>= <expr><operator>new</operator> <class><super><name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>ByteBuf</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>Rows</name><argument_list>(<argument><expr><call><name><name>ResultSet</name><operator>.</operator><name>codec</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ByteBuf</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <assert>assert <expr><name>msg</name> <operator>instanceof</operator> <name>Rows</name></expr>;</assert>
                <decl_stmt><decl><type><name>Rows</name></type> <name>rowMsg</name> <init>= <expr><operator>(</operator><name>Rows</name><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ResultSet</name><operator>.</operator><name>codec</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name><name>rowMsg</name><operator>.</operator><name>result</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>encodedSize</name><parameter_list>(<parameter><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <assert>assert <expr><name>msg</name> <operator>instanceof</operator> <name>Rows</name></expr>;</assert>
                <decl_stmt><decl><type><name>Rows</name></type> <name>rowMsg</name> <init>= <expr><operator>(</operator><name>Rows</name><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>ResultSet</name><operator>.</operator><name>codec</name><operator>.</operator><name>encodedSize</name></name><argument_list>(<argument><expr><name><name>rowMsg</name><operator>.</operator><name>result</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ResultSet</name></type> <name>result</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Rows</name><parameter_list>(<parameter><decl><type><name>ResultSet</name></type> <name>result</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Kind</name><operator>.</operator><name>ROWS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>result</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"ROWS "</literal> <operator>+</operator> <name>result</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Prepared</name> <super_list><extends>extends <super><name>ResultMessage</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name> <init>= <expr><operator>new</operator> <class><super><name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>ByteBuf</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>MD5Digest</name></type> <name>id</name> <init>= <expr><call><name><name>MD5Digest</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>MD5Digest</name></type> <name>resultMetadataId</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>isGreaterOrEqualTo</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V5</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>resultMetadataId</name> <operator>=</operator> <call><name><name>MD5Digest</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <decl_stmt><decl><type><name><name>ResultSet</name><operator>.</operator><name>PreparedMetadata</name></name></type> <name>metadata</name> <init>= <expr><call><name><name>ResultSet</name><operator>.</operator><name>PreparedMetadata</name><operator>.</operator><name>codec</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>ResultSet</name><operator>.</operator><name>ResultMetadata</name></name></type> <name>resultMetadata</name> <init>= <expr><name><name>ResultSet</name><operator>.</operator><name>ResultMetadata</name><operator>.</operator><name>EMPTY</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>isGreaterThan</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V1</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>resultMetadata</name> <operator>=</operator> <call><name><name>ResultSet</name><operator>.</operator><name>ResultMetadata</name><operator>.</operator><name>codec</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <return>return <expr><operator>new</operator> <call><name>Prepared</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>resultMetadataId</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>resultMetadata</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ByteBuf</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <assert>assert <expr><name>msg</name> <operator>instanceof</operator> <name>Prepared</name></expr>;</assert>
                <decl_stmt><decl><type><name>Prepared</name></type> <name>prepared</name> <init>= <expr><operator>(</operator><name>Prepared</name><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
                <assert>assert <expr><name><name>prepared</name><operator>.</operator><name>statementId</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

                <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><name><name>prepared</name><operator>.</operator><name>statementId</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>isGreaterOrEqualTo</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V5</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><name><name>prepared</name><operator>.</operator><name>resultMetadataId</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name><name>ResultSet</name><operator>.</operator><name>PreparedMetadata</name><operator>.</operator><name>codec</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name><name>prepared</name><operator>.</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>isGreaterThan</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V1</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>ResultSet</name><operator>.</operator><name>ResultMetadata</name><operator>.</operator><name>codec</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name><name>prepared</name><operator>.</operator><name>resultMetadata</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>encodedSize</name><parameter_list>(<parameter><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <assert>assert <expr><name>msg</name> <operator>instanceof</operator> <name>Prepared</name></expr>;</assert>
                <decl_stmt><decl><type><name>Prepared</name></type> <name>prepared</name> <init>= <expr><operator>(</operator><name>Prepared</name><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
                <assert>assert <expr><name><name>prepared</name><operator>.</operator><name>statementId</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

                <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfBytes</name></name><argument_list>(<argument><expr><name><name>prepared</name><operator>.</operator><name>statementId</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>isGreaterOrEqualTo</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V5</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfBytes</name></name><argument_list>(<argument><expr><name><name>prepared</name><operator>.</operator><name>resultMetadataId</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>ResultSet</name><operator>.</operator><name>PreparedMetadata</name><operator>.</operator><name>codec</name><operator>.</operator><name>encodedSize</name></name><argument_list>(<argument><expr><name><name>prepared</name><operator>.</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>isGreaterThan</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V1</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>ResultSet</name><operator>.</operator><name>ResultMetadata</name><operator>.</operator><name>codec</name><operator>.</operator><name>encodedSize</name></name><argument_list>(<argument><expr><name><name>prepared</name><operator>.</operator><name>resultMetadata</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>size</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>MD5Digest</name></type> <name>statementId</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>MD5Digest</name></type> <name>resultMetadataId</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Describes the variables to be bound in the prepared statement */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>ResultSet</name><operator>.</operator><name>PreparedMetadata</name></name></type> <name>metadata</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** Describes the results of executing this prepared statement */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>ResultSet</name><operator>.</operator><name>ResultMetadata</name></name></type> <name>resultMetadata</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Prepared</name><parameter_list>(<parameter><decl><type><name>MD5Digest</name></type> <name>statementId</name></decl></parameter>, <parameter><decl><type><name>MD5Digest</name></type> <name>resultMetadataId</name></decl></parameter>, <parameter><decl><type><name><name>ResultSet</name><operator>.</operator><name>PreparedMetadata</name></name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name><name>ResultSet</name><operator>.</operator><name>ResultMetadata</name></name></type> <name>resultMetadata</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Kind</name><operator>.</operator><name>PREPARED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>statementId</name></name> <operator>=</operator> <name>statementId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resultMetadataId</name></name> <operator>=</operator> <name>resultMetadataId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadata</name></name> <operator>=</operator> <name>metadata</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resultMetadata</name></name> <operator>=</operator> <name>resultMetadata</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>VisibleForTesting</name></annotation>
        <type><specifier>public</specifier> <name>Prepared</name></type> <name>withResultMetadata</name><parameter_list>(<parameter><decl><type><name><name>ResultSet</name><operator>.</operator><name>ResultMetadata</name></name></type> <name>resultMetadata</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Prepared</name><argument_list>(<argument><expr><name>statementId</name></expr></argument>, <argument><expr><call><name><name>resultMetadata</name><operator>.</operator><name>getResultMetadataId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>resultMetadata</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"RESULT PREPARED "</literal> <operator>+</operator> <name>statementId</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>metadata</name> <operator>+</operator> <literal type="string">" (resultMetadata="</literal> <operator>+</operator> <name>resultMetadata</name> <operator>+</operator> <literal type="string">")"</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SchemaChange</name> <super_list><extends>extends <super><name>ResultMessage</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Event</name><operator>.</operator><name>SchemaChange</name></name></type> <name>change</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SchemaChange</name><parameter_list>(<parameter><decl><type><name><name>Event</name><operator>.</operator><name>SchemaChange</name></name></type> <name>change</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Kind</name><operator>.</operator><name>SCHEMA_CHANGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>change</name></name> <operator>=</operator> <name>change</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></type> <name>subcodec</name> <init>= <expr><operator>new</operator> <class><super><name><name>Message</name><operator>.</operator><name><name>Codec</name><argument_list type="generic">&lt;<argument><name>ResultMessage</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>ByteBuf</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>SchemaChange</name><argument_list>(<argument><expr><call><name><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>deserializeEvent</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ByteBuf</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <assert>assert <expr><name>msg</name> <operator>instanceof</operator> <name>SchemaChange</name></expr>;</assert>
                <decl_stmt><decl><type><name>SchemaChange</name></type> <name>scm</name> <init>= <expr><operator>(</operator><name>SchemaChange</name><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>scm</name><operator>.</operator><name>change</name><operator>.</operator><name>serializeEvent</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>encodedSize</name><parameter_list>(<parameter><decl><type><name>ResultMessage</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <assert>assert <expr><name>msg</name> <operator>instanceof</operator> <name>SchemaChange</name></expr>;</assert>
                <decl_stmt><decl><type><name>SchemaChange</name></type> <name>scm</name> <init>= <expr><operator>(</operator><name>SchemaChange</name><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>scm</name><operator>.</operator><name>change</name><operator>.</operator><name>eventSerializedSize</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"RESULT schema change "</literal> <operator>+</operator> <name>change</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
