<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/commitlog/CommitLogSegmentReader.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>CRC32</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>AbstractIterator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>EncryptedFileSegmentInputStream</name><operator>.</operator><name>ChunkProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>CommitLogReadHandler</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSReadError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>compress</name><operator>.</operator><name>ICompressor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileDataInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileSegmentInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>RandomAccessReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>CompressionParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>security</name><operator>.</operator><name>EncryptionUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>security</name><operator>.</operator><name>EncryptionContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>CommitLogSegment</name><operator>.</operator><name>SYNC_MARKER_SIZE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name><operator>.</operator><name>updateChecksumInt</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Read each sync section of a commit log, iteratively.
 */</comment>
<class><specifier>public</specifier> class <name>CommitLogSegmentReader</name> <super_list><implements>implements <super><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name><name>CommitLogSegmentReader</name><operator>.</operator><name>SyncSegment</name></name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CommitLogReadHandler</name></type> <name>handler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CommitLogDescriptor</name></type> <name>descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RandomAccessReader</name></type> <name>reader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Segmenter</name></type> <name>segmenter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>tolerateTruncation</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * ending position of the current sync section.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>end</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>CommitLogSegmentReader</name><parameter_list>(<parameter><decl><type><name>CommitLogReadHandler</name></type> <name>handler</name></decl></parameter>,
                                     <parameter><decl><type><name>CommitLogDescriptor</name></type> <name>descriptor</name></decl></parameter>,
                                     <parameter><decl><type><name>RandomAccessReader</name></type> <name>reader</name></decl></parameter>,
                                     <parameter><decl><type><name>boolean</name></type> <name>tolerateTruncation</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>descriptor</name></name> <operator>=</operator> <name>descriptor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tolerateTruncation</name></name> <operator>=</operator> <name>tolerateTruncation</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>reader</name><operator>.</operator><name>getFilePointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>descriptor</name><operator>.</operator><name>getEncryptionContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>segmenter</name> <operator>=</operator> <operator>new</operator> <call><name>EncryptedSegmenter</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>descriptor</name><operator>.</operator><name>compression</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>segmenter</name> <operator>=</operator> <operator>new</operator> <call><name>CompressedSegmenter</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>segmenter</name> <operator>=</operator> <operator>new</operator> <call><name>NoOpSegmenter</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>SyncSegment</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SegmentIterator</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>protected</specifier> class <name>SegmentIterator</name> <super_list><extends>extends <super><name><name>AbstractIterator</name><argument_list type="generic">&lt;<argument><name><name>CommitLogSegmentReader</name><operator>.</operator><name>SyncSegment</name></name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <function><type><specifier>protected</specifier> <name>SyncSegment</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>currentStart</name> <init>= <expr><name>end</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>readSyncMarker</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>currentStart</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                    <block>{<block_content>
                        <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <call><name><name>reader</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// the CRC was good (meaning it was good when it was written and still looks legit), but the file is truncated now.</comment>
                        <comment type="line">// try to grab and use as much of the file as possible, which might be nothing if the end of the file truly is corrupt</comment>
                        <expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>reader</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <return>return <expr><call><name><name>segmenter</name><operator>.</operator><name>nextSegment</name></name><argument_list>(<argument><expr><name>currentStart</name> <operator>+</operator> <name>SYNC_MARKER_SIZE</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block>
                <catch>catch<parameter_list>(<parameter><decl><type><name><name>CommitLogSegmentReader</name><operator>.</operator><name>SegmentReadException</name></name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <try>try
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>handleUnrecoverableError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CommitLogReadException</name><argument_list>(
                                                    <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                    <argument><expr><name><name>CommitLogReadErrorReason</name><operator>.</operator><name>UNRECOVERABLE_DESCRIPTOR_ERROR</name></name></expr></argument>,
                                                    <argument><expr><operator>!</operator><name><name>e</name><operator>.</operator><name>invalidCrc</name></name> <operator>&amp;&amp;</operator> <name>tolerateTruncation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch></try>
                </block_content>}</block></catch>
                <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <try>try
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>boolean</name></type> <name>tolerateErrorsInSection</name> <init>= <expr><name>tolerateTruncation</name> <operator>&amp;</operator> <call><name><name>segmenter</name><operator>.</operator><name>tolerateSegmentErrors</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <comment type="line">// if no exception is thrown, the while loop will continue</comment>
                        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>handleUnrecoverableError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CommitLogReadException</name><argument_list>(
                                                    <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                    <argument><expr><name><name>CommitLogReadErrorReason</name><operator>.</operator><name>UNRECOVERABLE_DESCRIPTOR_ERROR</name></name></expr></argument>,
                                                    <argument><expr><name>tolerateErrorsInSection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch></try>
                </block_content>}</block></catch></try>
            </block_content>}</block></while>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>readSyncMarker</name><parameter_list>(<parameter><decl><type><name>CommitLogDescriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>RandomAccessReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <call><name><name>reader</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>SYNC_MARKER_SIZE</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// There was no room in the segment to write a final header. No data could be present here.</comment>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CRC32</name></type> <name>crc</name> <init>= <expr><operator>new</operator> <call><name>CRC32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>updateChecksumInt</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>descriptor</name><operator>.</operator><name>id</name></name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFL</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateChecksumInt</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>descriptor</name><operator>.</operator><name>id</name></name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateChecksumInt</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>reader</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>filecrc</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffffffffL</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>crc</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>filecrc</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>filecrc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Encountered bad header at position %d of commit log %s, with invalid CRC. "</literal> <operator>+</operator>
                             <literal type="string">"The end of segment marker should be zero."</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <throw>throw <expr><operator>new</operator> <call><name>SegmentReadException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>end</name> <argument_list type="generic">&lt; <argument><name>offset</name> <operator>||</operator> <name>end</name></argument> &gt;</argument_list></name> <call><name><name>reader</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Encountered bad header at position %d of commit log %s, with bad position but valid CRC"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>SegmentReadException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>end</name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SegmentReadException</name> <super_list><extends>extends <super><name>IOException</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>invalidCrc</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SegmentReadException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>invalidCrc</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>invalidCrc</name></name> <operator>=</operator> <name>invalidCrc</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SyncSegment</name>
    <block>{
        <comment type="block" format="javadoc">/** the 'buffer' to replay commit log data from */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>FileDataInput</name></type> <name>input</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** offset in file where this section begins. */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>fileStartPosition</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** offset in file where this section ends. */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>fileEndPosition</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/** the logical ending position of the buffer */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>endPosition</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>toleratesErrorsInSection</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SyncSegment</name><parameter_list>(<parameter><decl><type><name>FileDataInput</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileStartPosition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileEndPosition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endPosition</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>toleratesErrorsInSection</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileStartPosition</name></name> <operator>=</operator> <name>fileStartPosition</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileEndPosition</name></name> <operator>=</operator> <name>fileEndPosition</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>endPosition</name></name> <operator>=</operator> <name>endPosition</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>toleratesErrorsInSection</name></name> <operator>=</operator> <name>toleratesErrorsInSection</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Derives the next section of the commit log to be replayed. Section boundaries are derived from the commit log sync markers.
     */</comment>
    <interface>interface <name>Segmenter</name>
    <block>{
        <comment type="block" format="javadoc">/**
         * Get the next section of the commit log to replay.
         *
         * @param startPosition the position in the file to begin reading at
         * @param nextSectionStartPosition the file position of the beginning of the next section
         * @return the buffer and it's logical end position
         * @throws IOException
         */</comment>
        <function_decl><type><name>SyncSegment</name></type> <name>nextSegment</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startPosition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nextSectionStartPosition</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

        <comment type="block" format="javadoc">/**
         * Determine if we tolerate errors in the current segment.
         */</comment>
        <function><type><specifier>default</specifier> <name>boolean</name></type> <name>tolerateSegmentErrors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>segmentEndPosition</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>fileLength</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>segmentEndPosition</name> <operator>&gt;=</operator> <name>fileLength</name> <operator>||</operator> <name>segmentEndPosition</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></interface>

    <class><specifier>static</specifier> class <name>NoOpSegmenter</name> <super_list><implements>implements <super><name>Segmenter</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RandomAccessReader</name></type> <name>reader</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>NoOpSegmenter</name><parameter_list>(<parameter><decl><type><name>RandomAccessReader</name></type> <name>reader</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>SyncSegment</name></type> <name>nextSegment</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startPosition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nextSectionStartPosition</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>startPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SyncSegment</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>startPosition</name></expr></argument>, <argument><expr><name>nextSectionStartPosition</name></expr></argument>, <argument><expr><name>nextSectionStartPosition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>tolerateSegmentErrors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>static</specifier> class <name>CompressedSegmenter</name> <super_list><implements>implements <super><name>Segmenter</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ICompressor</name></type> <name>compressor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RandomAccessReader</name></type> <name>reader</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>compressedBuffer</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>uncompressedBuffer</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>nextLogicalStart</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>CompressedSegmenter</name><parameter_list>(<parameter><decl><type><name>CommitLogDescriptor</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>RandomAccessReader</name></type> <name>reader</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>CompressionParams</name><operator>.</operator><name>createCompressor</name></name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>compression</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>public</specifier> <name>CompressedSegmenter</name><parameter_list>(<parameter><decl><type><name>ICompressor</name></type> <name>compressor</name></decl></parameter>, <parameter><decl><type><name>RandomAccessReader</name></type> <name>reader</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compressor</name></name> <operator>=</operator> <name>compressor</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>compressedBuffer</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>uncompressedBuffer</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nextLogicalStart</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getFilePointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
        <type><specifier>public</specifier> <name>SyncSegment</name></type> <name>nextSegment</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>startPosition</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>nextSectionStartPosition</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>startPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>uncompressedLength</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>compressedLength</name> <init>= <expr><name>nextSectionStartPosition</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>reader</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>compressedLength</name> <operator>&gt;</operator> <name><name>compressedBuffer</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>compressedBuffer</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">1.2</literal> <operator>*</operator> <name>compressedLength</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>compressedBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>compressedLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>uncompressedLength</name> <operator>&gt;</operator> <name><name>uncompressedBuffer</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
               <expr_stmt><expr><name>uncompressedBuffer</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">1.2</literal> <operator>*</operator> <name>uncompressedLength</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>compressor</name><operator>.</operator><name>uncompress</name></name><argument_list>(<argument><expr><name>compressedBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>compressedLength</name></expr></argument>, <argument><expr><name>uncompressedBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>nextLogicalStart</name> <operator>+=</operator> <name>SYNC_MARKER_SIZE</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>FileDataInput</name></type> <name>input</name> <init>= <expr><operator>new</operator> <call><name>FileSegmentInputStream</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>uncompressedBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nextLogicalStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>nextLogicalStart</name> <operator>+=</operator> <name>uncompressedLength</name></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SyncSegment</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>startPosition</name></expr></argument>, <argument><expr><name>nextSectionStartPosition</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nextLogicalStart</name></expr></argument>, <argument><expr><call><name>tolerateSegmentErrors</name><argument_list>(<argument><expr><name>nextSectionStartPosition</name></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>static</specifier> class <name>EncryptedSegmenter</name> <super_list><implements>implements <super><name>Segmenter</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RandomAccessReader</name></type> <name>reader</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ICompressor</name></type> <name>compressor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Cipher</name></type> <name>cipher</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * the result of the decryption is written into this buffer.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>decryptedBuffer</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * the result of the decryption is written into this buffer.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>uncompressedBuffer</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ChunkProvider</name></type> <name>chunkProvider</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>currentSegmentEndPosition</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>nextLogicalStart</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>EncryptedSegmenter</name><parameter_list>(<parameter><decl><type><name>CommitLogDescriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name>RandomAccessReader</name></type> <name>reader</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><call><name><name>descriptor</name><operator>.</operator><name>getEncryptionContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><annotation>@<name>VisibleForTesting</name></annotation>
        <name>EncryptedSegmenter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>RandomAccessReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>EncryptionContext</name></type> <name>encryptionContext</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>decryptedBuffer</name> <operator>=</operator> <call><name><name>ByteBuffer</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>compressor</name> <operator>=</operator> <call><name><name>encryptionContext</name><operator>.</operator><name>getCompressor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nextLogicalStart</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getFilePointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name><name>encryptionContext</name><operator>.</operator><name>getDecryptor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>FSReadError</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>

            <expr_stmt><expr><name>chunkProvider</name> <operator>=</operator> <lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>reader</name><operator>.</operator><name>getFilePointer</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>currentSegmentEndPosition</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name><name>ByteBufferUtil</name><operator>.</operator><name>EMPTY_BYTE_BUFFER</name></name></expr>;</return></block_content></block></if></if_stmt>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><name>decryptedBuffer</name> <operator>=</operator> <call><name><name>EncryptionUtils</name><operator>.</operator><name>decrypt</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>decryptedBuffer</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uncompressedBuffer</name> <operator>=</operator> <call><name><name>EncryptionUtils</name><operator>.</operator><name>uncompress</name></name><argument_list>(<argument><expr><name>decryptedBuffer</name></expr></argument>, <argument><expr><name>uncompressedBuffer</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>uncompressedBuffer</name></expr>;</return>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>FSReadError</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
            </block_content>}</block></lambda></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
        <type><specifier>public</specifier> <name>SyncSegment</name></type> <name>nextSegment</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startPosition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nextSectionStartPosition</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>totalPlainTextLength</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>currentSegmentEndPosition</name> <operator>=</operator> <name>nextSectionStartPosition</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>nextLogicalStart</name> <operator>+=</operator> <name>SYNC_MARKER_SIZE</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>FileDataInput</name></type> <name>input</name> <init>= <expr><operator>new</operator> <call><name>EncryptedFileSegmentInputStream</name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nextLogicalStart</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalPlainTextLength</name></expr></argument>, <argument><expr><name>chunkProvider</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>nextLogicalStart</name> <operator>+=</operator> <name>totalPlainTextLength</name></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>SyncSegment</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>startPosition</name></expr></argument>, <argument><expr><name>nextSectionStartPosition</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nextLogicalStart</name></expr></argument>, <argument><expr><call><name>tolerateSegmentErrors</name><argument_list>(<argument><expr><name>nextSectionStartPosition</name></expr></argument>, <argument><expr><call><name><name>reader</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
