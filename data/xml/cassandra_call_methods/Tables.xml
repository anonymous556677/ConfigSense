<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/schema/Tables.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>StreamSupport</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UserType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>internal</name><operator>.</operator><name>CassandraIndex</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>any</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>transform</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An immutable container for a keyspace's Tables.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Tables</name> <super_list><implements>implements <super><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Tables</name></type> <name>NONE</name> <init>= <expr><call><name>builder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>tables</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>, <argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>tablesById</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>indexTables</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Tables</name><parameter_list>(<parameter><decl><type><name>Builder</name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>tables</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>tables</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tablesById</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>tablesById</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>indexTables</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>indexTables</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Tables</name></type> <name>none</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>NONE</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Tables</name></type> <name>of</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name><modifier>...</modifier></type> <name>tables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>builder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Tables</name></type> <name>of</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>tables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>builder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>tables</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>stream</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>StreamSupport</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><call><name>spliterator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>referencingUserType</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><call><name><name>tables</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>t</name><operator>.</operator><name>referencesUserType</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>indexTables</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>indexTables</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>tables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the table with the specified name
     *
     * @param name a non-qualified table name
     * @return an empty {@link Optional} if the table name is not found; a non-empty optional of {@link TableMetadataRef} otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>ofNullable</name></name><argument_list>(<argument><expr><call><name><name>tables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the table with the specified name
     *
     * @param name a non-qualified table name
     * @return null if the table name is not found; the found {@link TableMetadataRef} otherwise
     */</comment>
    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>TableMetadata</name></type> <name>getNullable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>tables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><name>TableMetadata</name></type> <name>getNullable</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>tablesById</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>boolean</name></type> <name>containsTable</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>tablesById</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Tables</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>predicate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><call><name>builder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tables</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>predicate</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>builder</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a Tables instance with the provided table added
     */</comment>
    <function><type><specifier>public</specifier> <name>Tables</name></type> <name>with</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>get</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Table %s already exists"</literal></expr></argument>, <argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <return>return <expr><call><name>builder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Tables</name></type> <name>withSwapped</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>without</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>with</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a Tables instance with the table with the provided name removed
     */</comment>
    <function><type><specifier>public</specifier> <name>Tables</name></type> <name>without</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>table</name> <init>=
            <expr><call><name>get</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>orElseThrow</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Table %s doesn't exists"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>without</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Tables</name></type> <name>without</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name>t</name> <operator>!=</operator> <name>table</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Tables</name></type> <name>withUpdatedUserType</name><parameter_list>(<parameter><decl><type><name>UserType</name></type> <name>udt</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name>any</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>t</name><operator>.</operator><name>referencesUserType</name></name><argument_list>(<argument><expr><name><name>udt</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>
             ?</condition><then> <expr><call><name>builder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>t</name><operator>.</operator><name>withUpdatedUserType</name></name><argument_list>(<argument><expr><name>udt</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>
             </then><else>: <expr><name>this</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>MapDifference</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>indexesDiff</name><parameter_list>(<parameter><decl><type><name>Tables</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>thisIndexTables</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>indexTables</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>thisIndexTables</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>indexName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>otherIndexTables</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>other</name><operator>.</operator><name>indexTables</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>otherIndexTables</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>indexName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>Maps</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name>thisIndexTables</name></expr></argument>, <argument><expr><name>otherIndexTables</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>this</name> <operator>==</operator> <name>o</name> <operator>||</operator> <operator>(</operator><name>o</name> <operator>instanceof</operator> <name>Tables</name> <operator>&amp;&amp;</operator> <call><name><name>tables</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Tables</name><operator>)</operator> <name>o</name><operator>)</operator><operator>.</operator><name>tables</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>tables</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>tables</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ImmutableMap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TableMetadata</name></argument>&gt;</argument_list></name></name></type> <name>tables</name> <init>= <expr><operator>new</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ImmutableMap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>, <argument><name>TableMetadata</name></argument>&gt;</argument_list></name></name></type> <name>tablesById</name> <init>= <expr><operator>new</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ImmutableMap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TableMetadata</name></argument>&gt;</argument_list></name></name></type> <name>indexTables</name> <init>= <expr><operator>new</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list>
        <block>{<block_content>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>Tables</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Tables</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>tables</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>tablesById</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>indexes</name>
                 <operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                 <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>i</name><operator>.</operator><name>isCustom</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>CassandraIndex</name><operator>.</operator><name>indexCfsMetadata</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>indexTables</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>indexName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name><modifier>...</modifier></type> <name>tables</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>TableMetadata</name></type> <name>table</name> <range>: <expr><name>tables</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>tables</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>tables</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>static</specifier> <name>TablesDiff</name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name>Tables</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>Tables</name></type> <name>after</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>TablesDiff</name><operator>.</operator><name>diff</name></name><argument_list>(<argument><expr><name>before</name></expr></argument>, <argument><expr><name>after</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>TablesDiff</name> <super_list><extends>extends <super><name><name>Diff</name><argument_list type="generic">&lt;<argument><name>Tables</name></argument>, <argument><name>TableMetadata</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>TablesDiff</name></type> <name>NONE</name> <init>= <expr><operator>new</operator> <call><name>TablesDiff</name><argument_list>(<argument><expr><call><name><name>Tables</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Tables</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>TablesDiff</name><parameter_list>(<parameter><decl><type><name>Tables</name></type> <name>created</name></decl></parameter>, <parameter><decl><type><name>Tables</name></type> <name>dropped</name></decl></parameter>, <parameter><decl><type><name><name>ImmutableCollection</name><argument_list type="generic">&lt;<argument><name><name>Altered</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>altered</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>created</name></expr></argument>, <argument><expr><name>dropped</name></expr></argument>, <argument><expr><name>altered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>TablesDiff</name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name>Tables</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>Tables</name></type> <name>after</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>before</name> <operator>==</operator> <name>after</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>NONE</name></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>Tables</name></type> <name>created</name> <init>= <expr><call><name><name>after</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>before</name><operator>.</operator><name>containsTable</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Tables</name></type> <name>dropped</name> <init>= <expr><call><name><name>before</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>after</name><operator>.</operator><name>containsTable</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>ImmutableList</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name><name>Altered</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>altered</name> <init>= <expr><call><name><name>ImmutableList</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>before</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>tableBefore</name></decl></parameter></parameter_list> -&gt;
            <block>{<block_content>
                <decl_stmt><decl><type><name>TableMetadata</name></type> <name>tableAfter</name> <init>= <expr><call><name><name>after</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name><name>tableBefore</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>tableAfter</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>tableBefore</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>tableAfter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ifPresent</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>kind</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>altered</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Altered</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>tableBefore</name></expr></argument>, <argument><expr><name>tableAfter</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><operator>new</operator> <call><name>TablesDiff</name><argument_list>(<argument><expr><name>created</name></expr></argument>, <argument><expr><name>dropped</name></expr></argument>, <argument><expr><call><name><name>altered</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
