<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/transport/ProtocolVersion.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>ArrayUtils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The native (CQL binary) protocol version.
 *
 * Some versions may be in beta, which means that the client must
 * specify the beta flag in the envelope's header for the version to be considered valid.
 * Beta versions must have the word "beta" in their description, this is mandated
 * by the specs.
 *
 */</comment>
<enum><specifier>public</specifier> enum <name>ProtocolVersion</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>ProtocolVersion</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <comment type="line">// The order is important as it defines the chronological history of versions, which is used</comment>
    <comment type="line">// to determine if a feature is supported or some serdes formats</comment>
    <decl><name>V1</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"v1"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>, <comment type="line">// no longer supported</comment>
    <decl><name>V2</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"v2"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>, <comment type="line">// no longer supported</comment>
    <decl><name>V3</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"v3"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>,
    <decl><name>V4</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"v4"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>,
    <decl><name>V5</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"v5"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>,
    <decl><name>V6</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"v6-beta"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;

    <comment type="block" format="javadoc">/** The version number */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>num</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** A description of the version, beta versions should have the word "-beta" */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>descr</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Set this to true for beta versions */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>beta</name></decl>;</decl_stmt>

    <constructor><name>ProtocolVersion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>descr</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>beta</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>descr</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>beta</name></name> <operator>=</operator> <name>beta</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/** The supported versions stored as an array, these should be private and are required for fast decoding*/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>ProtocolVersion</name><index>[]</index></name></type> <name>SUPPORTED_VERSIONS</name> <init>= <expr><operator>new</operator> <name><name>ProtocolVersion</name><index>[]</index></name> <block>{ <expr><name>V3</name></expr>, <expr><name>V4</name></expr>, <expr><name>V5</name></expr>, <expr><name>V6</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>ProtocolVersion</name></type> <name>MIN_SUPPORTED_VERSION</name> <init>= <expr><name><name>SUPPORTED_VERSIONS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>ProtocolVersion</name></type> <name>MAX_SUPPORTED_VERSION</name> <init>= <expr><name><name>SUPPORTED_VERSIONS</name><index>[<expr><name><name>SUPPORTED_VERSIONS</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** These versions are sent by some clients, but are not valid Apache Cassandra versions (66, and 65 are DSE versions) */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>int</name><index>[]</index></name></type> <name>KNOWN_INVALID_VERSIONS</name> <init>= <expr><block>{<expr><literal type="number">66</literal></expr>, <expr><literal type="number">65</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** All supported versions, published as an enumset */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>ProtocolVersion</name></argument>&gt;</argument_list></name></type> <name>SUPPORTED</name> <init>= <expr><call><name><name>EnumSet</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>ArrayUtils</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>SUPPORTED_VERSIONS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Old unsupported versions, this is OK as long as we never add newer unsupported versions */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>ProtocolVersion</name></argument>&gt;</argument_list></name></type> <name>UNSUPPORTED</name> <init>= <expr><call><name><name>EnumSet</name><operator>.</operator><name>complementOf</name></name><argument_list>(<argument><expr><name>SUPPORTED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The preferred versions */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>ProtocolVersion</name></type> <name>CURRENT</name> <init>= <expr><name>V5</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>ProtocolVersion</name></argument>&gt;</argument_list></name></type> <name>BETA</name> <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>V6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>supportedVersions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ret</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>SUPPORTED</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ProtocolVersion</name></type> <name>version</name> <range>: <expr><name>SUPPORTED</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>version</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ProtocolVersion</name></argument>&gt;</argument_list></name></type> <name>supportedVersionsStartingWith</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>smallestVersion</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ProtocolVersion</name></argument>&gt;</argument_list></name></type> <name>versions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SUPPORTED_VERSIONS</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ProtocolVersion</name></type> <name>version</name> <range>: <expr><name>SUPPORTED_VERSIONS</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>isGreaterOrEqualTo</name></name><argument_list>(<argument><expr><name>smallestVersion</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>versions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
        <return>return <expr><name>versions</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ProtocolVersion</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>versionNum</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowOlderProtocols</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ProtocolVersion</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name>versionNum</name> <operator>&gt;=</operator> <name><name>MIN_SUPPORTED_VERSION</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name>versionNum</name> <operator>&lt;=</operator> <name><name>MAX_SUPPORTED_VERSION</name><operator>.</operator><name>num</name></name></expr>
                              ?</condition><then> <expr><name><name>SUPPORTED_VERSIONS</name><index>[<expr><name>versionNum</name> <operator>-</operator> <name><name>MIN_SUPPORTED_VERSION</name><operator>.</operator><name>num</name></name></expr>]</index></name></expr>
                              </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// if this is not a supported version check the old versions</comment>
            <for>for <control>(<init><decl><type><name>ProtocolVersion</name></type> <name>version</name> <range>: <expr><name>UNSUPPORTED</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <comment type="line">// if it is an old version that is no longer supported this ensures that we respond</comment>
                <comment type="line">// with that same version</comment>
                <if_stmt><if>if <condition>(<expr><name><name>version</name><operator>.</operator><name>num</name></name> <operator>==</operator> <name>versionNum</name></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>ProtocolVersion</name><operator>.</operator><name>invalidVersionMessage</name></name><argument_list>(<argument><expr><name>versionNum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>dseVersion</name> <range>: <expr><name>KNOWN_INVALID_VERSIONS</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>versionNum</name> <operator>==</operator> <name>dseVersion</name></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><call><name><name>ProtocolException</name><operator>.</operator><name>toSilentException</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>ProtocolVersion</name><operator>.</operator><name>invalidVersionMessage</name></name><argument_list>(<argument><expr><name>versionNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// If the version is invalid reply with the channel's version</comment>
            <throw>throw <expr><operator>new</operator> <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name>invalidVersionMessage</name><argument_list>(<argument><expr><name>versionNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>allowOlderProtocols</name> <operator>&amp;&amp;</operator> <call><name><name>ret</name><operator>.</operator><name>isSmallerThan</name></name><argument_list>(<argument><expr><name>CURRENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ProtocolException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Rejecting Protocol Version %s &lt; %s."</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>CURRENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBeta</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>beta</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>invalidVersionMessage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Invalid or unsupported protocol version (%d); supported versions are (%s)"</literal></expr></argument>,
                             <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><call><name><name>ProtocolVersion</name><operator>.</operator><name>supportedVersions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>asInt</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>num</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// This format is mandated by the protocl specs for the SUPPORTED message, see OptionsMessage execute().</comment>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%d/%s"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isGreaterThan</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>num</name> <operator>&gt;</operator> <name><name>other</name><operator>.</operator><name>num</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isGreaterOrEqualTo</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>num</name> <operator>&gt;=</operator> <name><name>other</name><operator>.</operator><name>num</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isSmallerThan</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>num</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>num</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isSmallerOrEqualTo</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>num</name> <operator>&lt;=</operator> <name><name>other</name><operator>.</operator><name>num</name></name></expr>;</return>
    </block_content>}</block></function>
}</block></enum>
</unit>
