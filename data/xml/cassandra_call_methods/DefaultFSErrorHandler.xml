<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/DefaultFSErrorHandler.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>DisallowedDirectories</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Keyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>CorruptSSTableException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JVMStabilityInspector</name></name>;</import>

<class><specifier>public</specifier> class <name>DefaultFSErrorHandler</name> <super_list><implements>implements <super><name>FSErrorHandler</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DefaultFSErrorHandler</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>handleCorruptSSTable</name><parameter_list>(<parameter><decl><type><name>CorruptSSTableException</name></type> <name>e</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isDaemonSetupCompleted</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>handleStartupFSError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskFailurePolicy</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>stop_paranoid</name></expr>:</case>
                <comment type="line">// exception not logged here on purpose as it is already logged</comment>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Stopping transports as disk_failure_policy is "</literal> <operator>+</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskFailurePolicy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>stopTransports</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>handleFSError</name><parameter_list>(<parameter><decl><type><name>FSError</name></type> <name>e</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isDaemonSetupCompleted</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>handleStartupFSError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskFailurePolicy</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>stop_paranoid</name></expr>:</case>
            <case>case <expr><name>stop</name></expr>:</case>
                <comment type="line">// exception not logged here on purpose as it is already logged</comment>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Stopping transports as disk_failure_policy is "</literal> <operator>+</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskFailurePolicy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>stopTransports</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>best_effort</name></expr>:</case>

                <comment type="line">// There are a few scenarios where we know that the node will not be able to operate properly.</comment>
                <comment type="line">// For those scenarios we want to stop the transports and let the administrators handle the problem.</comment>
                <comment type="line">// Those scenarios are:</comment>
                <comment type="line">// * All the disks are full</comment>
                <comment type="line">// * All the disks for a given keyspace have been marked as unwriteable</comment>
                <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>FSDiskFullWriteError</name> <operator>||</operator> <name>e</name> <operator>instanceof</operator> <name>FSNoDiskAvailableForWriteError</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Stopping transports: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>stopTransports</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// for both read and write errors mark the path as unwritable.</comment>
                <expr_stmt><expr><call><name><name>DisallowedDirectories</name><operator>.</operator><name>maybeMarkUnwritable</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>FSReadError</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>File</name></type> <name>directory</name> <init>= <expr><call><name><name>DisallowedDirectories</name><operator>.</operator><name>maybeMarkUnreadable</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>directory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>removeUnreadableSSTables</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>ignore</name></expr>:</case>
                <comment type="line">// already logged, so left nothing to do</comment>
                <break>break;</break>
            <default>default:</default>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>handleStartupFSError</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <switch>switch <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskFailurePolicy</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>stop_paranoid</name></expr>:</case>
            <case>case <expr><name>stop</name></expr>:</case>
            <case>case <expr><name>die</name></expr>:</case>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Exiting forcefully due to file system exception on startup, disk failure policy \"{}\""</literal></expr></argument>,
                             <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskFailurePolicy</name></name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>killCurrentJVM</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></function>
}</block></class>
</unit>
