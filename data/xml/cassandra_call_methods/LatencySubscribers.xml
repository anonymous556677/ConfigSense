<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/net/LatencySubscribers.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicReferenceFieldUpdater</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Callback that {@link org.apache.cassandra.locator.DynamicEndpointSnitch} listens to in order
 * to update host scores.
 *
 * FIXME: rename/specialise, since only used by DES?
 */</comment>
<class><specifier>public</specifier> class <name>LatencySubscribers</name>
<block>{
    <interface><specifier>public</specifier> interface <name>Subscriber</name>
    <block>{
        <function_decl><type><name>void</name></type> <name>receiveTiming</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>latency</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>Subscriber</name></type> <name>subscribers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>AtomicReferenceFieldUpdater</name><argument_list type="generic">&lt;<argument><name>LatencySubscribers</name></argument>, <argument><name>Subscriber</name></argument>&gt;</argument_list></name></type> <name>subscribersUpdater</name>
        <init>= <expr><call><name><name>AtomicReferenceFieldUpdater</name><operator>.</operator><name>newUpdater</name></name><argument_list>(<argument><expr><name><name>LatencySubscribers</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Subscriber</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"subscribers"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Subscriber</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>Subscriber</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Subscriber</name></type> <name>b</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><lambda><parameter_list>(<parameter><decl><name>address</name></decl></parameter>, <parameter><decl><name>latency</name></decl></parameter>, <parameter><decl><name>unit</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
            <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>receiveTiming</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>latency</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>receiveTiming</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>latency</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>subscribe</name><parameter_list>(<parameter><decl><type><name>Subscriber</name></type> <name>subscriber</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>subscribersUpdater</name><operator>.</operator><name>accumulateAndGet</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>subscriber</name></expr></argument>, <argument><expr><name>LatencySubscribers</name><operator>::</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>latency</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Subscriber</name></type> <name>subscribers</name> <init>= <expr><name><name>this</name><operator>.</operator><name>subscribers</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>subscribers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscribers</name><operator>.</operator><name>receiveTiming</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>latency</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Track latency information for the dynamic snitch
     *
     * @param cb      the callback associated with this message -- this lets us know if it's a message type we're interested in
     * @param address the host that replied to the message
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>maybeAdd</name><parameter_list>(<parameter><decl><type><name>RequestCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>latency</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>cb</name><operator>.</operator><name>trackLatencyForSnitch</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>latency</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
