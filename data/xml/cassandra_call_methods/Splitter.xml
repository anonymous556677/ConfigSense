<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/dht/Splitter.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name><operator>.</operator><name>toSet</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Partition splitter.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Splitter</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IPartitioner</name></type> <name>partitioner</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>Splitter</name><parameter_list>(<parameter><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>partitioner</name></name> <operator>=</operator> <name>partitioner</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function_decl><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>protected</specifier> <specifier>abstract</specifier> <name>Token</name></type> <name>tokenForValue</name><parameter_list>(<parameter><decl><type><name>BigInteger</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>protected</specifier> <specifier>abstract</specifier> <name>BigInteger</name></type> <name>valueForToken</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>token</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>protected</specifier> <name>BigInteger</name></type> <name>tokensInRange</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">//full range case</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>range</name><operator>.</operator><name>left</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>tokensInRange</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><call><name><name>partitioner</name><operator>.</operator><name>getMinimumToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>partitioner</name><operator>.</operator><name>getMaximumToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>BigInteger</name></type> <name>totalTokens</name> <init>= <expr><name><name>BigInteger</name><operator>.</operator><name>ZERO</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>unwrapped</name> <range>: <expr><call><name><name>range</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>totalTokens</name> <operator>=</operator> <call><name><name>totalTokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>valueForToken</name><argument_list>(<argument><expr><call><name>token</name><argument_list>(<argument><expr><name><name>unwrapped</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>subtract</name><argument_list>(<argument><expr><call><name>valueForToken</name><argument_list>(<argument><expr><name><name>unwrapped</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>abs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>totalTokens</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the number of elapsed tokens from the range start until this token
     * @return the number of tokens from the range start to the token
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>protected</specifier> <name>BigInteger</name></type> <name>elapsedTokens</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// No token elapsed since range does not contain token</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>range</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>BigInteger</name><operator>.</operator><name>ZERO</name></name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>BigInteger</name></type> <name>elapsedTokens</name> <init>= <expr><name><name>BigInteger</name><operator>.</operator><name>ZERO</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>unwrapped</name> <range>: <expr><call><name><name>range</name><operator>.</operator><name>unwrap</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>unwrapped</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>elapsedTokens</name> <operator>=</operator> <call><name><name>elapsedTokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>tokensInRange</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>unwrapped</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>unwrapped</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>elapsedTokens</name> <operator>=</operator> <call><name><name>elapsedTokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>tokensInRange</name><argument_list>(<argument><expr><name>unwrapped</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>elapsedTokens</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the normalized position of this token relative to this range
     * @return A number between 0.0 and 1.0 representing this token's position
     * in this range or -1.0 if this range doesn't contain this token.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>positionInRange</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">//full range case</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>range</name><operator>.</operator><name>left</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>positionInRange</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><call><name><name>partitioner</name><operator>.</operator><name>getMinimumToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>partitioner</name><operator>.</operator><name>getMaximumToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// leftmost token means we are on position 0.0</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// rightmost token means we are on position 1.0</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1.0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// Impossible to find position when token is not contained in range</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>range</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1.0</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><call><name>elapsedTokens</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>divide</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><call><name>tokensInRange</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>BigDecimal</name><operator>.</operator><name>ROUND_HALF_EVEN</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>splitOwnedRanges</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>parts</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WeightedRange</name></argument>&gt;</argument_list></name></type> <name>weightedRanges</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dontSplitRanges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>weightedRanges</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>parts</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><call><name><name>partitioner</name><operator>.</operator><name>getMaximumToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>BigInteger</name></type> <name>totalTokens</name> <init>= <expr><name><name>BigInteger</name><operator>.</operator><name>ZERO</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>WeightedRange</name></type> <name>weightedRange</name> <range>: <expr><name>weightedRanges</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>totalTokens</name> <operator>=</operator> <call><name><name>totalTokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>weightedRange</name><operator>.</operator><name>totalTokens</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>BigInteger</name></type> <name>perPart</name> <init>= <expr><call><name><name>totalTokens</name><operator>.</operator><name>divide</name></name><argument_list>(<argument><expr><call><name><name>BigInteger</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// the range owned is so tiny we can't split it:</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>perPart</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>BigInteger</name><operator>.</operator><name>ZERO</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><call><name><name>partitioner</name><operator>.</operator><name>getMaximumToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>dontSplitRanges</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>splitOwnedRangesNoPartialRanges</name><argument_list>(<argument><expr><name>weightedRanges</name></expr></argument>, <argument><expr><name>perPart</name></expr></argument>, <argument><expr><name>parts</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>boundaries</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>sum</name> <init>= <expr><name><name>BigInteger</name><operator>.</operator><name>ZERO</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>WeightedRange</name></type> <name>weightedRange</name> <range>: <expr><name>weightedRanges</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>currentRangeWidth</name> <init>= <expr><call><name><name>weightedRange</name><operator>.</operator><name>totalTokens</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>left</name> <init>= <expr><call><name>valueForToken</name><argument_list>(<argument><expr><call><name><name>weightedRange</name><operator>.</operator><name>left</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>sum</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentRangeWidth</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name>perPart</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>BigInteger</name></type> <name>withinRangeBoundary</name> <init>= <expr><call><name><name>perPart</name><operator>.</operator><name>subtract</name></name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name><name>left</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>withinRangeBoundary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>boundaries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>tokenForValue</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>currentRangeWidth</name> <operator>=</operator> <call><name><name>currentRangeWidth</name><operator>.</operator><name>subtract</name></name><argument_list>(<argument><expr><name>withinRangeBoundary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>BigInteger</name><operator>.</operator><name>ZERO</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name><name>sum</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentRangeWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>boundaries</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>boundaries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>partitioner</name><operator>.</operator><name>getMaximumToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <assert>assert <expr><call><name><name>boundaries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>parts</name> <operator>:</operator> <call><name><name>boundaries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"!="</literal> <operator>+</operator> <name>parts</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>boundaries</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name>weightedRanges</name></expr>;</assert>
        <return>return <expr><name>boundaries</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>splitOwnedRangesNoPartialRanges</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WeightedRange</name></argument>&gt;</argument_list></name></type> <name>weightedRanges</name></decl></parameter>, <parameter><decl><type><name>BigInteger</name></type> <name>perPart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parts</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>boundaries</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>sum</name> <init>= <expr><name><name>BigInteger</name><operator>.</operator><name>ZERO</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>rangesCount</name> <init>= <expr><call><name><name>weightedRanges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>boundaries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>parts</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>rangesCount</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>WeightedRange</name></type> <name>r</name> <init>= <expr><call><name><name>weightedRanges</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>WeightedRange</name></type> <name>nextRange</name> <init>= <expr><call><name><name>weightedRanges</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>BigInteger</name></type> <name>currentRangeWidth</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>totalTokens</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>nextRangeWidth</name> <init>= <expr><call><name><name>nextRange</name><operator>.</operator><name>totalTokens</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name><name>sum</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentRangeWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// does this or next range take us beyond the per part limit?</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>sum</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>perPart</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>sum</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>nextRangeWidth</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name>perPart</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Either this or the next range will take us beyond the perPart limit. Will stopping now or</comment>
                <comment type="line">// adding the next range create the smallest difference to perPart?</comment>
                <decl_stmt><decl><type><name>BigInteger</name></type> <name>diffCurrent</name> <init>= <expr><call><name><name>sum</name><operator>.</operator><name>subtract</name></name><argument_list>(<argument><expr><name>perPart</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>abs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>BigInteger</name></type> <name>diffNext</name> <init>= <expr><call><name><name>sum</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>nextRangeWidth</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>subtract</name><argument_list>(<argument><expr><name>perPart</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>abs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>diffNext</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>diffCurrent</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>BigInteger</name><operator>.</operator><name>ZERO</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>boundaries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>token</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>right</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>boundaries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>partitioner</name><operator>.</operator><name>getMaximumToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>boundaries</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * We avoid calculating for wrap around ranges, instead we use the actual max token, and then, when translating
     * to PartitionPositions, we include tokens from .minKeyBound to .maxKeyBound to make sure we include all tokens.
     */</comment>
    <function><type><specifier>private</specifier> <name>Token</name></type> <name>token</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>t</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name><name>t</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>partitioner</name><operator>.</operator><name>getMinimumToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>partitioner</name><operator>.</operator><name>getMaximumToken</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>t</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Splits the specified token ranges in at least {@code parts} subranges.
     * &lt;p&gt;
     * Each returned subrange will be contained in exactly one of the specified ranges.
     *
     * @param ranges a collection of token ranges to be split
     * @param parts the minimum number of returned ranges
     * @return at least {@code minParts} token ranges covering {@code ranges}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>split</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parts</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>numRanges</name> <init>= <expr><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>numRanges</name> <operator>&gt;=</operator> <name>parts</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(<argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>partsPerRange</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>parts</name> <operator>/</operator> <name>numRanges</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>ranges</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                         <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>range</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>split</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>partsPerRange</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                         <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><name>Collection</name><operator>::</operator><name>stream</name></expr></argument>)</argument_list></call>
                         <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name>toSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Splits the specified token range in at least {@code minParts} subranges, unless the range has not enough tokens
     * in which case the range will be returned without splitting.
     *
     * @param range a token range
     * @param parts the number of subranges
     * @return {@code parts} even subranges of {@code range}
     */</comment>
    <function><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>split</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parts</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// the range might not have enough tokens to split</comment>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>numTokens</name> <init>= <expr><call><name>tokensInRange</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>BigInteger</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name>numTokens</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>Token</name></type> <name>left</name> <init>= <expr><name><name>range</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>subranges</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>double</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>parts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Token</name></type> <name>right</name> <init>= <expr><call><name><name>partitioner</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>i</name> <operator>/</operator> <name>parts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>subranges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>subranges</name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WeightedRange</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>double</name></type> <name>weight</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>WeightedRange</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name>weight</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>range</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>BigInteger</name></type> <name>totalTokens</name><parameter_list>(<parameter><decl><type><name>Splitter</name></type> <name>splitter</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>right</name> <init>= <expr><call><name><name>splitter</name><operator>.</operator><name>valueForToken</name></name><argument_list>(<argument><expr><call><name><name>splitter</name><operator>.</operator><name>token</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>left</name> <init>= <expr><call><name><name>splitter</name><operator>.</operator><name>valueForToken</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>factor</name> <init>= <expr><call><name><name>BigInteger</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>/</operator> <name>weight</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>size</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>subtract</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>size</name><operator>.</operator><name>abs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>divide</name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Token</name></type> <name>left</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name><name>range</name><operator>.</operator><name>left</name></name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Token</name></type> <name>right</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name><name>range</name><operator>.</operator><name>right</name></name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>range</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"WeightedRange{"</literal> <operator>+</operator>
                   <literal type="string">"weight="</literal> <operator>+</operator> <name>weight</name> <operator>+</operator>
                   <literal type="string">", range="</literal> <operator>+</operator> <name>range</name> <operator>+</operator>
                   <literal type="char">'}'</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>WeightedRange</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>WeightedRange</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>WeightedRange</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
