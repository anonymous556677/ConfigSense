<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/statements/schema/TableAttributes.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>PropertyDefinitions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>SyntaxException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>CachingParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>CompactionParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>CompressionParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableParams</name><operator>.</operator><name>Option</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>SpeculativeRetryPolicy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>repair</name><operator>.</operator><name>ReadRepairStrategy</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>TableAttributes</name> <super_list><extends>extends <super><name>PropertyDefinitions</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ID</name> <init>= <expr><literal type="string">"id"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>validKeywords</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>obsoleteKeywords</name></decl>;</decl_stmt>

    <static>static
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>ImmutableSet</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>validBuilder</name> <init>= <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Option</name></type> <name>option</name> <range>: <expr><call><name><name>Option</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>validBuilder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>option</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name><name>validBuilder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>validKeywords</name> <operator>=</operator> <call><name><name>validBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>obsoleteKeywords</name> <operator>=</operator> <call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>validate</name><argument_list>(<argument><expr><name>validKeywords</name></expr></argument>, <argument><expr><name>obsoleteKeywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><call><name><name>TableParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>TableParams</name></type> <name>asNewTableParams</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>build</name><argument_list>(<argument><expr><call><name><name>TableParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TableParams</name></type> <name>asAlteredTableParams</name><parameter_list>(<parameter><decl><type><name>TableParams</name></type> <name>previous</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getId</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Cannot alter table id."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><call><name>build</name><argument_list>(<argument><expr><call><name><name>previous</name><operator>.</operator><name>unbuild</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableId</name></type> <name>getId</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><call><name>getSimple</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>id</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>TableId</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Invalid table id"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TableParams</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name><name>TableParams</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>BLOOM_FILTER_FP_CHANCE</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>bloomFilterFpChance</name></name><argument_list>(<argument><expr><call><name>getDouble</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>BLOOM_FILTER_FP_CHANCE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>CACHING</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>caching</name></name><argument_list>(<argument><expr><call><name><name>CachingParams</name><operator>.</operator><name>fromMap</name></name><argument_list>(<argument><expr><call><name>getMap</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>CACHING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>COMMENT</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>comment</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>COMMENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>COMPACTION</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>compaction</name></name><argument_list>(<argument><expr><call><name><name>CompactionParams</name><operator>.</operator><name>fromMap</name></name><argument_list>(<argument><expr><call><name>getMap</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>COMPACTION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>COMPRESSION</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">//crc_check_chance was "promoted" from a compression property to a top-level-property after #9839</comment>
            <comment type="line">//so we temporarily accept it to be defined as a compression option, to maintain backwards compatibility</comment>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compressionOpts</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>COMPRESSION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>compressionOpts</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>CRC_CHECK_CHANCE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Double</name></type> <name>crcCheckChance</name> <init>= <expr><call><name>getDeprecatedCrcCheckChance</name><argument_list>(<argument><expr><name>compressionOpts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>crcCheckChance</name></name><argument_list>(<argument><expr><name>crcCheckChance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>compression</name></name><argument_list>(<argument><expr><call><name><name>CompressionParams</name><operator>.</operator><name>fromMap</name></name><argument_list>(<argument><expr><call><name>getMap</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>COMPRESSION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>DEFAULT_TIME_TO_LIVE</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>defaultTimeToLive</name></name><argument_list>(<argument><expr><call><name>getInt</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>DEFAULT_TIME_TO_LIVE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>GC_GRACE_SECONDS</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>gcGraceSeconds</name></name><argument_list>(<argument><expr><call><name>getInt</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>GC_GRACE_SECONDS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>MAX_INDEX_INTERVAL</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>maxIndexInterval</name></name><argument_list>(<argument><expr><call><name>getInt</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>MAX_INDEX_INTERVAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>MEMTABLE_FLUSH_PERIOD_IN_MS</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>memtableFlushPeriodInMs</name></name><argument_list>(<argument><expr><call><name>getInt</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>MEMTABLE_FLUSH_PERIOD_IN_MS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>MIN_INDEX_INTERVAL</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>minIndexInterval</name></name><argument_list>(<argument><expr><call><name>getInt</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>MIN_INDEX_INTERVAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>SPECULATIVE_RETRY</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>speculativeRetry</name></name><argument_list>(<argument><expr><call><name><name>SpeculativeRetryPolicy</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>SPECULATIVE_RETRY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>ADDITIONAL_WRITE_POLICY</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>additionalWritePolicy</name></name><argument_list>(<argument><expr><call><name><name>SpeculativeRetryPolicy</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>ADDITIONAL_WRITE_POLICY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>CRC_CHECK_CHANCE</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>crcCheckChance</name></name><argument_list>(<argument><expr><call><name>getDouble</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>CRC_CHECK_CHANCE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>CDC</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>cdc</name></name><argument_list>(<argument><expr><call><name>getBoolean</name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>CDC</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>hasOption</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>READ_REPAIR</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>readRepair</name></name><argument_list>(<argument><expr><call><name><name>ReadRepairStrategy</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>Option</name><operator>.</operator><name>READ_REPAIR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Double</name></type> <name>getDeprecatedCrcCheckChance</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compressionOpts</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>compressionOpts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Option</name><operator>.</operator><name>CRC_CHECK_CHANCE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>Double</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Invalid double value %s for crc_check_chance.'"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>double</name></type> <name>getDouble</name><parameter_list>(<parameter><decl><type><name>Option</name></type> <name>option</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Invalid double value %s for '%s'"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>Option</name></type> <name>option</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Invalid integer value %s for '%s'"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>Option</name></type> <name>option</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name>getSimple</name><argument_list>(<argument><expr><call><name><name>option</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Option '%s' is absent"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getMap</name><parameter_list>(<parameter><decl><type><name>Option</name></type> <name>option</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>value</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><call><name><name>option</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Option '%s' is absent"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasOption</name><parameter_list>(<parameter><decl><type><name>Option</name></type> <name>option</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>hasProperty</name><argument_list>(<argument><expr><call><name><name>option</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
