<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/dht/AbstractBounds.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInput</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>PartitionPosition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>AbstractBounds</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name><name>RingPosition</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name>Serializable</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>IPartitionerDependentSerializer</name><argument_list type="generic">&lt;<argument><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>tokenSerializer</name> <init>=
            <expr><operator>new</operator> <call><name><name>AbstractBoundsSerializer</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Token</name><operator>.</operator><name>serializer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>IPartitionerDependentSerializer</name><argument_list type="generic">&lt;<argument><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>PartitionPosition</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rowPositionSerializer</name> <init>=
            <expr><operator>new</operator> <call><name><name>AbstractBoundsSerializer</name><argument_list type="generic">&lt;<argument><name>PartitionPosition</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>PartitionPosition</name><operator>.</operator><name>serializer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <enum><specifier>private</specifier> enum <name>Type</name>
    <block>{
        <decl><name>RANGE</name></decl>,
        <decl><name>BOUNDS</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T</name></type> <name>right</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AbstractBounds</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>right</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name><name>left</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>right</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Given token T and AbstractBounds ?L,R?, returns Pair(?L,T], (T,R?),
     * where ? means that the same type of AbstractBounds is returned as the original.
     *
     * Put another way, returns a Pair of everything this AbstractBounds contains
     * up to and including the split position, and everything it contains after
     * (not including the split position).
     *
     * The original AbstractBounds must either contain the position T, or T
     * should be equals to the left bound L.
     *
     * If the split would only yield the same AbstractBound, null is returned
     * instead.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>split</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>inclusiveLeft</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>inclusiveRight</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Whether {@code left} and {@code right} forms a wrapping interval, that is if unwrapping wouldn't be a no-op.
     * &lt;p&gt;
     * Note that the semantic is slightly different from {@link Range#isWrapAround()} in the sense that if both
     * {@code right} are minimal (for the partitioner), this methods return false (doesn't wrap) while
     * {@link Range#isWrapAround()} returns true (does wrap). This is confusing and we should fix it by
     * refactoring/rewriting the whole AbstractBounds hierarchy with cleaner semantics, but we don't want to risk
     * breaking something by changing {@link Range#isWrapAround()} in the meantime.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>boolean</name></type> <name>strictlyWrapsAround</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>right</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><operator>(</operator><call><name><name>left</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>right</name><operator>.</operator><name>isMinimum</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>boolean</name></type> <name>noneStrictlyWrapsAround</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>bounds</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>b</name> <range>: <expr><name>bounds</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strictlyWrapsAround</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="number">31</literal> <operator>*</operator> <call><name><name>left</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>right</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** return true if @param range intersects any of the given @param ranges */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>intersects</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>range2</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>range2</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>start</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>unwrap</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyValidator</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getOpeningString</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>format</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>keyValidator</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name>format</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>keyValidator</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>getClosingString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>format</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyValidator</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>DecoratedKey</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name><name>keyValidator</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>DecoratedKey</name><operator>)</operator><name>value</name><operator>)</operator><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getOpeningString</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getClosingString</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isStartInclusive</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isEndInclusive</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withNewRight</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>newRight</name></decl></parameter>)</parameter_list>;</function_decl>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name><name>AbstractBoundsSerializer</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name><name>RingPosition</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name><name>IPartitionerDependentSerializer</name><argument_list type="generic">&lt;<argument><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>IS_TOKEN_FLAG</name>        <init>= <expr><literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>START_INCLUSIVE_FLAG</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>END_INCLUSIVE_FLAG</name>   <init>= <expr><literal type="number">0x04</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>IPartitionerDependentSerializer</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>serializer</name></decl>;</decl_stmt>

        <comment type="line">// Use for pre-3.0 protocol</comment>
        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>kindInt</name><parameter_list>(<parameter><decl><type><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>ab</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>kind</name> <init>= <expr><ternary><condition><expr><name>ab</name> <operator>instanceof</operator> <name>Range</name></expr> ?</condition><then> <expr><call><name><name>Type</name><operator>.</operator><name>RANGE</name><operator>.</operator><name>ordinal</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Type</name><operator>.</operator><name>BOUNDS</name><operator>.</operator><name>ordinal</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ab</name><operator>.</operator><name>left</name></name> <operator>instanceof</operator> <name>Token</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>kind</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>kind</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>kind</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// For from 3.0 onwards</comment>
        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>kindFlags</name><parameter_list>(<parameter><decl><type><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>ab</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>ab</name><operator>.</operator><name>left</name></name> <operator>instanceof</operator> <name>Token</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>IS_TOKEN_FLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>ab</name><operator>.</operator><name>isStartInclusive</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>START_INCLUSIVE_FLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>ab</name><operator>.</operator><name>isEndInclusive</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>END_INCLUSIVE_FLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>flags</name></expr>;</return>
        </block_content>}</block></function>

        <constructor><specifier>public</specifier> <name>AbstractBoundsSerializer</name><parameter_list>(<parameter><decl><type><name><name>IPartitionerDependentSerializer</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>serializer</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>serializer</name></name> <operator>=</operator> <name>serializer</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <comment type="block">/*
             * The first int tells us if it's a range or bounds (depending on the value) _and_ if it's tokens or keys (depending on the
             * sign). We use negative kind for keys so as to preserve the serialization of token from older version.
             */</comment>
            <comment type="line">// !WARNING! While we don't support the pre-3.0 messaging protocol, we serialize the token range in the</comment>
            <comment type="line">// system table (see SystemKeypsace.rangeToBytes) using the old/pre-3.0 format and until we deal with that</comment>
            <comment type="line">// problem, we have to preserve this code.</comment>
            <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <name><name>MessagingService</name><operator>.</operator><name>VERSION_30</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name>kindInt</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><call><name>kindFlags</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><call><name><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInput</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>IPartitioner</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isToken</name></decl>, <decl><type ref="prev"/><name>startInclusive</name></decl>, <decl><type ref="prev"/><name>endInclusive</name></decl>;</decl_stmt>
            <comment type="line">// !WARNING! See serialize method above for why we still need to have that condition.</comment>
            <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <name><name>MessagingService</name><operator>.</operator><name>VERSION_30</name></name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>kind</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>isToken</name> <operator>=</operator> <name>kind</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isToken</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>kind</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>kind</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Pre-3.0, everything that wasa not a Range was (wrongly) serialized as a Bound;</comment>
                <expr_stmt><expr><name>startInclusive</name> <operator>=</operator> <name>kind</name> <operator>!=</operator> <call><name><name>Type</name><operator>.</operator><name>RANGE</name><operator>.</operator><name>ordinal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>endInclusive</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readUnsignedByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>isToken</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>IS_TOKEN_FLAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>startInclusive</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>START_INCLUSIVE_FLAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>endInclusive</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>END_INCLUSIVE_FLAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name>T</name></type> <name>left</name> <init>= <expr><call><name><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>T</name></type> <name>right</name> <init>= <expr><call><name><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><name>isToken</name> <operator>==</operator> <name>left</name> <operator>instanceof</operator> <name>Token</name></expr>;</assert>

            <if_stmt><if>if <condition>(<expr><name>startInclusive</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><ternary><condition><expr><name>endInclusive</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name><name>Bounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name><name>IncludingExcludingBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <return>return <expr><ternary><condition><expr><name>endInclusive</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name><name>ExcludingBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// !WARNING! See serialize method above for why we still need to have that condition.</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name>version</name> <operator>&lt;</operator> <name><name>MessagingService</name><operator>.</operator><name>VERSION_30</name></name></expr>
                     ?</condition><then> <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name>kindInt</name><argument_list>(<argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                     </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name><name>ab</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name><name>ab</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>bounds</name><parameter_list>(<parameter><decl><type><name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>max</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>bounds</name><argument_list>(<argument><expr><name><name>min</name><operator>.</operator><name>boundary</name></name></expr></argument>, <argument><expr><name><name>min</name><operator>.</operator><name>inclusive</name></name></expr></argument>, <argument><expr><name><name>max</name><operator>.</operator><name>boundary</name></name></expr></argument>, <argument><expr><name><name>max</name><operator>.</operator><name>inclusive</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>bounds</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>inclusiveMin</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>inclusiveMax</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>inclusiveMin</name> <operator>&amp;&amp;</operator> <name>inclusiveMax</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name><name>Bounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>inclusiveMax</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>inclusiveMin</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name><name>IncludingExcludingBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name><name>ExcludingBounds</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="line">// represents one side of a bounds (which side is not encoded)</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name><name>Boundary</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name><name>RingPosition</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T</name></type> <name>boundary</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>inclusive</name></decl>;</decl_stmt>
        <constructor><specifier>public</specifier> <name>Boundary</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>boundary</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>inclusive</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>boundary</name></name> <operator>=</operator> <name>boundary</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inclusive</name></name> <operator>=</operator> <name>inclusive</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <function><type><specifier>public</specifier> <name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>leftBoundary</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>Boundary</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>inclusiveLeft</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>rightBoundary</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>Boundary</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><call><name>inclusiveRight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>boolean</name></type> <name>isEmpty</name><parameter_list>(<parameter><decl><type><name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>right</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>boundary</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>right</name><operator>.</operator><name>boundary</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>left</name><operator>.</operator><name>inclusive</name></name> <operator>&amp;&amp;</operator> <name><name>right</name><operator>.</operator><name>inclusive</name></name><operator>)</operator><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>minRight</name><parameter_list>(<parameter><decl><type><name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>right1</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>right2</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isInclusiveRight2</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>minRight</name><argument_list>(<argument><expr><name>right1</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>right2</name></expr></argument>, <argument><expr><name>isInclusiveRight2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>minRight</name><parameter_list>(<parameter><decl><type><name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>right1</name></decl></parameter>, <parameter><decl><type><name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>right2</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>right1</name><operator>.</operator><name>boundary</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>right2</name><operator>.</operator><name>boundary</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><ternary><condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>right1</name></expr> </then><else>: <expr><name>right2</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
        <comment type="line">// return the exclusive version, if either</comment>
        <return>return <expr><ternary><condition><expr><name><name>right2</name><operator>.</operator><name>inclusive</name></name></expr> ?</condition><then> <expr><name>right1</name></expr> </then><else>: <expr><name>right2</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>maxLeft</name><parameter_list>(<parameter><decl><type><name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>left1</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>left2</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isInclusiveLeft2</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>maxLeft</name><argument_list>(<argument><expr><name>left1</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>left2</name></expr></argument>, <argument><expr><name>isInclusiveLeft2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>maxLeft</name><parameter_list>(<parameter><decl><type><name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>left1</name></decl></parameter>, <parameter><decl><type><name><name>Boundary</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>left2</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>left1</name><operator>.</operator><name>boundary</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>left2</name><operator>.</operator><name>boundary</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><ternary><condition><expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>left1</name></expr> </then><else>: <expr><name>left2</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
        <comment type="line">// return the exclusive version, if either</comment>
        <return>return <expr><ternary><condition><expr><name><name>left2</name><operator>.</operator><name>inclusive</name></name></expr> ?</condition><then> <expr><name>left1</name></expr> </then><else>: <expr><name>left2</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
