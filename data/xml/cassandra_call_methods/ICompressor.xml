<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/io/compress/ICompressor.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>compress</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>

<interface><specifier>public</specifier> interface <name>ICompressor</name>
<block>{
    <comment type="block" format="javadoc">/**
     * Ways that a particular instance of ICompressor should be used internally in Cassandra.
     *
     * GENERAL: Suitable for general use
     * FAST_COMPRESSION: Suitable for use in particularly latency sensitive compression situations (flushes).
     */</comment>
    <enum>enum <name>Uses</name> <block>{
        <decl><name>GENERAL</name></decl>,
        <decl><name>FAST_COMPRESSION</name></decl>
    }</block></enum>

    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>initialCompressedBufferLength</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chunkLength</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>uncompress</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputLength</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outputOffset</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Compression for ByteBuffers.
     *
     * The data between input.position() and input.limit() is compressed and placed into output starting from output.position().
     * Positions in both buffers are moved to reflect the bytes read and written. Limits are not changed.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>compress</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>output</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Decompression for DirectByteBuffers.
     *
     * The data between input.position() and input.limit() is uncompressed and placed into output starting from output.position().
     * Positions in both buffers are moved to reflect the bytes read and written. Limits are not changed.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>uncompress</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>output</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the preferred (most efficient) buffer type for this compressor.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>BufferType</name></type> <name>preferredBufferType</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Checks if the given buffer would be supported by the compressor. If a type is supported, the compressor must be
     * able to use it in combination with all other supported types.
     *
     * Direct and memory-mapped buffers must be supported by all compressors.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>supports</name><parameter_list>(<parameter><decl><type><name>BufferType</name></type> <name>bufferType</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>supportedOptions</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Hints to Cassandra which uses this compressor is recommended for. For example a compression algorithm which gets
     * good compression ratio may trade off too much compression speed to be useful in certain compression heavy use
     * cases such as flushes or mutation hints.
     *
     * Note that Cassandra may ignore these recommendations, it is not a strict contract.
     */</comment>
    <function><type><specifier>default</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Uses</name></argument>&gt;</argument_list></name></type> <name>recommendedUses</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>allOf</name></name><argument_list>(<argument><expr><name><name>Uses</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></interface>
</unit>
