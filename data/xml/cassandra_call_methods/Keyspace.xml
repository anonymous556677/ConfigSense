<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/Keyspace.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CompletableFuture</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Future</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>Lock</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>RateLimiter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>CompactionManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>SSTableSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionUpdate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>repair</name><operator>.</operator><name>CassandraKeyspaceRepairManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>WriteTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>SecondaryIndexManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>transactions</name><operator>.</operator><name>UpdateTransaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>AbstractReplicationStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>KeyspaceMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>KeyspaceRepairManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>KeyspaceMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ReplicationParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadataRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JVMStabilityInspector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>OpOrder</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonotonicClock</name><operator>.</operator><name>approxTime</name></name>;</import>

<comment type="block" format="javadoc">/**
 * It represents a Keyspace.
 */</comment>
<class><specifier>public</specifier> class <name>Keyspace</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Keyspace</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TEST_FAIL_WRITES_KS</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.test.fail_writes_ks"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>TEST_FAIL_WRITES</name> <init>= <expr><operator>!</operator><call><name><name>TEST_FAIL_WRITES_KS</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>TEST_FAIL_MV_LOCKS_COUNT</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.test.fail_mv_locks_count"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>KeyspaceMetrics</name></type> <name>metric</name></decl>;</decl_stmt>

    <comment type="line">// It is possible to call Keyspace.open without a running daemon, so it makes sense to ensure</comment>
    <comment type="line">// proper directories here as well as in CassandraDaemon.</comment>
    <static>static
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isDaemonInitialized</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isToolInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>createAllDirectories</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></static>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>KeyspaceMetadata</name></type> <name>metadata</name></decl>;</decl_stmt>

    <comment type="line">//OpOrder is defined globally since we need to order writes across</comment>
    <comment type="line">//Keyspaces in the case of Views (batchlog of view mutations)</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>OpOrder</name></type> <name>writeOrder</name> <init>= <expr><operator>new</operator> <call><name>OpOrder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* ColumnFamilyStore per column family */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ConcurrentMap</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>, <argument><name>ColumnFamilyStore</name></argument>&gt;</argument_list></name></type> <name>columnFamilyStores</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ViewManager</name></type> <name>viewManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>KeyspaceWriteHandler</name></type> <name>writeHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>ReplicationParams</name></type> <name>replicationParams</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>KeyspaceRepairManager</name></type> <name>repairManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SchemaProvider</name></type> <name>schema</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>initialized</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInitialized</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Keyspace</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>initialized</name> <operator>||</operator> <call><name><name>SchemaConstants</name><operator>.</operator><name>isLocalSystemKeyspace</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</assert>
        <return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name><name>Schema</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// to only be used by org.apache.cassandra.tools.Standalone* classes</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Keyspace</name></type> <name>openWithoutSSTables</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name><name>Schema</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>static</specifier> <name>Keyspace</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>SchemaProvider</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>loadSSTables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspaceInstance</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getKeyspaceInstance</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>keyspaceInstance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Instantiate the Keyspace while holding the Schema lock. This both ensures we only do it once per</comment>
            <comment type="line">// keyspace, and also ensures that Keyspace construction sees a consistent view of the schema.</comment>
            <synchronized>synchronized <init>(<expr><name>schema</name></expr>)</init>
            <block>{<block_content>
                <expr_stmt><expr><name>keyspaceInstance</name> <operator>=</operator> <call><name><name>schema</name><operator>.</operator><name>getKeyspaceInstance</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>keyspaceInstance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// open and store the keyspace</comment>
                    <expr_stmt><expr><name>keyspaceInstance</name> <operator>=</operator> <operator>new</operator> <call><name>Keyspace</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>loadSSTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>schema</name><operator>.</operator><name>storeKeyspaceInstance</name></name><argument_list>(<argument><expr><name>keyspaceInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>keyspaceInstance</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Keyspace</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>clear</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name><name>Schema</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Keyspace</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>schema</name></expr>)</init>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Keyspace</name></type> <name>t</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>removeKeyspaceInstance</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name><name>t</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>unloadCf</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>metric</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>t</name></expr>;</return>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFamilyStore</name></type> <name>openAndGetStore</name><parameter_list>(<parameter><decl><type><name>TableMetadataRef</name></type> <name>tableRef</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>open</name><argument_list>(<argument><expr><name><name>tableRef</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>tableRef</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnFamilyStore</name></type> <name>openAndGetStore</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>open</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes every SSTable in the directory from the appropriate Tracker's view.
     * @param directory the unreadable directory, possibly with SSTables in it, but not necessarily.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>removeUnreadableSSTables</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>baseCfs</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name><name>baseCfs</name><operator>.</operator><name>concatWithIndexes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>maybeRemoveUnreadableSSTables</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMetadata</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadata</name></name> <operator>=</operator> <name>metadata</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createReplicationStrategy</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>getMetadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>metadata</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ColumnFamilyStore</name></argument>&gt;</argument_list></name></type> <name>getColumnFamilyStores</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableCollection</name></name><argument_list>(<argument><expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ColumnFamilyStore</name></type> <name>getColumnFamilyStore</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cfName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>table</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getTableMetadata</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unknown keyspace/cf pair (%s.%s)"</literal></expr></argument>, <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ColumnFamilyStore</name></type> <name>getColumnFamilyStore</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cfs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unknown CF "</literal> <operator>+</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>cfs</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasColumnFamilyStore</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Take a snapshot of the specific column family, or the entire set of column families
     * if columnFamily is null with a given timestamp
     *
     * @param snapshotName     the tag associated with the name of the snapshot.  This value may not be null
     * @param columnFamilyName the column family to snapshot or all on null
     * @param skipFlush Skip blocking flush of memtable
     * @param rateLimiter Rate limiter for hardlinks-per-second
     * @throws IOException if the column family doesn't exist
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>snapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnFamilyName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>skipFlush</name></decl></parameter>, <parameter><decl><type><name>RateLimiter</name></type> <name>rateLimiter</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <assert>assert <expr><name>snapshotName</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <decl_stmt><decl><type><name>boolean</name></type> <name>tookSnapShot</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>columnFamilyName</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>cfStore</name><operator>.</operator><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>columnFamilyName</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>tookSnapShot</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cfStore</name><operator>.</operator><name>snapshot</name></name><argument_list>(<argument><expr><name>snapshotName</name></expr></argument>, <argument><expr><name>skipFlush</name></expr></argument>, <argument><expr><name>rateLimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>columnFamilyName</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>tookSnapShot</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Failed taking snapshot. Table "</literal> <operator>+</operator> <name>columnFamilyName</name> <operator>+</operator> <literal type="string">" does not exist."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Take a snapshot of the specific column family, or the entire set of column families
     * if columnFamily is null with a given timestamp
     *
     * @param snapshotName     the tag associated with the name of the snapshot.  This value may not be null
     * @param columnFamilyName the column family to snapshot or all on null
     * @throws IOException if the column family doesn't exist
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>snapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnFamilyName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snapshot</name><argument_list>(<argument><expr><name>snapshotName</name></expr></argument>, <argument><expr><name>columnFamilyName</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param clientSuppliedName may be null.
     * @return the name of the snapshot
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getTimestampedSnapshotName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>clientSuppliedName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>snapshotName</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>clientSuppliedName</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>clientSuppliedName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>snapshotName</name> <operator>=</operator> <name>snapshotName</name> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <name>clientSuppliedName</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>snapshotName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getTimestampedSnapshotNameWithPrefix</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>clientSuppliedName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>prefix</name> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <call><name>getTimestampedSnapshotName</name><argument_list>(<argument><expr><name>clientSuppliedName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check whether snapshots already exists for a given name.
     *
     * @param snapshotName the user supplied snapshot name
     * @return true if the snapshot exists
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>snapshotExists</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>snapshotName</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>cfStore</name><operator>.</operator><name>snapshotExists</name></name><argument_list>(<argument><expr><name>snapshotName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clear all the snapshots for a given keyspace.
     *
     * @param snapshotName the user supplied snapshot name. It empty or null,
     *                     all the snapshots will be cleaned
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>clearSnapshot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RateLimiter</name></type> <name>clearSnapshotRateLimiter</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSnapshotRateLimiter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>snapshotDirs</name> <init>= <expr><call><name><name>Directories</name><operator>.</operator><name>getKSChildDirectories</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Directories</name><operator>.</operator><name>clearSnapshot</name></name><argument_list>(<argument><expr><name>snapshotName</name></expr></argument>, <argument><expr><name>snapshotDirs</name></expr></argument>, <argument><expr><name>clearSnapshotRateLimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return A list of open SSTableReaders
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>getAllSSTables</name><parameter_list>(<parameter><decl><type><name>SSTableSet</name></type> <name>sstableSet</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>Iterables</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name><name>cfStore</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name>sstableSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>private</specifier> <name>Keyspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>SchemaProvider</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>loadSSTables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <name>schema</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>metadata</name> <operator>=</operator> <call><name><name>schema</name><operator>.</operator><name>getKeyspaceMetadata</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><name>metadata</name> <operator>!=</operator> <literal type="null">null</literal> <operator>:</operator> <literal type="string">"Unknown keyspace "</literal> <operator>+</operator> <name>keyspaceName</name></expr>;</assert>
        
        <if_stmt><if>if <condition>(<expr><call><name><name>metadata</name><operator>.</operator><name>isVirtual</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Cannot initialize Keyspace with virtual metadata "</literal> <operator>+</operator> <name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>createReplicationStrategy</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metric</name></name> <operator>=</operator> <operator>new</operator> <call><name>KeyspaceMetrics</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>viewManager</name></name> <operator>=</operator> <operator>new</operator> <call><name>ViewManager</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>TableMetadata</name></type> <name>cfm</name> <range>: <expr><call><name><name>metadata</name><operator>.</operator><name>tablesAndViews</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Initializing {}.{}"</literal></expr></argument>, <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cfm</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>initCf</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getTableMetadataRef</name></name><argument_list>(<argument><expr><name><name>cfm</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>loadSSTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>viewManager</name><operator>.</operator><name>reload</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repairManager</name></name> <operator>=</operator> <operator>new</operator> <call><name>CassandraKeyspaceRepairManager</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>writeHandler</name></name> <operator>=</operator> <operator>new</operator> <call><name>CassandraKeyspaceWriteHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>private</specifier> <name>Keyspace</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <name><name>Schema</name><operator>.</operator><name>instance</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadata</name></name> <operator>=</operator> <name>metadata</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createReplicationStrategy</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metric</name></name> <operator>=</operator> <operator>new</operator> <call><name>KeyspaceMetrics</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>viewManager</name></name> <operator>=</operator> <operator>new</operator> <call><name>ViewManager</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repairManager</name></name> <operator>=</operator> <operator>new</operator> <call><name>CassandraKeyspaceRepairManager</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>writeHandler</name></name> <operator>=</operator> <operator>new</operator> <call><name>CassandraKeyspaceWriteHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>KeyspaceRepairManager</name></type> <name>getRepairManager</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>repairManager</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Keyspace</name></type> <name>mockKS</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Keyspace</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>createReplicationStrategy</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>ksm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Creating replication strategy "</literal> <operator>+</operator> <name><name>ksm</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">" params "</literal> <operator>+</operator> <name><name>ksm</name><operator>.</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>replicationStrategy</name> <operator>=</operator> <call><name><name>ksm</name><operator>.</operator><name>createReplicationStrategy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ksm</name><operator>.</operator><name>params</name><operator>.</operator><name>replication</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>replicationParams</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"New replication settings for keyspace {} - invalidating disk boundary caches"</literal></expr></argument>, <argument><expr><name><name>ksm</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>ColumnFamilyStore</name><operator>::</operator><name>invalidateDiskBoundaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>replicationParams</name> <operator>=</operator> <name><name>ksm</name><operator>.</operator><name>params</name><operator>.</operator><name>replication</name></name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// best invoked on the compaction mananger.</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>dropCf</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>tableId</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr>;</assert>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cfs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>getCompactionStrategyManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>CompactionManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>interruptCompactionForCFs</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>concatWithIndexes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>sstable</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="boolean">true</literal></expr></block_content></block></lambda></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// wait for any outstanding reads/writes that might affect the CFS</comment>
        <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>writeOrder</name><operator>.</operator><name>awaitNewBarrier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>readOrdering</name><operator>.</operator><name>awaitNewBarrier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>unloadCf</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// disassociate a cfs from this keyspace instance.</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>unloadCf</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>forceBlockingFlush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Registers a custom cf instance with this keyspace.
     * This is required for offline tools what use non-standard directories.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>initCfCustom</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>newCfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>newCfs</name><operator>.</operator><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>cfs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// CFS being created for the first time, either on server startup or new CF being added.</comment>
            <comment type="line">// We don't worry about races here; startup is safe, and adding multiple idential CFs</comment>
            <comment type="line">// simultaneously is a "don't do that" scenario.</comment>
            <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>oldCfs</name> <init>= <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name><name>newCfs</name><operator>.</operator><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>newCfs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// CFS mbean instantiation will error out before we hit this, but in case that changes...</comment>
            <if_stmt><if>if <condition>(<expr><name>oldCfs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"added multiple mappings for cf id "</literal> <operator>+</operator> <name><name>newCfs</name><operator>.</operator><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"CFS is already initialized: "</literal> <operator>+</operator> <name><name>cfs</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>KeyspaceWriteHandler</name></type> <name>getWriteHandler</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>writeHandler</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * adds a cf to internal structures, ends up creating disk files).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>initCf</name><parameter_list>(<parameter><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>loadSSTables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>cfs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// CFS being created for the first time, either on server startup or new CF being added.</comment>
            <comment type="line">// We don't worry about races here; startup is safe, and adding multiple idential CFs</comment>
            <comment type="line">// simultaneously is a "don't do that" scenario.</comment>
            <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>oldCfs</name> <init>= <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>createColumnFamilyStore</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>loadSSTables</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// CFS mbean instantiation will error out before we hit this, but in case that changes...</comment>
            <if_stmt><if>if <condition>(<expr><name>oldCfs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"added multiple mappings for cf id "</literal> <operator>+</operator> <name><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// re-initializing an existing CF.  This will happen if you cleared the schema</comment>
            <comment type="line">// on this node and it's getting repopulated from the rest of the cluster.</comment>
            <assert>assert <expr><call><name><name>cfs</name><operator>.</operator><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</assert>
            <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>reload</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>CompletableFuture</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>applyFuture</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>writeCommitLog</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateIndexes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>applyInternal</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>writeCommitLog</name></expr></argument>, <argument><expr><name>updateIndexes</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>CompletableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>CompletableFuture</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>applyFuture</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>writeCommitLog</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateIndexes</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isDroppable</name></decl></parameter>,
                                            <parameter><decl><type><name>boolean</name></type> <name>isDeferrable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>applyInternal</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>writeCommitLog</name></expr></argument>, <argument><expr><name>updateIndexes</name></expr></argument>, <argument><expr><name>isDroppable</name></expr></argument>, <argument><expr><name>isDeferrable</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>CompletableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>Mutation</name></type> <name>mutation</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>writeCommitLog</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateIndexes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>apply</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>writeCommitLog</name></expr></argument>, <argument><expr><name>updateIndexes</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Mutation</name></type> <name>mutation</name></decl></parameter>,
                      <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>writeCommitLog</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>apply</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>writeCommitLog</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * If apply is blocking, apply must not be deferred
     * Otherwise there is a race condition where ALL mutation workers are beeing blocked ending
     * in a complete deadlock of the mutation stage. See CASSANDRA-12689.
     *
     * @param mutation       the row to write.  Must not be modified after calling apply, since commitlog append
     *                       may happen concurrently, depending on the CL Executor type.
     * @param makeDurable    if true, don't return unless write has been made durable
     * @param updateIndexes  false to disable index updates (used by CollationController "defragmenting")
     * @param isDroppable    true if this should throw WriteTimeoutException if it does not acquire lock within write_request_timeout_in_ms
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Mutation</name></type> <name>mutation</name></decl></parameter>,
                      <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>makeDurable</name></decl></parameter>,
                      <parameter><decl><type><name>boolean</name></type> <name>updateIndexes</name></decl></parameter>,
                      <parameter><decl><type><name>boolean</name></type> <name>isDroppable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>applyInternal</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>makeDurable</name></expr></argument>, <argument><expr><name>updateIndexes</name></expr></argument>, <argument><expr><name>isDroppable</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method appends a row to the global CommitLog, then updates memtables and indexes.
     *
     * @param mutation       the row to write.  Must not be modified after calling apply, since commitlog append
     *                       may happen concurrently, depending on the CL Executor type.
     * @param makeDurable    if true, don't return unless write has been made durable
     * @param updateIndexes  false to disable index updates (used by CollationController "defragmenting")
     * @param isDroppable    true if this should throw WriteTimeoutException if it does not acquire lock within write_request_timeout_in_ms
     * @param isDeferrable   true if caller is not waiting for future to complete, so that future may be deferred
     */</comment>
    <function><type><specifier>private</specifier> <name><name>CompletableFuture</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>applyInternal</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Mutation</name></type> <name>mutation</name></decl></parameter>,
                                               <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>makeDurable</name></decl></parameter>,
                                               <parameter><decl><type><name>boolean</name></type> <name>updateIndexes</name></decl></parameter>,
                                               <parameter><decl><type><name>boolean</name></type> <name>isDroppable</name></decl></parameter>,
                                               <parameter><decl><type><name>boolean</name></type> <name>isDeferrable</name></decl></parameter>,
                                               <parameter><decl><type><name><name>CompletableFuture</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>future</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>TEST_FAIL_WRITES</name> <operator>&amp;&amp;</operator> <call><name><name>metadata</name><operator>.</operator><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>TEST_FAIL_WRITES_KS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Testing write failures"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Lock</name><index>[]</index></name></type> <name>locks</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>requiresViewUpdate</name> <init>= <expr><name>updateIndexes</name> <operator>&amp;&amp;</operator> <call><name><name>viewManager</name><operator>.</operator><name>updatesAffectView</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>mutation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>requiresViewUpdate</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>mutation</name><operator>.</operator><name>viewLockAcquireStart</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// the order of lock acquisition doesn't matter (from a deadlock perspective) because we only use tryLock()</comment>
            <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>&gt;</argument_list></name></type> <name>tableIds</name> <init>= <expr><call><name><name>mutation</name><operator>.</operator><name>getTableIds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>&gt;</argument_list></name></type> <name>idIterator</name> <init>= <expr><call><name><name>tableIds</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>locks</name> <operator>=</operator> <operator>new</operator> <name><name>Lock</name><index>[<expr><call><name><name>tableIds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tableIds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>TableId</name></type> <name>tableId</name> <init>= <expr><call><name><name>idIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>lockKey</name> <init>= <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Lock</name></type> <name>lock</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>TEST_FAIL_MV_LOCKS_COUNT</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name><name>ViewManager</name><operator>.</operator><name>acquireLockFor</name></name><argument_list>(<argument><expr><name>lockKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><name>TEST_FAIL_MV_LOCKS_COUNT</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>lock</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">//throw WTE only if request is droppable</comment>
                        <if_stmt><if>if <condition>(<expr><name>isDroppable</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>approxTime</name><operator>.</operator><name>isAfter</name></name><argument_list>(<argument><expr><name><name>mutation</name><operator>.</operator><name>approxCreatedAtNanos</name></name> <operator>+</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getWriteRpcTimeout</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
                        <block>{<block_content>
                            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                                <expr_stmt><expr><name><name>locks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                            <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Could not acquire lock for {} and table {}"</literal></expr></argument>, <argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>bytesToHex</name></name><argument_list>(<argument><expr><call><name><name>mutation</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Could not acquire MV lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>future</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>completeExceptionally</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>WriteTimeoutException</name><argument_list>(<argument><expr><name><name>WriteType</name><operator>.</operator><name>VIEW</name></name></expr></argument>, <argument><expr><name><name>ConsistencyLevel</name><operator>.</operator><name>LOCAL_ONE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <return>return <expr><name>future</name></expr>;</return>
                            </block_content>}</block></if>
                            <else>else<block type="pseudo"><block_content>
                                <throw>throw <expr><operator>new</operator> <call><name>WriteTimeoutException</name><argument_list>(<argument><expr><name><name>WriteType</name><operator>.</operator><name>VIEW</name></name></expr></argument>, <argument><expr><name><name>ConsistencyLevel</name><operator>.</operator><name>LOCAL_ONE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>isDeferrable</name></expr>)</condition>
                        <block>{<block_content>
                            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                                <expr_stmt><expr><name><name>locks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                            <comment type="line">// This view update can't happen right now. so rather than keep this thread busy</comment>
                            <comment type="line">// we will re-apply ourself to the queue and try again later</comment>
                            <decl_stmt><decl><type><specifier>final</specifier> <name><name>CompletableFuture</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>mark</name> <init>= <expr><name>future</name></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>Stage</name><operator>.</operator><name>MUTATION</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content>
                                                   <expr><call><name>applyInternal</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>makeDurable</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>isDroppable</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>
                            )</argument_list></call></expr>;</expr_stmt>
                            <return>return <expr><name>future</name></expr>;</return>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
                            <comment type="line">// Retry lock on same thread, if mutation is not deferrable.</comment>
                            <comment type="line">// Mutation is not deferrable, if applied from MutationStage and caller is waiting for future to finish</comment>
                            <comment type="line">// If blocking caller defers future, this may lead to deadlock situation with all MutationStage workers</comment>
                            <comment type="line">// being blocked by waiting for futures which will never be processed as all workers are blocked</comment>
                            <try>try
                            <block>{<block_content>
                                <comment type="line">// Wait a little bit before retrying to lock</comment>
                                <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block>
                            <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                            <block>{<block_content>
                                <comment type="line">// Just continue</comment>
                            </block_content>}</block></catch></try>
                            <continue>continue;</continue>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>locks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <break>break;</break>
                </block_content>}</block></while>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name>long</name></type> <name>acquireTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>mutation</name><operator>.</operator><name>viewLockAcquireStart</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Metrics are only collected for droppable write operations</comment>
            <comment type="line">// Bulk non-droppable operations (e.g. commitlog replay, hint delivery) are not measured</comment>
            <if_stmt><if>if <condition>(<expr><name>isDroppable</name></expr>)</condition>
            <block>{<block_content>
                <for>for<control>(<init><decl><type><name>TableId</name></type> <name>tableId</name> <range>: <expr><name>tableIds</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>metric</name><operator>.</operator><name>viewLockAcquireTime</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>acquireTime</name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nowInSec</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>WriteContext</name></type> <name>ctx</name> <init>= <expr><call><name>getWriteHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginWrite</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><name>makeDurable</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>PartitionUpdate</name></type> <name>upd</name> <range>: <expr><call><name><name>mutation</name><operator>.</operator><name>getPartitionUpdates</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>upd</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>cfs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Attempting to mutate non-existant table {} ({}.{})"</literal></expr></argument>, <argument><expr><call><name><name>upd</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>, <argument><expr><call><name><name>upd</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>upd</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>AtomicLong</name></type> <name>baseComplete</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>requiresViewUpdate</name></expr>)</condition>
                <block>{<block_content>
                    <try>try
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Creating materialized view mutations from base table replica"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>viewManager</name><operator>.</operator><name>forTable</name></name><argument_list>(<argument><expr><call><name><name>upd</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>pushViewReplicaUpdates</name><argument_list>(<argument><expr><name>upd</name></expr></argument>, <argument><expr><name>makeDurable</name></expr></argument>, <argument><expr><name>baseComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unknown exception caught while attempting to update MaterializedView! %s"</literal></expr></argument>,
                                                   <argument><expr><call><name><name>upd</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <throw>throw <expr><name>t</name></expr>;</throw>
                    </block_content>}</block></catch></try>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>UpdateTransaction</name></type> <name>indexTransaction</name> <init>= <expr><ternary><condition><expr><name>updateIndexes</name></expr>
                                                     ?</condition><then> <expr><call><name><name>cfs</name><operator>.</operator><name>indexManager</name><operator>.</operator><name>newUpdateTransaction</name></name><argument_list>(<argument><expr><name>upd</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>)</argument_list></call></expr>
                                                     </then><else>: <expr><name><name>UpdateTransaction</name><operator>.</operator><name>NO_OP</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>getWriteHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>upd</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>indexTransaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>requiresViewUpdate</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>baseComplete</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><name>future</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>complete</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>future</name></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>locks</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Lock</name></type> <name>lock</name> <range>: <expr><name>locks</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <if_stmt><if>if <condition>(<expr><name>lock</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>AbstractReplicationStrategy</name></type> <name>getReplicationStrategy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>replicationStrategy</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>flush</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>futures</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name><name>columnFamilyStores</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>futures</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>forceFlush</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>futures</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>ColumnFamilyStore</name></argument>&gt;</argument_list></name></type> <name>getValidColumnFamilies</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>allowIndexes</name></decl></parameter>,
                                                              <parameter><decl><type><name>boolean</name></type> <name>autoAddIndexes</name></decl></parameter>,
                                                              <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>cfNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ColumnFamilyStore</name></argument>&gt;</argument_list></name></type> <name>valid</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cfNames</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// all stores are interesting</comment>
            <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <range>: <expr><call><name>getColumnFamilyStores</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>valid</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>cfStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>autoAddIndexes</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>valid</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>getIndexColumnFamilyStores</name><argument_list>(<argument><expr><name>cfStore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>valid</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// include the specified stores and possibly the stores of any of their indexes</comment>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>cfName</name> <range>: <expr><name>cfNames</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>SecondaryIndexManager</name><operator>.</operator><name>isIndexColumnFamily</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>allowIndexes</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Operation not allowed on secondary Index table ({})"</literal></expr></argument>, <argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>baseName</name> <init>= <expr><call><name><name>SecondaryIndexManager</name><operator>.</operator><name>getParentCfsName</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>indexName</name> <init>= <expr><call><name><name>SecondaryIndexManager</name><operator>.</operator><name>getIndexName</name></name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>baseCfs</name> <init>= <expr><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name>baseName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>baseCfs</name><operator>.</operator><name>indexManager</name><operator>.</operator><name>getIndexByName</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Invalid index specified: %s/%s."</literal></expr></argument>,
                                                                     <argument><expr><name><name>baseCfs</name><operator>.</operator><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>,
                                                                     <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getBackingTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>valid</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getBackingTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfStore</name> <init>= <expr><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name>cfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>valid</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>cfStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>autoAddIndexes</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>valid</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>getIndexColumnFamilyStores</name><argument_list>(<argument><expr><name>cfStore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>valid</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>ColumnFamilyStore</name></argument>&gt;</argument_list></name></type> <name>getIndexColumnFamilyStores</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>baseCfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ColumnFamilyStore</name></argument>&gt;</argument_list></name></type> <name>stores</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>indexCfs</name> <range>: <expr><call><name><name>baseCfs</name><operator>.</operator><name>indexManager</name><operator>.</operator><name>getAllIndexColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"adding secondary index table {} to operation"</literal></expr></argument>, <argument><expr><name><name>indexCfs</name><operator>.</operator><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>stores</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>indexCfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>stores</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Keyspace</name></argument>&gt;</argument_list></name></type> <name>all</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaces</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Keyspace</name><operator>::</operator><name>open</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return a {@link Stream} of all existing/open {@link Keyspace} instances
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name>Keyspace</name></argument>&gt;</argument_list></name></type> <name>allExisting</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaces</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name><name>Schema</name><operator>.</operator><name>instance</name></name><operator>::</operator><name>getKeyspaceInstance</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>Objects</name><operator>::</operator><name>nonNull</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Keyspace</name></argument>&gt;</argument_list></name></type> <name>nonSystem</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonSystemKeyspaces</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Keyspace</name><operator>::</operator><name>open</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Keyspace</name></argument>&gt;</argument_list></name></type> <name>nonLocalStrategy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonLocalStrategyKeyspaces</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Keyspace</name><operator>::</operator><name>open</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Keyspace</name></argument>&gt;</argument_list></name></type> <name>system</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>LOCAL_SYSTEM_KEYSPACE_NAMES</name></name></expr></argument>, <argument><expr><name>Keyspace</name><operator>::</operator><name>open</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"(name='"</literal> <operator>+</operator> <call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"')"</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
