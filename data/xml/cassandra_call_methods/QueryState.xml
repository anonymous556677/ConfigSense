<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/QueryState.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>ClientStat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Primarily used as a recorder for server-generated timestamps (timestamp, in microseconds, and nowInSeconds - in, well, seconds).
 *
 * The goal is to be able to use a single consistent server-generated value for both timestamps across the whole request,
 * and later be able to inspect QueryState for the generated values - for logging or other purposes.
 */</comment>
<class><specifier>public</specifier> class <name>QueryState</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ClientState</name></type> <name>clientState</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>timestamp</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>nowInSeconds</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>QueryState</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>clientState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clientState</name></name> <operator>=</operator> <name>clientState</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>QueryState</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>clientState</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nowInSeconds</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>clientState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nowInSeconds</name></name> <operator>=</operator> <name>nowInSeconds</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return a QueryState object for internal C* calls (not limited by any kind of auth).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>QueryState</name></type> <name>forInternalCalls</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>QueryState</name><argument_list>(<argument><expr><call><name><name>ClientState</name><operator>.</operator><name>forInternalCalls</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Generate, cache, and record a timestamp value on the server-side.
     *
     * Used in reads for all live and expiring cells, and all kinds of deletion infos.
     *
     * Shouldn't be used directly. {@link org.apache.cassandra.cql3.QueryOptions#getTimestamp(QueryState)} should be used
     * by all consumers.
     *
     * @return server-generated, recorded timestamp in seconds
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTimestamp</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name><name>ClientState</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>timestamp</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Generate, cache, and record a nowInSeconds value on the server-side.
     *
     * In writes is used for calculating localDeletionTime for tombstones and expiring cells and other deletion infos.
     * In reads used to determine liveness of expiring cells and rows.
     *
     * Shouldn't be used directly. {@link org.apache.cassandra.cql3.QueryOptions#getNowInSeconds(QueryState)} should be used
     * by all consumers.
     *
     * @return server-generated, recorded timestamp in seconds
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getNowInSeconds</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nowInSeconds</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nowInSeconds</name> <operator>=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>nowInSeconds</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return server-generated timestamp value, if one had been requested, or Long.MIN_VALUE otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>generatedTimestamp</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>timestamp</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return server-generated nowInSeconds value, if one had been requested, or Integer.MIN_VALUE otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>generatedNowInSeconds</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>nowInSeconds</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ClientState</name></type> <name>getClientState</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>clientState</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>InetAddress</name></type> <name>getClientAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>clientState</name><operator>.</operator><name>getClientAddress</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
