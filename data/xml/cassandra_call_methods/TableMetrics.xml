<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/metrics/TableMetrics.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>CassandraMetricsRegistry</name><operator>.</operator><name>Metrics</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Predicate</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Maps</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>Timer</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>ArrayUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Keyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Memtable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>SSTableSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>SecondaryIndexManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>compress</name><operator>.</operator><name>CompressionMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataCollector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>Sampler</name><operator>.</operator><name>SamplerType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>EstimatedHistogram</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>Counter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>Gauge</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>Histogram</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>Meter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>Metric</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>RatioGauge</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Metrics for {@link ColumnFamilyStore}.
 */</comment>
<class><specifier>public</specifier> class <name>TableMetrics</name>
<block>{
    <comment type="block" format="javadoc">/**
     * stores metrics that will be rolled into a single global metric
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ConcurrentMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Metric</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ALL_TABLE_METRICS</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>newConcurrentMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>long</name><index>[]</index></name></type> <name>EMPTY</name> <init>= <expr><operator>new</operator> <name><name>long</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>MetricNameFactory</name></type> <name>GLOBAL_FACTORY</name> <init>= <expr><operator>new</operator> <call><name>AllTableMetricNameFactory</name><argument_list>(<argument><expr><literal type="string">"Table"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>MetricNameFactory</name></type> <name>GLOBAL_ALIAS_FACTORY</name> <init>= <expr><operator>new</operator> <call><name>AllTableMetricNameFactory</name><argument_list>(<argument><expr><literal type="string">"ColumnFamily"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>LatencyMetrics</name></type> <name>GLOBAL_READ_LATENCY</name> <init>= <expr><operator>new</operator> <call><name>LatencyMetrics</name><argument_list>(<argument><expr><name>GLOBAL_FACTORY</name></expr></argument>, <argument><expr><name>GLOBAL_ALIAS_FACTORY</name></expr></argument>, <argument><expr><literal type="string">"Read"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>LatencyMetrics</name></type> <name>GLOBAL_WRITE_LATENCY</name> <init>= <expr><operator>new</operator> <call><name>LatencyMetrics</name><argument_list>(<argument><expr><name>GLOBAL_FACTORY</name></expr></argument>, <argument><expr><name>GLOBAL_ALIAS_FACTORY</name></expr></argument>, <argument><expr><literal type="string">"Write"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>LatencyMetrics</name></type> <name>GLOBAL_RANGE_LATENCY</name> <init>= <expr><operator>new</operator> <call><name>LatencyMetrics</name><argument_list>(<argument><expr><name>GLOBAL_FACTORY</name></expr></argument>, <argument><expr><name>GLOBAL_ALIAS_FACTORY</name></expr></argument>, <argument><expr><literal type="string">"Range"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Total amount of data stored in the memtable that resides on-heap, including column related overhead and partitions overwritten. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>memtableOnHeapDataSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total amount of data stored in the memtable that resides off-heap, including column related overhead and partitions overwritten. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>memtableOffHeapDataSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total amount of live data stored in the memtable, excluding any data structure overhead */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>memtableLiveDataSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total amount of data stored in the memtables (2i and pending flush memtables included) that resides on-heap. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>allMemtablesOnHeapDataSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total amount of data stored in the memtables (2i and pending flush memtables included) that resides off-heap. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>allMemtablesOffHeapDataSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total amount of live data stored in the memtables (2i and pending flush memtables included) that resides off-heap, excluding any data structure overhead */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>allMemtablesLiveDataSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total number of columns present in the memtable. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>memtableColumnsCount</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of times flush has resulted in the memtable being switched out. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>memtableSwitchCount</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Current compression ratio for all SSTables */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>compressionRatio</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Histogram of estimated partition size (in bytes). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name><name>long</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>estimatedPartitionSizeHistogram</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Approximate number of keys in table. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>estimatedPartitionCount</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Histogram of estimated number of columns. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name><name>long</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>estimatedColumnCountHistogram</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Histogram of the number of sstable data files accessed per read */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableHistogram</name></type> <name>sstablesPerReadHistogram</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** (Local) read metrics */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>LatencyMetrics</name></type> <name>readLatency</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** (Local) range slice metrics */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>LatencyMetrics</name></type> <name>rangeLatency</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** (Local) write metrics */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>LatencyMetrics</name></type> <name>writeLatency</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Estimated number of tasks pending for this table */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>pendingFlushes</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total number of bytes flushed since server [re]start */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>bytesFlushed</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total number of bytes written by compaction since server [re]start */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>compactionBytesWritten</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Estimate of number of pending compactios for this table */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>pendingCompactions</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of SSTables on disk for this CF */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>liveSSTableCount</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of SSTables with old version on disk for this CF */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>oldVersionSSTableCount</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Disk space used by SSTables belonging to this table */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>liveDiskSpaceUsed</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Total disk space used by SSTables belonging to this table, including obsolete ones waiting to be GC'd */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>totalDiskSpaceUsed</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Size of the smallest compacted partition */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>minPartitionSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Size of the largest compacted partition */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>maxPartitionSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Size of the smallest compacted partition */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>meanPartitionSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of false positives in bloom filter */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>bloomFilterFalsePositives</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of false positives in bloom filter from last read */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>recentBloomFilterFalsePositives</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** False positive ratio of bloom filter */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>bloomFilterFalseRatio</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** False positive ratio of bloom filter from last read */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>recentBloomFilterFalseRatio</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Disk space used by bloom filter */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>bloomFilterDiskSpaceUsed</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Off heap memory used by bloom filter */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>bloomFilterOffHeapMemoryUsed</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Off heap memory used by index summary */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>indexSummaryOffHeapMemoryUsed</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Off heap memory used by compression meta data*/</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>compressionMetadataOffHeapMemoryUsed</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Key cache hit rate  for this CF */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>keyCacheHitRate</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Tombstones scanned in queries on this CF */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableHistogram</name></type> <name>tombstoneScannedHistogram</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Live rows scanned in queries on this CF */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableHistogram</name></type> <name>liveScannedHistogram</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Column update time delta on this CF */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableHistogram</name></type> <name>colUpdateTimeDeltaHistogram</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** time taken acquiring the partition lock for materialized view updates for this table */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableTimer</name></type> <name>viewLockAcquireTime</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** time taken during the local read of a materialized view update */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableTimer</name></type> <name>viewReadTime</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Disk space used by snapshot files which */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>trueSnapshotsSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Row cache hits, but result out of range */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>rowCacheHitOutOfRange</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of row cache hits */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>rowCacheHit</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of row cache misses */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>rowCacheMiss</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Number of tombstone read failures
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>tombstoneFailures</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Number of tombstone read warnings
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>tombstoneWarnings</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** CAS Prepare metrics */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>LatencyMetrics</name></type> <name>casPrepare</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** CAS Propose metrics */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>LatencyMetrics</name></type> <name>casPropose</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** CAS Commit metrics */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>LatencyMetrics</name></type> <name>casCommit</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** percent of the data that is repaired */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>percentRepaired</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Reports the size of sstables in repaired, unrepaired, and any ongoing repair buckets */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>bytesRepaired</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>bytesUnrepaired</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>bytesPendingRepair</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of started repairs as coordinator on this table */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>repairsStarted</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Number of completed repairs as coordinator on this table */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>repairsCompleted</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** time spent anticompacting data before participating in a consistent repair */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableTimer</name></type> <name>anticompactionTime</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** time spent creating merkle trees */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableTimer</name></type> <name>validationTime</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** time spent syncing data in a repair */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableTimer</name></type> <name>repairSyncTime</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** approximate number of bytes read while creating merkle trees */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableHistogram</name></type> <name>bytesValidated</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** number of partitions read creating merkle trees */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableHistogram</name></type> <name>partitionsValidated</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** number of bytes read while doing anticompaction */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>bytesAnticompacted</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** number of bytes where the whole sstable was contained in a repairing range so that we only mutated the repair status */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>bytesMutatedAnticompaction</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** ratio of how much we anticompact vs how much we could mutate the repair status*/</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>mutatedAnticompactionGauge</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Timer</name></type> <name>coordinatorReadLatency</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Timer</name></type> <name>coordinatorScanLatency</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Timer</name></type> <name>coordinatorWriteLatency</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Time spent waiting for free memtable space, either on- or off-heap */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Histogram</name></type> <name>waitingOnFreeMemtableSpace</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>droppedMutations</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>MetricNameFactory</name></type> <name>factory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>MetricNameFactory</name></type> <name>aliasFactory</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>speculativeRetries</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>speculativeFailedRetries</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>speculativeInsufficientReplicas</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>speculativeSampleLatencyNanos</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>additionalWrites</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>additionalWriteLatencyNanos</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>unleveledSSTables</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Metrics for inconsistencies detected between repaired data sets across replicas. These
     * are tracked on the coordinator.
     */</comment>
    <comment type="line">// Incremented where an inconsistency is detected and there are no pending repair sessions affecting</comment>
    <comment type="line">// the data being read, indicating a genuine mismatch between replicas' repaired data sets.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableMeter</name></type> <name>confirmedRepairedInconsistencies</name></decl>;</decl_stmt>
    <comment type="line">// Incremented where an inconsistency is detected, but there are pending &amp; uncommitted repair sessions</comment>
    <comment type="line">// in play on at least one replica. This may indicate a false positive as the inconsistency could be due to</comment>
    <comment type="line">// replicas marking the repair session as committed at slightly different times and so some consider it to</comment>
    <comment type="line">// be part of the repaired set whilst others do not.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableMeter</name></type> <name>unconfirmedRepairedInconsistencies</name></decl>;</decl_stmt>

    <comment type="line">// Tracks the amount overreading of repaired data replicas perform in order to produce digests</comment>
    <comment type="line">// at query time. For each query, on a full data read following an initial digest mismatch, the replicas</comment>
    <comment type="line">// may read extra repaired data, up to the DataLimit of the command, so that the coordinator can compare</comment>
    <comment type="line">// the repaired data on each replica. These are tracked on each replica.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableHistogram</name></type> <name>repairedDataTrackingOverreadRows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableTimer</name></type> <name>repairedDataTrackingOverreadTime</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** When sampler activated, will track the most frequently read partitions **/</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Sampler</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>topReadPartitionFrequency</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** When sampler activated, will track the most frequently written to partitions **/</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Sampler</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>topWritePartitionFrequency</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** When sampler activated, will track the largest mutations **/</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Sampler</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>topWritePartitionSize</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** When sampler activated, will track the most frequent partitions with cas contention **/</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Sampler</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>topCasPartitionContention</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** When sampler activated, will track the slowest local reads **/</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Sampler</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>topLocalReadQueryTime</name></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>totalNonSystemTablesSize</name><parameter_list>(<parameter><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>predicate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>filtered</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonSystemKeyspaces</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>

            <decl_stmt><decl><type><name>Keyspace</name></type> <name>k</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceInstance</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>SchemaConstants</name><operator>.</operator><name>DISTRIBUTED_KEYSPACE_NAME</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>k</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>k</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReplicationFactor</name><argument_list>()</argument_list></call><operator>.</operator><name>allReplicas</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cf</name> <range>: <expr><call><name><name>k</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>SecondaryIndexManager</name><operator>.</operator><name>isIndexColumnFamily</name></name><argument_list>(<argument><expr><name><name>cf</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cf</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>predicate</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>filtered</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>uncompressedLength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>uncompressedLength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>filtered</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>globalPercentRepaired</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><call><name><name>GLOBAL_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><literal type="string">"PercentRepaired"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                                               <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>Double</name></type> <name>getValue</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name>totalNonSystemTablesSize</name><argument_list>(<argument><expr><name>SSTableReader</name><operator>::</operator><name>isRepaired</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>repaired</name> <init>= <expr><name><name>result</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>total</name> <init>= <expr><name><name>result</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>total</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>repaired</name> <operator>/</operator> <name>total</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr> </then><else>: <expr><literal type="number">100.0</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>globalBytesRepaired</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><call><name><name>GLOBAL_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><literal type="string">"BytesRepaired"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                                           <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>totalNonSystemTablesSize</name><argument_list>(<argument><expr><name>SSTableReader</name><operator>::</operator><name>isRepaired</name></expr></argument>)</argument_list></call><operator>.</operator><name>left</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>globalBytesUnrepaired</name> <init>= 
        <expr><call><name><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><call><name><name>GLOBAL_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><literal type="string">"BytesUnrepaired"</literal></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>totalNonSystemTablesSize</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>isRepaired</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>s</name><operator>.</operator><name>isPendingRepair</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><name>left</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>globalBytesPendingRepair</name> <init>= 
        <expr><call><name><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><call><name><name>GLOBAL_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><literal type="string">"BytesPendingRepair"</literal></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>totalNonSystemTablesSize</name><argument_list>(<argument><expr><name>SSTableReader</name><operator>::</operator><name>isPendingRepair</name></expr></argument>)</argument_list></call><operator>.</operator><name>left</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Meter</name></type> <name>readRepairRequests</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Meter</name></type> <name>shortReadProtectionRequests</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Meter</name></type> <name>replicaFilteringProtectionRequests</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/**
     * This histogram records the maximum number of rows {@link org.apache.cassandra.service.reads.ReplicaFilteringProtection}
     * caches at a point in time per query. With no replica divergence, this is equivalent to the maximum number of
     * cached rows in a single partition during a query. It can be helpful when choosing appropriate values for the
     * replica_filtering_protection thresholds in cassandra.yaml.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Histogram</name></type> <name>rfpRowsCachedPerQuery</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>SamplerType</name></argument>, <argument><name><name>Sampler</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>samplers</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Stores all metrics created that can be used when unregistering
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>ReleasableMetric</name></argument>&gt;</argument_list></name></type> <name>all</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <interface><specifier>private</specifier> interface <name>GetHistogram</name>
    <block>{
        <function_decl><type><name>EstimatedHistogram</name></type> <name>getHistogram</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>reader</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>long</name><index>[]</index></name></type> <name>combineHistograms</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>, <parameter><decl><type><name>GetHistogram</name></type> <name>getHistogram</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>sstables</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name><name>ArrayUtils</name><operator>.</operator><name>EMPTY_LONG_ARRAY</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>firstBucket</name> <init>= <expr><call><name><name>getHistogram</name><operator>.</operator><name>getHistogram</name></name><argument_list>(<argument><expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBuckets</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>firstBucket</name></expr></argument>, <argument><expr><name><name>firstBucket</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>nextBucket</name> <init>= <expr><call><name><name>getHistogram</name><operator>.</operator><name>getHistogram</name></name><argument_list>(<argument><expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBuckets</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>addHistogram</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>nextBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>values</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name><name>long</name><index>[]</index></name></type> <name>addHistogram</name><parameter_list>(<parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>sums</name></decl></parameter>, <parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>buckets</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>buckets</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name><name>sums</name><operator>.</operator><name>length</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>sums</name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>sums</name></expr></argument>, <argument><expr><name><name>buckets</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>buckets</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>sums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>buckets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>sums</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates metrics for given {@link ColumnFamilyStore}.
     *
     * @param cfs ColumnFamilyStore to measure metrics
     */</comment>
    <constructor><specifier>public</specifier> <name>TableMetrics</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>factory</name> <operator>=</operator> <operator>new</operator> <call><name>TableMetricNameFactory</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><literal type="string">"Table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>aliasFactory</name> <operator>=</operator> <operator>new</operator> <call><name>TableMetricNameFactory</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><literal type="string">"ColumnFamily"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>samplers</name> <operator>=</operator> <operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SamplerType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>topReadPartitionFrequency</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>FrequencySampler</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>partitionKeyType</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><name>topWritePartitionFrequency</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>FrequencySampler</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>partitionKeyType</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><name>topWritePartitionSize</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>MaxSampler</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>partitionKeyType</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><name>topCasPartitionContention</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>FrequencySampler</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>partitionKeyType</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><name>topLocalReadQueryTime</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>MaxSampler</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><name>value</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>samplers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SamplerType</name><operator>.</operator><name>READS</name></name></expr></argument>, <argument><expr><name>topReadPartitionFrequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>samplers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SamplerType</name><operator>.</operator><name>WRITES</name></name></expr></argument>, <argument><expr><name>topWritePartitionFrequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>samplers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SamplerType</name><operator>.</operator><name>WRITE_SIZE</name></name></expr></argument>, <argument><expr><name>topWritePartitionSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>samplers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SamplerType</name><operator>.</operator><name>CAS_CONTENTIONS</name></name></expr></argument>, <argument><expr><name>topCasPartitionContention</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>samplers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SamplerType</name><operator>.</operator><name>LOCAL_READ_TIME</name></name></expr></argument>, <argument><expr><name>topLocalReadQueryTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>memtableColumnsCount</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"MemtableColumnsCount"</literal></expr></argument>, 
                                                <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>cfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentMemtable</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOperations</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MemtableOnHeapSize naming deprecated in 4.0</comment>
        <expr_stmt><expr><name>memtableOnHeapDataSize</name> <operator>=</operator> <call><name>createTableGaugeWithDeprecation</name><argument_list>(<argument><expr><literal type="string">"MemtableOnHeapDataSize"</literal></expr></argument>, <argument><expr><literal type="string">"MemtableOnHeapSize"</literal></expr></argument>, 
                                                                 <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>cfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentMemtable</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllocator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onHeap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>owns</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>, 
                                                                 <argument><expr><operator>new</operator> <call><name>GlobalTableGauge</name><argument_list>(<argument><expr><literal type="string">"MemtableOnHeapDataSize"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MemtableOffHeapSize naming deprecated in 4.0</comment>
        <expr_stmt><expr><name>memtableOffHeapDataSize</name> <operator>=</operator> <call><name>createTableGaugeWithDeprecation</name><argument_list>(<argument><expr><literal type="string">"MemtableOffHeapDataSize"</literal></expr></argument>, <argument><expr><literal type="string">"MemtableOffHeapSize"</literal></expr></argument>, 
                                                                  <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>cfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentMemtable</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllocator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>offHeap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>owns</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>, 
                                                                  <argument><expr><operator>new</operator> <call><name>GlobalTableGauge</name><argument_list>(<argument><expr><literal type="string">"MemtableOnHeapDataSize"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>memtableLiveDataSize</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"MemtableLiveDataSize"</literal></expr></argument>, 
                                                <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>cfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentMemtable</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLiveDataSize</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// AllMemtablesHeapSize naming deprecated in 4.0</comment>
        <expr_stmt><expr><name>allMemtablesOnHeapDataSize</name> <operator>=</operator> <call><name>createTableGaugeWithDeprecation</name><argument_list>(<argument><expr><literal type="string">"AllMemtablesOnHeapDataSize"</literal></expr></argument>, <argument><expr><literal type="string">"AllMemtablesHeapSize"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs2</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>concatWithIndexes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>cfs2</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentMemtable</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllocator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onHeap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>owns</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><name>size</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><operator>new</operator> <call><name>GlobalTableGauge</name><argument_list>(<argument><expr><literal type="string">"AllMemtablesOnHeapDataSize"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// AllMemtablesOffHeapSize naming deprecated in 4.0</comment>
        <expr_stmt><expr><name>allMemtablesOffHeapDataSize</name> <operator>=</operator> <call><name>createTableGaugeWithDeprecation</name><argument_list>(<argument><expr><literal type="string">"AllMemtablesOffHeapDataSize"</literal></expr></argument>, <argument><expr><literal type="string">"AllMemtablesOffHeapSize"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs2</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>concatWithIndexes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>cfs2</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentMemtable</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllocator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>offHeap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>owns</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><name>size</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><operator>new</operator> <call><name>GlobalTableGauge</name><argument_list>(<argument><expr><literal type="string">"AllMemtablesOffHeapDataSize"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>allMemtablesLiveDataSize</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"AllMemtablesLiveDataSize"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs2</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>concatWithIndexes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>cfs2</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentMemtable</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLiveDataSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><name>size</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>memtableSwitchCount</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"MemtableSwitchCount"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>estimatedPartitionSizeHistogram</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"EstimatedPartitionSizeHistogram"</literal></expr></argument>, <argument><expr><literal type="string">"EstimatedRowSizeHistogram"</literal></expr></argument>,
                                                           <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>combineHistograms</name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                                                   <argument><expr><name>SSTableReader</name><operator>::</operator><name>getEstimatedPartitionSize</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>estimatedPartitionCount</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"EstimatedPartitionCount"</literal></expr></argument>, <argument><expr><literal type="string">"EstimatedRowCount"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>memtablePartitions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Memtable</name></type> <name>memtable</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllMemtables</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                   <expr_stmt><expr><name>memtablePartitions</name> <operator>+=</operator> <call><name><name>memtable</name><operator>.</operator><name>partitionCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <try>try<init>(<decl><type><name><name>ColumnFamilyStore</name><operator>.</operator><name>RefViewFragment</name></name></type> <name>refViewFragment</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>selectAndReference</name></name><argument_list>(<argument><expr><call><name><name>View</name><operator>.</operator><name>selectFunction</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init>
                <block>{<block_content>
                    <return>return <expr><call><name><name>SSTableReader</name><operator>.</operator><name>getApproximateKeyCount</name></name><argument_list>(<argument><expr><name><name>refViewFragment</name><operator>.</operator><name>sstables</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>memtablePartitions</name></expr>;</return>
                </block_content>}</block></try>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>estimatedColumnCountHistogram</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"EstimatedColumnCountHistogram"</literal></expr></argument>, <argument><expr><literal type="string">"EstimatedColumnCountHistogram"</literal></expr></argument>,
                                                         <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>combineHistograms</name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></argument>, 
                                                                                 <argument><expr><name>SSTableReader</name><operator>::</operator><name>getEstimatedCellPerPartitionCount</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>sstablesPerReadHistogram</name> <operator>=</operator> <call><name>createTableHistogram</name><argument_list>(<argument><expr><literal type="string">"SSTablesPerReadHistogram"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>sstablesPerReadHistogram</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compressionRatio</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"CompressionRatio"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Double</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name>computeCompressionRatio</name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <comment type="line">// global gauge</comment>
        <block>{
            <function><type><specifier>public</specifier> <name>Double</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ks</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>sstables</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>ks</name><operator>.</operator><name>getAllSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name>computeCompressionRatio</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>percentRepaired</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"PercentRepaired"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Double</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>double</name></type> <name>repaired</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>sstable</name><operator>.</operator><name>isRepaired</name></name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>repaired</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>uncompressedLength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>uncompressedLength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><ternary><condition><expr><name>total</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>repaired</name> <operator>/</operator> <name>total</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr> </then><else>: <expr><literal type="number">100.0</literal></expr></else></ternary></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>bytesRepaired</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"BytesRepaired"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name><range>: <expr><call><name><name>Iterables</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SSTableReader</name><operator>::</operator><name>isRepaired</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>uncompressedLength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>size</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>bytesUnrepaired</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"BytesUnrepaired"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name><range>: <expr><call><name><name>Iterables</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>isRepaired</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>s</name><operator>.</operator><name>isPendingRepair</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{
                    <expr><name>size</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>uncompressedLength</name></name><argument_list>()</argument_list></call></expr>;
                }</block>
                <return>return <expr><name>size</name></expr>;</return></for>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>bytesPendingRepair</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"BytesPendingRepair"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name><range>: <expr><call><name><name>Iterables</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SSTableReader</name><operator>::</operator><name>isPendingRepair</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>uncompressedLength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>size</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>readLatency</name> <operator>=</operator> <call><name>createLatencyMetrics</name><argument_list>(<argument><expr><literal type="string">"Read"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>readLatency</name></name></expr></argument>, <argument><expr><name>GLOBAL_READ_LATENCY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>writeLatency</name> <operator>=</operator> <call><name>createLatencyMetrics</name><argument_list>(<argument><expr><literal type="string">"Write"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>writeLatency</name></name></expr></argument>, <argument><expr><name>GLOBAL_WRITE_LATENCY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rangeLatency</name> <operator>=</operator> <call><name>createLatencyMetrics</name><argument_list>(<argument><expr><literal type="string">"Range"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>rangeLatency</name></name></expr></argument>, <argument><expr><name>GLOBAL_RANGE_LATENCY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pendingFlushes</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"PendingFlushes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bytesFlushed</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"BytesFlushed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>compactionBytesWritten</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"CompactionBytesWritten"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pendingCompactions</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"PendingCompactions"</literal></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>cfs</name><operator>.</operator><name>getCompactionStrategyManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEstimatedRemainingTasks</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>liveSSTableCount</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"LiveSSTableCount"</literal></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>cfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>liveSSTables</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>oldVersionSSTableCount</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"OldVersionSSTableCount"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Integer</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getLiveSSTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sstable</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>version</name><operator>.</operator><name>isLatestVersion</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
                <return>return <expr><name>count</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>liveDiskSpaceUsed</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"LiveDiskSpaceUsed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>totalDiskSpaceUsed</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"TotalDiskSpaceUsed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>minPartitionSize</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"MinPartitionSize"</literal></expr></argument>, <argument><expr><literal type="string">"MinRowSize"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>min</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>sstable</name><operator>.</operator><name>getEstimatedPartitionSize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>min</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>sstable</name><operator>.</operator><name>getEstimatedPartitionSize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>min</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>min</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <comment type="line">// global gauge</comment>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>min</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Metric</name></type> <name>cfGauge</name> <range>: <expr><call><name><name>ALL_TABLE_METRICS</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"MinPartitionSize"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Number</name></extends></argument>&gt;</argument_list></name><operator>)</operator> <name>cfGauge</name><operator>)</operator><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>longValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>min</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxPartitionSize</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"MaxPartitionSize"</literal></expr></argument>, <argument><expr><literal type="string">"MaxRowSize"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>sstable</name><operator>.</operator><name>getEstimatedPartitionSize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>max</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>sstable</name><operator>.</operator><name>getEstimatedPartitionSize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>max</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>max</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <comment type="line">// global gauge</comment>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Metric</name></type> <name>cfGauge</name> <range>: <expr><call><name><name>ALL_TABLE_METRICS</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"MaxPartitionSize"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Number</name></extends></argument>&gt;</argument_list></name><operator>)</operator> <name>cfGauge</name><operator>)</operator><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>longValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>max</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>meanPartitionSize</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"MeanPartitionSize"</literal></expr></argument>, <argument><expr><literal type="string">"MeanRowSize"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><call><name><name>sstable</name><operator>.</operator><name>getEstimatedPartitionSize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getEstimatedPartitionSize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mean</name><argument_list>()</argument_list></call> <operator>*</operator> <name>n</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>count</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><ternary><condition><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>sum</name> <operator>/</operator> <name>count</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <comment type="line">// global gauge</comment>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getAllSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><call><name><name>sstable</name><operator>.</operator><name>getEstimatedPartitionSize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getEstimatedPartitionSize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mean</name><argument_list>()</argument_list></call> <operator>*</operator> <name>n</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>count</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <return>return <expr><ternary><condition><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>sum</name> <operator>/</operator> <name>count</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bloomFilterFalsePositives</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"BloomFilterFalsePositives"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name><range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>LIVE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getBloomFilterFalsePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><name>count</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>recentBloomFilterFalsePositives</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"RecentBloomFilterFalsePositives"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>LIVE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getRecentBloomFilterFalsePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><name>count</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bloomFilterFalseRatio</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"BloomFilterFalseRatio"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Double</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>falsePositiveCount</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>truePositiveCount</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>trueNegativeCount</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>LIVE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name>falsePositiveCount</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getBloomFilterFalsePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>truePositiveCount</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getBloomFilterTruePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>trueNegativeCount</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getBloomFilterTrueNegativeCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name>falsePositiveCount</name> <operator>==</operator> <literal type="number">0L</literal> <operator>&amp;&amp;</operator> <name>truePositiveCount</name> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">0d</literal></expr>;</return></block_content></block></if></if_stmt>
                <return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <name>falsePositiveCount</name> <operator>/</operator> <operator>(</operator><name>truePositiveCount</name> <operator>+</operator> <name>falsePositiveCount</name> <operator>+</operator> <name>trueNegativeCount</name><operator>)</operator></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <comment type="line">// global gauge</comment>
        <block>{
            <function><type><specifier>public</specifier> <name>Double</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>falsePositiveCount</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>truePositiveCount</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>trueNegativeCount</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getAllSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>LIVE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><name>falsePositiveCount</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getBloomFilterFalsePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>truePositiveCount</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getBloomFilterTruePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>trueNegativeCount</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getBloomFilterTrueNegativeCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name>falsePositiveCount</name> <operator>==</operator> <literal type="number">0L</literal> <operator>&amp;&amp;</operator> <name>truePositiveCount</name> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">0d</literal></expr>;</return></block_content></block></if></if_stmt>
                <return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <name>falsePositiveCount</name> <operator>/</operator> <operator>(</operator><name>truePositiveCount</name> <operator>+</operator> <name>falsePositiveCount</name> <operator>+</operator> <name>trueNegativeCount</name><operator>)</operator></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>recentBloomFilterFalseRatio</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"RecentBloomFilterFalseRatio"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Double</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>falsePositiveCount</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>truePositiveCount</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>trueNegativeCount</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name><range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>LIVE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name>falsePositiveCount</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getRecentBloomFilterFalsePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>truePositiveCount</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getRecentBloomFilterTruePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>trueNegativeCount</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getRecentBloomFilterTrueNegativeCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name>falsePositiveCount</name> <operator>==</operator> <literal type="number">0L</literal> <operator>&amp;&amp;</operator> <name>truePositiveCount</name> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">0d</literal></expr>;</return></block_content></block></if></if_stmt>
                <return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <name>falsePositiveCount</name> <operator>/</operator> <operator>(</operator><name>truePositiveCount</name> <operator>+</operator> <name>falsePositiveCount</name> <operator>+</operator> <name>trueNegativeCount</name><operator>)</operator></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <comment type="line">// global gauge</comment>
        <block>{
            <function><type><specifier>public</specifier> <name>Double</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>falsePositiveCount</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>truePositiveCount</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>trueNegativeCount</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getAllSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>LIVE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><name>falsePositiveCount</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getRecentBloomFilterFalsePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>truePositiveCount</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getRecentBloomFilterTruePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>trueNegativeCount</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getRecentBloomFilterTrueNegativeCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name>falsePositiveCount</name> <operator>==</operator> <literal type="number">0L</literal> <operator>&amp;&amp;</operator> <name>truePositiveCount</name> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">0d</literal></expr>;</return></block_content></block></if></if_stmt>
                <return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <name>falsePositiveCount</name> <operator>/</operator> <operator>(</operator><name>truePositiveCount</name> <operator>+</operator> <name>falsePositiveCount</name> <operator>+</operator> <name>trueNegativeCount</name><operator>)</operator></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bloomFilterDiskSpaceUsed</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"BloomFilterDiskSpaceUsed"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sst</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>CANONICAL</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name><name>sst</name><operator>.</operator><name>getBloomFilterSerializedSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><name>total</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bloomFilterOffHeapMemoryUsed</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"BloomFilterOffHeapMemoryUsed"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sst</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>LIVE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name><name>sst</name><operator>.</operator><name>getBloomFilterOffHeapSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><name>total</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>indexSummaryOffHeapMemoryUsed</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"IndexSummaryOffHeapMemoryUsed"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sst</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>LIVE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name><name>sst</name><operator>.</operator><name>getIndexSummaryOffHeapSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><name>total</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compressionMetadataOffHeapMemoryUsed</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"CompressionMetadataOffHeapMemoryUsed"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sst</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>LIVE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name><name>sst</name><operator>.</operator><name>getCompressionMetadataOffHeapSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><name>total</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>speculativeRetries</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"SpeculativeRetries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>speculativeFailedRetries</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"SpeculativeFailedRetries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>speculativeInsufficientReplicas</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"SpeculativeInsufficientReplicas"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>speculativeSampleLatencyNanos</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"SpeculativeSampleLatencyNanos"</literal></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>cfs</name><operator>.</operator><name>sampleReadLatencyNanos</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>additionalWrites</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"AdditionalWrites"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>additionalWriteLatencyNanos</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"AdditionalWriteLatencyNanos"</literal></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>cfs</name><operator>.</operator><name>additionalWriteLatencyNanos</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>keyCacheHitRate</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"KeyCacheHitRate"</literal></expr></argument>, <argument><expr><literal type="string">"KeyCacheHitRate"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>RatioGauge</name></super><argument_list>()</argument_list>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>Ratio</name></type> <name>getRatio</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>Ratio</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>getNumerator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDenominator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>protected</specifier> <name>double</name></type> <name>getNumerator</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>hits</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>LIVE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>hits</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getKeyCacheHit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><name>hits</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>protected</specifier> <name>double</name></type> <name>getDenominator</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>requests</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>getSSTables</name></name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>LIVE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>requests</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>getKeyCacheRequest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>requests</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// to avoid NaN.</comment>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tombstoneScannedHistogram</name> <operator>=</operator> <call><name>createTableHistogram</name><argument_list>(<argument><expr><literal type="string">"TombstoneScannedHistogram"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>tombstoneScannedHistogram</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>liveScannedHistogram</name> <operator>=</operator> <call><name>createTableHistogram</name><argument_list>(<argument><expr><literal type="string">"LiveScannedHistogram"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>liveScannedHistogram</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>colUpdateTimeDeltaHistogram</name> <operator>=</operator> <call><name>createTableHistogram</name><argument_list>(<argument><expr><literal type="string">"ColUpdateTimeDeltaHistogram"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>colUpdateTimeDeltaHistogram</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>coordinatorReadLatency</name> <operator>=</operator> <call><name>createTableTimer</name><argument_list>(<argument><expr><literal type="string">"CoordinatorReadLatency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>coordinatorScanLatency</name> <operator>=</operator> <call><name>createTableTimer</name><argument_list>(<argument><expr><literal type="string">"CoordinatorScanLatency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>coordinatorWriteLatency</name> <operator>=</operator> <call><name>createTableTimer</name><argument_list>(<argument><expr><literal type="string">"CoordinatorWriteLatency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>waitingOnFreeMemtableSpace</name> <operator>=</operator> <call><name>createTableHistogram</name><argument_list>(<argument><expr><literal type="string">"WaitingOnFreeMemtableSpace"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// We do not want to capture view mutation specific metrics for a view</comment>
        <comment type="line">// They only makes sense to capture on the base table</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isView</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>viewLockAcquireTime</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>viewReadTime</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>viewLockAcquireTime</name> <operator>=</operator> <call><name>createTableTimer</name><argument_list>(<argument><expr><literal type="string">"ViewLockAcquireTime"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>viewLockAcquireTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>viewReadTime</name> <operator>=</operator> <call><name>createTableTimer</name><argument_list>(<argument><expr><literal type="string">"ViewReadTime"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>viewReadTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>trueSnapshotsSize</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"SnapshotsSize"</literal></expr></argument>, <argument><expr><name>cfs</name><operator>::</operator><name>trueSnapshotsSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowCacheHitOutOfRange</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"RowCacheHitOutOfRange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowCacheHit</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"RowCacheHit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowCacheMiss</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"RowCacheMiss"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tombstoneFailures</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"TombstoneFailures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tombstoneWarnings</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"TombstoneWarnings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>droppedMutations</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"DroppedMutations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>casPrepare</name> <operator>=</operator> <call><name>createLatencyMetrics</name><argument_list>(<argument><expr><literal type="string">"CasPrepare"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>casPrepare</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>casPropose</name> <operator>=</operator> <call><name>createLatencyMetrics</name><argument_list>(<argument><expr><literal type="string">"CasPropose"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>casPropose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>casCommit</name> <operator>=</operator> <call><name>createLatencyMetrics</name><argument_list>(<argument><expr><literal type="string">"CasCommit"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>casCommit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>repairsStarted</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"RepairJobsStarted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>repairsCompleted</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"RepairJobsCompleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>anticompactionTime</name> <operator>=</operator> <call><name>createTableTimer</name><argument_list>(<argument><expr><literal type="string">"AnticompactionTime"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>anticompactionTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>validationTime</name> <operator>=</operator> <call><name>createTableTimer</name><argument_list>(<argument><expr><literal type="string">"ValidationTime"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>validationTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>repairSyncTime</name> <operator>=</operator> <call><name>createTableTimer</name><argument_list>(<argument><expr><literal type="string">"RepairSyncTime"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>repairSyncTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>bytesValidated</name> <operator>=</operator> <call><name>createTableHistogram</name><argument_list>(<argument><expr><literal type="string">"BytesValidated"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>bytesValidated</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>partitionsValidated</name> <operator>=</operator> <call><name>createTableHistogram</name><argument_list>(<argument><expr><literal type="string">"PartitionsValidated"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>partitionsValidated</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bytesAnticompacted</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"BytesAnticompacted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bytesMutatedAnticompaction</name> <operator>=</operator> <call><name>createTableCounter</name><argument_list>(<argument><expr><literal type="string">"BytesMutatedAnticompaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mutatedAnticompactionGauge</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"MutatedAnticompactionGauge"</literal></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;
        <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>bytesMutated</name> <init>= <expr><call><name><name>bytesMutatedAnticompaction</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>bytesAnticomp</name> <init>= <expr><call><name><name>bytesAnticompacted</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>bytesAnticomp</name> <operator>+</operator> <name>bytesMutated</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>bytesMutated</name> <operator>/</operator> <operator>(</operator><name>bytesAnticomp</name> <operator>+</operator> <name>bytesMutated</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><literal type="number">0.0</literal></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>readRepairRequests</name> <operator>=</operator> <call><name>createTableMeter</name><argument_list>(<argument><expr><literal type="string">"ReadRepairRequests"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>shortReadProtectionRequests</name> <operator>=</operator> <call><name>createTableMeter</name><argument_list>(<argument><expr><literal type="string">"ShortReadProtectionRequests"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>replicaFilteringProtectionRequests</name> <operator>=</operator> <call><name>createTableMeter</name><argument_list>(<argument><expr><literal type="string">"ReplicaFilteringProtectionRequests"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rfpRowsCachedPerQuery</name> <operator>=</operator> <call><name>createHistogram</name><argument_list>(<argument><expr><literal type="string">"ReplicaFilteringProtectionRowsCachedPerQuery"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>confirmedRepairedInconsistencies</name> <operator>=</operator> <call><name>createTableMeter</name><argument_list>(<argument><expr><literal type="string">"RepairedDataInconsistenciesConfirmed"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>confirmedRepairedInconsistencies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>unconfirmedRepairedInconsistencies</name> <operator>=</operator> <call><name>createTableMeter</name><argument_list>(<argument><expr><literal type="string">"RepairedDataInconsistenciesUnconfirmed"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>unconfirmedRepairedInconsistencies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>repairedDataTrackingOverreadRows</name> <operator>=</operator> <call><name>createTableHistogram</name><argument_list>(<argument><expr><literal type="string">"RepairedDataTrackingOverreadRows"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>repairedDataTrackingOverreadRows</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>repairedDataTrackingOverreadTime</name> <operator>=</operator> <call><name>createTableTimer</name><argument_list>(<argument><expr><literal type="string">"RepairedDataTrackingOverreadTime"</literal></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>metric</name><operator>.</operator><name>repairedDataTrackingOverreadTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>unleveledSSTables</name> <operator>=</operator> <call><name>createTableGauge</name><argument_list>(<argument><expr><literal type="string">"UnleveledSSTables"</literal></expr></argument>, <argument><expr><name>cfs</name><operator>::</operator><name>getUnleveledSSTables</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
            <comment type="line">// global gauge</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Metric</name></type> <name>cfGauge</name> <range>: <expr><call><name><name>ALL_TABLE_METRICS</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"UnleveledSSTables"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Number</name></extends></argument>&gt;</argument_list></name><operator>)</operator> <name>cfGauge</name><operator>)</operator><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>cnt</name></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateSSTableIterated</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>sstablesPerReadHistogram</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Release all associated metrics.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>release</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>ReleasableMetric</name></type> <name>entry</name> <range>: <expr><name>all</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a gauge that will be part of a merged version of all column families.  The global gauge
     * will merge each CF gauge by adding their values
     */</comment>
    <function><type><specifier>protected</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Number</name></extends></parameter>&gt;</parameter_list> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>createTableGauge</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>gauge</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>createTableGauge</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>gauge</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>GlobalTableGauge</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a gauge that will be part of a merged version of all column families.  The global gauge
     * is defined as the globalGauge parameter
     */</comment>
    <function><type><specifier>protected</specifier> <parameter_list type="generic">&lt;<parameter><name>G</name></parameter>,<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>createTableGauge</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>G</name></argument>&gt;</argument_list></name></type> <name>globalGauge</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>createTableGauge</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>gauge</name></expr></argument>, <argument><expr><name>globalGauge</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <parameter_list type="generic">&lt;<parameter><name>G</name></parameter>,<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>createTableGauge</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>alias</name></decl></parameter>, <parameter><decl><type><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>G</name></argument>&gt;</argument_list></name></type> <name>globalGauge</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>cfGauge</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gauge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>cfGauge</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>globalGauge</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><call><name><name>GLOBAL_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>GLOBAL_ALIAS_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>globalGauge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>cfGauge</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Same as {@link #createTableGauge(String, Gauge, Gauge)} but accepts a deprecated
     * name for a table {@code Gauge}. Prefer that method when deprecation is not necessary.
     *
     * @param name the name of the metric registered with the "Table" type
     * @param deprecated the deprecated name for the metric registered with the "Table" type
     */</comment>
    <function><type><specifier>protected</specifier> <parameter_list type="generic">&lt;<parameter><name>G</name></parameter>,<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>createTableGaugeWithDeprecation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>deprecated</name></decl></parameter>, <parameter><decl><type><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>gauge</name></decl></parameter>, <parameter><decl><type><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>G</name></argument>&gt;</argument_list></name></type> <name>globalGauge</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>deprecated</name> <operator>!=</operator> <literal type="null">null</literal> <operator>:</operator> <literal type="string">"no deprecated metric name provided"</literal></expr>;</assert>
        <assert>assert <expr><name>globalGauge</name> <operator>!=</operator> <literal type="null">null</literal> <operator>:</operator> <literal type="string">"no global Gauge metric provided"</literal></expr>;</assert>
        
        <decl_stmt><decl><type><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>cfGauge</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, 
                                            <argument><expr><name>gauge</name></expr></argument>,
                                            <argument><expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>deprecated</name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>deprecated</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>deprecated</name></expr></argument>, <argument><expr><name>cfGauge</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><call><name><name>GLOBAL_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>globalGauge</name></expr></argument>,
                             <argument><expr><call><name><name>GLOBAL_ALIAS_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>GLOBAL_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>deprecated</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>GLOBAL_ALIAS_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>deprecated</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>cfGauge</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a counter that will also have a global counter thats the sum of all counters across
     * different column families
     */</comment>
    <function><type><specifier>protected</specifier> <name>Counter</name></type> <name>createTableCounter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>createTableCounter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>Counter</name></type> <name>createTableCounter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>alias</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Counter</name></type> <name>cfCounter</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>counter</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>cfCounter</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><call><name><name>GLOBAL_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>GLOBAL_ALIAS_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><operator>new</operator> <class><super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>Metric</name></type> <name>cfGauge</name> <range>: <expr><call><name><name>ALL_TABLE_METRICS</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><name>total</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>Counter</name><operator>)</operator> <name>cfGauge</name><operator>)</operator><operator>.</operator><call><name>getCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <return>return <expr><name>total</name></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>cfCounter</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Meter</name></type> <name>createTableMeter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>createTableMeter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Meter</name></type> <name>createTableMeter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>alias</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Meter</name></type> <name>tableMeter</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>meter</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>tableMeter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>tableMeter</name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name>Histogram</name></type> <name>createHistogram</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>considerZeroes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Histogram</name></type> <name>histogram</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>histogram</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>considerZeroes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>histogram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>histogram</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the compression ratio for the specified SSTables
     *
     * @param sstables the SSTables
     * @return the compression ratio for the specified SSTables
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Double</name></type> <name>computeCompressionRatio</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>compressedLengthSum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>dataLengthSum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>sstables</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>sstable</name><operator>.</operator><name>compression</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// We should not have any sstable which are in an open early mode as the sstable were selected</comment>
                <comment type="line">// using SSTableSet.CANONICAL.</comment>
                <assert>assert <expr><name><name>sstable</name><operator>.</operator><name>openReason</name></name> <operator>!=</operator> <name><name>SSTableReader</name><operator>.</operator><name>OpenReason</name><operator>.</operator><name>EARLY</name></name></expr>;</assert>

                <decl_stmt><decl><type><name>CompressionMetadata</name></type> <name>compressionMetadata</name> <init>= <expr><call><name><name>sstable</name><operator>.</operator><name>getCompressionMetadata</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>compressedLengthSum</name> <operator>+=</operator> <name><name>compressionMetadata</name><operator>.</operator><name>compressedFileLength</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>dataLengthSum</name> <operator>+=</operator> <name><name>compressionMetadata</name><operator>.</operator><name>dataLength</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><ternary><condition><expr><name>dataLengthSum</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>compressedLengthSum</name> <operator>/</operator> <name>dataLengthSum</name></expr> </then><else>: <expr><name><name>MetadataCollector</name><operator>.</operator><name>NO_COMPRESSION_RATIO</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a histogram-like interface that will register both a CF, keyspace and global level
     * histogram and forward any updates to both
     */</comment>
    <function><type><specifier>protected</specifier> <name>TableHistogram</name></type> <name>createTableHistogram</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Histogram</name></type> <name>keyspaceHistogram</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>considerZeroes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>createTableHistogram</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>keyspaceHistogram</name></expr></argument>, <argument><expr><name>considerZeroes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>TableHistogram</name></type> <name>createTableHistogram</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>alias</name></decl></parameter>, <parameter><decl><type><name>Histogram</name></type> <name>keyspaceHistogram</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>considerZeroes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Histogram</name></type> <name>cfHistogram</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>histogram</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>considerZeroes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>cfHistogram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>TableHistogram</name><argument_list>(<argument><expr><name>cfHistogram</name></expr></argument>,
                                  <argument><expr><name>keyspaceHistogram</name></expr></argument>,
                                  <argument><expr><call><name><name>Metrics</name><operator>.</operator><name>histogram</name></name><argument_list>(<argument><expr><call><name><name>GLOBAL_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name><name>GLOBAL_ALIAS_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><name>considerZeroes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>Histogram</name></type> <name>createTableHistogram</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>considerZeroes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>createTableHistogram</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>considerZeroes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>Histogram</name></type> <name>createTableHistogram</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>alias</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>considerZeroes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Histogram</name></type> <name>tableHistogram</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>histogram</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>considerZeroes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>tableHistogram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>tableHistogram</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>TableTimer</name></type> <name>createTableTimer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Timer</name></type> <name>keyspaceTimer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Timer</name></type> <name>cfTimer</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>timer</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>keyspaceTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Timer</name></type> <name>global</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>timer</name></name><argument_list>(<argument><expr><call><name><name>GLOBAL_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>GLOBAL_ALIAS_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>new</operator> <call><name>TableTimer</name><argument_list>(<argument><expr><name>cfTimer</name></expr></argument>, <argument><expr><name>keyspaceTimer</name></expr></argument>, <argument><expr><name>global</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>Timer</name></type> <name>createTableTimer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Timer</name></type> <name>tableTimer</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>timer</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>tableTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>tableTimer</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>TableMeter</name></type> <name>createTableMeter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Meter</name></type> <name>keyspaceMeter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>createTableMeter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>keyspaceMeter</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>TableMeter</name></type> <name>createTableMeter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>alias</name></decl></parameter>, <parameter><decl><type><name>Meter</name></type> <name>keyspaceMeter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Meter</name></type> <name>meter</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>meter</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>meter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>TableMeter</name><argument_list>(<argument><expr><name>meter</name></expr></argument>,
                              <argument><expr><name>keyspaceMeter</name></expr></argument>,
                              <argument><expr><call><name><name>Metrics</name><operator>.</operator><name>meter</name></name><argument_list>(<argument><expr><call><name><name>GLOBAL_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>GLOBAL_ALIAS_FACTORY</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>LatencyMetrics</name></type> <name>createLatencyMetrics</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>namePrefix</name></decl></parameter>, <parameter><decl><type><name>LatencyMetrics</name> <modifier>...</modifier></type> <name>parents</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>LatencyMetrics</name></type> <name>metric</name> <init>= <expr><operator>new</operator> <call><name>LatencyMetrics</name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr><name>namePrefix</name></expr></argument>, <argument><expr><name>parents</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>all</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>metric</name><operator>::</operator><name>release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>metric</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Registers a metric to be removed when unloading CF.
     * @return true if first time metric with that name has been registered
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>alias</name></decl></parameter>, <parameter><decl><type><name>Metric</name></type> <name>metric</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>metric</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Registers a metric to be removed when unloading CF.
     * 
     * @param name the name of the metric registered with the "Table" type
     * @param alias the name of the metric registered with the legacy "ColumnFamily" type
     * @param deprecated an optionally null deprecated name for the metric registered with the "Table"
     * 
     * @return true if first time metric with that name has been registered
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>alias</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>deprecated</name></decl></parameter>, <parameter><decl><type><name>Metric</name></type> <name>metric</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ret</name> <init>= <expr><call><name><name>ALL_TABLE_METRICS</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>ConcurrentHashMap</name><operator>.</operator><name>newKeySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ALL_TABLE_METRICS</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>metric</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>all</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>releaseMetric</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>deprecated</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>releaseMetric</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableMetricName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cfMetricName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableMetricAlias</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>CassandraMetricsRegistry</name><operator>.</operator><name>MetricName</name></name></type> <name>name</name> <init>= <expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>tableMetricName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Metric</name></type> <name>metric</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>getMetrics</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>metric</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Metric will be null if we are releasing a view metric.  Views have null for ViewLockAcquireTime and ViewLockReadTime</comment>
            <expr_stmt><expr><call><name><name>ALL_TABLE_METRICS</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tableMetricName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>metric</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>CassandraMetricsRegistry</name><operator>.</operator><name>MetricName</name></name></type> <name>cfAlias</name> <init>= <expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>cfMetricName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>tableMetricAlias</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Metrics</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>cfAlias</name></expr></argument>, <argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>tableMetricAlias</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>aliasFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>tableMetricAlias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Metrics</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>cfAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TableMeter</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Meter</name><index>[]</index></name></type> <name>all</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Meter</name></type> <name>table</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Meter</name></type> <name>global</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>TableMeter</name><parameter_list>(<parameter><decl><type><name>Meter</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>Meter</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>Meter</name></type> <name>global</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>table</name></name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>global</name></name> <operator>=</operator> <name>global</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>all</name></name> <operator>=</operator> <operator>new</operator> <name><name>Meter</name><index>[]</index></name><block>{<expr><name>table</name></expr>, <expr><name>keyspace</name></expr>, <expr><name>global</name></expr>}</block></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>mark</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Meter</name></type> <name>meter</name> <range>: <expr><name>all</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>meter</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TableHistogram</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Histogram</name><index>[]</index></name></type> <name>all</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Histogram</name></type> <name>cf</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Histogram</name></type> <name>global</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>TableHistogram</name><parameter_list>(<parameter><decl><type><name>Histogram</name></type> <name>cf</name></decl></parameter>, <parameter><decl><type><name>Histogram</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>Histogram</name></type> <name>global</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cf</name></name> <operator>=</operator> <name>cf</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>global</name></name> <operator>=</operator> <name>global</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>all</name></name> <operator>=</operator> <operator>new</operator> <name><name>Histogram</name><index>[]</index></name><block>{<expr><name>cf</name></expr>, <expr><name>keyspace</name></expr>, <expr><name>global</name></expr>}</block></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>i</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <for>for<control>(<init><decl><type><name>Histogram</name></type> <name>histo</name> <range>: <expr><name>all</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>histo</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TableTimer</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Timer</name><index>[]</index></name></type> <name>all</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Timer</name></type> <name>cf</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Timer</name></type> <name>global</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>TableTimer</name><parameter_list>(<parameter><decl><type><name>Timer</name></type> <name>cf</name></decl></parameter>, <parameter><decl><type><name>Timer</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>Timer</name></type> <name>global</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cf</name></name> <operator>=</operator> <name>cf</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>global</name></name> <operator>=</operator> <name>global</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>all</name></name> <operator>=</operator> <operator>new</operator> <name><name>Timer</name><index>[]</index></name><block>{<expr><name>cf</name></expr>, <expr><name>keyspace</name></expr>, <expr><name>global</name></expr>}</block></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <for>for<control>(<init><decl><type><name>Timer</name></type> <name>timer</name> <range>: <expr><name>all</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Context</name></type> <name>time</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Context</name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <class><specifier>public</specifier> <specifier>static</specifier> class <name>Context</name> <super_list><implements>implements <super><name>AutoCloseable</name></super></implements></super_list>
        <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>start</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Timer</name> <index>[]</index></name></type> <name>all</name></decl>;</decl_stmt>

            <constructor><specifier>private</specifier> <name>Context</name><parameter_list>(<parameter><decl><type><name><name>Timer</name> <index>[]</index></name></type> <name>all</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>all</name></name> <operator>=</operator> <name>all</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>duration</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Timer</name></type> <name>t</name> <range>: <expr><name>all</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>

    <class><specifier>static</specifier> class <name>TableMetricNameFactory</name> <super_list><implements>implements <super><name>MetricNameFactory</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspaceName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>tableName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isIndex</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>

        <constructor><name>TableMetricNameFactory</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspaceName</name></name> <operator>=</operator> <call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tableName</name></name> <operator>=</operator> <name><name>cfs</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isIndex</name></name> <operator>=</operator> <call><name><name>cfs</name><operator>.</operator><name>isIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name><name>CassandraMetricsRegistry</name><operator>.</operator><name>MetricName</name></name></type> <name>createMetricName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>metricName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>groupName</name> <init>= <expr><call><name><name>TableMetrics</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><name>isIndex</name></expr> ?</condition><then> <expr><literal type="string">"Index"</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>type</name></name></expr> </then><else>: <expr><name><name>this</name><operator>.</operator><name>type</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>mbeanName</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>groupName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">",keyspace="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">",scope="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">",name="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>metricName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><operator>new</operator> <call><name><name>CassandraMetricsRegistry</name><operator>.</operator><name>MetricName</name></name><argument_list>(<argument><expr><name>groupName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>metricName</name></expr></argument>, <argument><expr><name>keyspaceName</name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>tableName</name></expr></argument>, <argument><expr><call><name><name>mbeanName</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>static</specifier> class <name>AllTableMetricNameFactory</name> <super_list><implements>implements <super><name>MetricNameFactory</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>
        <constructor><specifier>public</specifier> <name>AllTableMetricNameFactory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name><name>CassandraMetricsRegistry</name><operator>.</operator><name>MetricName</name></name></type> <name>createMetricName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>metricName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>groupName</name> <init>= <expr><call><name><name>TableMetrics</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getPackage</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>mbeanName</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>groupName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbeanName</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">",name="</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>metricName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name><name>CassandraMetricsRegistry</name><operator>.</operator><name>MetricName</name></name><argument_list>(<argument><expr><name>groupName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>metricName</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><call><name><name>mbeanName</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <interface><annotation>@<name>FunctionalInterface</name></annotation>
    <specifier>public</specifier> interface <name>ReleasableMetric</name>
    <block>{
        <function_decl><type><name>void</name></type> <name>release</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>GlobalTableGauge</name> <super_list><implements>implements <super><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>GlobalTableGauge</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>Long</name></type> <name>getValue</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Metric</name></type> <name>cfGauge</name> <range>: <expr><call><name><name>ALL_TABLE_METRICS</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>total</name> <operator>=</operator> <name>total</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Number</name></extends></argument>&gt;</argument_list></name><operator>)</operator> <name>cfGauge</name><operator>)</operator><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>longValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>total</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
