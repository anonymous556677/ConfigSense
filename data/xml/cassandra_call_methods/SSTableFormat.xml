<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/io/sstable/format/SSTableFormat.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>CharMatcher</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>RowIndexEntry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SerializationHeader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>big</name><operator>.</operator><name>BigFormat</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Provides the accessors to data on disk.
 */</comment>
<interface><specifier>public</specifier> interface <name>SSTableFormat</name>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>boolean</name></type> <name>enableSSTableDevelopmentTestMode</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.test.sstableformatdevelopment"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <function_decl><type><name>Version</name></type> <name>getLatestVersion</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>Version</name></type> <name>getVersion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name><name>SSTableWriter</name><operator>.</operator><name>Factory</name></name></type> <name>getWriterFactory</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name><name>SSTableReader</name><operator>.</operator><name>Factory</name></name></type> <name>getReaderFactory</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name><name>RowIndexEntry</name><operator>.</operator><name><name>IndexSerializer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>getIndexSerializer</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>Version</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>)</parameter_list>;</function_decl>

    <enum><specifier>public</specifier> <specifier>static</specifier> enum <name>Type</name>
    <block>{
        <comment type="line">//The original sstable format</comment>
        <decl><name>BIG</name><argument_list>(<argument><expr><literal type="string">"big"</literal></expr></argument>, <argument><expr><name><name>BigFormat</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></decl>;

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>SSTableFormat</name></type> <name>info</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Type</name></type> <name>current</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>BIG</name></expr>;</return>
        </block_content>}</block></function>

        <constructor><specifier>private</specifier> <name>Type</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>SSTableFormat</name></type> <name>info</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">//Since format comes right after generation</comment>
            <comment type="line">//we disallow formats with numeric names</comment>
            <assert>assert <expr><operator>!</operator><call><name><name>CharMatcher</name><operator>.</operator><name>digit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>matchesAllOf</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</assert>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Type</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Type</name></type> <name>valid</name> <range>: <expr><call><name><name>Type</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>valid</name><operator>.</operator><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>valid</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"No Type constant "</literal> <operator>+</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></function>
    }</block></enum>
}</block></interface>
</unit>
