<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/gms/Gossiper.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReentrantLock</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>BooleanSupplier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Supplier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Throwables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFutureTask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Uninterruptibles</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>JMXEnabledSingleThreadExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>NoPayload</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>CassandraVersion</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExecutorUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExpiringMemoizingSupplier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MBeanWrapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NoSpamLogger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>FastThreadLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>DebuggableScheduledThreadPoolExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>JMXEnabledThreadPoolExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SystemKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>RequestCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>CassandraVersion</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExecutorUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JVMStabilityInspector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MBeanWrapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NoSpamLogger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>RecomputingSupplier</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>GOSSIPER_QUARANTINE_DELAY</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>NoPayload</name><operator>.</operator><name>noPayload</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>ECHO_REQ</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>GOSSIP_DIGEST_SYN</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This module is responsible for Gossiping information for the local endpoint. This abstraction
 * maintains the list of live and dead endpoints. Periodically i.e. every 1 second this module
 * chooses a random node and initiates a round of Gossip with it. A round of Gossip involves 3
 * rounds of messaging. For instance if node A wants to initiate a round of Gossip with node B
 * it starts off by sending node B a GossipDigestSynMessage. Node B on receipt of this message
 * sends node A a GossipDigestAckMessage. On receipt of this message node A sends node B a
 * GossipDigestAck2Message which completes a round of Gossip. This module as and when it hears one
 * of the three above mentioned messages updates the Failure Detector with the liveness information.
 * Upon hearing a GossipShutdownMessage, this module will instantly mark the remote node as down in
 * the Failure Detector.
 *
 * This class is not threadsafe and any state changes should happen in the gossip stage.
 */</comment>

<class><specifier>public</specifier> class <name>Gossiper</name> <super_list><implements>implements <super><name>IFailureDetectionEventListener</name></super>, <super><name>GossiperMBean</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MBEAN_NAME</name> <init>= <expr><literal type="string">"org.apache.cassandra.net:type=Gossiper"</literal></expr></init></decl>;</decl_stmt>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Props</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DISABLE_THREAD_VALIDATION</name> <init>= <expr><literal type="string">"cassandra.gossip.disable_thread_validation"</literal></expr></init></decl>;</decl_stmt>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DebuggableScheduledThreadPoolExecutor</name></type> <name>executor</name> <init>= <expr><operator>new</operator> <call><name>DebuggableScheduledThreadPoolExecutor</name><argument_list>(<argument><expr><literal type="string">"GossipTasks"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ApplicationState</name><index>[]</index></name></type> <name>STATES</name> <init>= <expr><call><name><name>ApplicationState</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>DEAD_STATES</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>REMOVING_TOKEN</name></name></expr></argument>, <argument><expr><name><name>VersionedValue</name><operator>.</operator><name>REMOVED_TOKEN</name></name></expr></argument>,
                                                          <argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_LEFT</name></name></expr></argument>, <argument><expr><name><name>VersionedValue</name><operator>.</operator><name>HIBERNATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>SILENT_SHUTDOWN_STATES</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <static>static
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SILENT_SHUTDOWN_STATES</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>DEAD_STATES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SILENT_SHUTDOWN_STATES</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_BOOTSTRAPPING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SILENT_SHUTDOWN_STATES</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_BOOTSTRAPPING_REPLACE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ADMINISTRATIVELY_INACTIVE_STATES</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>HIBERNATE</name></name></expr></argument>,
                                                                                       <argument><expr><name><name>VersionedValue</name><operator>.</operator><name>REMOVED_TOKEN</name></name></expr></argument>,
                                                                                       <argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name><name>ScheduledFuture</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>scheduledGossipTask</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ReentrantLock</name></type> <name>taskLock</name> <init>= <expr><operator>new</operator> <call><name>ReentrantLock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>intervalInMillis</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>QUARANTINE_DELAY</name> <init>= <expr><call><name><name>GOSSIPER_QUARANTINE_DELAY</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>StorageService</name><operator>.</operator><name>RING_DELAY</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Gossiper</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NoSpamLogger</name></type> <name>noSpamLogger</name> <init>= <expr><call><name><name>NoSpamLogger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><literal type="number">15L</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Gossiper</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>Gossiper</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Timestamp to prevent processing any in-flight messages for we've not send any SYN yet, see CASSANDRA-12653.</comment>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>firstSynSendAt</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>aVeryLongTime</name> <init>= <expr><call><name>getVeryLongTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Maximimum difference between generation value and local time we are willing to accept about a peer</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_GENERATION_DIFFERENCE</name> <init>= <expr><literal type="number">86400</literal> <operator>*</operator> <literal type="number">365</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>fatClientTimeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Random</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* subscribers for interest in EndpointState change */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IEndpointStateChangeSubscriber</name></argument>&gt;</argument_list></name></type> <name>subscribers</name> <init>= <expr><operator>new</operator> <call><name><name>CopyOnWriteArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* live member set */</comment>
    <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>liveEndpoints</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentSkipListSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* unreachable member set */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>unreachableEndpoints</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* initial seeds for joining the cluster */</comment>
    <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>seeds</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentSkipListSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* map where key is the endpoint and value is the state associated with the endpoint */</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>ConcurrentMap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>endpointStateMap</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* map where key is endpoint and value is timestamp when this endpoint was removed from
     * gossip. We will ignore any gossip regarding these endpoints for QUARANTINE_DELAY time
     * after removal to prevent nodes from falsely reincarnating during the time when removal
     * gossip gets propagated to all nodes */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>justRemovedEndpoints</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>expireTimeEndpointMap</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>inShadowRound</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// seeds gathered during shadow round that indicated to be in the shadow round phase as well</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>seedsInShadowRound</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentSkipListSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// endpoint states as gathered during shadow round</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>endpointShadowStateMap</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>lastProcessedMessageAt</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This property is initially set to {@code true} which means that we have no information about the other nodes.
     * Once all nodes are on at least this node version, it becomes {@code false}, which means that we are not
     * upgrading from the previous version (major, minor).
     *
     * This property and anything that checks it should be removed in 5.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>upgradeInProgressPossible</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearUnsafe</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>unreachableEndpoints</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>liveEndpoints</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>justRemovedEndpoints</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expireTimeEndpointMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>endpointStateMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>endpointShadowStateMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>seedsInShadowRound</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// returns true when the node does not know the existence of other nodes.</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isLoneNode</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>epStates</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>epStates</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>epStates</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Supplier</name><argument_list type="generic">&lt;<argument><name><name>ExpiringMemoizingSupplier</name><operator>.</operator><name><name>ReturnValue</name><argument_list type="generic">&lt;<argument><name>CassandraVersion</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>upgradeFromVersionSupplier</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt;
    <block>{<block_content>
        <comment type="line">// Once there are no prior version nodes we don't need to keep rechecking</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>upgradeInProgressPossible</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name><name>ExpiringMemoizingSupplier</name><operator>.</operator><name><name>Memoized</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>CassandraVersion</name></type> <name>minVersion</name> <init>= <expr><name><name>SystemKeyspace</name><operator>.</operator><name>CURRENT_VERSION</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Skip the round if the gossiper has not started yet</comment>
        <comment type="line">// Otherwise, upgradeInProgressPossible can be set to false wrongly.</comment>
        <comment type="line">// If we don't know any epstate we don't know anything about the cluster.</comment>
        <comment type="line">// If we only know about ourselves, we can assume that version is CURRENT_VERSION</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEnabled</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isLoneNode</name><argument_list>(<argument><expr><name>endpointStateMap</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>ExpiringMemoizingSupplier</name><operator>.</operator><name><name>NotMemoized</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>(<argument><expr><name>minVersion</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Check the release version of all the peers it heard of. Not necessary the peer that it has/had contacted with.</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>allHostsHaveKnownVersion</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>host</name> <range>: <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CassandraVersion</name></type> <name>version</name> <init>= <expr><call><name>getReleaseVersion</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">//Raced with changes to gossip state, wait until next iteration</comment>
            <if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>allHostsHaveKnownVersion</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>minVersion</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>minVersion</name> <operator>=</operator> <name>version</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>minVersion</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>CURRENT_VERSION</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name><name>ExpiringMemoizingSupplier</name><operator>.</operator><name><name>Memoized</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>(<argument><expr><name>minVersion</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>allHostsHaveKnownVersion</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name><name>ExpiringMemoizingSupplier</name><operator>.</operator><name><name>NotMemoized</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>(<argument><expr><name>minVersion</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>upgradeInProgressPossible</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name><name>ExpiringMemoizingSupplier</name><operator>.</operator><name><name>Memoized</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>CassandraVersion</name></argument>&gt;</argument_list></name></type> <name>upgradeFromVersionMemoized</name> <init>= <expr><call><name><name>ExpiringMemoizingSupplier</name><operator>.</operator><name>memoizeWithExpiration</name></name><argument_list>(<argument><expr><name>upgradeFromVersionSupplier</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>expireUpgradeFromVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>upgradeInProgressPossible</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name><name>ExpiringMemoizingSupplier</name><argument_list type="generic">&lt;<argument><name>CassandraVersion</name></argument>&gt;</argument_list></name><operator>)</operator> <name>upgradeFromVersionMemoized</name><operator>)</operator><operator>.</operator><call><name>expire</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>disableThreadValidation</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Props</name><operator>.</operator><name>DISABLE_THREAD_VALIDATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>getVeryLongTime</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>newVLT</name> <init>=  <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.very_long_time_ms"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>newVLT</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Overriding aVeryLongTime to {}ms"</literal></expr></argument>, <argument><expr><name>newVLT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>newVLT</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">259200</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</return> <comment type="line">// 3 days</comment>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isInGossipStage</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>JMXEnabledSingleThreadExecutor</name><operator>)</operator> <call><name><name>Stage</name><operator>.</operator><name>GOSSIP</name><operator>.</operator><name>executor</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>isExecutedBy</name><argument_list>(<argument><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkProperThreadForStateMutation</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>disableThreadValidation</name> <operator>||</operator> <call><name>isInGossipStage</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>IllegalStateException</name></type> <name>e</name> <init>= <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Attempting gossip state mutation from illegal thread: "</literal> <operator>+</operator> <call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>strictRuntimeChecks</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>noSpamLogger</name><operator>.</operator><name>getStatement</name></name><argument_list>(<argument><expr><call><name><name>Throwables</name><operator>.</operator><name>getStackTraceAsString</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>error</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <class><specifier>private</specifier> class <name>GossipTask</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <comment type="line">//wait on messaging service to start listening</comment>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>waitUntilListening</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>taskLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* Update the local heartbeat counter. */</comment>
                <expr_stmt><expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getHeartBeatState</name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateHeartBeat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"My heartbeat is now {}"</literal></expr></argument>, <argument><expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getHeartBeatState</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeartBeatVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>GossipDigest</name></argument>&gt;</argument_list></name></type> <name>gDigests</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>makeRandomGossipDigest</name></name><argument_list>(<argument><expr><name>gDigests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>gDigests</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>GossipDigestSyn</name></type> <name>digestSynMessage</name> <init>= <expr><operator>new</operator> <call><name>GossipDigestSyn</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                           <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getPartitionerName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                           <argument><expr><name>gDigests</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>GossipDigestSyn</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>GOSSIP_DIGEST_SYN</name></expr></argument>, <argument><expr><name>digestSynMessage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="block">/* Gossip to some random live member */</comment>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>gossipedToSeed</name> <init>= <expr><call><name>doGossipToLiveMember</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="block">/* Gossip to some unreachable member with some probability to check if he is back up */</comment>
                    <expr_stmt><expr><call><name>maybeGossipToUnreachableMember</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block">/* Gossip to a seed if we did not do so above, or we have seen less nodes
                       than there are seeds.  This prevents partitions where each group of nodes
                       is only gossiping to a subset of the seeds.

                       The most straightforward check would be to check that all the seeds have been
                       verified either as live or unreachable.  To avoid that computation each round,
                       we reason that:

                       either all the live nodes are seeds, in which case non-seeds that come online
                       will introduce themselves to a member of the ring by definition,

                       or there is at least one non-seed node in the list, in which case eventually
                       someone will gossip to it, and then do a gossip to a random seed from the
                       gossipedToSeed check.

                       See CASSANDRA-150 for more exposition. */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gossipedToSeed</name> <operator>||</operator> <call><name><name>liveEndpoints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>seeds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>maybeGossipToSeed</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt><expr><call><name>doStatusCheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Gossip error"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch>
            <finally>finally
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>taskLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>RecomputingSupplier</name><argument_list type="generic">&lt;<argument><name>CassandraVersion</name></argument>&gt;</argument_list></name></type> <name>minVersionSupplier</name> <init>= <expr><operator>new</operator> <call><name><name>RecomputingSupplier</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>computeMinVersion</name></expr></argument>, <argument><expr><name>executor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><annotation>@<name>VisibleForTesting</name></annotation>
    <specifier>public</specifier> <name>Gossiper</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>registerJmx</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// half of QUARATINE_DELAY, to ensure justRemovedEndpoints has enough leeway to prevent re-gossip</comment>
        <expr_stmt><expr><name>fatClientTimeout</name> <operator>=</operator> <operator>(</operator><name>QUARANTINE_DELAY</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <comment type="block">/* register with the Failure Detector for receiving Failure detector events */</comment>
        <expr_stmt><expr><call><name><name>FailureDetector</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerFailureDetectionEventListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Register this instance with JMX</comment>
        <if_stmt><if>if <condition>(<expr><name>registerJmx</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>MBeanWrapper</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerMBean</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>MBEAN_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>subscribers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>IEndpointStateChangeSubscriber</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>onJoin</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>state</name></decl></parameter>)</parameter_list>
	    <block>{<block_content>
                <expr_stmt><expr><call><name>maybeRecompute</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>onAlive</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>state</name></decl></parameter>)</parameter_list>
	    <block>{<block_content>
                <expr_stmt><expr><call><name>maybeRecompute</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>void</name></type> <name>maybeRecompute</name><parameter_list>(<parameter><decl><type><name>EndpointState</name></type> <name>state</name></decl></parameter>)</parameter_list>
	    <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RELEASE_VERSION</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>minVersionSupplier</name><operator>.</operator><name>recompute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>onChange</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>ApplicationState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>VersionedValue</name></type> <name>value</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>ApplicationState</name><operator>.</operator><name>RELEASE_VERSION</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>minVersionSupplier</name><operator>.</operator><name>recompute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLastProcessedMessageAt</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeInMillis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastProcessedMessageAt</name></name> <operator>=</operator> <name>timeInMillis</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>seenAnySeed</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>seeds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name>VersionedValue</name></type> <name>internalIp</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>INTERNAL_IP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>VersionedValue</name></type> <name>internalIpAndPort</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>INTERNAL_ADDRESS_AND_PORT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>internalIpAndPort</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>endpoint</name> <operator>=</operator> <call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name><name>internalIpAndPort</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>internalIp</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>endpoint</name> <operator>=</operator> <call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name><name>internalIp</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>endpoint</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>seeds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Register for interesting state changes.
     *
     * @param subscriber module which implements the IEndpointStateChangeSubscriber
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name>IEndpointStateChangeSubscriber</name></type> <name>subscriber</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>subscribers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>subscriber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Unregister interest for state changes.
     *
     * @param subscriber module which implements the IEndpointStateChangeSubscriber
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unregister</name><parameter_list>(<parameter><decl><type><name>IEndpointStateChangeSubscriber</name></type> <name>subscriber</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>subscribers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>subscriber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return a list of live gossip participants, including fat clients
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>getLiveMembers</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>liveMembers</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>liveEndpoints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>liveMembers</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>liveMembers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>liveMembers</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return a list of live ring members.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>getLiveTokenOwners</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLiveRingMembers</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return a list of unreachable gossip participants, including fat clients
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>getUnreachableMembers</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>unreachableEndpoints</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return a list of unreachable token owners
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>getUnreachableTokenOwners</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>tokenOwners</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <range>: <expr><call><name><name>unreachableEndpoints</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isMember</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>tokenOwners</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>tokenOwners</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getEndpointDowntime</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Long</name></type> <name>downtime</name> <init>= <expr><call><name><name>unreachableEndpoints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>downtime</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>downtime</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0L</literal></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isShutdown</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>VersionedValue</name></type> <name>versionedValue</name> <init>= <expr><call><name><name>epState</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>versionedValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>versionedValue</name> <operator>=</operator> <call><name><name>epState</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>versionedValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><name><name>versionedValue</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>pieces</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>DELIMITER_STR</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><operator>(</operator><name><name>pieces</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>
        <decl_stmt><decl><type><name>String</name></type> <name>state</name> <init>= <expr><name><name>pieces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>state</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>SHUTDOWN</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>runInGossipStageBlocking</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// run immediately if we're already in the gossip stage</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isInGossipStage</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>ListenableFutureTask</name></type> <name>task</name> <init>= <expr><call><name><name>ListenableFutureTask</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>runnable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Stage</name><operator>.</operator><name>GOSSIP</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> | <type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method is part of IFailureDetectionEventListener interface. This is invoked
     * by the Failure Detector when it convicts an end point.
     *
     * @param endpoint end point that is convicted.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>convict</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>phi</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>runInGossipStageBlocking</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>epState</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Convicting {} with status {} - alive {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name>getGossipStatus</name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>epState</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>isShutdown</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>markAsShutdown</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>markDead</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>GossiperDiagnostics</name><operator>.</operator><name>convicted</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method is used to mark a node as shutdown; that is it gracefully exited on its own and told us about it
     * @param endpoint endpoint that has shut itself down
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>markAsShutdown</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkProperThreadForStateMutation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>VersionedValue</name></type> <name>shutdown</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>shutdown</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>addApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><name>shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>addApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>shutdown</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>addApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RPC_READY</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>rpcReady</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forceHighestPossibleVersionUnsafe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>markDead</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FailureDetector</name><operator>.</operator><name>instance</name><operator>.</operator><name>forceConviction</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>GossiperDiagnostics</name><operator>.</operator><name>markedAsShutdown</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>IEndpointStateChangeSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onChange</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><name>shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Marked {} as shutdown"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return either: the greatest heartbeat or application state
     *
     * @param epState
     * @return
     */</comment>
    <function><type><name>int</name></type> <name>getMaxEndpointStateVersion</name><parameter_list>(<parameter><decl><type><name>EndpointState</name></type> <name>epState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>maxVersion</name> <init>= <expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeartBeatVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></name></type> <name>state</name> <range>: <expr><call><name><name>epState</name><operator>.</operator><name>states</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>maxVersion</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxVersion</name></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>maxVersion</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes the endpoint from gossip completely
     *
     * @param endpoint endpoint to be removed from the current membership.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>evictFromMembership</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkProperThreadForStateMutation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>unreachableEndpoints</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>endpointStateMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expireTimeEndpointMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FailureDetector</name><operator>.</operator><name>instance</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>quarantineEndpoint</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"evicting {} from gossip"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>GossiperDiagnostics</name><operator>.</operator><name>evictedFromMembership</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes the endpoint from Gossip but retains endpoint state
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkProperThreadForStateMutation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// do subscribers first so anything in the subscriber that depends on gossiper state won't get confused</comment>
        <for>for <control>(<init><decl><type><name>IEndpointStateChangeSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onRemove</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <if_stmt><if>if<condition>(<expr><call><name><name>seeds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>buildSeedsList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>seeds</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"removed {} from seeds, updated seeds list = {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>seeds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>seeds</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Seeds list is now empty!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>liveEndpoints</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>unreachableEndpoints</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>versions</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>quarantineEndpoint</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>closeOutbound</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeInbound</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"removing endpoint {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>GossiperDiagnostics</name><operator>.</operator><name>removedEndpoint</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Quarantines the endpoint for QUARANTINE_DELAY
     *
     * @param endpoint
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>quarantineEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>quarantineEndpoint</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Quarantines the endpoint until quarantineExpiration + QUARANTINE_DELAY
     *
     * @param endpoint
     * @param quarantineExpiration
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>quarantineEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>quarantineExpiration</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>justRemovedEndpoints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>quarantineExpiration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>GossiperDiagnostics</name><operator>.</operator><name>quarantinedEndpoint</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>quarantineExpiration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Quarantine endpoint specifically for replacement purposes.
     * @param endpoint
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>replacementQuarantine</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// remember, quarantineEndpoint will effectively already add QUARANTINE_DELAY, so this is 2x</comment>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>quarantineEndpoint</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>QUARANTINE_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>GossiperDiagnostics</name><operator>.</operator><name>replacementQuarantine</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the Endpoint and evict immediately, to avoid gossiping about this node.
     * This should only be called when a token is taken over by a new IP address.
     *
     * @param endpoint The endpoint that has been replaced
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>replacedEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkProperThreadForStateMutation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeEndpoint</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>evictFromMembership</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>replacementQuarantine</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>GossiperDiagnostics</name><operator>.</operator><name>replacedEndpoint</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The gossip digest is built based on randomization
     * rather than just looping through the collection of live endpoints.
     *
     * @param gDigests list of Gossip Digests.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>makeRandomGossipDigest</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GossipDigest</name></argument>&gt;</argument_list></name></type> <name>gDigests</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>generation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>maxVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// local epstate will be part of endpointStateMap</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpoints</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>endpointStateMap</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>shuffle</name></name><argument_list>(<argument><expr><name>endpoints</name></expr></argument>, <argument><expr><name>random</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <range>: <expr><name>endpoints</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>epState</name> <operator>=</operator> <call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>generation</name> <operator>=</operator> <call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxVersion</name> <operator>=</operator> <call><name>getMaxEndpointStateVersion</name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>gDigests</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GossipDigest</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>generation</name></expr></argument>, <argument><expr><name>maxVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>GossipDigest</name></type> <name>gDigest</name> <range>: <expr><name>gDigests</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>gDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Gossip Digests are : {}"</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method will begin removing an existing endpoint from the cluster by spoofing its state
     * This should never be called unless this coordinator has had 'removenode' invoked
     *
     * @param endpoint    - the endpoint being removed
     * @param hostId      - the ID of the host being removed
     * @param localHostId - my own host ID for replication coordination
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>advertiseRemoving</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>hostId</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>localHostId</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// remember this node's generation</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>generation</name> <init>= <expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Removing host: {}"</literal></expr></argument>, <argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Sleeping for {}ms to ensure {} does not change"</literal></expr></argument>, <argument><expr><name><name>StorageService</name><operator>.</operator><name>RING_DELAY</name></name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><name><name>StorageService</name><operator>.</operator><name>RING_DELAY</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// make sure it did not change</comment>
        <expr_stmt><expr><name>epState</name> <operator>=</operator> <call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>generation</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Endpoint "</literal> <operator>+</operator> <name>endpoint</name> <operator>+</operator> <literal type="string">" generation changed while trying to remove it"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <comment type="line">// update the other node's generation to mimic it as if it had changed it itself</comment>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Advertising removal for {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>updateTimestamp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// make sure we don't evict it too soon</comment>
        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forceNewerGenerationUnsafe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>states</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>removingNonlocal</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>removingNonlocal</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>REMOVAL_COORDINATOR</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>removalCoordinator</name></name><argument_list>(<argument><expr><name>localHostId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>addApplicationStates</name></name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>endpointStateMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handles switching the endpoint's state from REMOVING_TOKEN to REMOVED_TOKEN
     * This should only be called after advertiseRemoving
     *
     * @param endpoint
     * @param hostId
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>advertiseTokenRemoved</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>hostId</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>updateTimestamp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// make sure we don't evict it too soon</comment>
        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forceNewerGenerationUnsafe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>expireTime</name> <init>= <expr><call><name>computeExpireTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>addApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>removedNonlocal</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>, <argument><expr><name>expireTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>addApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>removedNonlocal</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>, <argument><expr><name>expireTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Completing removal of {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addExpireTimeForEndpoint</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>expireTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>endpointStateMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// ensure at least one gossip round occurs before returning</comment>
        <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><name>intervalInMillis</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsafeAssassinateEndpoint</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Gossiper.unsafeAssassinateEndpoint is deprecated and will be removed in the next release; use assassinateEndpoint instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assassinateEndpoint</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Do not call this method unless you know what you are doing.
     * It will try extremely hard to obliterate any endpoint from the ring,
     * even if it does not know about it.
     *
     * @param address
     * @throws UnknownHostException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>assassinateEndpoint</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <init>= <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>runInGossipStageBlocking</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Assassinating {} via gossip"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>epState</name> <operator>=</operator> <operator>new</operator> <call><name>EndpointState</name><argument_list>(<argument><expr><operator>new</operator> <call><name>HeartBeatState</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">60000</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>generation</name> <init>= <expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>heartbeat</name> <init>= <expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeartBeatVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Sleeping for {}ms to ensure {} does not change"</literal></expr></argument>, <argument><expr><name><name>StorageService</name><operator>.</operator><name>RING_DELAY</name></name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><name><name>StorageService</name><operator>.</operator><name>RING_DELAY</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// make sure it did not change</comment>
                <decl_stmt><decl><type><name>EndpointState</name></type> <name>newState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>newState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Endpoint {} disappeared while trying to assassinate, continuing anyway"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><call><name><name>newState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>generation</name></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Endpoint still alive: "</literal> <operator>+</operator> <name>endpoint</name> <operator>+</operator> <literal type="string">" generation changed while trying to assassinate it"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><call><name><name>newState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeartBeatVersion</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>heartbeat</name></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Endpoint still alive: "</literal> <operator>+</operator> <name>endpoint</name> <operator>+</operator> <literal type="string">" heartbeat changed while trying to assassinate it"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>updateTimestamp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// make sure we don't evict it too soon</comment>
                <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forceNewerGenerationUnsafe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTokens</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>th</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>tokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Trying to assassinate an endpoint {} that does not have any tokens assigned. This should not have happened, trying to continue with a random token."</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>partitioner</name><operator>.</operator><name>getRandomToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>expireTime</name> <init>= <expr><call><name>computeExpireTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>addApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>left</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>expireTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>addApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>left</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><call><name>computeExpireTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>handleMajorStateChange</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><name>intervalInMillis</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Finished assassinating {}"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isKnownEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCurrentGenerationNumber</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getHeartBeatState</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if the chosen target was also a seed. False otherwise
     *
     * @param message
     * @param epSet   a set of endpoint from which a random endpoint is chosen.
     * @return true if the chosen endpoint is also a seed.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>sendGossip</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>GossipDigestSyn</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>epSet</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpoints</name> <init>= <expr><call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>epSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>endpoints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block">/* Generate a random number from 0 -&gt; size */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>to</name> <init>= <expr><call><name><name>endpoints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Sending a GossipDigestSyn to {} ..."</literal></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>firstSynSendAt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>firstSynSendAt</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>send</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>isSeed</name> <init>= <expr><call><name><name>seeds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>GossiperDiagnostics</name><operator>.</operator><name>sendGossipDigestSyn</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>isSeed</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/* Sends a Gossip message to a live member and returns true if the recipient was a seed */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>doGossipToLiveMember</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>GossipDigestSyn</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>liveEndpoints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name>sendGossip</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>liveEndpoints</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/* Sends a Gossip message to an unreachable member */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>maybeGossipToUnreachableMember</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>GossipDigestSyn</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>liveEndpointCount</name> <init>= <expr><call><name><name>liveEndpoints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unreachableEndpointCount</name> <init>= <expr><call><name><name>unreachableEndpoints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>unreachableEndpointCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* based on some probability */</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>prob</name> <init>= <expr><name>unreachableEndpointCount</name> <operator>/</operator> <operator>(</operator><name>liveEndpointCount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>randDbl</name> <init>= <expr><call><name><name>random</name><operator>.</operator><name>nextDouble</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>randDbl</name> <operator>&lt;</operator> <name>prob</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>sendGossip</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>Sets</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><call><name><name>unreachableEndpoints</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ep</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name>isDeadState</name><argument_list>(<argument><expr><call><name>getEndpointStateMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block">/* Possibly gossip to a seed for facilitating partition healing */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>maybeGossipToSeed</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>GossipDigestSyn</name></argument>&gt;</argument_list></name></type> <name>prod</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>seeds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>seeds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>liveEndpoints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>sendGossip</name><argument_list>(<argument><expr><name>prod</name></expr></argument>, <argument><expr><name>seeds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* Gossip with the seed with some probability. */</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>probability</name> <init>= <expr><call><name><name>seeds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><call><name><name>liveEndpoints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>unreachableEndpoints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>randDbl</name> <init>= <expr><call><name><name>random</name><operator>.</operator><name>nextDouble</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>randDbl</name> <operator>&lt;=</operator> <name>probability</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>sendGossip</name><argument_list>(<argument><expr><name>prod</name></expr></argument>, <argument><expr><name>seeds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGossipOnlyMember</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>!</operator><call><name>isDeadState</name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isMember</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this node can safely be started and join the ring.
     * If the node is bootstrapping, examines gossip state for any previous status to decide whether
     * it's safe to allow this node to start and bootstrap. If not bootstrapping, compares the host ID
     * that the node itself has (obtained by reading from system.local or generated if not present)
     * with the host ID obtained from gossip for the endpoint address (if any). This latter case
     * prevents a non-bootstrapping, new node from being started with the same address of a
     * previously started, but currently down predecessor.
     *
     * @param endpoint - the endpoint to check
     * @param localHostUUID - the host id to check
     * @param isBootstrapping - whether the node intends to bootstrap when joining
     * @param epStates - endpoint states in the cluster
     * @return true if it is safe to start the node, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSafeForStartup</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>localHostUUID</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isBootstrapping</name></decl></parameter>,
                                    <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>epStates</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>epStates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// if there's no previous state, we're good</comment>
        <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>status</name> <init>= <expr><call><name>getGossipStatus</name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>status</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>HIBERNATE</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>SystemKeyspace</name><operator>.</operator><name>bootstrapComplete</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"A node with the same IP in hibernate status was detected. Was a replacement already attempted?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//the node was previously removed from the cluster</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isDeadState</name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>isBootstrapping</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// these states are not allowed to join the cluster as it would not be safe</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>unsafeStatuses</name> <init>= <expr><operator>new</operator> <class><super><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{<block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <comment type="line">// failed bootstrap but we did start gossiping</comment>
                <constructor_decl><name>add</name><parameter_list>(<parameter><decl><type><name><name>VersionedValue</name><operator>.</operator><name>STATUS_NORMAL</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl> <comment type="line">// node is legit in the cluster or it was stopped with kill -9</comment>
                <constructor_decl><name>add</name><parameter_list>(<parameter><decl><type><name><name>VersionedValue</name><operator>.</operator><name>SHUTDOWN</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>      <comment type="line">// node was shutdown</comment>
            </block_content>}</block>}</block></class></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>!</operator><call><name><name>unsafeStatuses</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// if the previous UUID matches what we currently have (i.e. what was read from</comment>
            <comment type="line">// system.local at startup), then we're good to start up. Otherwise, something</comment>
            <comment type="line">// is amiss and we need to replace the previous node</comment>
            <decl_stmt><decl><type><name>VersionedValue</name></type> <name>previous</name> <init>= <expr><call><name><name>epState</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>HOST_ID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name><name>previous</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>localHostUUID</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>void</name></type> <name>doStatusCheck</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Performing status check ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>nowNano</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>pending</name> <init>= <expr><operator>(</operator><operator>(</operator><name>JMXEnabledThreadPoolExecutor</name><operator>)</operator> <call><name><name>Stage</name><operator>.</operator><name>GOSSIP</name><operator>.</operator><name>executor</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name><name>metrics</name><operator>.</operator><name>pendingTasks</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pending</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lastProcessedMessageAt</name> <operator>&lt;</operator> <name>now</name> <operator>-</operator> <literal type="number">1000</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// if some new messages just arrived, give the executor some time to work on them</comment>
            <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// still behind?  something's broke</comment>
            <if_stmt><if>if <condition>(<expr><name>lastProcessedMessageAt</name> <operator>&lt;</operator> <name>now</name> <operator>-</operator> <literal type="number">1000</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Gossip stage has {} pending tasks; skipping status check (no nodes will be marked down)"</literal></expr></argument>, <argument><expr><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>eps</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <range>: <expr><name>eps</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>endpoint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>FailureDetector</name><operator>.</operator><name>instance</name><operator>.</operator><name>interpret</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// check if this is a fat client. fat clients are removed automatically from</comment>
                <comment type="line">// gossip after FatClientTimeout.  Do not remove dead states here.</comment>
                <if_stmt><if>if <condition>(<expr><call><name>isGossipOnlyMember</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>justRemovedEndpoints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call>
                    <operator>&amp;&amp;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><name>nowNano</name> <operator>-</operator> <call><name><name>epState</name><operator>.</operator><name>getUpdateTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>fatClientTimeout</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"FatClient {} has been silent for {}ms, removing from gossip"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>fatClientTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>runInGossipStageBlocking</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isGossipOnlyMember</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <comment type="line">// updating gossip and token metadata are not atomic, but rely on the single threaded gossip stage</comment>
                            <comment type="line">// since status checks are done outside the gossip stage, need to confirm the state of the endpoint</comment>
                            <comment type="line">// to make sure that the previous read data was correct</comment>
                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Race condition marking {} as a FatClient; ignoring"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <return>return;</return>
                        </block_content>}</block></if></if_stmt>                        
                        <expr_stmt><expr><call><name>removeEndpoint</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// will put it in justRemovedEndpoints to respect quarantine delay</comment>
                        <expr_stmt><expr><call><name>evictFromMembership</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// can get rid of the state immediately</comment>
                    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// check for dead state removal</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>expireTime</name> <init>= <expr><call><name>getExpireTimeForEndpoint</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>epState</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>now</name> <operator>&gt;</operator> <name>expireTime</name><operator>)</operator>
                    <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isMember</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"time is expiring for endpoint : {} ({})"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>expireTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>runInGossipStageBlocking</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>evictFromMembership</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>justRemovedEndpoints</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>justRemovedEndpoints</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>-</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>QUARANTINE_DELAY</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"{} elapsed, {} gossip quarantine over"</literal></expr></argument>, <argument><expr><name>QUARANTINE_DELAY</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>justRemovedEndpoints</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>long</name></type> <name>getExpireTimeForEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="block">/* default expireTime is aVeryLongTime */</comment>
        <decl_stmt><decl><type><name>Long</name></type> <name>storedTime</name> <init>= <expr><call><name><name>expireTimeEndpointMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>storedTime</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name>computeExpireTime</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>storedTime</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EndpointState</name></type> <name>getEndpointStateForEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>getEndpoints</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>endpointStateMap</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getEndpointCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>getEndpointStateMap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>endpointStateMap</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>getJustRemovedEndpoints</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>justRemovedEndpoints</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>getUnreachableEndpoints</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>unreachableEndpoints</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>getSeedsInShadowRound</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>seedsInShadowRound</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>long</name></type> <name>getLastProcessedMessageAt</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>lastProcessedMessageAt</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getHostId</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getHostId</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>endpointStateMap</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getHostId</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>epStates</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name><name>epStates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>HOST_ID</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The value for the provided application state for the provided endpoint as currently known by this Gossip instance.
     *
     * @param endpoint the endpoint from which to get the endpoint state.
     * @param state the endpoint state to get.
     * @return the value of the application state {@code state} for {@code endpoint}, or {@code null} if either
     * {@code endpoint} is not known by Gossip or has no value for {@code state}.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getApplicationState</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>ApplicationState</name></type> <name>state</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>VersionedValue</name></type> <name>value</name> <init>= <expr><call><name><name>epState</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name><name>value</name><operator>.</operator><name>value</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>EndpointState</name></type> <name>getStateForVersionBiggerThan</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>forEndpoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>forEndpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>reqdEndpointState</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Here we try to include the Heart Beat state only if it is
             * greater than the version passed in. It might happen that
             * the heart beat version maybe lesser than the version passed
             * in and some application state has a version that is greater
             * than the version passed in. In this case we also send the old
             * heart beat and throw it away on the receiver if it is redundant.
            */</comment>
            <decl_stmt><decl><type><name>HeartBeatState</name></type> <name>heartBeatState</name> <init>= <expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>localHbGeneration</name> <init>= <expr><call><name><name>heartBeatState</name><operator>.</operator><name>getGeneration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>localHbVersion</name> <init>= <expr><call><name><name>heartBeatState</name><operator>.</operator><name>getHeartBeatVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>localHbVersion</name> <operator>&gt;</operator> <name>version</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>reqdEndpointState</name> <operator>=</operator> <operator>new</operator> <call><name>EndpointState</name><argument_list>(<argument><expr><operator>new</operator> <call><name>HeartBeatState</name><argument_list>(<argument><expr><name>localHbGeneration</name></expr></argument>, <argument><expr><name>localHbVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"local heartbeat version {} greater than {} for {}"</literal></expr></argument>, <argument><expr><name>localHbVersion</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>forEndpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* Accumulate all application states whose versions are greater than "version" variable */</comment>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>states</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>epState</name><operator>.</operator><name>states</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>VersionedValue</name></type> <name>value</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>value</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <name>version</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>reqdEndpointState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>reqdEndpointState</name> <operator>=</operator> <operator>new</operator> <call><name>EndpointState</name><argument_list>(<argument><expr><operator>new</operator> <call><name>HeartBeatState</name><argument_list>(<argument><expr><name>localHbGeneration</name></expr></argument>, <argument><expr><name>localHbVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>ApplicationState</name></type> <name>key</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Adding state {}: {}"</literal></expr></argument> , <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>reqdEndpointState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>reqdEndpointState</name><operator>.</operator><name>addApplicationStates</name></name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>reqdEndpointState</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * determine which endpoint started up earlier
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareEndpointStartup</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>addr1</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>addr2</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>ep1</name> <init>= <expr><call><name>getEndpointStateForEndpoint</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>ep2</name> <init>= <expr><call><name>getEndpointStateForEndpoint</name><argument_list>(<argument><expr><name>addr2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>ep1</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>ep2</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <return>return <expr><call><name><name>ep1</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>ep2</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>notifyFailureDetector</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>remoteEpStateMap</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>remoteEpStateMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>notifyFailureDetector</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>notifyFailureDetector</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>remoteEndpointState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>localEndpointState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/*
         * If the local endpoint state exists then report to the FD only
         * if the versions workout.
        */</comment>
        <if_stmt><if>if <condition>(<expr><name>localEndpointState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>IFailureDetector</name></type> <name>fd</name> <init>= <expr><name><name>FailureDetector</name><operator>.</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>localGeneration</name> <init>= <expr><call><name><name>localEndpointState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>remoteGeneration</name> <init>= <expr><call><name><name>remoteEndpointState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>remoteGeneration</name> <operator>&gt;</operator> <name>localGeneration</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>localEndpointState</name><operator>.</operator><name>updateTimestamp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// this node was dead and the generation changed, this indicates a reboot, or possibly a takeover</comment>
                <comment type="line">// we will clean the fd intervals for it and relearn them</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>localEndpointState</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Clearing interval times for {} due to generation change"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>report</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>remoteGeneration</name> <operator>==</operator> <name>localGeneration</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>localVersion</name> <init>= <expr><call><name>getMaxEndpointStateVersion</name><argument_list>(<argument><expr><name>localEndpointState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>remoteVersion</name> <init>= <expr><call><name><name>remoteEndpointState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeartBeatVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>remoteVersion</name> <operator>&gt;</operator> <name>localVersion</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>localEndpointState</name><operator>.</operator><name>updateTimestamp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// just a version change, report to the fd</comment>
                    <expr_stmt><expr><call><name><name>fd</name><operator>.</operator><name>report</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>markAlive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>EndpointState</name></type> <name>localState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>localState</name><operator>.</operator><name>markDead</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>NoPayload</name></argument>&gt;</argument_list></name></type> <name>echoMessage</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>ECHO_REQ</name></expr></argument>, <argument><expr><name>noPayload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Sending ECHO_REQ to {}"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RequestCallback</name></type> <name>echoHandler</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>msg</name></decl></parameter></parameter_list> -&gt;
        <block>{<block_content>
            <comment type="line">// force processing of the echo response onto the gossip stage, as it comes in on the REQUEST_RESPONSE stage</comment>
            <expr_stmt><expr><call><name>runInGossipStageBlocking</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>realMarkAlive</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>localState</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWithCallback</name><argument_list>(<argument><expr><name>echoMessage</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>echoHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>GossiperDiagnostics</name><operator>.</operator><name>markedAlive</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>localState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>realMarkAlive</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>EndpointState</name></type> <name>localState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkProperThreadForStateMutation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"marking as alive {}"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>localState</name><operator>.</operator><name>markAlive</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>localState</name><operator>.</operator><name>updateTimestamp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// prevents doStatusCheck from racing us and evicting if it was down &gt; aVeryLongTime</comment>
        <expr_stmt><expr><call><name><name>liveEndpoints</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>unreachableEndpoints</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expireTimeEndpointMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"removing expire time for endpoint : {}"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"InetAddress {} is now UP"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>IEndpointStateChangeSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onAlive</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>localState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Notified {}"</literal></expr></argument>, <argument><expr><name>subscribers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>GossiperDiagnostics</name><operator>.</operator><name>realMarkedAlive</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>localState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>markDead</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>localState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkProperThreadForStateMutation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"marking as down {}"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>silentlyMarkDead</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>localState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"InetAddress {} is now DOWN"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>IEndpointStateChangeSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onDead</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>localState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Notified {}"</literal></expr></argument>, <argument><expr><name>subscribers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>GossiperDiagnostics</name><operator>.</operator><name>markedDead</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>localState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Used by {@link #markDead(InetAddressAndPort, EndpointState)} and {@link #addSavedEndpoint(InetAddressAndPort)}
     * to register a endpoint as dead.  This method is "silent" to avoid triggering listeners, diagnostics, or logs
     * on startup via addSavedEndpoint.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>silentlyMarkDead</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>localState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>localState</name><operator>.</operator><name>markDead</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>liveEndpoints</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>unreachableEndpoints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method is called whenever there is a "big" change in ep state (a generation change for a known node).
     *
     * @param ep      endpoint
     * @param epState EndpointState for the endpoint
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleMajorStateChange</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>epState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkProperThreadForStateMutation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>localEpState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isDeadState</name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>localEpState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Node {} has restarted, now UP"</literal></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Node {} is now part of the cluster"</literal></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Adding endpoint state for {}"</literal></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>endpointStateMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>localEpState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>   <comment type="line">// the node restarted: it is up to the subscriber to take whatever action is necessary</comment>
            <for>for <control>(<init><decl><type><name>IEndpointStateChangeSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onRestart</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>localEpState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isDeadState</name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>markAlive</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Not marking {} alive due to dead state"</literal></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>markDead</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <for>for <control>(<init><decl><type><name>IEndpointStateChangeSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onJoin</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <comment type="line">// check this at the end so nodes will learn about the endpoint</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isShutdown</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>markAsShutdown</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>GossiperDiagnostics</name><operator>.</operator><name>majorStateChangeHandled</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAlive</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name>getEndpointStateForEndpoint</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>epState</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isDeadState</name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDeadState</name><parameter_list>(<parameter><decl><type><name>EndpointState</name></type> <name>epState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>status</name> <init>= <expr><call><name>getGossipStatus</name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>status</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>DEAD_STATES</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSilentShutdownState</name><parameter_list>(<parameter><decl><type><name>EndpointState</name></type> <name>epState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>status</name> <init>= <expr><call><name>getGossipStatus</name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>status</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>SILENT_SHUTDOWN_STATES</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAdministrativelyInactiveState</name><parameter_list>(<parameter><decl><type><name>EndpointState</name></type> <name>epState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>status</name> <init>= <expr><call><name>getGossipStatus</name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>status</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>ADMINISTRATIVELY_INACTIVE_STATES</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAdministrativelyInactiveState</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name>getEndpointStateForEndpoint</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// if the end point cannot be found, treat as inactive</comment>
        <return>return <expr><call><name>isAdministrativelyInactiveState</name><argument_list>(<argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getGossipStatus</name><parameter_list>(<parameter><decl><type><name>EndpointState</name></type> <name>epState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>VersionedValue</name></type> <name>versionedValue</name> <init>= <expr><call><name><name>epState</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>versionedValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>versionedValue</name> <operator>=</operator> <call><name><name>epState</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>versionedValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><literal type="string">""</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><name><name>versionedValue</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>pieces</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>DELIMITER_STR</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><operator>(</operator><name><name>pieces</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>
        <return>return <expr><name><name>pieces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>applyStateLocally</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>epStateMap</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkProperThreadForStateMutation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>epStateMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>ep</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>( <expr><call><name><name>ep</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isInShadowRound</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>justRemovedEndpoints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring gossip for {} because it is quarantined"</literal></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>EndpointState</name></type> <name>localEpStatePtr</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>EndpointState</name></type> <name>remoteState</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasMajorVersion3Nodes</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>remoteState</name><operator>.</operator><name>removeMajorVersion3LegacyApplicationStates</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block">/*
                If state does not exist just add it. If it does then add it if the remote generation is greater.
                If there is a generation tie, attempt to break it by heartbeat version.
            */</comment>
            <if_stmt><if>if <condition>(<expr><name>localEpStatePtr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>localGeneration</name> <init>= <expr><call><name><name>localEpStatePtr</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>remoteGeneration</name> <init>= <expr><call><name><name>remoteState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>localTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"{} local generation {}, remote generation {}"</literal></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>localGeneration</name></expr></argument>, <argument><expr><name>remoteGeneration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// We measure generation drift against local time, based on the fact that generation is initialized by time</comment>
                <if_stmt><if>if <condition>(<expr><name>remoteGeneration</name> <operator>&gt;</operator> <name>localTime</name> <operator>+</operator> <name>MAX_GENERATION_DIFFERENCE</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// assume some peer has corrupted memory and is broadcasting an unbelievable generation about another peer (or itself)</comment>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"received an invalid gossip generation for peer {}; local time = {}, received generation = {}"</literal></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>localTime</name></expr></argument>, <argument><expr><name>remoteGeneration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>remoteGeneration</name> <operator>&gt;</operator> <name>localGeneration</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Updating heartbeat state generation to {} from {} for {}"</literal></expr></argument>, <argument><expr><name>remoteGeneration</name></expr></argument>, <argument><expr><name>localGeneration</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <comment type="line">// major state change will handle the update by inserting the remote state directly</comment>
                    <expr_stmt><expr><call><name>handleMajorStateChange</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>remoteState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>remoteGeneration</name> <operator>==</operator> <name>localGeneration</name></expr>)</condition> <comment type="line">// generation has not changed, apply new states</comment>
                <block>{<block_content>
                    <comment type="block">/* find maximum state */</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>localMaxVersion</name> <init>= <expr><call><name>getMaxEndpointStateVersion</name><argument_list>(<argument><expr><name>localEpStatePtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>remoteMaxVersion</name> <init>= <expr><call><name>getMaxEndpointStateVersion</name><argument_list>(<argument><expr><name>remoteState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>remoteMaxVersion</name> <operator>&gt;</operator> <name>localMaxVersion</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// apply states, but do not notify since there is no major change</comment>
                        <expr_stmt><expr><call><name>applyNewStates</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>localEpStatePtr</name></expr></argument>, <argument><expr><name>remoteState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring remote version {} &lt;= {} for {}"</literal></expr></argument>, <argument><expr><name>remoteMaxVersion</name></expr></argument>, <argument><expr><name>localMaxVersion</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>localEpStatePtr</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isDeadState</name><argument_list>(<argument><expr><name>localEpStatePtr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// unless of course, it was dead</comment>
                        <expr_stmt><expr><call><name>markAlive</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>localEpStatePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring remote generation {} &lt; {}"</literal></expr></argument>, <argument><expr><name>remoteGeneration</name></expr></argument>, <argument><expr><name>localGeneration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// this is a new node, report it to the FD in case it is the first time we are seeing it AND it's not alive</comment>
                <expr_stmt><expr><call><name><name>FailureDetector</name><operator>.</operator><name>instance</name><operator>.</operator><name>report</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>handleMajorStateChange</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>remoteState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>applyNewStates</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>localState</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>remoteState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// don't assert here, since if the node restarts the version will go back to zero</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>oldVersion</name> <init>= <expr><call><name><name>localState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeartBeatVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>localState</name><operator>.</operator><name>setHeartBeatState</name></name><argument_list>(<argument><expr><call><name><name>remoteState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Updating heartbeat state version to {} from {} for {} ..."</literal></expr></argument>, <argument><expr><call><name><name>localState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeartBeatVersion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oldVersion</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>remoteStates</name> <init>= <expr><call><name><name>remoteState</name><operator>.</operator><name>states</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><call><name><name>remoteState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>localState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr>;</assert>


        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>updatedStates</name> <init>= <expr><call><name><name>remoteStates</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>entry</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
            <comment type="line">// filter out the states that are already up to date (has the same or higher version)</comment>
            <decl_stmt><decl><type><name>VersionedValue</name></type> <name>local</name> <init>= <expr><call><name><name>localState</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name>local</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>local</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>version</name><operator>)</operator></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>updatedStates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><name>updatedStates</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Updating {} state version to {} for {}"</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>version</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>localState</name><operator>.</operator><name>addApplicationStates</name></name><argument_list>(<argument><expr><name>updatedStates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// get rid of legacy fields once the cluster is not in mixed mode</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasMajorVersion3Nodes</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>localState</name><operator>.</operator><name>removeMajorVersion3LegacyApplicationStates</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>updatedEntry</name> <range>: <expr><name>updatedStates</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <comment type="line">// filters out legacy change notifications</comment>
            <comment type="line">// only if local state already indicates that the peer has the new fields</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ApplicationState</name><operator>.</operator><name>INTERNAL_IP</name></name> <operator>==</operator> <call><name><name>updatedEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>localState</name><operator>.</operator><name>containsApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>INTERNAL_ADDRESS_AND_PORT</name></name></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>||</operator><operator>(</operator><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name> <operator>==</operator> <call><name><name>updatedEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>localState</name><operator>.</operator><name>containsApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>||</operator> <operator>(</operator><name><name>ApplicationState</name><operator>.</operator><name>RPC_ADDRESS</name></name> <operator>==</operator> <call><name><name>updatedEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>localState</name><operator>.</operator><name>containsApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>NATIVE_ADDRESS_AND_PORT</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>doOnChangeNotifications</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name><name>updatedEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>updatedEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="line">// notify that a local application state is going to change (doesn't get triggered for remote changes)</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>doBeforeChangeNotifications</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>epState</name></decl></parameter>, <parameter><decl><type><name>ApplicationState</name></type> <name>apState</name></decl></parameter>, <parameter><decl><type><name>VersionedValue</name></type> <name>newValue</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>IEndpointStateChangeSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>beforeChange</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>, <argument><expr><name>apState</name></expr></argument>, <argument><expr><name>newValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="line">// notify that an application state has changed</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>doOnChangeNotifications</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ApplicationState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>VersionedValue</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>IEndpointStateChangeSubscriber</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onChange</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block">/* Request all the state for the endpoint in the gDigest */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>requestAll</name><parameter_list>(<parameter><decl><type><name>GossipDigest</name></type> <name>gDigest</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GossipDigest</name></argument>&gt;</argument_list></name></type> <name>deltaGossipDigestList</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remoteGeneration</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="block">/* We are here since we have no data for this endpoint locally so request everthing. */</comment>
        <expr_stmt><expr><call><name><name>deltaGossipDigestList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GossipDigest</name><argument_list>(<argument><expr><call><name><name>gDigest</name><operator>.</operator><name>getEndpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>remoteGeneration</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"requestAll for {}"</literal></expr></argument>, <argument><expr><call><name><name>gDigest</name><operator>.</operator><name>getEndpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block">/* Send all the data with version greater than maxRemoteVersion */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>sendAll</name><parameter_list>(<parameter><decl><type><name>GossipDigest</name></type> <name>gDigest</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>deltaEpStateMap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxRemoteVersion</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>localEpStatePtr</name> <init>= <expr><call><name>getStateForVersionBiggerThan</name><argument_list>(<argument><expr><call><name><name>gDigest</name><operator>.</operator><name>getEndpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>maxRemoteVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>localEpStatePtr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>deltaEpStateMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>gDigest</name><operator>.</operator><name>getEndpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>localEpStatePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Used during a shadow round to collect the current state; this method clones the current state, no filtering
     * is done.
     *
     * During the shadow round its desirable to return gossip state for remote instances that were created by this
     * process also known as "empty", this is done for host replacement to be able to replace downed hosts that are
     * in the ring but have no state in gossip (see CASSANDRA-16213).
     *
     * This method is different than {@link #examineGossiper(List, List, Map)} with respect to how "empty" states are
     * dealt with; they are kept.
     */</comment>
    <function><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>examineShadowState</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Shadow request received, adding all states"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>e</name> <range>: <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><operator>new</operator> <call><name>EndpointState</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>isEmptyWithoutStatus</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// We have no app states loaded for this endpoint, but we may well have</comment>
                <comment type="line">// some state persisted in the system keyspace. This can happen in the case</comment>
                <comment type="line">// of a full cluster bounce where one or more nodes fail to come up. As</comment>
                <comment type="line">// gossip state is transient, the peers which do successfully start will be</comment>
                <comment type="line">// aware of the failed nodes thanks to StorageService::initServer calling</comment>
                <comment type="line">// Gossiper.instance::addSavedEndpoint with every endpoint in TokenMetadata,</comment>
                <comment type="line">// which itself is populated from the system tables at startup.</comment>
                <comment type="line">// Here we know that a peer which is starting up and attempting to perform</comment>
                <comment type="line">// a shadow round of gossip. This peer is in one of two states:</comment>
                <comment type="line">// * it is replacing a down node, in which case it needs to learn the tokens</comment>
                <comment type="line">//   of the down node and optionally its host id.</comment>
                <comment type="line">// * it needs to check that no other instance is already associated with its</comment>
                <comment type="line">//   endpoint address and port.</comment>
                <comment type="line">// To support both of these cases, we can add the tokens and host id from</comment>
                <comment type="line">// the system table, if they exist. These are only ever persisted to the system</comment>
                <comment type="line">// table when the actual node to which they apply enters the UP/NORMAL state.</comment>
                <comment type="line">// This invariant will be preserved as nodes never persist or propagate the</comment>
                <comment type="line">// results of a shadow round, so this communication will be strictly limited</comment>
                <comment type="line">// to this node and the node performing the shadow round.</comment>
                <decl_stmt><decl><type><name>UUID</name></type> <name>hostId</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>loadHostIds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>hostId</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>addApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>HOST_ID</name></name></expr></argument>,
                                                 <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>hostId</name></name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>loadTokens</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>tokens</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>tokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>addApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>TOKENS</name></name></expr></argument>,
                                                 <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>tokens</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>map</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method is used to figure the state that the Gossiper has but Gossipee doesn't. The delta digests
     * and the delta state are built up.
     *
     * When a {@link EndpointState} is "empty" then it is filtered out and not added to the delta state (see CASSANDRA-16213).
     */</comment>
    <function><type><name>void</name></type> <name>examineGossiper</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GossipDigest</name></argument>&gt;</argument_list></name></type> <name>gDigestList</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GossipDigest</name></argument>&gt;</argument_list></name></type> <name>deltaGossipDigestList</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>deltaEpStateMap</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><operator>!</operator><call><name><name>gDigestList</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>:</operator> <literal type="string">"examineGossiper called with empty digest list"</literal></expr>;</assert>
        <for>for <control>( <init><decl><type><name>GossipDigest</name></type> <name>gDigest</name> <range>: <expr><name>gDigestList</name></expr></range></decl></init> )</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>remoteGeneration</name> <init>= <expr><call><name><name>gDigest</name><operator>.</operator><name>getGeneration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>maxRemoteVersion</name> <init>= <expr><call><name><name>gDigest</name><operator>.</operator><name>getMaxVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="block">/* Get state associated with the end point in digest */</comment>
            <decl_stmt><decl><type><name>EndpointState</name></type> <name>epStatePtr</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>gDigest</name><operator>.</operator><name>getEndpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="block">/*
                Here we need to fire a GossipDigestAckMessage. If we have some data associated with this endpoint locally
                then we follow the "if" path of the logic. If we have absolutely nothing for this endpoint we need to
                request all the data for this endpoint.
            */</comment>
            <if_stmt><if>if <condition>(<expr><name>epStatePtr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>localGeneration</name> <init>= <expr><call><name><name>epStatePtr</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="block">/* get the max version of all keys in the state associated with this endpoint */</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>maxLocalVersion</name> <init>= <expr><call><name>getMaxEndpointStateVersion</name><argument_list>(<argument><expr><name>epStatePtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>remoteGeneration</name> <operator>==</operator> <name>localGeneration</name> <operator>&amp;&amp;</operator> <name>maxRemoteVersion</name> <operator>==</operator> <name>maxLocalVersion</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>remoteGeneration</name> <operator>&gt;</operator> <name>localGeneration</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* we request everything from the gossiper */</comment>
                    <expr_stmt><expr><call><name>requestAll</name><argument_list>(<argument><expr><name>gDigest</name></expr></argument>, <argument><expr><name>deltaGossipDigestList</name></expr></argument>, <argument><expr><name>remoteGeneration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>remoteGeneration</name> <operator>&lt;</operator> <name>localGeneration</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* send all data with generation = localgeneration and version &gt; -1 */</comment>
                    <expr_stmt><expr><call><name>sendAll</name><argument_list>(<argument><expr><name>gDigest</name></expr></argument>, <argument><expr><name>deltaEpStateMap</name></expr></argument>, <argument><expr><name><name>HeartBeatState</name><operator>.</operator><name>EMPTY_VERSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>remoteGeneration</name> <operator>==</operator> <name>localGeneration</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/*
                        If the max remote version is greater then we request the remote endpoint send us all the data
                        for this endpoint with version greater than the max version number we have locally for this
                        endpoint.
                        If the max remote version is lesser, then we send all the data we have locally for this endpoint
                        with version greater than the max remote version.
                    */</comment>
                    <if_stmt><if>if <condition>(<expr><name>maxRemoteVersion</name> <operator>&gt;</operator> <name>maxLocalVersion</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>deltaGossipDigestList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GossipDigest</name><argument_list>(<argument><expr><call><name><name>gDigest</name><operator>.</operator><name>getEndpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>remoteGeneration</name></expr></argument>, <argument><expr><name>maxLocalVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>maxRemoteVersion</name> <operator>&lt;</operator> <name>maxLocalVersion</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="block">/* send all data with generation = localgeneration and version &gt; maxRemoteVersion */</comment>
                        <expr_stmt><expr><call><name>sendAll</name><argument_list>(<argument><expr><name>gDigest</name></expr></argument>, <argument><expr><name>deltaEpStateMap</name></expr></argument>, <argument><expr><name>maxRemoteVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* We are here since we have no data for this endpoint locally so request everything. */</comment>
                <expr_stmt><expr><call><name>requestAll</name><argument_list>(<argument><expr><name>gDigest</name></expr></argument>, <argument><expr><name>deltaGossipDigestList</name></expr></argument>, <argument><expr><name>remoteGeneration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>generationNumber</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>start</name><argument_list>(<argument><expr><name>generationNumber</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Start the gossiper with the generation number, preloading the map of application states before starting
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>generationNbr</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>preloadLocalStates</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>buildSeedsList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* initialize the heartbeat state for this localEndpoint */</comment>
        <expr_stmt><expr><call><name>maybeInitializeLocalState</name><argument_list>(<argument><expr><name>generationNbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>localState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>localState</name><operator>.</operator><name>addApplicationStates</name></name><argument_list>(<argument><expr><name>preloadLocalStates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>minVersionSupplier</name><operator>.</operator><name>recompute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//notify snitches that Gossiper is about to start</comment>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>gossiperStarting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"gossip started with generation {}"</literal></expr></argument>, <argument><expr><call><name><name>localState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>scheduledGossipTask</name> <operator>=</operator> <call><name><name>executor</name><operator>.</operator><name>scheduleWithFixedDelay</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GossipTask</name><argument_list>()</argument_list></call></expr></argument>,
                                                              <argument><expr><name><name>Gossiper</name><operator>.</operator><name>intervalInMillis</name></name></expr></argument>,
                                                              <argument><expr><name><name>Gossiper</name><operator>.</operator><name>intervalInMillis</name></name></expr></argument>,
                                                              <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>doShadowRound</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>doShadowRound</name><argument_list>(<argument><expr><name><name>Collections</name><operator>.</operator><name>EMPTY_SET</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Do a single 'shadow' round of gossip by retrieving endpoint states that will be stored exclusively in the
     * map return value, instead of endpointStateMap.
     *
     * Used when preparing to join the ring:
     * &lt;ul&gt;
     *     &lt;li&gt;when replacing a node, to get and assume its tokens&lt;/li&gt;
     *     &lt;li&gt;when joining, to check that the local host id matches any previous id for the endpoint address&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * Method is synchronized, as we use an in-progress flag to indicate that shadow round must be cleared
     * again by calling {@link Gossiper#maybeFinishShadowRound(InetAddressAndPort, boolean, Map)}. This will update
     * {@link Gossiper#endpointShadowStateMap} with received values, in order to return an immutable copy to the
     * caller of {@link Gossiper#doShadowRound()}. Therefor only a single shadow round execution is permitted at
     * the same time.
     *
     * @param peers Additional peers to try gossiping with.
     * @return endpoint states gathered during shadow round or empty map
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>doShadowRound</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>peers</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>buildSeedsList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// it may be that the local address is the only entry in the seed + peers</comment>
        <comment type="line">// list in which case, attempting a shadow round is pointless</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>seeds</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>peers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>endpointShadowStateMap</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>isSeed</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSeeds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// We double RING_DELAY if we're not a seed to increase chance of successful startup during a full cluster bounce,</comment>
        <comment type="line">// giving the seeds a chance to startup before we fail the shadow round</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>shadowRoundDelay</name> <init>=  <expr><ternary><condition><expr><name>isSeed</name></expr> ?</condition><then> <expr><name><name>StorageService</name><operator>.</operator><name>RING_DELAY</name></name></expr> </then><else>: <expr><name><name>StorageService</name><operator>.</operator><name>RING_DELAY</name></name> <operator>*</operator> <literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>seedsInShadowRound</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>endpointShadowStateMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// send a completely empty syn</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GossipDigest</name></argument>&gt;</argument_list></name></type> <name>gDigests</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GossipDigestSyn</name></type> <name>digestSynMessage</name> <init>= <expr><operator>new</operator> <call><name>GossipDigestSyn</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getPartitionerName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>gDigests</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>GossipDigestSyn</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>GOSSIP_DIGEST_SYN</name></expr></argument>, <argument><expr><name>digestSynMessage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>inShadowRound</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>includePeers</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>slept</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>slept</name> <operator>%</operator> <literal type="number">5000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> <comment type="line">// CASSANDRA-8072, retry at the beginning and every 5 seconds</comment>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Sending shadow round GOSSIP DIGEST SYN to seeds {}"</literal></expr></argument>, <argument><expr><name>seeds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>seed</name> <range>: <expr><name>seeds</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>send</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <comment type="line">// Send to any peers we already know about, but only if a seed didn't respond.</comment>
                    <if_stmt><if>if <condition>(<expr><name>includePeers</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Sending shadow round GOSSIP DIGEST SYN to known peers {}"</literal></expr></argument>, <argument><expr><name>peers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>peer</name> <range>: <expr><name>peers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>send</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>includePeers</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>inShadowRound</name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>slept</name> <operator>+=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>slept</name> <operator>&gt;</operator> <name>shadowRoundDelay</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// if we got here no peers could be gossiped to. If we're a seed that's OK, but otherwise we stop. See CASSANDRA-13851</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isSeed</name></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Unable to gossip with any peers"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

                    <expr_stmt><expr><name>inShadowRound</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>wtf</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>wtf</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <return>return <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>endpointShadowStateMap</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>void</name></type> <name>buildSeedsList</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>seed</name> <range>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSeeds</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>seed</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>seeds</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * JMX interface for triggering an update of the seed node list.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>reloadSeeds</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Triggering reload of seed node list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Get the new set in the same that buildSeedsList does</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>tmp</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>seed</name> <range>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSeeds</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>seed</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <comment type="line">// If using the SimpleSeedProvider invalid yaml added to the config since startup could</comment>
        <comment type="line">// cause this to throw. Additionally, third party seed providers may throw exceptions.</comment>
        <comment type="line">// Handle the error and return a null to indicate that there was a problem.</comment>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Error while getting seed node list: {}"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>

        <if_stmt><if>if <condition>(<expr><call><name><name>tmp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"New seed node list is empty. Not updating seed list."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>getSeeds</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>tmp</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>seeds</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"New seed node list matches the existing list."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>getSeeds</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Add the new entries</comment>
        <expr_stmt><expr><call><name><name>seeds</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Remove the old entries</comment>
        <expr_stmt><expr><call><name><name>seeds</name><operator>.</operator><name>retainAll</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"New seed node list after reload {}"</literal></expr></argument>, <argument><expr><name>seeds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getSeeds</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * JMX endpoint for getting the list of seeds from the node
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getSeeds</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>seedList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>seed</name> <range>: <expr><name>seeds</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>seedList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>seed</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>seedList</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// initialize local HB state if needed, i.e., if gossiper has never been started before.</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>maybeInitializeLocalState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>generationNbr</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HeartBeatState</name></type> <name>hbState</name> <init>= <expr><operator>new</operator> <call><name>HeartBeatState</name><argument_list>(<argument><expr><name>generationNbr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>localState</name> <init>= <expr><operator>new</operator> <call><name>EndpointState</name><argument_list>(<argument><expr><name>hbState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>localState</name><operator>.</operator><name>markAlive</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>endpointStateMap</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>localState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>forceNewerGeneration</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epstate</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>epstate</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forceNewerGenerationUnsafe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Add an endpoint we knew about previously, but whose state is unknown
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSavedEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkProperThreadForStateMutation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>ep</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Attempt to add self as saved endpoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//preserve any previously known, in-memory data about the endpoint (such as DC, RACK, and so on)</comment>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>epState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"not replacing a previous epState for {}, but reusing it: {}"</literal></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>setHeartBeatState</name></name><argument_list>(<argument><expr><call><name><name>HeartBeatState</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>epState</name> <operator>=</operator> <operator>new</operator> <call><name>EndpointState</name><argument_list>(<argument><expr><call><name><name>HeartBeatState</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Adding {} as there was no previous epState; new state is {}"</literal></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>markDead</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>endpointStateMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>silentlyMarkDead</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Adding saved endpoint {} {}"</literal></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getGeneration</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addLocalApplicationStateInternal</name><parameter_list>(<parameter><decl><type><name>ApplicationState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>VersionedValue</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name><name>taskLock</name><operator>.</operator><name>isHeldByCurrentThread</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>epAddr</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>epState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>epAddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>epState</name> <operator>!=</operator> <literal type="null">null</literal> <operator>:</operator> <literal type="string">"Can't find endpoint state for "</literal> <operator>+</operator> <name>epAddr</name></expr>;</assert>
        <comment type="line">// Fire "before change" notifications:</comment>
        <expr_stmt><expr><call><name>doBeforeChangeNotifications</name><argument_list>(<argument><expr><name>epAddr</name></expr></argument>, <argument><expr><name>epState</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Notifications may have taken some time, so preventively raise the version</comment>
        <comment type="line">// of the new value, otherwise it could be ignored by the remote node</comment>
        <comment type="line">// if another value with a newer version was received in the meantime:</comment>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>cloneWithHigherVersion</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Add to local application state and fire "on change" notifications:</comment>
        <expr_stmt><expr><call><name><name>epState</name><operator>.</operator><name>addApplicationState</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doOnChangeNotifications</name><argument_list>(<argument><expr><name>epAddr</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addLocalApplicationState</name><parameter_list>(<parameter><decl><type><name>ApplicationState</name></type> <name>applicationState</name></decl></parameter>, <parameter><decl><type><name>VersionedValue</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addLocalApplicationStates</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>applicationState</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addLocalApplicationStates</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>states</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>taskLock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><name>states</name></expr></range></decl></init>)</control>
            <block>{<block_content>
               <expr_stmt><expr><call><name>addLocalApplicationStateInternal</name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>pair</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>taskLock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>mystate</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mystate</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isSilentShutdownState</name><argument_list>(<argument><expr><name>mystate</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isJoined</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Announcing shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addLocalApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>shutdown</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addLocalApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>shutdown</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Message</name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name><name>Verb</name><operator>.</operator><name>GOSSIP_SHUTDOWN</name></name></expr></argument>, <argument><expr><name>noPayload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>ep</name> <range>: <expr><name>liveEndpoints</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>send</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.shutdown_announce_in_ms"</literal></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"No local state, state is in silent shutdown, or node hasn't joined, not announcing shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>scheduledGossipTask</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>scheduledGossipTask</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>ScheduledFuture</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>scheduledGossipTask</name> <init>= <expr><name><name>this</name><operator>.</operator><name>scheduledGossipTask</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>scheduledGossipTask</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>scheduledGossipTask</name><operator>.</operator><name>isCancelled</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>sufficientForStartupSafetyCheck</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>epStateMap</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// it is possible for a previously queued ack to be sent to us when we come back up in shadow</comment>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>localState</name> <init>= <expr><call><name><name>epStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// return false if response doesn't contain state necessary for safety check</comment>
        <return>return <expr><name>localState</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>isDeadState</name><argument_list>(<argument><expr><name>localState</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>localState</name><operator>.</operator><name>containsApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>HOST_ID</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>maybeFinishShadowRound</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>respondent</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isInShadowRound</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>epStateMap</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>inShadowRound</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isInShadowRound</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sufficientForStartupSafetyCheck</name><argument_list>(<argument><expr><name>epStateMap</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Not exiting shadow round because received ACK with insufficient states {} -&gt; {}"</literal></expr></argument>,
                                 <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>epStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>seeds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>respondent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Received an ack from {}, who isn't a seed. Ensure your seed list includes a live node. Exiting shadow round"</literal></expr></argument>,
                                <argument><expr><name>respondent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Received a regular ack from {}, can now exit shadow round"</literal></expr></argument>, <argument><expr><name>respondent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// respondent sent back a full ack, so we can exit our shadow round</comment>
                <expr_stmt><expr><call><name><name>endpointShadowStateMap</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>epStateMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>inShadowRound</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>seedsInShadowRound</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// respondent indicates it too is in a shadow round, if all seeds</comment>
                <comment type="line">// are in this state then we can exit our shadow round. Otherwise,</comment>
                <comment type="line">// we keep retrying the SR until one responds with a full ACK or</comment>
                <comment type="line">// we learn that all seeds are in SR.</comment>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Received an ack from {} indicating it is also in shadow round"</literal></expr></argument>, <argument><expr><name>respondent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>seedsInShadowRound</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>respondent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>seedsInShadowRound</name><operator>.</operator><name>containsAll</name></name><argument_list>(<argument><expr><name>seeds</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"All seeds are in a shadow round, clearing this node to exit its own"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>inShadowRound</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>seedsInShadowRound</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isInShadowRound</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>inShadowRound</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a new dead {@link EndpointState} that is {@link EndpointState#isEmptyWithoutStatus() empty}.  This is used during
     * host replacement for edge cases where the seed notified that the endpoint was empty, so need to add such state
     * into gossip explicitly (as empty endpoints are not gossiped outside of the shadow round).
     *
     * see CASSANDRA-16213
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>initializeUnreachableNodeUnsafe</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>addr</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><operator>new</operator> <call><name>EndpointState</name><argument_list>(<argument><expr><call><name><name>HeartBeatState</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>markDead</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>oldState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>oldState</name></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Attempted to initialize endpoint state for unreachable node, "</literal> <operator>+</operator>
                                       <literal type="string">"but found existing endpoint state for it."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>initializeNodeUnsafe</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>generationNbr</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>initializeNodeUnsafe</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name><name>MessagingService</name><operator>.</operator><name>current_version</name></name></expr></argument>, <argument><expr><name>generationNbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>initializeNodeUnsafe</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>netVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>generationNbr</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HeartBeatState</name></type> <name>hbState</name> <init>= <expr><operator>new</operator> <call><name>HeartBeatState</name><argument_list>(<argument><expr><name>generationNbr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>newState</name> <init>= <expr><operator>new</operator> <call><name>EndpointState</name><argument_list>(<argument><expr><name>hbState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newState</name><operator>.</operator><name>markAlive</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>oldState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>newState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>localState</name> <init>= <expr><ternary><condition><expr><name>oldState</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>newState</name></expr> </then><else>: <expr><name>oldState</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <comment type="line">// always add the version state</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>states</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>NET_VERSION</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>networkVersion</name></name><argument_list>(<argument><expr><name>netVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>HOST_ID</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>hostId</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>localState</name><operator>.</operator><name>addApplicationStates</name></name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>injectApplicationState</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>ApplicationState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>VersionedValue</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>localState</name> <init>= <expr><call><name><name>endpointStateMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>localState</name><operator>.</operator><name>addApplicationState</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getEndpointDowntime</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>getEndpointDowntime</name><argument_list>(<argument><expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCurrentGenerationNumber</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>getCurrentGenerationNumber</name><argument_list>(<argument><expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addExpireTimeForEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expireTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"adding expire time for endpoint : {} ({})"</literal></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>expireTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>expireTimeEndpointMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><name>expireTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>computeExpireTime</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>Gossiper</name><operator>.</operator><name>aVeryLongTime</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>CassandraVersion</name></type> <name>getReleaseVersion</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><call><name>getEndpointStateForEndpoint</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>state</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>state</name><operator>.</operator><name>getReleaseVersion</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getReleaseVersionsWithPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>allHosts</name> <init>= <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLiveMembers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getUnreachableMembers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>host</name> <range>: <expr><name>allHosts</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CassandraVersion</name></type> <name>version</name> <init>= <expr><call><name>getReleaseVersion</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>stringVersion</name> <init>= <expr><ternary><condition><expr><name>version</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>version</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hosts</name> <init>= <expr><call><name><name>results</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>stringVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>hosts</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>hosts</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>stringVersion</name></expr></argument>, <argument><expr><name>hosts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>hosts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>host</name><operator>.</operator><name>getHostAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>results</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>UUID</name></type> <name>getSchemaVersion</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><call><name>getEndpointStateForEndpoint</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>state</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>state</name><operator>.</operator><name>getSchemaVersion</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>waitToSettle</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>forceAfter</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.skip_wait_for_gossip_to_settle"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>forceAfter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>GOSSIP_SETTLE_MIN_WAIT_MS</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>GOSSIP_SETTLE_POLL_INTERVAL_MS</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>GOSSIP_SETTLE_POLL_SUCCESSES_REQUIRED</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Waiting for gossip to settle..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><name>GOSSIP_SETTLE_MIN_WAIT_MS</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>totalPolls</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numOkay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>epSize</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>numOkay</name> <operator>&lt;</operator> <name>GOSSIP_SETTLE_POLL_SUCCESSES_REQUIRED</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><name>GOSSIP_SETTLE_POLL_INTERVAL_MS</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>currentSize</name> <init>= <expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpointCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>totalPolls</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentSize</name> <operator>==</operator> <name>epSize</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Gossip looks settled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>numOkay</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Gossip not settled after {} polls."</literal></expr></argument>, <argument><expr><name>totalPolls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>numOkay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>epSize</name> <operator>=</operator> <name>currentSize</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>forceAfter</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>totalPolls</name> <operator>&gt;</operator> <name>forceAfter</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Gossip not settled but startup forced by cassandra.skip_wait_for_gossip_to_settle. Gossip total polls: {}"</literal></expr></argument>,
                            <argument><expr><name>totalPolls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name>totalPolls</name> <operator>&gt;</operator> <name>GOSSIP_SETTLE_POLL_SUCCESSES_REQUIRED</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Gossip settled after {} extra polls; proceeding"</literal></expr></argument>, <argument><expr><name>totalPolls</name> <operator>-</operator> <name>GOSSIP_SETTLE_POLL_SUCCESSES_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"No gossip backlog; proceeding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Blockingly wait for all live nodes to agree on the current schema version.
     *
     * @param maxWait maximum time to wait for schema agreement
     * @param unit TimeUnit of maxWait
     * @return true if agreement was reached, false if not
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>waitForSchemaAgreement</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>maxWait</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>BooleanSupplier</name></type> <name>abortCondition</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>waited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>toWait</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>members</name> <init>= <expr><call><name>getLiveTokenOwners</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>nodesAgreeOnSchema</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>waited</name> <operator>&gt;=</operator> <call><name><name>unit</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><name>maxWait</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>abortCondition</name><operator>.</operator><name>getAsBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><name>toWait</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>waited</name> <operator>+=</operator> <name>toWait</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>toWait</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>toWait</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns {@code false} only if the information about the version of each node in the cluster is available and
     * ALL the nodes are on 4.0+ (regardless of the patch version).
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasMajorVersion3Nodes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>isUpgradingFromVersionLowerThan</name><argument_list>(<argument><expr><name><name>CassandraVersion</name><operator>.</operator><name>CASSANDRA_4_0</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <comment type="line">// this is quite obvious</comment>
               <comment type="line">// however if we discovered only nodes at current version so far (in particular only this node),</comment>
               <comment type="line">// but still there are nodes with unknown version, we also want to report that the cluster may have nodes at 3.x</comment>
               <name>upgradeInProgressPossible</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isUpgradingFromVersionLowerThan</name><argument_list>(<argument><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>CURRENT_VERSION</name><operator>.</operator><name>familyLowerBound</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns {@code true} if there are nodes on version lower than the provided version
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isUpgradingFromVersionLowerThan</name><parameter_list>(<parameter><decl><type><name>CassandraVersion</name></type> <name>referenceVersion</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CassandraVersion</name></type> <name>v</name> <init>= <expr><call><name><name>upgradeFromVersionMemoized</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>NULL_VERSION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>scheduledGossipTask</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><name>v</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>v</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>referenceVersion</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>nodesAgreeOnSchema</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>nodes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>UUID</name></type> <name>expectedVersion</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>node</name> <range>: <expr><name>nodes</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><call><name>getEndpointStateForEndpoint</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UUID</name></type> <name>remoteVersion</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getSchemaVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>expectedVersion</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>expectedVersion</name> <operator>=</operator> <name>remoteVersion</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>expectedVersion</name> <operator>||</operator> <operator>!</operator><call><name><name>expectedVersion</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>remoteVersion</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>stopShutdownAndWait</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>TimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ExecutorUtils</name><operator>.</operator><name>shutdownAndWait</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>executor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>CassandraVersion</name></type> <name>getMinVersion</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>timeUnit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>minVersionSupplier</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>delay</name></expr></argument>, <argument><expr><name>timeUnit</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>TimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// Timeouts here are harmless: they won't cause reprepares and may only</comment>
            <comment type="line">// cause the old version of the hash to be kept for longer</comment>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Caught an exception while waiting for min version"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>private</specifier> <name>String</name></type> <name>getReleaseVersionString</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointState</name></type> <name>state</name> <init>= <expr><call><name>getEndpointStateForEndpoint</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>VersionedValue</name></type> <name>value</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RELEASE_VERSION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name><name>value</name><operator>.</operator><name>value</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CassandraVersion</name></type> <name>computeMinVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CassandraVersion</name></type> <name>minVersion</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>addr</name> <range>: <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLiveMembers</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getUnreachableMembers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>versionString</name> <init>= <expr><call><name>getReleaseVersionString</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Raced with changes to gossip state, wait until next iteration</comment>
            <if_stmt><if>if <condition>(<expr><name>versionString</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>CassandraVersion</name></type> <name>version</name></decl>;</decl_stmt>

            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>version</name> <operator>=</operator> <operator>new</operator> <call><name>CassandraVersion</name><argument_list>(<argument><expr><name>versionString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Can't parse version string %s"</literal></expr></argument>, <argument><expr><name>versionString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch></try>

            <if_stmt><if>if <condition>(<expr><name>minVersion</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>version</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>minVersion</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>minVersion</name> <operator>=</operator> <name>version</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>minVersion</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
