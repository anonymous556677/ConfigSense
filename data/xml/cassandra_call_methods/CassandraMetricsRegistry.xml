<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/metrics/CassandraMetricsRegistry.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>MalformedObjectNameException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>ObjectName</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MBeanWrapper</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Makes integrating 3.0 metrics API with 2.0.
 * &lt;p&gt;
 * The 3.0 API comes with poor JMX integration
 * &lt;/p&gt;
 */</comment>
<class><specifier>public</specifier> class <name>CassandraMetricsRegistry</name> <super_list><extends>extends <super><name>MetricRegistry</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CassandraMetricsRegistry</name></type> <name>Metrics</name> <init>= <expr><operator>new</operator> <call><name>CassandraMetricsRegistry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ThreadPoolMetrics</name></argument>&gt;</argument_list></name></type> <name>threadPoolMetrics</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>MBeanWrapper</name></type> <name>mBeanServer</name> <init>= <expr><name><name>MBeanWrapper</name><operator>.</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>CassandraMetricsRegistry</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>Counter</name></type> <name>counter</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Counter</name></type> <name>counter</name> <init>= <expr><call><name>counter</name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>registerMBean</name><argument_list>(<argument><expr><name>counter</name></expr></argument>, <argument><expr><call><name><name>name</name><operator>.</operator><name>getMBeanName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>counter</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Counter</name></type> <name>counter</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>MetricName</name></type> <name>alias</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Counter</name></type> <name>counter</name> <init>= <expr><call><name>counter</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>registerAlias</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>counter</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Meter</name></type> <name>meter</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Meter</name></type> <name>meter</name> <init>= <expr><call><name>meter</name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>registerMBean</name><argument_list>(<argument><expr><name>meter</name></expr></argument>, <argument><expr><call><name><name>name</name><operator>.</operator><name>getMBeanName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>meter</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Meter</name></type> <name>meter</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>MetricName</name></type> <name>alias</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Meter</name></type> <name>meter</name> <init>= <expr><call><name>meter</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>registerAlias</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>meter</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Histogram</name></type> <name>histogram</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>considerZeroes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Histogram</name></type> <name>histogram</name> <init>= <expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ClearableHistogram</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecayingEstimatedHistogramReservoir</name><argument_list>(<argument><expr><name>considerZeroes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>registerMBean</name><argument_list>(<argument><expr><name>histogram</name></expr></argument>, <argument><expr><call><name><name>name</name><operator>.</operator><name>getMBeanName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>histogram</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Histogram</name></type> <name>histogram</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>MetricName</name></type> <name>alias</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>considerZeroes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Histogram</name></type> <name>histogram</name> <init>= <expr><call><name>histogram</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>considerZeroes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>registerAlias</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>histogram</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Timer</name></type> <name>timer</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Timer</name></type> <name>timer</name> <init>= <expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Timer</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecayingEstimatedHistogramReservoir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>registerMBean</name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><call><name><name>name</name><operator>.</operator><name>getMBeanName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>timer</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Timer</name></type> <name>timer</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>MetricName</name></type> <name>alias</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Timer</name></type> <name>timer</name> <init>= <expr><call><name>timer</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>registerAlias</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>timer</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Metric</name></extends></parameter>&gt;</parameter_list> <name>T</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>metric</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>register</name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>metric</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>registerMBean</name><argument_list>(<argument><expr><name>metric</name></expr></argument>, <argument><expr><call><name><name>name</name><operator>.</operator><name>getMBeanName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>metric</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Metric</name></type> <name>existing</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>getMetrics</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator><name>existing</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ThreadPoolMetrics</name></argument>&gt;</argument_list></name></type> <name>allThreadPoolMetrics</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableCollection</name></name><argument_list>(<argument><expr><call><name><name>threadPoolMetrics</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>ThreadPoolMetrics</name></argument>&gt;</argument_list></name></type> <name>getThreadPoolMetrics</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>poolName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>ofNullable</name></name><argument_list>(<argument><expr><call><name><name>threadPoolMetrics</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>poolName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>ThreadPoolMetrics</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name>ThreadPoolMetrics</name></type> <name>metrics</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>threadPoolMetrics</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>metrics</name><operator>.</operator><name>poolName</name></name></expr></argument>, <argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>metrics</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>ThreadPoolMetrics</name></type> <name>metrics</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>threadPoolMetrics</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>metrics</name><operator>.</operator><name>poolName</name></name></expr></argument>, <argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Metric</name></extends></parameter>&gt;</parameter_list> <name>T</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>MetricName</name></type> <name>aliasName</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>metric</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>T</name></type> <name>ret</name> <init>= <expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>metric</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>registerAlias</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>Metric</name></extends></parameter>&gt;</parameter_list> <name>T</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>metric</name></decl></parameter>, <parameter><decl><type><name>MetricName</name><modifier>...</modifier></type> <name>aliases</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>T</name></type> <name>ret</name> <init>= <expr><call><name>register</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>metric</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>MetricName</name></type> <name>aliasName</name> <range>: <expr><name>aliases</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>registerAlias</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>removed</name> <init>= <expr><call><name>remove</name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>mBeanServer</name><operator>.</operator><name>unregisterMBean</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>getMBeanName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MBeanWrapper</name><operator>.</operator><name>OnException</name><operator>.</operator><name>IGNORE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>removed</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>MetricName</name><modifier>...</modifier></type> <name>aliases</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>remove</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>MetricName</name></type> <name>alias</name> <range>: <expr><name>aliases</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name>removeAlias</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerMBean</name><parameter_list>(<parameter><decl><type><name>Metric</name></type> <name>metric</name></decl></parameter>, <parameter><decl><type><name>ObjectName</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AbstractBean</name></type> <name>mbean</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>metric</name> <operator>instanceof</operator> <name>Gauge</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>mbean</name> <operator>=</operator> <operator>new</operator> <call><name>JmxGauge</name><argument_list>(<argument><expr><operator>(</operator><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator> <name>metric</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>metric</name> <operator>instanceof</operator> <name>Counter</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>mbean</name> <operator>=</operator> <operator>new</operator> <call><name>JmxCounter</name><argument_list>(<argument><expr><operator>(</operator><name>Counter</name><operator>)</operator> <name>metric</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>metric</name> <operator>instanceof</operator> <name>Histogram</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>mbean</name> <operator>=</operator> <operator>new</operator> <call><name>JmxHistogram</name><argument_list>(<argument><expr><operator>(</operator><name>Histogram</name><operator>)</operator> <name>metric</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>metric</name> <operator>instanceof</operator> <name>Timer</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>mbean</name> <operator>=</operator> <operator>new</operator> <call><name>JmxTimer</name><argument_list>(<argument><expr><operator>(</operator><name>Timer</name><operator>)</operator> <name>metric</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MICROSECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>metric</name> <operator>instanceof</operator> <name>Metered</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>mbean</name> <operator>=</operator> <operator>new</operator> <call><name>JmxMeter</name><argument_list>(<argument><expr><operator>(</operator><name>Metered</name><operator>)</operator> <name>metric</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unknown metric type: "</literal> <operator>+</operator> <call><name><name>metric</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mBeanServer</name><operator>.</operator><name>isRegistered</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>mBeanServer</name><operator>.</operator><name>registerMBean</name></name><argument_list>(<argument><expr><name>mbean</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>MBeanWrapper</name><operator>.</operator><name>OnException</name><operator>.</operator><name>LOG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>registerAlias</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>existingName</name></decl></parameter>, <parameter><decl><type><name>MetricName</name></type> <name>aliasName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Metric</name></type> <name>existing</name> <init>= <expr><call><name><name>Metrics</name><operator>.</operator><name>getMetrics</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>existingName</name><operator>.</operator><name>getMetricName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>existing</name> <operator>!=</operator> <literal type="null">null</literal> <operator>:</operator> <name>existingName</name> <operator>+</operator> <literal type="string">" not registered"</literal></expr>;</assert>

        <expr_stmt><expr><call><name>registerMBean</name><argument_list>(<argument><expr><name>existing</name></expr></argument>, <argument><expr><call><name><name>aliasName</name><operator>.</operator><name>getMBeanName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>removeAlias</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>mBeanServer</name><operator>.</operator><name>isRegistered</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>getMBeanName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>MBeanWrapper</name><operator>.</operator><name>instance</name><operator>.</operator><name>unregisterMBean</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>getMBeanName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MBeanWrapper</name><operator>.</operator><name>OnException</name><operator>.</operator><name>IGNORE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Strips a single final '$' from input
     * 
     * @param s String to strip
     * @return a string with one less '$' at end
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>withoutFinalDollar</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>l</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="char">'$'</literal> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then><expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>s</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <interface><specifier>public</specifier> interface <name>MetricMBean</name>
    <block>{
        <function_decl><type><name>ObjectName</name></type> <name>objectName</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>private</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>AbstractBean</name> <super_list><implements>implements <super><name>MetricMBean</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ObjectName</name></type> <name>objectName</name></decl>;</decl_stmt>

        <constructor><name>AbstractBean</name><parameter_list>(<parameter><decl><type><name>ObjectName</name></type> <name>objectName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>objectName</name></name> <operator>=</operator> <name>objectName</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>ObjectName</name></type> <name>objectName</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>objectName</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>


    <interface><specifier>public</specifier> interface <name>JmxGaugeMBean</name> <super_list><extends>extends <super><name>MetricMBean</name></super></extends></super_list>
    <block>{
        <function_decl><type><name>Object</name></type> <name>getValue</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>JmxGauge</name> <super_list><extends>extends <super><name>AbstractBean</name></super></extends> <implements>implements <super><name>JmxGaugeMBean</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>metric</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>JmxGauge</name><parameter_list>(<parameter><decl><type><name><name>Gauge</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>metric</name></decl></parameter>, <parameter><decl><type><name>ObjectName</name></type> <name>objectName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metric</name></name> <operator>=</operator> <name>metric</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>Object</name></type> <name>getValue</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <interface><specifier>public</specifier> interface <name>JmxHistogramMBean</name> <super_list><extends>extends <super><name>MetricMBean</name></super></extends></super_list>
    <block>{
        <function_decl><type><name>long</name></type> <name>getCount</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>long</name></type> <name>getMin</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>long</name></type> <name>getMax</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>getMean</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>getStdDev</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>get50thPercentile</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>get75thPercentile</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>get95thPercentile</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>get98thPercentile</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>get99thPercentile</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>get999thPercentile</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name><name>long</name><index>[]</index></name></type> <name>values</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name><name>long</name><index>[]</index></name></type> <name>getRecentValues</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>JmxHistogram</name> <super_list><extends>extends <super><name>AbstractBean</name></super></extends> <implements>implements <super><name>JmxHistogramMBean</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Histogram</name></type> <name>metric</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>long</name><index>[]</index></name></type> <name>last</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>JmxHistogram</name><parameter_list>(<parameter><decl><type><name>Histogram</name></type> <name>metric</name></decl></parameter>, <parameter><decl><type><name>ObjectName</name></type> <name>objectName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metric</name></name> <operator>=</operator> <name>metric</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>get50thPercentile</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMedian</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>long</name></type> <name>getCount</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>long</name></type> <name>getMin</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMin</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>long</name></type> <name>getMax</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMax</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>getMean</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMean</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>getStdDev</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStdDev</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>get75thPercentile</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get75thPercentile</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>get95thPercentile</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get95thPercentile</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>get98thPercentile</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get98thPercentile</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>get99thPercentile</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get99thPercentile</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>get999thPercentile</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get999thPercentile</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name><name>long</name><index>[]</index></name></type> <name>values</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValues</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns a histogram describing the values recorded since the last time this method was called.
         *
         * ex. If the counts are [0, 1, 2, 1] at the time the first caller arrives, but change to [1, 2, 3, 2] by the 
         * time a second caller arrives, the second caller will receive [1, 1, 1, 1].
         *
         * @return a histogram whose bucket offsets are assumed to be in nanoseconds
         */</comment>
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>long</name><index>[]</index></name></type> <name>getRecentValues</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>now</name> <init>= <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>delta</name> <init>= <expr><call><name>delta</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>last</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
            <return>return <expr><name>delta</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <interface><specifier>public</specifier> interface <name>JmxCounterMBean</name> <super_list><extends>extends <super><name>MetricMBean</name></super></extends></super_list>
    <block>{
        <function_decl><type><name>long</name></type> <name>getCount</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>JmxCounter</name> <super_list><extends>extends <super><name>AbstractBean</name></super></extends> <implements>implements <super><name>JmxCounterMBean</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Counter</name></type> <name>metric</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>JmxCounter</name><parameter_list>(<parameter><decl><type><name>Counter</name></type> <name>metric</name></decl></parameter>, <parameter><decl><type><name>ObjectName</name></type> <name>objectName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metric</name></name> <operator>=</operator> <name>metric</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>long</name></type> <name>getCount</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <interface><specifier>public</specifier> interface <name>JmxMeterMBean</name> <super_list><extends>extends <super><name>MetricMBean</name></super></extends></super_list>
    <block>{
        <function_decl><type><name>long</name></type> <name>getCount</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>getMeanRate</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>getOneMinuteRate</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>getFiveMinuteRate</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>getFifteenMinuteRate</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>String</name></type> <name>getRateUnit</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>JmxMeter</name> <super_list><extends>extends <super><name>AbstractBean</name></super></extends> <implements>implements <super><name>JmxMeterMBean</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Metered</name></type> <name>metric</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>double</name></type> <name>rateFactor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>rateUnit</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>JmxMeter</name><parameter_list>(<parameter><decl><type><name>Metered</name></type> <name>metric</name></decl></parameter>, <parameter><decl><type><name>ObjectName</name></type> <name>objectName</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>rateUnit</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metric</name></name> <operator>=</operator> <name>metric</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rateFactor</name></name> <operator>=</operator> <call><name><name>rateUnit</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rateUnit</name></name> <operator>=</operator> <literal type="string">"events/"</literal> <operator>+</operator> <call><name>calculateRateUnit</name><argument_list>(<argument><expr><name>rateUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>long</name></type> <name>getCount</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>getMeanRate</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getMeanRate</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>rateFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>getOneMinuteRate</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getOneMinuteRate</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>rateFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>getFiveMinuteRate</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getFiveMinuteRate</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>rateFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>getFifteenMinuteRate</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getFifteenMinuteRate</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>rateFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>getRateUnit</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>rateUnit</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>calculateRateUnit</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>s</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <interface><specifier>public</specifier> interface <name>JmxTimerMBean</name> <super_list><extends>extends <super><name>JmxMeterMBean</name></super></extends></super_list>
    <block>{
        <function_decl><type><name>double</name></type> <name>getMin</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>getMax</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>getMean</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>getStdDev</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>get50thPercentile</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>get75thPercentile</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>get95thPercentile</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>get98thPercentile</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>get99thPercentile</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>double</name></type> <name>get999thPercentile</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name><name>long</name><index>[]</index></name></type> <name>values</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name><name>long</name><index>[]</index></name></type> <name>getRecentValues</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>String</name></type> <name>getDurationUnit</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>static</specifier> class <name>JmxTimer</name> <super_list><extends>extends <super><name>JmxMeter</name></super></extends> <implements>implements <super><name>JmxTimerMBean</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Timer</name></type> <name>metric</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>double</name></type> <name>durationFactor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>durationUnit</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>long</name><index>[]</index></name></type> <name>last</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>JmxTimer</name><parameter_list>(<parameter><decl><type><name>Timer</name></type> <name>metric</name></decl></parameter>,
                         <parameter><decl><type><name>ObjectName</name></type> <name>objectName</name></decl></parameter>,
                         <parameter><decl><type><name>TimeUnit</name></type> <name>rateUnit</name></decl></parameter>,
                         <parameter><decl><type><name>TimeUnit</name></type> <name>durationUnit</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>metric</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>, <argument><expr><name>rateUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metric</name></name> <operator>=</operator> <name>metric</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>durationFactor</name></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <call><name><name>durationUnit</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>durationUnit</name></name> <operator>=</operator> <call><name><name>durationUnit</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>get50thPercentile</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMedian</name><argument_list>()</argument_list></call> <operator>*</operator> <name>durationFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>getMin</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMin</name><argument_list>()</argument_list></call> <operator>*</operator> <name>durationFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>getMax</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMax</name><argument_list>()</argument_list></call> <operator>*</operator> <name>durationFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>getMean</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMean</name><argument_list>()</argument_list></call> <operator>*</operator> <name>durationFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>getStdDev</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStdDev</name><argument_list>()</argument_list></call> <operator>*</operator> <name>durationFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>get75thPercentile</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get75thPercentile</name><argument_list>()</argument_list></call> <operator>*</operator> <name>durationFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>get95thPercentile</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get95thPercentile</name><argument_list>()</argument_list></call> <operator>*</operator> <name>durationFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>get98thPercentile</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get98thPercentile</name><argument_list>()</argument_list></call> <operator>*</operator> <name>durationFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>get99thPercentile</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get99thPercentile</name><argument_list>()</argument_list></call> <operator>*</operator> <name>durationFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>double</name></type> <name>get999thPercentile</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get999thPercentile</name><argument_list>()</argument_list></call> <operator>*</operator> <name>durationFactor</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name><name>long</name><index>[]</index></name></type> <name>values</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValues</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns a histogram describing the values recorded since the last time this method was called.
         * 
         * ex. If the counts are [0, 1, 2, 1] at the time the first caller arrives, but change to [1, 2, 3, 2] by the 
         * time a second caller arrives, the second caller will receive [1, 1, 1, 1].
         * 
         * @return a histogram whose bucket offsets are assumed to be in nanoseconds
         */</comment>
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>long</name><index>[]</index></name></type> <name>getRecentValues</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>now</name> <init>= <expr><call><name><name>metric</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>delta</name> <init>= <expr><call><name>delta</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>last</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
            <return>return <expr><name>delta</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>getDurationUnit</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>durationUnit</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Used to determine the changes in a histogram since the last time checked.
     *
     * @param now The current histogram
     * @param last The previous value of the histogram
     * @return the difference between &lt;i&gt;now&lt;/&gt; and &lt;i&gt;last&lt;/i&gt;
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>static</specifier> <name><name>long</name><index>[]</index></name></type> <name>delta</name><parameter_list>(<parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>last</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>delta</name> <init>= <expr><operator>new</operator> <name><name>long</name><index>[<expr><name><name>now</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>last</name> <operator>=</operator> <operator>new</operator> <name><name>long</name><index>[<expr><name><name>now</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>now</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>delta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>now</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name><name>last</name><operator>.</operator><name>length</name></name></expr>?</condition><then> <expr><name><name>last</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>delta</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A value class encapsulating a metric's owning class and name.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>MetricName</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>MetricName</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>group</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>scope</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>mBeanName</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new {@link MetricName} without a scope.
         *
         * @param klass the {@link Class} to which the {@link Metric} belongs
         * @param name  the name of the {@link Metric}
         */</comment>
        <constructor><specifier>public</specifier> <name>MetricName</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Creates a new {@link MetricName} without a scope.
         *
         * @param group the group to which the {@link Metric} belongs
         * @param type  the type to which the {@link Metric} belongs
         * @param name  the name of the {@link Metric}
         */</comment>
        <constructor><specifier>public</specifier> <name>MetricName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Creates a new {@link MetricName} without a scope.
         *
         * @param klass the {@link Class} to which the {@link Metric} belongs
         * @param name  the name of the {@link Metric}
         * @param scope the scope of the {@link Metric}
         */</comment>
        <constructor><specifier>public</specifier> <name>MetricName</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>scope</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>klass</name><operator>.</operator><name>getPackage</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>klass</name><operator>.</operator><name>getPackage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                    <argument><expr><call><name>withoutFinalDollar</name><argument_list>(<argument><expr><call><name><name>klass</name><operator>.</operator><name>getSimpleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>name</name></expr></argument>,
                    <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Creates a new {@link MetricName} without a scope.
         *
         * @param group the group to which the {@link Metric} belongs
         * @param type  the type to which the {@link Metric} belongs
         * @param name  the name of the {@link Metric}
         * @param scope the scope of the {@link Metric}
         */</comment>
        <constructor><specifier>public</specifier> <name>MetricName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>scope</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><call><name>createMBeanName</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Creates a new {@link MetricName} without a scope.
         *
         * @param group     the group to which the {@link Metric} belongs
         * @param type      the type to which the {@link Metric} belongs
         * @param name      the name of the {@link Metric}
         * @param scope     the scope of the {@link Metric}
         * @param mBeanName the 'ObjectName', represented as a string, to use when registering the
         *                  MBean.
         */</comment>
        <constructor><specifier>public</specifier> <name>MetricName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mBeanName</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>type</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Both group and type need to be specified"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Name needs to be specified"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>group</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scope</name></name> <operator>=</operator> <name>scope</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mBeanName</name></name> <operator>=</operator> <name>mBeanName</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Returns the group to which the {@link Metric} belongs. For class-based metrics, this will be
         * the package name of the {@link Class} to which the {@link Metric} belongs.
         *
         * @return the group to which the {@link Metric} belongs
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getGroup</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>group</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the type to which the {@link Metric} belongs. For class-based metrics, this will be
         * the simple class name of the {@link Class} to which the {@link Metric} belongs.
         *
         * @return the type to which the {@link Metric} belongs
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getType</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>type</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the name of the {@link Metric}.
         *
         * @return the name of the {@link Metric}
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>name</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getMetricName</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>MetricRegistry</name><operator>.</operator><name>name</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the scope of the {@link Metric}.
         *
         * @return the scope of the {@link Metric}
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getScope</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>scope</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns {@code true} if the {@link Metric} has a scope, {@code false} otherwise.
         *
         * @return {@code true} if the {@link Metric} has a scope
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasScope</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>scope</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the MBean name for the {@link Metric} identified by this metric name.
         *
         * @return the MBean name
         */</comment>
        <function><type><specifier>public</specifier> <name>ObjectName</name></type> <name>getMBeanName</name><parameter_list>()</parameter_list>
        <block>{<block_content>

            <decl_stmt><decl><type><name>String</name></type> <name>mname</name> <init>= <expr><name>mBeanName</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>mname</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>mname</name> <operator>=</operator> <call><name>getMetricName</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <try>try
            <block>{<block_content>

                <return>return <expr><operator>new</operator> <call><name>ObjectName</name><argument_list>(<argument><expr><name>mname</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedObjectNameException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <return>return <expr><operator>new</operator> <call><name>ObjectName</name><argument_list>(<argument><expr><call><name><name>ObjectName</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>mname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedObjectNameException</name></type> <name>e1</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>MetricName</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>MetricName</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>mBeanName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>mBeanName</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>mBeanName</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>mBeanName</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>MetricName</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>mBeanName</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>mBeanName</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>createMBeanName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>scope</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>nameBuilder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>nameBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>ObjectName</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>nameBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">":type="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>nameBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>ObjectName</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>scope</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>nameBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">",scope="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>nameBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>ObjectName</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>nameBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">",name="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>nameBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>ObjectName</name><operator>.</operator><name>quote</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>nameBuilder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * If the group is empty, use the package name of the given class. Otherwise use group
         *
         * @param group The group to use by default
         * @param klass The class being tracked
         * @return a group for the metric
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>chooseGroup</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>klass</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>group</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>group</name> <operator>=</operator> <ternary><condition><expr><call><name><name>klass</name><operator>.</operator><name>getPackage</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>klass</name><operator>.</operator><name>getPackage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>group</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * If the type is empty, use the simple name of the given class. Otherwise use type
         *
         * @param type  The type to use by default
         * @param klass The class being tracked
         * @return a type for the metric
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>chooseType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>klass</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>type</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>withoutFinalDollar</name><argument_list>(<argument><expr><call><name><name>klass</name><operator>.</operator><name>getSimpleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>type</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * If name is empty, use the name of the given method. Otherwise use name
         *
         * @param name   The name to use by default
         * @param method The method being tracked
         * @return a name for the metric
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>chooseName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Method</name></type> <name>method</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>name</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>method</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>name</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>


</unit>
