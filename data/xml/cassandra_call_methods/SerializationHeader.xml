<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/SerializationHeader.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>filter</name><operator>.</operator><name>ColumnFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>TypeParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UTF8Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>UnknownColumnException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>Version</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>IMetadataComponentSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataComponent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ColumnMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>SerializationHeader</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Serializer</name></type> <name>serializer</name> <init>= <expr><operator>new</operator> <call><name>Serializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isForSSTable</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>clusteringTypes</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RegularAndStaticColumns</name></type> <name>columns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>EncodingStats</name></type> <name>stats</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>typeMap</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>SerializationHeader</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isForSSTable</name></decl></parameter>,
                                <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyType</name></decl></parameter>,
                                <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>clusteringTypes</name></decl></parameter>,
                                <parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>columns</name></decl></parameter>,
                                <parameter><decl><type><name>EncodingStats</name></type> <name>stats</name></decl></parameter>,
                                <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>typeMap</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isForSSTable</name></name> <operator>=</operator> <name>isForSSTable</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyType</name></name> <operator>=</operator> <name>keyType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clusteringTypes</name></name> <operator>=</operator> <name>clusteringTypes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <name>columns</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>stats</name></name> <operator>=</operator> <name>stats</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>typeMap</name></name> <operator>=</operator> <name>typeMap</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SerializationHeader</name></type> <name>makeWithoutStats</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SerializationHeader</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><call><name><name>metadata</name><operator>.</operator><name>regularAndStaticColumns</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>EncodingStats</name><operator>.</operator><name>NO_STATS</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SerializationHeader</name></type> <name>make</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// The serialization header has to be computed before the start of compaction (since it's used to write)</comment>
        <comment type="line">// the result. This means that when compacting multiple sources, we won't have perfectly accurate stats</comment>
        <comment type="line">// (for EncodingStats) since compaction may delete, purge and generally merge rows in unknown ways. This is</comment>
        <comment type="line">// kind of ok because those stats are only used for optimizing the underlying storage format and so we</comment>
        <comment type="line">// just have to strive for as good as possible. Currently, we stick to a relatively naive merge of existing</comment>
        <comment type="line">// global stats because it's simple and probably good enough in most situation but we could probably</comment>
        <comment type="line">// improve our marging of inaccuracy through the use of more fine-grained stats in the future.</comment>
        <comment type="line">// Note however that to avoid seeing our accuracy degrade through successive compactions, we don't base</comment>
        <comment type="line">// our stats merging on the compacted files headers, which as we just said can be somewhat inaccurate,</comment>
        <comment type="line">// but rather on their stats stored in StatsMetadata that are fully accurate.</comment>
        <decl_stmt><decl><type><name><name>EncodingStats</name><operator>.</operator><name>Collector</name></name></type> <name>stats</name> <init>= <expr><operator>new</operator> <call><name><name>EncodingStats</name><operator>.</operator><name>Collector</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>RegularAndStaticColumns</name><operator>.</operator><name>Builder</name></name></type> <name>columns</name> <init>= <expr><call><name><name>RegularAndStaticColumns</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// We need to order the SSTables by descending generation to be sure that we use latest column metadata.</comment>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name>orderByDescendingGeneration</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>stats</name><operator>.</operator><name>updateTimestamp</name></name><argument_list>(<argument><expr><call><name><name>sstable</name><operator>.</operator><name>getMinTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>stats</name><operator>.</operator><name>updateLocalDeletionTime</name></name><argument_list>(<argument><expr><call><name><name>sstable</name><operator>.</operator><name>getMinLocalDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>stats</name><operator>.</operator><name>updateTTL</name></name><argument_list>(<argument><expr><call><name><name>sstable</name><operator>.</operator><name>getMinTTL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>sstable</name><operator>.</operator><name>header</name><operator>.</operator><name>columns</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><operator>new</operator> <call><name>SerializationHeader</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><call><name><name>columns</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>stats</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>orderByDescendingGeneration</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>sstables</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>sstables</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>readers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>readers</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name><name>SSTableReader</name><operator>.</operator><name>generationReverseComparator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>readers</name></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>SerializationHeader</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isForSSTable</name></decl></parameter>,
                               <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>,
                               <parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>columns</name></decl></parameter>,
                               <parameter><decl><type><name>EncodingStats</name></type> <name>stats</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>isForSSTable</name></expr></argument>,
             <argument><expr><name><name>metadata</name><operator>.</operator><name>partitionKeyType</name></name></expr></argument>,
             <argument><expr><call><name><name>metadata</name><operator>.</operator><name>comparator</name><operator>.</operator><name>subtypes</name></name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><name>columns</name></expr></argument>,
             <argument><expr><name>stats</name></expr></argument>,
             <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>RegularAndStaticColumns</name></type> <name>columns</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>columns</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasStatic</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>columns</name><operator>.</operator><name>statics</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isForSSTable</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>isForSSTable</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncodingStats</name></type> <name>stats</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>stats</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyType</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>keyType</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>clusteringTypes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>clusteringTypes</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Columns</name></type> <name>columns</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>isStatic</name></expr> ?</condition><then> <expr><name><name>columns</name><operator>.</operator><name>statics</name></name></expr> </then><else>: <expr><name><name>columns</name><operator>.</operator><name>regulars</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getType</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>typeMap</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>column</name><operator>.</operator><name>type</name></name></expr> </then><else>: <expr><call><name><name>typeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeTimestamp</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><name>timestamp</name> <operator>-</operator> <name><name>stats</name><operator>.</operator><name>minTimestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeLocalDeletionTime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>localDeletionTime</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><name>localDeletionTime</name> <operator>-</operator> <name><name>stats</name><operator>.</operator><name>minLocalDeletionTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeTTL</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><name>ttl</name> <operator>-</operator> <name><name>stats</name><operator>.</operator><name>minTTL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeDeletionTime</name><parameter_list>(<parameter><decl><type><name>DeletionTime</name></type> <name>dt</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>writeTimestamp</name><argument_list>(<argument><expr><call><name><name>dt</name><operator>.</operator><name>markedForDeleteAt</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeLocalDeletionTime</name><argument_list>(<argument><expr><call><name><name>dt</name><operator>.</operator><name>localDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>readTimestamp</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>stats</name><operator>.</operator><name>minTimestamp</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>readLocalDeletionTime</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>stats</name><operator>.</operator><name>minLocalDeletionTime</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>readTTL</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>stats</name><operator>.</operator><name>minTTL</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>DeletionTime</name></type> <name>readDeletionTime</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>markedAt</name> <init>= <expr><call><name>readTimestamp</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>localDeletionTime</name> <init>= <expr><call><name>readLocalDeletionTime</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>DeletionTime</name><argument_list>(<argument><expr><name>markedAt</name></expr></argument>, <argument><expr><name>localDeletionTime</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>timestampSerializedSize</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeofUnsignedVInt</name></name><argument_list>(<argument><expr><name>timestamp</name> <operator>-</operator> <name><name>stats</name><operator>.</operator><name>minTimestamp</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>localDeletionTimeSerializedSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>localDeletionTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeofUnsignedVInt</name></name><argument_list>(<argument><expr><name>localDeletionTime</name> <operator>-</operator> <name><name>stats</name><operator>.</operator><name>minLocalDeletionTime</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>ttlSerializedSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeofUnsignedVInt</name></name><argument_list>(<argument><expr><name>ttl</name> <operator>-</operator> <name><name>stats</name><operator>.</operator><name>minTTL</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>deletionTimeSerializedSize</name><parameter_list>(<parameter><decl><type><name>DeletionTime</name></type> <name>dt</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>timestampSerializedSize</name><argument_list>(<argument><expr><call><name><name>dt</name><operator>.</operator><name>markedForDeleteAt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
             <operator>+</operator> <call><name>localDeletionTimeSerializedSize</name><argument_list>(<argument><expr><call><name><name>dt</name><operator>.</operator><name>localDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>skipTimestamp</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>skipLocalDeletionTime</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>skipTTL</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>skipDeletionTime</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>skipTimestamp</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>skipLocalDeletionTime</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Component</name></type> <name>toComponent</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>staticColumns</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>regularColumns</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><name><name>columns</name><operator>.</operator><name>statics</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>staticColumns</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>column</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><name><name>columns</name><operator>.</operator><name>regulars</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>regularColumns</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>column</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><operator>new</operator> <call><name>Component</name><argument_list>(<argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>clusteringTypes</name></expr></argument>, <argument><expr><name>staticColumns</name></expr></argument>, <argument><expr><name>regularColumns</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SerializationHeader[key=%s, cks=%s, columns=%s, stats=%s, typeMap=%s]"</literal></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>clusteringTypes</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>, <argument><expr><name>typeMap</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * We need the TableMetadata to properly deserialize a SerializationHeader but it's clunky to pass that to
     * a SSTable component, so we use this temporary object to delay the actual need for the metadata.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Component</name> <super_list><extends>extends <super><name>MetadataComponent</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyType</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>clusteringTypes</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>staticColumns</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>regularColumns</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>EncodingStats</name></type> <name>stats</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Component</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyType</name></decl></parameter>,
                          <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>clusteringTypes</name></decl></parameter>,
                          <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>staticColumns</name></decl></parameter>,
                          <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>regularColumns</name></decl></parameter>,
                          <parameter><decl><type><name>EncodingStats</name></type> <name>stats</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyType</name></name> <operator>=</operator> <name>keyType</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clusteringTypes</name></name> <operator>=</operator> <name>clusteringTypes</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>staticColumns</name></name> <operator>=</operator> <name>staticColumns</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>regularColumns</name></name> <operator>=</operator> <name>regularColumns</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>stats</name></name> <operator>=</operator> <name>stats</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * &lt;em&gt;Only&lt;/em&gt; exposed for {@link org.apache.cassandra.io.sstable.SSTableHeaderFix}.
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Component</name></type> <name>buildComponentForTools</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyType</name></decl></parameter>,
                                                       <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>clusteringTypes</name></decl></parameter>,
                                                       <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>staticColumns</name></decl></parameter>,
                                                       <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>regularColumns</name></decl></parameter>,
                                                       <parameter><decl><type><name>EncodingStats</name></type> <name>stats</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Component</name><argument_list>(<argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>clusteringTypes</name></expr></argument>, <argument><expr><name>staticColumns</name></expr></argument>, <argument><expr><name>regularColumns</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>MetadataType</name></type> <name>getType</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name><name>MetadataType</name><operator>.</operator><name>HEADER</name></name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>SerializationHeader</name></type> <name>toHeader</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownColumnException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>typeMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>staticColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>regularColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>RegularAndStaticColumns</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>RegularAndStaticColumns</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name> <range>: <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>staticColumns</name></expr></argument>, <argument><expr><name>regularColumns</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>isStatic</name> <init>= <expr><name>map</name> <operator>==</operator> <name>staticColumns</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><call><name><name>map</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>name</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>other</name> <init>= <expr><call><name><name>typeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>other</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>other</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Column "</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">" occurs as both regular and static with types "</literal> <operator>+</operator> <name>other</name> <operator>+</operator> <literal type="string">"and "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

                    <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>column</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>isStatic</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// TODO: this imply we don't read data for a column we don't yet know about, which imply this is theoretically</comment>
                        <comment type="line">// racy with column addition. Currently, it is up to the user to not write data before the schema has propagated</comment>
                        <comment type="line">// and this is far from being the only place that has such problem in practice. This doesn't mean we shouldn't</comment>
                        <comment type="line">// improve this.</comment>

                        <comment type="line">// If we don't find the definition, it could be we have data for a dropped column, and we shouldn't</comment>
                        <comment type="line">// fail deserialization because of that. So we grab a "fake" ColumnDefinition that ensure proper</comment>
                        <comment type="line">// deserialization. The column will be ignore later on anyway.</comment>
                        <expr_stmt><expr><name>column</name> <operator>=</operator> <call><name><name>metadata</name><operator>.</operator><name>getDroppedColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>isStatic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                            <throw>throw <expr><operator>new</operator> <call><name>UnknownColumnException</name><argument_list>(<argument><expr><literal type="string">"Unknown column "</literal> <operator>+</operator> <call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" during deserialization"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>

            <return>return <expr><operator>new</operator> <call><name>SerializationHeader</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>clusteringTypes</name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>stats</name></expr></argument>, <argument><expr><name>typeMap</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>Component</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>Component</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>Component</name><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>keyType</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>keyType</name></name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>clusteringTypes</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>clusteringTypes</name></name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>staticColumns</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>staticColumns</name></name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>regularColumns</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>regularColumns</name></name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>stats</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>stats</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>clusteringTypes</name></expr></argument>, <argument><expr><name>staticColumns</name></expr></argument>, <argument><expr><name>regularColumns</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SerializationHeader.Component[key=%s, cks=%s, statics=%s, regulars=%s, stats=%s]"</literal></expr></argument>,
                                 <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>clusteringTypes</name></expr></argument>, <argument><expr><name>staticColumns</name></expr></argument>, <argument><expr><name>regularColumns</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getKeyType</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>keyType</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getClusteringTypes</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>clusteringTypes</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getStaticColumns</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>staticColumns</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRegularColumns</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>regularColumns</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>EncodingStats</name></type> <name>getEncodingStats</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>stats</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Serializer</name> <super_list><implements>implements <super><name><name>IMetadataComponentSerializer</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serializeForMessaging</name><parameter_list>(<parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>ColumnFilter</name></type> <name>selection</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hasStatic</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>EncodingStats</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>stats</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>selection</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>hasStatic</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>columns</name><operator>.</operator><name>statics</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>columns</name><operator>.</operator><name>regulars</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>hasStatic</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializeSubset</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>columns</name><operator>.</operator><name>statics</name></name></expr></argument>, <argument><expr><call><name><name>selection</name><operator>.</operator><name>fetchedColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><name>statics</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializeSubset</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>columns</name><operator>.</operator><name>regulars</name></name></expr></argument>, <argument><expr><call><name><name>selection</name><operator>.</operator><name>fetchedColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><name>regulars</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>SerializationHeader</name></type> <name>deserializeForMessaging</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>ColumnFilter</name></type> <name>selection</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hasStatic</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>EncodingStats</name></type> <name>stats</name> <init>= <expr><call><name><name>EncodingStats</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyType</name> <init>= <expr><name><name>metadata</name><operator>.</operator><name>partitionKeyType</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>clusteringTypes</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>comparator</name><operator>.</operator><name>subtypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Columns</name></type> <name>statics</name></decl>, <decl><type ref="prev"/><name>regulars</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>selection</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>statics</name> <operator>=</operator> <ternary><condition><expr><name>hasStatic</name></expr> ?</condition><then> <expr><call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>Columns</name><operator>.</operator><name>NONE</name></name></expr></else></ternary></expr>;</expr_stmt>
                <expr_stmt><expr><name>regulars</name> <operator>=</operator> <call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>statics</name> <operator>=</operator> <ternary><condition><expr><name>hasStatic</name></expr> ?</condition><then> <expr><call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserializeSubset</name></name><argument_list>(<argument><expr><call><name><name>selection</name><operator>.</operator><name>fetchedColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><name>statics</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>Columns</name><operator>.</operator><name>NONE</name></name></expr></else></ternary></expr>;</expr_stmt>
                <expr_stmt><expr><name>regulars</name> <operator>=</operator> <call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserializeSubset</name></name><argument_list>(<argument><expr><call><name><name>selection</name><operator>.</operator><name>fetchedColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><name>regulars</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <return>return <expr><operator>new</operator> <call><name>SerializationHeader</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>clusteringTypes</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>RegularAndStaticColumns</name><argument_list>(<argument><expr><name>statics</name></expr></argument>, <argument><expr><name>regulars</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stats</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSizeForMessaging</name><parameter_list>(<parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>ColumnFilter</name></type> <name>selection</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hasStatic</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>EncodingStats</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>stats</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>selection</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>hasStatic</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>columns</name><operator>.</operator><name>statics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>columns</name><operator>.</operator><name>regulars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>hasStatic</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSubsetSize</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>columns</name><operator>.</operator><name>statics</name></name></expr></argument>, <argument><expr><call><name><name>selection</name><operator>.</operator><name>fetchedColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><name>statics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>Columns</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSubsetSize</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>columns</name><operator>.</operator><name>regulars</name></name></expr></argument>, <argument><expr><call><name><name>selection</name><operator>.</operator><name>fetchedColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><name>regulars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// For SSTables</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>Version</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>Component</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>EncodingStats</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>stats</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>writeType</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>keyType</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><call><name><name>header</name><operator>.</operator><name>clusteringTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <range>: <expr><name><name>header</name><operator>.</operator><name>clusteringTypes</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>writeType</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>writeColumnsWithTypes</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>staticColumns</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeColumnsWithTypes</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>regularColumns</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="line">// For SSTables</comment>
        <function><type><specifier>public</specifier> <name>Component</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>Version</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>EncodingStats</name></type> <name>stats</name> <init>= <expr><call><name><name>EncodingStats</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyType</name> <init>= <expr><call><name>readType</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>clusteringTypes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>clusteringTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>readType</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>staticColumns</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>regularColumns</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>readColumnsWithType</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>staticColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>readColumnsWithType</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>regularColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><operator>new</operator> <call><name>Component</name><argument_list>(<argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>clusteringTypes</name></expr></argument>, <argument><expr><name>staticColumns</name></expr></argument>, <argument><expr><name>regularColumns</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// For SSTables</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>Version</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>Component</name></type> <name>header</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>EncodingStats</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>stats</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeofType</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>keyType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeofUnsignedVInt</name></name><argument_list>(<argument><expr><call><name><name>header</name><operator>.</operator><name>clusteringTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <range>: <expr><name><name>header</name><operator>.</operator><name>clusteringTypes</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeofType</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeofColumnsWithTypes</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>staticColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeofColumnsWithTypes</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>regularColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>writeColumnsWithTypes</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><call><name><name>columns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>columns</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>writeWithVIntLength</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>writeType</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>long</name></type> <name>sizeofColumnsWithTypes</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeofUnsignedVInt</name></name><argument_list>(<argument><expr><call><name><name>columns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>columns</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>ByteBufferUtil</name><operator>.</operator><name>serializedSizeWithVIntLength</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeofType</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>readColumnsWithType</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>typeMap</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>name</name> <init>= <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>readWithVIntLength</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>typeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>readType</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>writeType</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <comment type="line">// TODO: we should have a terser serializaion format. Not a big deal though</comment>
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>writeWithVIntLength</name></name><argument_list>(<argument><expr><call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>readType</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>raw</name> <init>= <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>readWithVIntLength</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>TypeParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>sizeofType</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>serializedSizeWithVIntLength</name></name><argument_list>(<argument><expr><call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
