<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/index/sasi/plan/QueryPlan.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>sasi</name><operator>.</operator><name>plan</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>UnfilteredPartitionIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>AbstractBounds</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>sasi</name><operator>.</operator><name>disk</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>sasi</name><operator>.</operator><name>plan</name><operator>.</operator><name>Operation</name><operator>.</operator><name>OperationType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>AbstractIterator</name></name>;</import>

<class><specifier>public</specifier> class <name>QueryPlan</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>QueryController</name></type> <name>controller</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>QueryPlan</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>, <parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>executionQuotaMs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>controller</name></name> <operator>=</operator> <operator>new</operator> <call><name>QueryController</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><operator>(</operator><name>PartitionRangeReadCommand</name><operator>)</operator> <name>command</name></expr></argument>, <argument><expr><name>executionQuotaMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Converts expressions into operation tree (which is currently just a single AND).
     *
     * Operation tree allows us to do a couple of important optimizations
     * namely, group flattening for AND operations (query rewrite), expression bounds checks,
     * "satisfies by" checks for resulting rows with an early exit.
     *
     * @return root of the operations tree.
     */</comment>
    <function><type><specifier>private</specifier> <name>Operation</name></type> <name>analyze</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Operation</name><operator>.</operator><name>Builder</name></name></type> <name>and</name> <init>= <expr><operator>new</operator> <call><name><name>Operation</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name><name>OperationType</name><operator>.</operator><name>AND</name></name></expr></argument>, <argument><expr><name>controller</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>getExpressions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>and</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>and</name><operator>.</operator><name>complete</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> | <type><name>Error</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>UnfilteredPartitionIterator</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ReadExecutionController</name></type> <name>executionController</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RequestTimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ResultIterator</name><argument_list>(<argument><expr><call><name>analyze</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>controller</name></expr></argument>, <argument><expr><name>executionController</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ResultIterator</name> <super_list><extends>extends <super><name><name>AbstractIterator</name><argument_list type="generic">&lt;<argument><name>UnfilteredRowIterator</name></argument>&gt;</argument_list></name></super></extends> <implements>implements <super><name>UnfilteredPartitionIterator</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>PartitionPosition</name></argument>&gt;</argument_list></name></type> <name>keyRange</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Operation</name></type> <name>operationTree</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>QueryController</name></type> <name>controller</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ReadExecutionController</name></type> <name>executionController</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>currentKeys</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ResultIterator</name><parameter_list>(<parameter><decl><type><name>Operation</name></type> <name>operationTree</name></decl></parameter>, <parameter><decl><type><name>QueryController</name></type> <name>controller</name></decl></parameter>, <parameter><decl><type><name>ReadExecutionController</name></type> <name>executionController</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyRange</name></name> <operator>=</operator> <call><name><name>controller</name><operator>.</operator><name>dataRange</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keyRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>operationTree</name></name> <operator>=</operator> <name>operationTree</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>controller</name></name> <operator>=</operator> <name>controller</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>executionController</name></name> <operator>=</operator> <name>executionController</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>operationTree</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>operationTree</name><operator>.</operator><name>skipTo</name></name><argument_list>(<argument><expr><operator>(</operator><name>Long</name><operator>)</operator> <call><name><name>keyRange</name><operator>.</operator><name>left</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTokenValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>protected</specifier> <name>UnfilteredRowIterator</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>operationTree</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>currentKeys</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>currentKeys</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>operationTree</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                         <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                    <decl_stmt><decl><type><name>Token</name></type> <name>token</name> <init>= <expr><call><name><name>operationTree</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>currentKeys</name> <operator>=</operator> <call><name><name>token</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <while>while <condition>(<expr><call><name><name>currentKeys</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>key</name> <init>= <expr><call><name><name>currentKeys</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>keyRange</name><operator>.</operator><name>right</name><operator>.</operator><name>isMinimum</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>keyRange</name><operator>.</operator><name>right</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>keyRange</name><operator>.</operator><name>inclusiveLeft</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>key</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>keyRange</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue;</continue></block_content></block></if></if_stmt>

                    <try>try <init>(<decl><type><name>UnfilteredRowIterator</name></type> <name>partition</name> <init>= <expr><call><name><name>controller</name><operator>.</operator><name>getPartition</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>executionController</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>Row</name></type> <name>staticRow</name> <init>= <expr><call><name><name>partition</name><operator>.</operator><name>staticRow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Unfiltered</name></argument>&gt;</argument_list></name></type> <name>clusters</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <while>while <condition>(<expr><call><name><name>partition</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>Unfiltered</name></type> <name>row</name> <init>= <expr><call><name><name>partition</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><call><name><name>operationTree</name><operator>.</operator><name>satisfiedBy</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>staticRow</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name><name>clusters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        </block_content>}</block></while>

                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>clusters</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <return>return <expr><operator>new</operator> <call><name>PartitionIterator</name><argument_list>(<argument><expr><name>partition</name></expr></argument>, <argument><expr><name>clusters</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block></try>
                </block_content>}</block></while>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <class><specifier>private</specifier> <specifier>static</specifier> class <name>PartitionIterator</name> <super_list><extends>extends <super><name>AbstractUnfilteredRowIterator</name></super></extends></super_list>
        <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Unfiltered</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>PartitionIterator</name><parameter_list>(<parameter><decl><type><name>UnfilteredRowIterator</name></type> <name>partition</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Unfiltered</name></argument>&gt;</argument_list></name></type> <name>content</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>partition</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name>partition</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name>partition</name><operator>.</operator><name>partitionLevelDeletion</name></name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name>partition</name><operator>.</operator><name>columns</name></name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name>partition</name><operator>.</operator><name>staticRow</name></name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name>partition</name><operator>.</operator><name>isReverseOrder</name></name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name>partition</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name><name>content</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name>Unfiltered</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><ternary><condition><expr><call><name><name>rows</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>rows</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
            </block_content>}</block></function>
        }</block></class>

        <function><type><specifier>public</specifier> <name>TableMetadata</name></type> <name>metadata</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>controller</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>operationTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
