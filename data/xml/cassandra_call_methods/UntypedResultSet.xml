<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/UntypedResultSet.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>datastax</name><operator>.</operator><name>driver</name><operator>.</operator><name>core</name><operator>.</operator><name>CodecUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>types</name><operator>.</operator><name>LocalDate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ColumnMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>SelectStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ClientState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>pager</name><operator>.</operator><name>QueryPager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>ProtocolVersion</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>AbstractIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/** a utility for doing internal cql-based queries */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>UntypedResultSet</name> <super_list><implements>implements <super><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UntypedResultSet</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>ResultSet</name></type> <name>rs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>FromResultSet</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UntypedResultSet</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>results</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>FromResultList</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UntypedResultSet</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>SelectStatement</name></type> <name>select</name></decl></parameter>, <parameter><decl><type><name>QueryPager</name></type> <name>pager</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>FromPager</name><argument_list>(<argument><expr><name>select</name></expr></argument>, <argument><expr><name>pager</name></expr></argument>, <argument><expr><name>pageSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method is intended for testing purposes, since it executes query on cluster
     * and not on the local node only.
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>UntypedResultSet</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>SelectStatement</name></type> <name>select</name></decl></parameter>,
                                          <parameter><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></parameter>,
                                          <parameter><decl><type><name>ClientState</name></type> <name>clientState</name></decl></parameter>,
                                          <parameter><decl><type><name>QueryPager</name></type> <name>pager</name></decl></parameter>,
                                          <parameter><decl><type><name>int</name></type> <name>pageSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>FromDistributedPager</name><argument_list>(<argument><expr><name>select</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>clientState</name></expr></argument>, <argument><expr><name>pager</name></expr></argument>, <argument><expr><name>pageSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Row</name></type> <name>one</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// No implemented by all subclasses, but we use it when we know it's there (for tests)</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name><parameter_list>()</parameter_list>;</function_decl>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>FromResultSet</name> <super_list><extends>extends <super><name>UntypedResultSet</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ResultSet</name></type> <name>cqlRows</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>FromResultSet</name><parameter_list>(<parameter><decl><type><name>ResultSet</name></type> <name>cqlRows</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cqlRows</name></name> <operator>=</operator> <name>cqlRows</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>cqlRows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Row</name></type> <name>one</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>cqlRows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"One row required, "</literal> <operator>+</operator> <call><name><name>cqlRows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" found"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>Row</name><argument_list>(<argument><expr><call><name><name>cqlRows</name><operator>.</operator><name>metadata</name><operator>.</operator><name>requestNames</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cqlRows</name><operator>.</operator><name>rows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <class><super><name><name>AbstractIterator</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>cqlRows</name><operator>.</operator><name>rows</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <function><type><specifier>protected</specifier> <name>Row</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
                    <return>return <expr><operator>new</operator> <call><name>Row</name><argument_list>(<argument><expr><call><name><name>cqlRows</name><operator>.</operator><name>metadata</name><operator>.</operator><name>requestNames</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>cqlRows</name><operator>.</operator><name>metadata</name><operator>.</operator><name>requestNames</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>FromResultList</name> <super_list><extends>extends <super><name>UntypedResultSet</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cqlRows</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>FromResultList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cqlRows</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cqlRows</name></name> <operator>=</operator> <name>cqlRows</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>cqlRows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Row</name></type> <name>one</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>cqlRows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"One row required, "</literal> <operator>+</operator> <call><name><name>cqlRows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" found"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>Row</name><argument_list>(<argument><expr><call><name><name>cqlRows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <class><super><name><name>AbstractIterator</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>cqlRows</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <function><type><specifier>protected</specifier> <name>Row</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
                    <return>return <expr><operator>new</operator> <call><name>Row</name><argument_list>(<argument><expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>FromPager</name> <super_list><extends>extends <super><name>UntypedResultSet</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SelectStatement</name></type> <name>select</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>QueryPager</name></type> <name>pager</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>pageSize</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>FromPager</name><parameter_list>(<parameter><decl><type><name>SelectStatement</name></type> <name>select</name></decl></parameter>, <parameter><decl><type><name>QueryPager</name></type> <name>pager</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageSize</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>select</name></name> <operator>=</operator> <name>select</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pager</name></name> <operator>=</operator> <name>pager</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pageSize</name></name> <operator>=</operator> <name>pageSize</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadata</name></name> <operator>=</operator> <call><name><name>select</name><operator>.</operator><name>getResultMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>requestNames</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Row</name></type> <name>one</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <class><super><name><name>AbstractIterator</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>currentPage</name></decl>;</decl_stmt>

                <function><type><specifier>protected</specifier> <name>Row</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>nowInSec</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr><name>currentPage</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>currentPage</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>pager</name><operator>.</operator><name>isExhausted</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                        <try>try <init>(<decl><type><name>ReadExecutionController</name></type> <name>executionController</name> <init>= <expr><call><name><name>pager</name><operator>.</operator><name>executionController</name></name><argument_list>()</argument_list></call></expr></init></decl>;
                             <decl><type><name>PartitionIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>pager</name><operator>.</operator><name>fetchPageInternal</name></name><argument_list>(<argument><expr><name>pageSize</name></expr></argument>, <argument><expr><name>executionController</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
                        <block>{<block_content>
                            <expr_stmt><expr><name>currentPage</name> <operator>=</operator> <call><name><name>select</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>rows</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></try>
                    </block_content>}</block></while>
                    <return>return <expr><operator>new</operator> <call><name>Row</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><call><name><name>currentPage</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>metadata</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Pager that calls `execute` rather than `executeInternal`
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>FromDistributedPager</name> <super_list><extends>extends <super><name>UntypedResultSet</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SelectStatement</name></type> <name>select</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ConsistencyLevel</name></type> <name>cl</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ClientState</name></type> <name>clientState</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>QueryPager</name></type> <name>pager</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>pageSize</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>FromDistributedPager</name><parameter_list>(<parameter><decl><type><name>SelectStatement</name></type> <name>select</name></decl></parameter>,
                                     <parameter><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></parameter>,
                                     <parameter><decl><type><name>ClientState</name></type> <name>clientState</name></decl></parameter>,
                                     <parameter><decl><type><name>QueryPager</name></type> <name>pager</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageSize</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>select</name></name> <operator>=</operator> <name>select</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cl</name></name> <operator>=</operator> <name>cl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clientState</name></name> <operator>=</operator> <name>clientState</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pager</name></name> <operator>=</operator> <name>pager</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pageSize</name></name> <operator>=</operator> <name>pageSize</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadata</name></name> <operator>=</operator> <call><name><name>select</name><operator>.</operator><name>getResultMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>requestNames</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Row</name></type> <name>one</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <class><super><name><name>AbstractIterator</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>currentPage</name></decl>;</decl_stmt>

                <function><type><specifier>protected</specifier> <name>Row</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>nowInSec</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr><name>currentPage</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>currentPage</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>pager</name><operator>.</operator><name>isExhausted</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                        <try>try <init>(<decl><type><name>PartitionIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>pager</name><operator>.</operator><name>fetchPage</name></name><argument_list>(<argument><expr><name>pageSize</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>, <argument><expr><name>clientState</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init>
                        <block>{<block_content>
                            <expr_stmt><expr><name>currentPage</name> <operator>=</operator> <call><name><name>select</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>rows</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></try>
                    </block_content>}</block></while>
                    <return>return <expr><operator>new</operator> <call><name>Row</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><call><name><name>currentPage</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>metadata</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Row</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Row</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>data</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>public</specifier> <name>Row</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>columns</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>names</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>names</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>columns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Row</name></type> <name>fromInternalRow</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>ByteBuffer</name><index>[]</index></name></type> <name>keyComponents</name> <init>= <expr><call><name><name>SelectStatement</name><operator>.</operator><name>getComponents</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>def</name> <range>: <expr><call><name><name>metadata</name><operator>.</operator><name>partitionKeyColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>keyComponents</name><index>[<expr><call><name><name>def</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <decl_stmt><decl><type><name><name>Clustering</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clustering</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>clustering</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>def</name> <range>: <expr><call><name><name>metadata</name><operator>.</operator><name>clusteringColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>clustering</name><operator>.</operator><name>bufferAt</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>def</name> <range>: <expr><call><name><name>metadata</name><operator>.</operator><name>regularAndStaticColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>def</name><operator>.</operator><name>isSimple</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>cell</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getCell</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>cell</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cell</name><operator>.</operator><name>buffer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ComplexColumnData</name></type> <name>complexData</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getComplexColumnData</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>complexData</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>def</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>CollectionType</name><operator>)</operator><name><name>def</name><operator>.</operator><name>type</name></name><operator>)</operator><operator>.</operator><call><name>serializeForNativeProtocol</name><argument_list>(<argument><expr><call><name><name>complexData</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V3</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

            <return>return <expr><operator>new</operator> <call><name>Row</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>has</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// Note that containsKey won't work because we may have null values</comment>
            <return>return <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>getBlob</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>BooleanType</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>byte</name></type> <name>getByte</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>ByteType</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>short</name></type> <name>getShort</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>ShortType</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Int32Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>double</name></type> <name>getDouble</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>DoubleType</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>getBytes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getByteArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buf</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>arr</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>buf</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>arr</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>buf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>buf</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <return>return <expr><name>arr</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>InetAddress</name></type> <name>getInetAddress</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>InetAddressType</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getUUID</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>UUIDType</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Date</name></type> <name>getTimestamp</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>TimestampType</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>LocalDate</name></type> <name>getDate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>LocalDate</name><operator>.</operator><name>fromDaysSinceEpoch</name></name><argument_list>(<argument><expr><call><name><name>CodecUtils</name><operator>.</operator><name>fromUnsignedToSignedInt</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>getLong</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>LongType</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getSet</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>raw</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>raw</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>SetType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>raw</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>raw</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>ListType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>K</name></parameter>, <parameter><name>V</name></parameter>&gt;</parameter_list> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>getMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>K</name></argument>&gt;</argument_list></name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>valueType</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>raw</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>raw</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>MapType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>valueType</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTextMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>getMap</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getFrozenSet</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>raw</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>raw</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>SetType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getFrozenList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>raw</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>raw</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>ListType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>K</name></parameter>, <parameter><name>V</name></parameter>&gt;</parameter_list> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>getFrozenMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>K</name></argument>&gt;</argument_list></name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>valueType</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>raw</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>raw</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>MapType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>valueType</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getFrozenTextMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>getFrozenMap</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>getColumns</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>columns</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>data</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
