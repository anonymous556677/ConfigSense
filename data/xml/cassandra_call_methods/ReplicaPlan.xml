<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/locator/ReplicaPlan.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Keyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>PartitionPosition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>AbstractBounds</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Predicate</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>ReplicaPlan</name><parameter_list>&lt;<parameter><name>E</name> <extends>extends <name><name>Endpoints</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Keyspace</name></type> <name>keyspace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl>;</decl_stmt>
    <comment type="line">// The snapshot of the replication strategy when instantiating.</comment>
    <comment type="line">// It could be different than the one fetched from Keyspace later, e.g. RS altered during the query.</comment>
    <comment type="line">// Use the snapshot to calculate {@code blockFor} in order to have a consistent view of RS for the query.</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name></decl>;</decl_stmt>

    <comment type="line">// all nodes we will contact via any mechanism, including hints</comment>
    <comment type="line">// i.e., for:</comment>
    <comment type="line">//  - reads, only live natural replicas</comment>
    <comment type="line">//      ==&gt; live.natural().subList(0, blockFor + initial speculate)</comment>
    <comment type="line">//  - writes, includes all full, and any pending replicas, (and only any necessary transient ones to make up the difference)</comment>
    <comment type="line">//      ==&gt; liveAndDown.natural().filter(isFull) ++ liveAndDown.pending() ++ live.natural.filter(isTransient, req)</comment>
    <comment type="line">//  - paxos, includes all live replicas (natural+pending), for this DC if SERIAL_LOCAL</comment>
    <comment type="line">//      ==&gt; live.all()  (if consistencyLevel.isDCLocal(), then .filter(consistencyLevel.isLocal))</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>E</name></type> <name>contacts</name></decl>;</decl_stmt>

    <constructor><name>ReplicaPlan</name><parameter_list>(<parameter><decl><type><name>Keyspace</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>E</name></type> <name>contacts</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>contacts</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspace</name></name> <operator>=</operator> <name>keyspace</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>replicationStrategy</name></name> <operator>=</operator> <name>replicationStrategy</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>consistencyLevel</name></name> <operator>=</operator> <name>consistencyLevel</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contacts</name></name> <operator>=</operator> <name>contacts</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>blockFor</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>E</name></type> <name>contacts</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>contacts</name></expr>;</return> </block_content>}</block></function>

    <comment type="line">// TODO: should this semantically return true if we contain the endpoint, not the exact replica?</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contacts</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>contacts</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>Keyspace</name></type> <name>keyspace</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>keyspace</name></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>replicationStrategy</name></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>ConsistencyLevel</name></type> <name>consistencyLevel</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>consistencyLevel</name></expr>;</return> </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name><name>ForRead</name><parameter_list>&lt;<parameter><name>E</name> <extends>extends <name><name>Endpoints</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>ReplicaPlan</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <comment type="line">// all nodes we *could* contacts; typically all natural replicas that are believed to be alive</comment>
        <comment type="line">// we will consult this collection to find uncontacted nodes we might contact if we doubt we will meet consistency level</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>E</name></type> <name>candidates</name></decl>;</decl_stmt>

        <constructor><name>ForRead</name><parameter_list>(<parameter><decl><type><name>Keyspace</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>E</name></type> <name>candidates</name></decl></parameter>, <parameter><decl><type><name>E</name></type> <name>contacts</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>replicationStrategy</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>contacts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>candidates</name></name> <operator>=</operator> <name>candidates</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>blockFor</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>consistencyLevel</name><operator>.</operator><name>blockFor</name></name><argument_list>(<argument><expr><name>replicationStrategy</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>E</name></type> <name>candidates</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>candidates</name></expr>;</return> </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Replica</name></type> <name>firstUncontactedCandidate</name><parameter_list>(<parameter><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>extraPredicate</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>tryFind</name></name><argument_list>(<argument><expr><call><name>candidates</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>extraPredicate</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>contacts</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Replica</name></type> <name>lookup</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>candidates</name><argument_list>()</argument_list></call><operator>.</operator><call><name>byEndpoint</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"ReplicaPlan.ForRead [ CL: "</literal> <operator>+</operator> <name>consistencyLevel</name> <operator>+</operator> <literal type="string">" keyspace: "</literal> <operator>+</operator> <name>keyspace</name> <operator>+</operator> <literal type="string">" candidates: "</literal> <operator>+</operator> <name>candidates</name> <operator>+</operator> <literal type="string">" contacts: "</literal> <operator>+</operator> <call><name>contacts</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" ]"</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ForTokenRead</name> <super_list><extends>extends <super><name><name>ForRead</name><argument_list type="generic">&lt;<argument><name>EndpointsForToken</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <constructor><specifier>public</specifier> <name>ForTokenRead</name><parameter_list>(<parameter><decl><type><name>Keyspace</name></type> <name>keyspace</name></decl></parameter>,
                            <parameter><decl><type><name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name></decl></parameter>,
                            <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>,
                            <parameter><decl><type><name>EndpointsForToken</name></type> <name>candidates</name></decl></parameter>,
                            <parameter><decl><type><name>EndpointsForToken</name></type> <name>contacts</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>replicationStrategy</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>candidates</name></expr></argument>, <argument><expr><name>contacts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>ForTokenRead</name></type> <name>withContact</name><parameter_list>(<parameter><decl><type><name>EndpointsForToken</name></type> <name>newContact</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ForTokenRead</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>replicationStrategy</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><call><name>candidates</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newContact</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ForRangeRead</name> <super_list><extends>extends <super><name><name>ForRead</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>PartitionPosition</name></argument>&gt;</argument_list></name></type> <name>range</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>vnodeCount</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ForRangeRead</name><parameter_list>(<parameter><decl><type><name>Keyspace</name></type> <name>keyspace</name></decl></parameter>,
                            <parameter><decl><type><name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name></decl></parameter>,
                            <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>,
                            <parameter><decl><type><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>PartitionPosition</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>,
                            <parameter><decl><type><name>EndpointsForRange</name></type> <name>candidates</name></decl></parameter>,
                            <parameter><decl><type><name>EndpointsForRange</name></type> <name>contact</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>vnodeCount</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>replicationStrategy</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>candidates</name></expr></argument>, <argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>range</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>vnodeCount</name></name> <operator>=</operator> <name>vnodeCount</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>PartitionPosition</name></argument>&gt;</argument_list></name></type> <name>range</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>range</name></expr>;</return> </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * @return number of vnode ranges covered by the range
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>vnodeCount</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>vnodeCount</name></expr>;</return> </block_content>}</block></function>

        <function><type><name>ForRangeRead</name></type> <name>withContact</name><parameter_list>(<parameter><decl><type><name>EndpointsForRange</name></type> <name>newContact</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ForRangeRead</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>replicationStrategy</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><call><name>candidates</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newContact</name></expr></argument>, <argument><expr><name>vnodeCount</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name><name>ForWrite</name><parameter_list>&lt;<parameter><name>E</name> <extends>extends <name><name>Endpoints</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>ReplicaPlan</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <comment type="line">// TODO: this is only needed because of poor isolation of concerns elsewhere - we can remove it soon, and will do so in a follow-up patch</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>E</name></type> <name>pending</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>E</name></type> <name>liveAndDown</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>E</name></type> <name>live</name></decl>;</decl_stmt>

        <constructor><name>ForWrite</name><parameter_list>(<parameter><decl><type><name>Keyspace</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>E</name></type> <name>pending</name></decl></parameter>, <parameter><decl><type><name>E</name></type> <name>liveAndDown</name></decl></parameter>, <parameter><decl><type><name>E</name></type> <name>live</name></decl></parameter>, <parameter><decl><type><name>E</name></type> <name>contact</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>replicationStrategy</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pending</name></name> <operator>=</operator> <name>pending</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>liveAndDown</name></name> <operator>=</operator> <name>liveAndDown</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>live</name></name> <operator>=</operator> <name>live</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>blockFor</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>consistencyLevel</name><operator>.</operator><name>blockForWrite</name></name><argument_list>(<argument><expr><name>replicationStrategy</name></expr></argument>, <argument><expr><call><name>pending</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

        <comment type="block" format="javadoc">/** Replicas that a region of the ring is moving to; not yet ready to serve reads, but should receive writes */</comment>
        <function><type><specifier>public</specifier> <name>E</name></type> <name>pending</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>pending</name></expr>;</return> </block_content>}</block></function>
        <comment type="block" format="javadoc">/** Replicas that can participate in the write - this always includes all nodes (pending and natural) in all DCs, except for paxos LOCAL_QUORUM (which is local DC only) */</comment>
        <function><type><specifier>public</specifier> <name>E</name></type> <name>liveAndDown</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>liveAndDown</name></expr>;</return> </block_content>}</block></function>
        <comment type="block" format="javadoc">/** The live replicas present in liveAndDown, usually derived from FailureDetector.isReplicaAlive */</comment>
        <function><type><specifier>public</specifier> <name>E</name></type> <name>live</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>live</name></expr>;</return> </block_content>}</block></function>
        <comment type="block" format="javadoc">/** Calculate which live endpoints we could have contacted, but chose not to */</comment>
        <function><type><specifier>public</specifier> <name>E</name></type> <name>liveUncontacted</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>live</name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name>contacts</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
        <comment type="block" format="javadoc">/** Test liveness, consistent with the upfront analysis done for this operation (i.e. test membership of live()) */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAlive</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>live</name><operator>.</operator><name>endpoints</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>Replica</name></type> <name>lookup</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>liveAndDown</name><argument_list>()</argument_list></call><operator>.</operator><call><name>byEndpoint</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"ReplicaPlan.ForWrite [ CL: "</literal> <operator>+</operator> <name>consistencyLevel</name> <operator>+</operator> <literal type="string">" keyspace: "</literal> <operator>+</operator> <name>keyspace</name> <operator>+</operator> <literal type="string">" liveAndDown: "</literal> <operator>+</operator> <name>liveAndDown</name> <operator>+</operator> <literal type="string">" live: "</literal> <operator>+</operator> <name>live</name> <operator>+</operator> <literal type="string">" contacts: "</literal> <operator>+</operator> <call><name>contacts</name><argument_list>()</argument_list></call> <operator>+</operator>  <literal type="string">" ]"</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ForTokenWrite</name> <super_list><extends>extends <super><name><name>ForWrite</name><argument_list type="generic">&lt;<argument><name>EndpointsForToken</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <constructor><specifier>public</specifier> <name>ForTokenWrite</name><parameter_list>(<parameter><decl><type><name>Keyspace</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>AbstractReplicationStrategy</name></type> <name>replicationStrategy</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>EndpointsForToken</name></type> <name>pending</name></decl></parameter>, <parameter><decl><type><name>EndpointsForToken</name></type> <name>liveAndDown</name></decl></parameter>, <parameter><decl><type><name>EndpointsForToken</name></type> <name>live</name></decl></parameter>, <parameter><decl><type><name>EndpointsForToken</name></type> <name>contact</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>replicationStrategy</name></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>pending</name></expr></argument>, <argument><expr><name>liveAndDown</name></expr></argument>, <argument><expr><name>live</name></expr></argument>, <argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>private</specifier> <name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name>ConsistencyLevel</name></type> <name>newConsistencyLevel</name></decl></parameter>, <parameter><decl><type><name>EndpointsForToken</name></type> <name>newContact</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>replicationStrategy</name></expr></argument>, <argument><expr><name>newConsistencyLevel</name></expr></argument>, <argument><expr><call><name>pending</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>liveAndDown</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>live</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newContact</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>ForTokenWrite</name></type> <name>withConsistencyLevel</name><parameter_list>(<parameter><decl><type><name>ConsistencyLevel</name></type> <name>newConsistencylevel</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>copy</name><argument_list>(<argument><expr><name>newConsistencylevel</name></expr></argument>, <argument><expr><call><name>contacts</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>ForTokenWrite</name></type> <name>withContact</name><parameter_list>(<parameter><decl><type><name>EndpointsForToken</name></type> <name>newContact</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>copy</name><argument_list>(<argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>newContact</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ForPaxosWrite</name> <super_list><extends>extends <super><name><name>ForWrite</name><argument_list type="generic">&lt;<argument><name>EndpointsForToken</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>requiredParticipants</name></decl>;</decl_stmt>

        <constructor><name>ForPaxosWrite</name><parameter_list>(<parameter><decl><type><name>Keyspace</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>ConsistencyLevel</name></type> <name>consistencyLevel</name></decl></parameter>, <parameter><decl><type><name>EndpointsForToken</name></type> <name>pending</name></decl></parameter>, <parameter><decl><type><name>EndpointsForToken</name></type> <name>liveAndDown</name></decl></parameter>, <parameter><decl><type><name>EndpointsForToken</name></type> <name>live</name></decl></parameter>, <parameter><decl><type><name>EndpointsForToken</name></type> <name>contact</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requiredParticipants</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>keyspace</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>consistencyLevel</name></expr></argument>, <argument><expr><name>pending</name></expr></argument>, <argument><expr><name>liveAndDown</name></expr></argument>, <argument><expr><name>live</name></expr></argument>, <argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>requiredParticipants</name></name> <operator>=</operator> <name>requiredParticipants</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>requiredParticipants</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>requiredParticipants</name></expr>;</return> </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Used by AbstractReadExecutor, {Data,Digest}Resolver and ReadRepair to share a ReplicaPlan whose 'contacts' replicas
     * we progressively modify via various forms of speculation (initial speculation, rr-read and rr-write)
     *
     * The internal reference is not volatile, despite being shared between threads.  The initial reference provided to
     * the constructor should be visible by the normal process of sharing data between threads (i.e. executors, etc)
     * and any updates will either be seen or not seen, perhaps not promptly, but certainly not incompletely.
     * The contained ReplicaPlan has only final member properties, so it cannot be seen partially initialised.
     */</comment>
    <interface><specifier>public</specifier> interface <name><name>Shared</name><parameter_list>&lt;<parameter><name>E</name> <extends>extends <name><name>Endpoints</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name></extends></parameter>, <parameter><name>P</name> <extends>extends <name><name>ReplicaPlan</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name>
    <block>{
        <comment type="block" format="javadoc">/**
         * add the provided replica to this shared plan, by updating the internal reference
         */</comment>
        <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>addToContacts</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>;</function_decl>
        <comment type="block" format="javadoc">/**
         * get the shared replica plan, non-volatile (so maybe stale) but no risk of partially initialised
         */</comment>
        <function_decl><type><specifier>public</specifier> <name>P</name></type> <name>get</name><parameter_list>()</parameter_list>;</function_decl>
        <comment type="block" format="javadoc">/**
         * get the shared replica plan, non-volatile (so maybe stale) but no risk of partially initialised,
         * but replace its 'contacts' with those provided
         */</comment>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>P</name></type> <name>getWithContacts</name><parameter_list>(<parameter><decl><type><name>E</name></type> <name>endpoints</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SharedForTokenRead</name> <super_list><implements>implements <super><name><name>Shared</name><argument_list type="generic">&lt;<argument><name>EndpointsForToken</name></argument>, <argument><name>ForTokenRead</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>ForTokenRead</name></type> <name>replicaPlan</name></decl>;</decl_stmt>
        <constructor><name>SharedForTokenRead</name><parameter_list>(<parameter><decl><type><name>ForTokenRead</name></type> <name>replicaPlan</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>this</name><operator>.</operator><name>replicaPlan</name></name> <operator>=</operator> <name>replicaPlan</name></expr>;</expr_stmt> </block_content>}</block></constructor>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addToContacts</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>replicaPlan</name> <operator>=</operator> <call><name><name>replicaPlan</name><operator>.</operator><name>withContact</name></name><argument_list>(<argument><expr><call><name><name>Endpoints</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>ForTokenRead</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>replicaPlan</name></expr>;</return> </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>ForTokenRead</name></type> <name>getWithContacts</name><parameter_list>(<parameter><decl><type><name>EndpointsForToken</name></type> <name>newContact</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>replicaPlan</name><operator>.</operator><name>withContact</name></name><argument_list>(<argument><expr><name>newContact</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SharedForRangeRead</name> <super_list><implements>implements <super><name><name>Shared</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>, <argument><name>ForRangeRead</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>ForRangeRead</name></type> <name>replicaPlan</name></decl>;</decl_stmt>
        <constructor><name>SharedForRangeRead</name><parameter_list>(<parameter><decl><type><name>ForRangeRead</name></type> <name>replicaPlan</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>this</name><operator>.</operator><name>replicaPlan</name></name> <operator>=</operator> <name>replicaPlan</name></expr>;</expr_stmt> </block_content>}</block></constructor>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addToContacts</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>replicaPlan</name> <operator>=</operator> <call><name><name>replicaPlan</name><operator>.</operator><name>withContact</name></name><argument_list>(<argument><expr><call><name><name>Endpoints</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>ForRangeRead</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>replicaPlan</name></expr>;</return> </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>ForRangeRead</name></type> <name>getWithContacts</name><parameter_list>(<parameter><decl><type><name>EndpointsForRange</name></type> <name>newContact</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>replicaPlan</name><operator>.</operator><name>withContact</name></name><argument_list>(<argument><expr><name>newContact</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SharedForTokenRead</name></type> <name>shared</name><parameter_list>(<parameter><decl><type><name>ForTokenRead</name></type> <name>replicaPlan</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>new</operator> <call><name>SharedForTokenRead</name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SharedForRangeRead</name></type> <name>shared</name><parameter_list>(<parameter><decl><type><name>ForRangeRead</name></type> <name>replicaPlan</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>new</operator> <call><name>SharedForRangeRead</name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

}</block></class>
</unit>
