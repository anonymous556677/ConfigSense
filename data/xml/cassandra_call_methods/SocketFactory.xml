<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/net/SocketFactory.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>ConnectException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>channels</name><operator>.</operator><name>ClosedChannelException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>channels</name><operator>.</operator><name>spi</name><operator>.</operator><name>SelectorProvider</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadFactory</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeoutException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLEngine</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLParameters</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLSession</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>bootstrap</name><operator>.</operator><name>Bootstrap</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>bootstrap</name><operator>.</operator><name>ServerBootstrap</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>Channel</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>ChannelFactory</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>DefaultSelectStrategyFactory</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>EventLoop</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>EventLoopGroup</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>ServerChannel</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>epoll</name><operator>.</operator><name>EpollChannelOption</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>epoll</name><operator>.</operator><name>EpollEventLoopGroup</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>epoll</name><operator>.</operator><name>EpollServerSocketChannel</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>epoll</name><operator>.</operator><name>EpollSocketChannel</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>nio</name><operator>.</operator><name>NioEventLoopGroup</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>socket</name><operator>.</operator><name>nio</name><operator>.</operator><name>NioServerSocketChannel</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>socket</name><operator>.</operator><name>nio</name><operator>.</operator><name>NioSocketChannel</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>unix</name><operator>.</operator><name>Errors</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>handler</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SslContext</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>handler</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SslHandler</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>handler</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SslClosedEngineException</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>DefaultEventExecutorChooserFactory</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>DefaultThreadFactory</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>RejectedExecutionHandlers</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadPerTaskExecutor</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>internal</name><operator>.</operator><name>logging</name><operator>.</operator><name>InternalLoggerFactory</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>internal</name><operator>.</operator><name>logging</name><operator>.</operator><name>Slf4JLoggerFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>NamedThreadFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>EncryptionOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>security</name><operator>.</operator><name>SSLFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>NativeTransportService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExecutorUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<import>import static <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>unix</name><operator>.</operator><name>Errors</name><operator>.</operator><name>ERRNO_ECONNRESET_NEGATIVE</name></name>;</import>
<import>import static <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>unix</name><operator>.</operator><name>Errors</name><operator>.</operator><name>ERROR_ECONNREFUSED_NEGATIVE</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Throwables</name><operator>.</operator><name>isCausedBy</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A factory for building Netty {@link Channel}s. Channels here are setup with a pipeline to participate
 * in the internode protocol handshake, either the inbound or outbound side as per the method invoked.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SocketFactory</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SocketFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EVENT_THREADS</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"internode-event-threads"</literal></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getAvailableProcessors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The default task queue used by {@code NioEventLoop} and {@code EpollEventLoop} is {@code MpscUnboundedArrayQueue},
     * provided by JCTools. While efficient, it has an undesirable quality for a queue backing an event loop: it is
     * not non-blocking, and can cause the event loop to busy-spin while waiting for a partially completed task
     * offer, if the producer thread has been suspended mid-offer.
     *
     * As it happens, however, we have an MPSC queue implementation that is perfectly fit for this purpose -
     * {@link ManyToOneConcurrentLinkedQueue}, that is non-blocking, and already used throughout the codebase,
     * that we can and do use here as well.
     */</comment>
    <enum>enum <name>Provider</name>
    <block>{
        <decl><name>NIO</name>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><name>NioEventLoopGroup</name></type> <name>makeEventLoopGroup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threadCount</name></decl></parameter>, <parameter><decl><type><name>ThreadFactory</name></type> <name>threadFactory</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>NioEventLoopGroup</name><argument_list>(<argument><expr><name>threadCount</name></expr></argument>,
                                             <argument><expr><operator>new</operator> <call><name>ThreadPerTaskExecutor</name><argument_list>(<argument><expr><name>threadFactory</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name><name>DefaultEventExecutorChooserFactory</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                                             <argument><expr><call><name><name>SelectorProvider</name><operator>.</operator><name>provider</name></name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><name><name>DefaultSelectStrategyFactory</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                                             <argument><expr><call><name><name>RejectedExecutionHandlers</name><operator>.</operator><name>reject</name></name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>capacity</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name><name>ManyToOneConcurrentLinkedQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><name><name>ChannelFactory</name><argument_list type="generic">&lt;<argument><name>NioSocketChannel</name></argument>&gt;</argument_list></name></type> <name>clientChannelFactory</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><name>NioSocketChannel</name><operator>::</operator><operator>new</operator></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><name><name>ChannelFactory</name><argument_list type="generic">&lt;<argument><name>NioServerSocketChannel</name></argument>&gt;</argument_list></name></type> <name>serverChannelFactory</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><name>NioServerSocketChannel</name><operator>::</operator><operator>new</operator></expr>;</return>
            </block_content>}</block></function>
        }</block></decl>,
        <decl><name>EPOLL</name>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><name>EpollEventLoopGroup</name></type> <name>makeEventLoopGroup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threadCount</name></decl></parameter>, <parameter><decl><type><name>ThreadFactory</name></type> <name>threadFactory</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>EpollEventLoopGroup</name><argument_list>(<argument><expr><name>threadCount</name></expr></argument>,
                                               <argument><expr><operator>new</operator> <call><name>ThreadPerTaskExecutor</name><argument_list>(<argument><expr><name>threadFactory</name></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument><expr><name><name>DefaultEventExecutorChooserFactory</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                                               <argument><expr><name><name>DefaultSelectStrategyFactory</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>,
                                               <argument><expr><call><name><name>RejectedExecutionHandlers</name><operator>.</operator><name>reject</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>capacity</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name><name>ManyToOneConcurrentLinkedQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><name><name>ChannelFactory</name><argument_list type="generic">&lt;<argument><name>EpollSocketChannel</name></argument>&gt;</argument_list></name></type> <name>clientChannelFactory</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><name>EpollSocketChannel</name><operator>::</operator><operator>new</operator></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><name><name>ChannelFactory</name><argument_list type="generic">&lt;<argument><name>EpollServerSocketChannel</name></argument>&gt;</argument_list></name></type> <name>serverChannelFactory</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><name>EpollServerSocketChannel</name><operator>::</operator><operator>new</operator></expr>;</return>
            </block_content>}</block></function>
        }</block></decl>;

        <function><type><name>EventLoopGroup</name></type> <name>makeEventLoopGroup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threadCount</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>threadNamePrefix</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"using netty {} event loop for pool prefix {}"</literal></expr></argument>, <argument><expr><call><name>name</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>threadNamePrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>makeEventLoopGroup</name><argument_list>(<argument><expr><name>threadCount</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DefaultThreadFactory</name><argument_list>(<argument><expr><name>threadNamePrefix</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <decl_stmt><decl><type><specifier>abstract</specifier> <name>EventLoopGroup</name></type> <name>makeEventLoopGroup</name><argument_list>(<argument><expr><name>int</name> <name>threadCount</name></expr></argument>, <argument><expr><name>ThreadFactory</name> <name>threadFactory</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr><specifier>abstract</specifier> <name><name>ChannelFactory</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Channel</name></extends></argument>&gt;</argument_list></name> <call><name>clientChannelFactory</name><argument_list>()</argument_list></call></expr>;
        <expr><specifier>abstract</specifier> <name><name>ChannelFactory</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>ServerChannel</name></extends></argument>&gt;</argument_list></name> <call><name>serverChannelFactory</name><argument_list>()</argument_list></call></expr>;

        <function><type><specifier>static</specifier> <name>Provider</name></type> <name>optimalProvider</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><call><name><name>NativeTransportService</name><operator>.</operator><name>useEpoll</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>EPOLL</name></expr> </then><else>: <expr><name>NIO</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>

    <comment type="block" format="javadoc">/** a useful addition for debugging; simply set to true to get more data in your logs */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>WIRETRACE</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <static>static
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>WIRETRACE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>InternalLoggerFactory</name><operator>.</operator><name>setDefaultFactory</name></name><argument_list>(<argument><expr><name><name>Slf4JLoggerFactory</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></static>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Provider</name></type> <name>provider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>EventLoopGroup</name></type> <name>acceptGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>EventLoopGroup</name></type> <name>defaultGroup</name></decl>;</decl_stmt>
    <comment type="line">// we need a separate EventLoopGroup for outbound streaming because sendFile is blocking</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>EventLoopGroup</name></type> <name>outboundStreamingGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ExecutorService</name></type> <name>synchronousWorkExecutor</name> <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newCachedThreadPool</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><literal type="string">"Messaging-SynchronousWork"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><name>SocketFactory</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Provider</name><operator>.</operator><name>optimalProvider</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><name>SocketFactory</name><parameter_list>(<parameter><decl><type><name>Provider</name></type> <name>provider</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>provider</name></name> <operator>=</operator> <name>provider</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>acceptGroup</name></name> <operator>=</operator> <call><name><name>provider</name><operator>.</operator><name>makeEventLoopGroup</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Messaging-AcceptLoop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultGroup</name></name> <operator>=</operator> <call><name><name>provider</name><operator>.</operator><name>makeEventLoopGroup</name></name><argument_list>(<argument><expr><name>EVENT_THREADS</name></expr></argument>, <argument><expr><call><name><name>NamedThreadFactory</name><operator>.</operator><name>globalPrefix</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"Messaging-EventLoop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>outboundStreamingGroup</name></name> <operator>=</operator> <call><name><name>provider</name><operator>.</operator><name>makeEventLoopGroup</name></name><argument_list>(<argument><expr><name>EVENT_THREADS</name></expr></argument>, <argument><expr><literal type="string">"Streaming-EventLoop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>Bootstrap</name></type> <name>newClientBootstrap</name><parameter_list>(<parameter><decl><type><name>EventLoop</name></type> <name>eventLoop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tcpUserTimeoutInMS</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>eventLoop</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"must provide eventLoop"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>Bootstrap</name></type> <name>bootstrap</name> <init>= <expr><operator>new</operator> <call><name>Bootstrap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>group</name><argument_list>(<argument><expr><name>eventLoop</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>channelFactory</name><argument_list>(<argument><expr><call><name><name>provider</name><operator>.</operator><name>clientChannelFactory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>provider</name> <operator>==</operator> <name><name>Provider</name><operator>.</operator><name>EPOLL</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>bootstrap</name><operator>.</operator><name>option</name></name><argument_list>(<argument><expr><name><name>EpollChannelOption</name><operator>.</operator><name>TCP_USER_TIMEOUT</name></name></expr></argument>, <argument><expr><name>tcpUserTimeoutInMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><name>bootstrap</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>ServerBootstrap</name></type> <name>newServerBootstrap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ServerBootstrap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>group</name><argument_list>(<argument><expr><name>acceptGroup</name></expr></argument>, <argument><expr><name>defaultGroup</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>channelFactory</name><argument_list>(<argument><expr><call><name><name>provider</name><operator>.</operator><name>serverChannelFactory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a new {@link SslHandler} from provided SslContext.
     * @param peer enables endpoint verification for remote address when not null
     */</comment>
    <function><type><specifier>static</specifier> <name>SslHandler</name></type> <name>newSslHandler</name><parameter_list>(<parameter><decl><type><name>Channel</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>SslContext</name></type> <name>sslContext</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>InetSocketAddress</name></type> <name>peer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>peer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>sslContext</name><operator>.</operator><name>newHandler</name></name><argument_list>(<argument><expr><call><name><name>channel</name><operator>.</operator><name>alloc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Creating SSL handler for {}:{}"</literal></expr></argument>, <argument><expr><call><name><name>peer</name><operator>.</operator><name>getHostString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>peer</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SslHandler</name></type> <name>sslHandler</name> <init>= <expr><call><name><name>sslContext</name><operator>.</operator><name>newHandler</name></name><argument_list>(<argument><expr><call><name><name>channel</name><operator>.</operator><name>alloc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>peer</name><operator>.</operator><name>getHostString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>peer</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSLEngine</name></type> <name>engine</name> <init>= <expr><call><name><name>sslHandler</name><operator>.</operator><name>engine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSLParameters</name></type> <name>sslParameters</name> <init>= <expr><call><name><name>engine</name><operator>.</operator><name>getSSLParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sslParameters</name><operator>.</operator><name>setEndpointIdentificationAlgorithm</name></name><argument_list>(<argument><expr><literal type="string">"HTTPS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>engine</name><operator>.</operator><name>setSSLParameters</name></name><argument_list>(<argument><expr><name>sslParameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>sslHandler</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Summarizes the intended encryption options, suitable for logging. Once a connection is established, use
     * {@link SocketFactory#encryptionConnectionSummary} below.
     * @param options options to summarize
     * @return description of encryption options
     */</comment>
    <function><type><specifier>static</specifier> <name>String</name></type> <name>encryptionOptionsSummary</name><parameter_list>(<parameter><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>options</name><operator>.</operator><name>tlsEncryptionPolicy</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>EncryptionOptions</name><operator>.</operator><name>TlsEncryptionPolicy</name><operator>.</operator><name>UNENCRYPTED</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>EncryptionOptions</name><operator>.</operator><name>TlsEncryptionPolicy</name><operator>.</operator><name>UNENCRYPTED</name><operator>.</operator><name>description</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>encryptionType</name> <init>= <expr><ternary><condition><expr><call><name><name>SSLFactory</name><operator>.</operator><name>openSslIsAvailable</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"openssl"</literal></expr> </then><else>: <expr><literal type="string">"jdk"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>options</name><operator>.</operator><name>tlsEncryptionPolicy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>description</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">'('</literal> <operator>+</operator> <name>encryptionType</name> <operator>+</operator> <literal type="char">')'</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Summarizes the encryption status of a channel, suitable for logging.
     * @return description of channel encryption
     */</comment>
    <function><type><specifier>static</specifier> <name>String</name></type> <name>encryptionConnectionSummary</name><parameter_list>(<parameter><decl><type><name>Channel</name></type> <name>channel</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>SslHandler</name></type> <name>sslHandler</name> <init>= <expr><call><name><name>channel</name><operator>.</operator><name>pipeline</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>SslHandler</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sslHandler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name><name>EncryptionOptions</name><operator>.</operator><name>TlsEncryptionPolicy</name><operator>.</operator><name>UNENCRYPTED</name><operator>.</operator><name>description</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>SSLSession</name></type> <name>session</name> <init>= <expr><call><name><name>sslHandler</name><operator>.</operator><name>engine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSession</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return  <expr><literal type="string">"encrypted(factory="</literal> <operator>+</operator>
                <operator>(</operator><ternary><condition><expr><call><name><name>SSLFactory</name><operator>.</operator><name>openSslIsAvailable</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"openssl"</literal></expr> </then><else>: <expr><literal type="string">"jdk"</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>
                <literal type="string">";protocol="</literal> <operator>+</operator>
                <operator>(</operator><ternary><condition><expr><name>session</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>session</name><operator>.</operator><name>getProtocol</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">"MISSING SESSION"</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>
                <literal type="string">";cipher="</literal> <operator>+</operator>
                <operator>(</operator><ternary><condition><expr><name>session</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>session</name><operator>.</operator><name>getCipherSuite</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">"MISSING SESSION"</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>
                <literal type="char">')'</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>EventLoopGroup</name></type> <name>defaultGroup</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>defaultGroup</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EventLoopGroup</name></type> <name>outboundStreamingGroup</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>outboundStreamingGroup</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>shutdownNow</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>acceptGroup</name><operator>.</operator><name>shutdownGracefully</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>defaultGroup</name><operator>.</operator><name>shutdownGracefully</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outboundStreamingGroup</name><operator>.</operator><name>shutdownGracefully</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>synchronousWorkExecutor</name><operator>.</operator><name>shutdownNow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>awaitTerminationUntil</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>deadlineNanos</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>TimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ExecutorService</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>acceptGroup</name></expr></argument>, <argument><expr><name>defaultGroup</name></expr></argument>, <argument><expr><name>outboundStreamingGroup</name></expr></argument>, <argument><expr><name>synchronousWorkExecutor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ExecutorUtils</name><operator>.</operator><name>awaitTerminationUntil</name></name><argument_list>(<argument><expr><name>deadlineNanos</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>boolean</name></type> <name>isConnectionReset</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>instanceof</operator> <name>ClosedChannelException</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>instanceof</operator> <name>SslClosedEngineException</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>instanceof</operator> <name>ConnectException</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>instanceof</operator> <name><name>Errors</name><operator>.</operator><name>NativeIoException</name></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>errorCode</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>Errors</name><operator>.</operator><name>NativeIoException</name></name><operator>)</operator> <name>t</name><operator>)</operator><operator>.</operator><call><name>expectedErr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>errorCode</name> <operator>==</operator> <name>ERRNO_ECONNRESET_NEGATIVE</name> <operator>||</operator> <name>errorCode</name> <operator>!=</operator> <name>ERROR_ECONNREFUSED_NEGATIVE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name><name>IOException</name><operator>.</operator><name>class</name></name> <operator>==</operator> <call><name><name>t</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="string">"Broken pipe"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="string">"Connection reset by peer"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>boolean</name></type> <name>isCausedByConnectionReset</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>isCausedBy</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SocketFactory</name><operator>::</operator><name>isConnectionReset</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>String</name></type> <name>channelId</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>InetSocketAddress</name></type> <name>realFrom</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>InetSocketAddress</name></type> <name>realTo</name></decl></parameter>, <parameter><decl><type><name>ConnectionType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>addressId</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>realFrom</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"-&gt;"</literal> <operator>+</operator> <call><name>addressId</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>realTo</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">'-'</literal> <operator>+</operator> <name>type</name> <operator>+</operator> <literal type="char">'-'</literal> <operator>+</operator> <name>id</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>String</name></type> <name>addressId</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>InetSocketAddress</name></type> <name>realAddress</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>address</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>address</name><operator>.</operator><name>address</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>realAddress</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>address</name><operator>.</operator><name>port</name></name> <operator>!=</operator> <call><name><name>realAddress</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="char">'('</literal> <operator>+</operator> <call><name><name>InetAddressAndPort</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>realAddress</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>realAddress</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">')'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>str</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>String</name></type> <name>channelId</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>ConnectionType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>from</name> <operator>+</operator> <literal type="string">"-&gt;"</literal> <operator>+</operator> <name>to</name> <operator>+</operator> <literal type="char">'-'</literal> <operator>+</operator> <name>type</name> <operator>+</operator> <literal type="char">'-'</literal> <operator>+</operator> <name>id</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
