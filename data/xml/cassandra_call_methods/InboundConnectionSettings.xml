<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/net/InboundConnectionSettings.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Function</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>IInternodeAuthenticator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>EncryptionOptions</name><operator>.</operator><name>ServerEncryptionOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>InboundConnectionSettings</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>IInternodeAuthenticator</name></type> <name>authenticator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>bindAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ServerEncryptionOptions</name></type> <name>encryption</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Integer</name></type> <name>socketReceiveBufferSizeInBytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Integer</name></type> <name>applicationReceiveQueueCapacityInBytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>AcceptVersions</name></type> <name>acceptMessaging</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>AcceptVersions</name></type> <name>acceptStreaming</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>SocketFactory</name></type> <name>socketFactory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Function</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>InboundMessageHandlers</name></argument>&gt;</argument_list></name></type> <name>handlers</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>InboundConnectionSettings</name><parameter_list>(<parameter><decl><type><name>IInternodeAuthenticator</name></type> <name>authenticator</name></decl></parameter>,
                                      <parameter><decl><type><name>InetAddressAndPort</name></type> <name>bindAddress</name></decl></parameter>,
                                      <parameter><decl><type><name>ServerEncryptionOptions</name></type> <name>encryption</name></decl></parameter>,
                                      <parameter><decl><type><name>Integer</name></type> <name>socketReceiveBufferSizeInBytes</name></decl></parameter>,
                                      <parameter><decl><type><name>Integer</name></type> <name>applicationReceiveQueueCapacityInBytes</name></decl></parameter>,
                                      <parameter><decl><type><name>AcceptVersions</name></type> <name>acceptMessaging</name></decl></parameter>,
                                      <parameter><decl><type><name>AcceptVersions</name></type> <name>acceptStreaming</name></decl></parameter>,
                                      <parameter><decl><type><name>SocketFactory</name></type> <name>socketFactory</name></decl></parameter>,
                                      <parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>InboundMessageHandlers</name></argument>&gt;</argument_list></name></type> <name>handlers</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>authenticator</name></name> <operator>=</operator> <name>authenticator</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bindAddress</name></name> <operator>=</operator> <name>bindAddress</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>encryption</name></name> <operator>=</operator> <name>encryption</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>socketReceiveBufferSizeInBytes</name></name> <operator>=</operator> <name>socketReceiveBufferSizeInBytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>applicationReceiveQueueCapacityInBytes</name></name> <operator>=</operator> <name>applicationReceiveQueueCapacityInBytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>acceptMessaging</name></name> <operator>=</operator> <name>acceptMessaging</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>acceptStreaming</name></name> <operator>=</operator> <name>acceptStreaming</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>socketFactory</name></name> <operator>=</operator> <name>socketFactory</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>handlers</name></name> <operator>=</operator> <name>handlers</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>InboundConnectionSettings</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>authenticate</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>authenticator</name><operator>.</operator><name>authenticate</name></name><argument_list>(<argument><expr><name><name>endpoint</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>endpoint</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>authenticate</name><parameter_list>(<parameter><decl><type><name>InetAddress</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>authenticator</name><operator>.</operator><name>authenticate</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"address: (%s), nic: %s, encryption: %s"</literal></expr></argument>,
                      <argument><expr><name>bindAddress</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getNetworkInterface</name></name><argument_list>(<argument><expr><name><name>bindAddress</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>SocketFactory</name><operator>.</operator><name>encryptionOptionsSummary</name></name><argument_list>(<argument><expr><name>encryption</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>InboundConnectionSettings</name></type> <name>withAuthenticator</name><parameter_list>(<parameter><decl><type><name>IInternodeAuthenticator</name></type> <name>authenticator</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>InboundConnectionSettings</name><argument_list>(<argument><expr><name>authenticator</name></expr></argument>, <argument><expr><name>bindAddress</name></expr></argument>, <argument><expr><name>encryption</name></expr></argument>,
                                             <argument><expr><name>socketReceiveBufferSizeInBytes</name></expr></argument>, <argument><expr><name>applicationReceiveQueueCapacityInBytes</name></expr></argument>,
                                             <argument><expr><name>acceptMessaging</name></expr></argument>, <argument><expr><name>acceptStreaming</name></expr></argument>, <argument><expr><name>socketFactory</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>InboundConnectionSettings</name></type> <name>withBindAddress</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>bindAddress</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>InboundConnectionSettings</name><argument_list>(<argument><expr><name>authenticator</name></expr></argument>, <argument><expr><name>bindAddress</name></expr></argument>, <argument><expr><name>encryption</name></expr></argument>,
                                             <argument><expr><name>socketReceiveBufferSizeInBytes</name></expr></argument>, <argument><expr><name>applicationReceiveQueueCapacityInBytes</name></expr></argument>,
                                             <argument><expr><name>acceptMessaging</name></expr></argument>, <argument><expr><name>acceptStreaming</name></expr></argument>, <argument><expr><name>socketFactory</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>InboundConnectionSettings</name></type> <name>withEncryption</name><parameter_list>(<parameter><decl><type><name>ServerEncryptionOptions</name></type> <name>encryption</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>InboundConnectionSettings</name><argument_list>(<argument><expr><name>authenticator</name></expr></argument>, <argument><expr><name>bindAddress</name></expr></argument>, <argument><expr><name>encryption</name></expr></argument>,
                                             <argument><expr><name>socketReceiveBufferSizeInBytes</name></expr></argument>, <argument><expr><name>applicationReceiveQueueCapacityInBytes</name></expr></argument>,
                                             <argument><expr><name>acceptMessaging</name></expr></argument>, <argument><expr><name>acceptStreaming</name></expr></argument>, <argument><expr><name>socketFactory</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>InboundConnectionSettings</name></type> <name>withSocketReceiveBufferSizeInBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>socketReceiveBufferSizeInBytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>InboundConnectionSettings</name><argument_list>(<argument><expr><name>authenticator</name></expr></argument>, <argument><expr><name>bindAddress</name></expr></argument>, <argument><expr><name>encryption</name></expr></argument>,
                                             <argument><expr><name>socketReceiveBufferSizeInBytes</name></expr></argument>, <argument><expr><name>applicationReceiveQueueCapacityInBytes</name></expr></argument>,
                                             <argument><expr><name>acceptMessaging</name></expr></argument>, <argument><expr><name>acceptStreaming</name></expr></argument>, <argument><expr><name>socketFactory</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>InboundConnectionSettings</name></type> <name>withApplicationReceiveQueueCapacityInBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>applicationReceiveQueueCapacityInBytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>InboundConnectionSettings</name><argument_list>(<argument><expr><name>authenticator</name></expr></argument>, <argument><expr><name>bindAddress</name></expr></argument>, <argument><expr><name>encryption</name></expr></argument>,
                                             <argument><expr><name>socketReceiveBufferSizeInBytes</name></expr></argument>, <argument><expr><name>applicationReceiveQueueCapacityInBytes</name></expr></argument>,
                                             <argument><expr><name>acceptMessaging</name></expr></argument>, <argument><expr><name>acceptStreaming</name></expr></argument>, <argument><expr><name>socketFactory</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>InboundConnectionSettings</name></type> <name>withAcceptMessaging</name><parameter_list>(<parameter><decl><type><name>AcceptVersions</name></type> <name>acceptMessaging</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>InboundConnectionSettings</name><argument_list>(<argument><expr><name>authenticator</name></expr></argument>, <argument><expr><name>bindAddress</name></expr></argument>, <argument><expr><name>encryption</name></expr></argument>,
                                             <argument><expr><name>socketReceiveBufferSizeInBytes</name></expr></argument>, <argument><expr><name>applicationReceiveQueueCapacityInBytes</name></expr></argument>,
                                             <argument><expr><name>acceptMessaging</name></expr></argument>, <argument><expr><name>acceptStreaming</name></expr></argument>, <argument><expr><name>socketFactory</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>InboundConnectionSettings</name></type> <name>withAcceptStreaming</name><parameter_list>(<parameter><decl><type><name>AcceptVersions</name></type> <name>acceptMessaging</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>InboundConnectionSettings</name><argument_list>(<argument><expr><name>authenticator</name></expr></argument>, <argument><expr><name>bindAddress</name></expr></argument>, <argument><expr><name>encryption</name></expr></argument>,
                                             <argument><expr><name>socketReceiveBufferSizeInBytes</name></expr></argument>, <argument><expr><name>applicationReceiveQueueCapacityInBytes</name></expr></argument>,
                                             <argument><expr><name>acceptMessaging</name></expr></argument>, <argument><expr><name>acceptStreaming</name></expr></argument>, <argument><expr><name>socketFactory</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>InboundConnectionSettings</name></type> <name>withSocketFactory</name><parameter_list>(<parameter><decl><type><name>SocketFactory</name></type> <name>socketFactory</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>InboundConnectionSettings</name><argument_list>(<argument><expr><name>authenticator</name></expr></argument>, <argument><expr><name>bindAddress</name></expr></argument>, <argument><expr><name>encryption</name></expr></argument>,
                                             <argument><expr><name>socketReceiveBufferSizeInBytes</name></expr></argument>, <argument><expr><name>applicationReceiveQueueCapacityInBytes</name></expr></argument>,
                                             <argument><expr><name>acceptMessaging</name></expr></argument>, <argument><expr><name>acceptStreaming</name></expr></argument>, <argument><expr><name>socketFactory</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>InboundConnectionSettings</name></type> <name>withHandlers</name><parameter_list>(<parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>InboundMessageHandlers</name></argument>&gt;</argument_list></name></type> <name>handlers</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>InboundConnectionSettings</name><argument_list>(<argument><expr><name>authenticator</name></expr></argument>, <argument><expr><name>bindAddress</name></expr></argument>, <argument><expr><name>encryption</name></expr></argument>,
                                             <argument><expr><name>socketReceiveBufferSizeInBytes</name></expr></argument>, <argument><expr><name>applicationReceiveQueueCapacityInBytes</name></expr></argument>,
                                             <argument><expr><name>acceptMessaging</name></expr></argument>, <argument><expr><name>acceptStreaming</name></expr></argument>, <argument><expr><name>socketFactory</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>InboundConnectionSettings</name></type> <name>withLegacySslStoragePortDefaults</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ServerEncryptionOptions</name></type> <name>encryption</name> <init>= <expr><name><name>this</name><operator>.</operator><name>encryption</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>encryption</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>encryption</name> <operator>=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeMessagingEncyptionOptions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>encryption</name> <operator>=</operator> <call><name><name>encryption</name><operator>.</operator><name>withOptional</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>withInternodeEncryption</name><argument_list>(<argument><expr><name><name>ServerEncryptionOptions</name><operator>.</operator><name>InternodeEncryption</name><operator>.</operator><name>all</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>this</name><operator>.</operator><name>withBindAddress</name></name><argument_list>(<argument><expr><call><name><name>bindAddress</name><operator>.</operator><name>withPort</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSSLStoragePort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>withEncryption</name><argument_list>(<argument><expr><name>encryption</name></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>withDefaults</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// note that connectTo is updated even if specified, in the case of pre40 messaging and using encryption (to update port)</comment>
    <function><type><specifier>public</specifier> <name>InboundConnectionSettings</name></type> <name>withDefaults</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// this is for the socket that can be plain, only ssl, or optional plain/ssl</comment>
        <if_stmt><if>if <condition>(<expr><name><name>bindAddress</name><operator>.</operator><name>port</name></name> <operator>!=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStoragePort</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>bindAddress</name><operator>.</operator><name>port</name></name> <operator>!=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSSLStoragePort</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Local endpoint port %d doesn't match YAML configured port %d or legacy SSL port %d"</literal></expr></argument>,
                                                    <argument><expr><name><name>bindAddress</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStoragePort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSSLStoragePort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>IInternodeAuthenticator</name></type> <name>authenticator</name> <init>= <expr><name><name>this</name><operator>.</operator><name>authenticator</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ServerEncryptionOptions</name></type> <name>encryption</name> <init>= <expr><name><name>this</name><operator>.</operator><name>encryption</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>socketReceiveBufferSizeInBytes</name> <init>= <expr><name><name>this</name><operator>.</operator><name>socketReceiveBufferSizeInBytes</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>applicationReceiveQueueCapacityInBytes</name> <init>= <expr><name><name>this</name><operator>.</operator><name>applicationReceiveQueueCapacityInBytes</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AcceptVersions</name></type> <name>acceptMessaging</name> <init>= <expr><name><name>this</name><operator>.</operator><name>acceptMessaging</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AcceptVersions</name></type> <name>acceptStreaming</name> <init>= <expr><name><name>this</name><operator>.</operator><name>acceptStreaming</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SocketFactory</name></type> <name>socketFactory</name> <init>= <expr><name><name>this</name><operator>.</operator><name>socketFactory</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>InboundMessageHandlers</name></argument>&gt;</argument_list></name></type> <name>handlersFactory</name> <init>= <expr><name><name>this</name><operator>.</operator><name>handlers</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>authenticator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>authenticator</name> <operator>=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeAuthenticator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>encryption</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>encryption</name> <operator>=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeMessagingEncyptionOptions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>socketReceiveBufferSizeInBytes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>socketReceiveBufferSizeInBytes</name> <operator>=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeSocketReceiveBufferSizeInBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>applicationReceiveQueueCapacityInBytes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>applicationReceiveQueueCapacityInBytes</name> <operator>=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeApplicationReceiveQueueCapacityInBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>acceptMessaging</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>acceptMessaging</name> <operator>=</operator> <name>accept_messaging</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>acceptStreaming</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>acceptStreaming</name> <operator>=</operator> <name>accept_streaming</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>socketFactory</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>socketFactory</name> <operator>=</operator> <call><name>instance</name><argument_list>()</argument_list></call><operator>.</operator><name>socketFactory</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>handlersFactory</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>handlersFactory</name> <operator>=</operator> <call><name>instance</name><argument_list>()</argument_list></call><operator>::</operator><name>getInbound</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>socketReceiveBufferSizeInBytes</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>socketReceiveBufferSizeInBytes</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"illegal socket send buffer size: "</literal> <operator>+</operator> <name>socketReceiveBufferSizeInBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>applicationReceiveQueueCapacityInBytes</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"illegal application receive queue capacity: "</literal> <operator>+</operator> <name>applicationReceiveQueueCapacityInBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>new</operator> <call><name>InboundConnectionSettings</name><argument_list>(<argument><expr><name>authenticator</name></expr></argument>, <argument><expr><name>bindAddress</name></expr></argument>, <argument><expr><name>encryption</name></expr></argument>, <argument><expr><name>socketReceiveBufferSizeInBytes</name></expr></argument>, <argument><expr><name>applicationReceiveQueueCapacityInBytes</name></expr></argument>, <argument><expr><name>acceptMessaging</name></expr></argument>, <argument><expr><name>acceptStreaming</name></expr></argument>, <argument><expr><name>socketFactory</name></expr></argument>, <argument><expr><name>handlersFactory</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
